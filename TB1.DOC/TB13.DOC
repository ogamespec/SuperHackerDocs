                        Оператор SCREEN
----------------------------------------------------------------- 
Назначение    SCREEN устанавливает режим изображения на экране.
                                     
Синтаксис     SCREEN [режим] [, [флажок цвета]] 
                     [,[страница]] [, [видимая страница]]

Комментарий      Режим - целочисленное выражение в диапазоне от 0
              до  10,  действие  которого  определяется следующей 
              таблицей: 

  I-------------------------------------------------------------I
  I  Режим  I                 Действие                          I       
  I---------I---------------------------------------------------I
  I         I                                                   I 
  I   0     I   Устанавливает текстовый режим без изменения     I
  I         I   числа знаков в строке                           I
  I   1     I   Устанавливает графический режим со средним      I
  I         I   разрешением, число знаков в строке равно 40     I
  I   2     I   Устанавливает графический режим с высоким       I
  I         I   разрешением, число знаков в строке равно 80     I
  I   7     I   Устанавливает для адаптера EGA режим со         I
  I         I   средним разрешением, допускает использование    I
  I         I   16 цветов, число пикселов на экране - 600х200   I
  I   8     I   Устанавливает для адаптера EGA режим с          I
  I         I   высоким разрешением, допускает использование    I
  I         I   16 цветов, число пикселов на экране - 600х200   I
  I   9     I   Устанавливает усиленный режим с высоким         I
  I         I   разрешением для адаптера EGA с усиленным        I
  I         I   дисплеем; допускает от 4 до 16 цветов (в        I
  I         I   зависимости от памяти на EGA) из палитры,       I
  I         I   состоящей из 64 цветов, число пикселов на       I
  I         I   экране - 640х350                                I
  I  10     I   Устанавливает режим с высоким разрешением для   I
  I         I   адаптера EGA с монохромным монитором,           I
  I         I   допускает 4 атрибута и 640х350 пикселов         I
  I  11     I   Устанавливает черно-белый режим с наивысшим     I
  I         I   разрешением для адаптеров VGA или MCGA, число   I
  I         I   точек - 640х480                                 I
  I  12     I   Устанавливает режим с наивысшим разрешением     I
  I         I   для VGA, допускает 16 цветов из палитры с 64    I
  I         I   цветами, число точек на экране - 640х480        I
  I-------------------------------------------------------------I

                 Флажок цвета - управляет тем,  будет ли информа- 
              ция о цвете передана монитором с совмещенным управ- 
              лением цветовыми  лучами,  которые  присоединены  к 
              композитным видеопортам цветных графических адапте- 
              ров.  В текстовом режиме значение FALSE(0) отменяет 
              использование цвета.  В графическом режиме со сред- 
              ним разрешением, значение FALSE включает цвет.  

                 Активная страница - целое выражение в  диапазоне 
              от 0 до 7, которое управляет тем, куда записывается 
              текст, формируется оператором PRINT или другими ко- 
              мандами  записи  на  экран.  Этот аргумент допустим 
              только для цветных графических адаптеров и для рас- 
              ширенных графических адаптеров при установке режима 
              0, 7, 8, 9 и 10. (См. в главе 4 раздел о графике).  

                 Видимая страница - определяет какая из виртуаль- 
              ных страниц (от 0 до 7) выводится на экран в данный 
              момент.  Этот  аргумент допустим только для цветных 
              графических адаптеров и для расширенных графических 
              адаптеров при установке режима 0, 7, 8, 9 и 10.  

                 Выполнение оператора SCREEN запускает новый  ре-
              жим и стирает экран. Наивысший приоритет присваива- 
              ется белому цвету, а фону и границе - черный цвет.  
                 Если в операторе SCREEN устанавливается такой же 
              режим, как и текущий, ничего не происходит.  
                 Если  текущий  режим  -  текстовый и в операторе 
              SCREEN  указаны только апргументы активной и вирту- 
              альной страниц,  то корректируются в соответствии с 
              запросом только дисплейные "страницы".  

Пример      'переключение в графический режим среднего разрешения
            'с отменой цвета
        SCREEN 1,0
        CIRCLE (160,100),50,2
        WHILE NOT INSTAT:WEND
        A$=INKEY$
        'переключение в текстовый режим с отменой цвета,
        'назначение активной и видимой страницам страницы с
        'номером 0
        SCREEN 0,0,0,0
        PRINT "Активная страница - 0"
        WHILE NOT INSTAT:WEND
        A$=INKEY$
        'сделать активной страницу 2
        SCREEN ,,2
        PRINT "Активная страница - 2"
        WHILE NOT INSTAT:WEND
        A$=INKEY$
        'переключение в другой графический режим
        SCREEN 2
        CIRCLE (320,100),100,1
        END

                        Оператор SEEK
-----------------------------------------------------------------
Назначение    SEEK  устанавливает  позицию  в  двоичном файле для 
              функций GET$ и PUT$.

Синтаксис     SEEK [#] номер-файла, позиция

Комментарий      SEEK объявляет,  что следующий GET$ или PUT$ над
              файлом  с  заданным  номером начнут свои действия с 
              байта, номер которого указан в аргументе "позиция".  
                 Для определения текущей  позиции,  установленной 
              для   двоичного  файла  оператором  SEEK,   следует 
              использовать функцию LOC.  

Пример      SUB CREATEFILE
            'открытие файла и запись в него 256 символов
            LOCAL I%
            'открытие файла типа BINARY для ввода/вывода
            OPEN "SEEK.DTA" FOR BINARY AS #1
            'запись данных в файл
         FOR I%=1 TO 256
           PUT$ 1,CHR$(I%-1)
         NEXT I%
          END SUB     'конец подпрограммы CREATEFILE
        DEF FNREADIT$(START%,SIZE%)
        'функция читает указанные данные из файла
        LOCAL TEMPSTR$,CHAR$,I%
        'установка заданной позиции в файле
        SEEK 1,START%
        I%=1
        TEMPSTR$=""
        'считывание указанных данных - не более, чем до конца
        'файла
        WHILE (NOT EOF(1)) AND (I%<=SIZE%)
        GET 1,I%,CHAR$
        TEMPSTR$=TEMPSTR$+CHAR$
        INCR I%
        WEND
        'присвоение функции результата
        FNREADIT$=TEMPSTR$
        END DEF       'конец функции READIT
        'создание файла данных
        CALL CREATEFILE
        'запрос пользователю на ввод
        PRINT "Веддите начало [1..256] и число"
        PRINT "байтов данных (256 - начало), которые"
        INPUT "Вы хотите прочитать из файла:",ST%,SZ%
        'чтение данных
        PRINT FNREADIT$(ST%,SZ%)
        END
        'конец программы

                        Оператор SELECT
-----------------------------------------------------------------
Назначение    Оператор SELEC T  (вместе с оператором CASE) форми-
              рует операторы проверки общего назначения.  

Синтаксис     SELECT CASE выражение
                 CASE список тестов
                      операторы
            [CASE список тестов 
                  операторы]
            [СASE ELSE  
                  операторы]
            END SELECT

Комментарий      Список тестов - это  один или  несколько тестов,
              разделенных запятыми, которые выполняются над выра-
              жением.  Выражение может быть символьным или число- 
              вым, однако, все тесты в списке из отдельного блока 
              оператора SELECT должны быть одного и того же типа.  
                 Тесты,  которые могут выполняться в  предложении 
              CLAUSE,  включают  проверки на равенство,  неравен- 
              ство,  больше,  меньше,  диапазон (от-до).  Примеры 
              включения тестов в предложение CASE: 

            CASE <b             'отношение
            CASE 14             'равенство (предполагается =)
            CASE b TO 90        'диапазон
            CASE b,14           'два теста проверки равенства
            CASE b TO 90,14     'комбинация (неявное ИЛИ)

                 В предложении CASE с несколькими  тестами  между 
              ними  выполняется  неявная логическая операция ИЛИ. 
              Если один или несколько тестов в  предложении  удо- 
              влетворяются  (TRUE),   выполняются  все  операторы 
              вплоть до следующего предложения CASE. После выпол- 
              нения последнего оператора,  управление  передается 
              оператору, следующему за END SELECT.  
                 Оператор  SELECT является мощным средством срав- 
              нения переменной с некоторым  числом  ее  возможных 
              значений  и соот	ветствующей обработки. Его исполь- 
              зование может иногда помочь построить  более  ясную 
              исходную  программу,  чем  могло  бы  получиться  с 
              использованием многократных операторов IF.  

См.также      END SELECT    EXIT CASE

Пример 
            INPUT "Введите число",X
            SELECT CASE X
            CASE <10
            PRINT "Маленькое число"
            CASE <1000
            PRINT "Среднее число"
            CASE 1111,2222,3333,4444
            PRINT "Скучное число"
            CASE ELSE
            PRINT "Просто какое-то большое число"
            END SELECT

                        Функция SGN
-----------------------------------------------------------------
Назначение    SGN определяет знак числового выражения

Синтаксис     Y=SGN(числовое выражение)

Комментарий      Если  числовое  выражение положительно, SGN воз-
              вращает  +1.  Если числовое выражение равно 0,  SGN 
              возвращает 0. Если числовое выражение отрицательно, 
              SGN возвращает -1.  
                 При сочетании функции SGN с операторами  ON/GOTO 
              или  ON/GOSUB  можно  получить разветвление с тремя 
              выходами (подобное аналогичному разветвлению  языка 
              FORTRAN): 

            ON SGN(BALANCE)+2 GOTO
                    INTHERED,BREAKINGEVEN,INTHEMONEY

См. также   ON/GOSUB    ON/GOTO

Пример.
        'установить X и Y в 0
        X=0:Y=0
        'определение пользователем значений X и Y
        INPUT "Введите пожалуйста значение для X";X
        INPUT "Введите пожалуйста значение для Y";Y
        'оператор ON по SGN значения X*Y
        'GOSUB  на соответствующую подпрограмму
        ON SGN(X*Y)+2 GOSUB MINUS,ZERO,PLUS
        END
        'конец программы
        MINUS:
        PRINT "Вход для отрицательного значения":RETURN
        ZERO:
        PRINT "Вход для нулевого значения":RETURN
        PLUS:
        PRINT "Вход для положительного значения":RETURN

                        Оператор SHARED
-----------------------------------------------------------------
Назначение    SHARED   объявляет в процедурах или функциях разде-
              ляемые (глобальные) переменные.

Синтаксис     SHARED список переменных

Комментарий      SHARED объявляет, что переменные, указанные  че-
              рез запятую в списке переменных,  являются глобаль- 
              ными  для всей программы,  а не локальными по отно- 
              шению к включающей  их  процедуре  или  определению 
              функции. Это дает возможность процедуре или функции 
              организовать  доступ к переменным без передачи их в 
              качестве параметров.  Оператор SHARED  может  появ- 
              ляться только в определениях функций или процедур и 
              должен быть указан до первого выполняемого операто- 
              ра соответствующего определения.  
                 Для того,  чтобы объявить массив  как  локальную 
              переменную,  принадлежащую  процедуре  или функции, 
              нужно включить его идентификатор с пустыми скобками 
              в список переменных - нет необходимости и  не  сле- 
              дует заново определять размерность массива.  
                 Необъявленные переменные в определениях  функций 
              по  умолчанию  считаются локальными,  но не следует 
              полагаться на неизменность этого в  будущих  верси- 
              ях  компилятора.  Желательно  точно объявлять класс 
              переменных,  появляющихся в функциях или процедурах 
              (LOCAL, STATIC, SHARED).  

См.также      LOCAL   STATIC

Пример 
            DIM ARRAY$(5)
            DEF FNDUMMY$
            SHARED ARRAY$(0)
          END DEF
        'конец функции FNDUMMY
        ARRAY$(0)="Это работает на меня"
        PRINT FNDUMMY$
        END
        'конец программы

                        Оператор SHELL
-----------------------------------------------------------------
Назначение    SHELL загружает и выполняет подчиненный процесс.

Синтаксис     SHELL [строка-параметр]

Комментарий      Строка-параметр - это символьное выражение,  со-
              держащее имя выполняемой .COM,  .EXE или .BAT прог-
              раммы  ("подчиненного  процесса").  Может содержать 
              или  не  содержать  параметры,  которые  Вы  можете 
              передать подчиненному процессу.  
                 Если строка-параметр опущена,  никакая программа 
              не загружается.  Вместо этого появляется  подсказка 
              DOS,  в ответ на которую можно  ввести  стандартную 
              команду DOS, например, команды DIR, COPY.  Для воз- 
              врата в программу следует набрать EXIT на подсказку 
              DOS.  
                 Если строка-параметр указана, то выполняется за- 
              данная программа.  После ее завершения,  выполнение 
              Вашей  программы  продолжается со следующего опера- 
              тора.  

См.также      ENVIRON   ENVIRON$    SHELL  в руководстве по DOS

Пример     PRINT "Теперь Вы будете использовать оператор SHELL"
           PRINT "ТУРБО БЕЙСИКА для выполнения команды"
           PRINT "DIR/W DOS для просмотра файлов"
           PRINT "на Вашем диске"
        DELAY 3
        'ждать 3 секунды
        'использование SHELL для временного выхода из ТУРБО
        'БЕЙСИКА и выполнение команды DIR с параметром /W
        SHELL "DIR /W"
        'вывод в нижней строке экрана
        LOCATE 21,1
        PRINT "Теперь возвращаемся в ТУРБО БЕЙСИК"
        END
        'конец программы

                        Функция SIN
-----------------------------------------------------------------
Назначение    SIN возвращает значение тригонометрического синуса.

Синтаксис     y=SIN(числовое-выражение)

Комментарий      Числовое выражение представляет угол, заданный в
              радианах.  Для преобразования радиан в градусы сле-
              дует умножить величину радиан на 57,296. Для преоб- 
              разования градусов в радианы следует умножить число 
              градусов  на  0.017453.  (О  радианах см.  описание 
              оператора ATN).  
                 SIN возвращает результат с двойной точностью.

См.также      ATN

Пример      'Выбор значения в B$
            B$="ТУРБО БЕЙСИК Борленда"
            'поиск центра
        CENTER=(79-LEN(B$))/2
        'SIN(THETA) возвращает периодическую
        'последовательность значений, равномерно изменяющуюся
        'в диапазоне от -1 до 1 так, что TABVALUE всегда
        'находится между -CENTER и CENTER
        THETA=0.
        WHILE THETA < 1
        TABVALUE=CENTER*SIN(THETA)
        PRINT TAB(CENTER+TABVALUE+1)B$
        THETA=THETA+.1
        WEND '?????????
        END
        'конец программы

                        Оператор SOUND
-----------------------------------------------------------------
Назначение    SOUND  генерирует  тон  заданной частоты и длитель- 
              ности

Синтаксис     SOUND частота, длительность

Комментарий      Частота - это  целое  выражение,  представляющее
              желаемый уровень в диапазоне от 37 до 32767 герц.
                 Длительность - это выражение с плавающей точкой, 
              которое управляет длиной тона,  измеряемой 18.2 раз 
              в секунду. Соответственно, значение длительности 36 
              соответствует  примерно  2  секундам.  Длительность 
              может  изменяться в диапазоне 0.0015 до 65535 (один 
              час).  
                 Оператор SOUND не останавливает выполнения прог- 
              раммы.  Если SOUND встречается в программе, начина- 
              ется исполнение требуемого тона, а выполнение прог- 
              раммы продолжается.  Если встречен следующий опера- 
              тор SOUND и его параметр длительности равен  0,  то 
              предыдущий  SOUND выключается.  В противном случае, 
              когда парметр длительности не равен 0, ТУРБО БЕЙСИК 
              ждет пока не завершится предыдущий звук  для  того, 
              чтобы начать следующий.  
                 Оператор  SOUND  лучше использовать для создания 
              специальных эффектов (например,  сирен,  щелкания и 
              свиста), а не для музыки.  

Ограничения      Обратите внимание,  что  оператор  SOUND  заново  
              инициализирует микротаймер MTIMER.

См.также      PLAY

Пример
        'установить длину музыкального буфера равной 800 байт
        $SOUND 100
        '8 байт на 1 ноту
        'использование SOUND для создания звуковых эффектов
        'имитация переключения скоростей
        'первая скорость
        FOR I=150 TO 175
        SOUND I,2
        NEXT I
        'вторая скорость
        FOR J=125 TO 152
        SOUND J,1.5
        NEXT J
        'третья скорость
        FOR K=100 TO 127
        SOUND K,1.25
        NEXT K

                        Функция SPACE
-----------------------------------------------------------------
Назначение    SPACE$ возвращает строку, состоящую из пробелов.

Синтаксис     s$=SPACE$(счетчик)

Комментарий      Счетчик - это положительное  целое  выражение  в 
              диапазоне  от  0  до  32767,  которое  задает число 
              пробелов, возвращаемых функцией.  
                 SPACE$ - одно из мощных  средств  форматирования 
              текстов, имеющихся в ТУРБО БЕЙСИКЕ.  

См.также      LET   RINT USING    RSET    SPC   STRING$    TAB

Пример
        'резервирование пробелов для A$
        A$=SPACE$(46)
        'запись строки из 46 символов
        B$="ЭТА СТРОКА СОСТОИТ ИЗ 46 СИМВОЛОВ             "
        'то же самое с помощью клавиши "ПРОБЕЛ"
        C$="                                              "
        'печать длины A$, B$ и C$
        PRINT LEN(A$),LEN(B$),LEN(C$)
        PRINT
        PRINT "Как Вы можете видеть, используя SPACE$"
        PRINT "A$ может быть дано то же значение,"
        PRINT " что и B$ и C$"
        END
        'КОНЕЦ ПРОГРАММЫ

                        Функция SPC
-----------------------------------------------------------------
Назначение    SPC  пропускает N пробелов  (используется в операторе 
              PRINT).

Синтаксис     PRINT SPC(N)
 
Комментарий      N - целое выражение в диапазоне от 0 до 255.

                 Как  и  родственная функция TAB,  SPC может быть 
              использована только в списке  выражений  операторов 
              PRINT,  INPUT и PRINT#.  SPC(n) выводит n пробелов. 
              Не следует путать функции SPC и SPACE$.  
                 Если  N  больше  ширины   строки,   определенной 
              оператором   WIDTH,   функция   SPC  выводит  число 
              пробелов равное (N mod ширина).  
                 Если SPC появляется в конце списка  выражений  с 
              точкой  с  запятой или без нее,  возврат каретки не 
              выполняется.  

См.также      TAB    WIDTH

Пример        'с использованием SPC вывод слов "МАЛЬЧИКИ" и
        '"ДЕВОЧКИ" с промежутком 40 пробелов и подчеркивание
        'с помощью функции STRING$
        PRINT SPC(5)"МАЛЬЧИКИ"SPC(40)"ДЕВОЧКИ"
        PRINT SPC(5) STRING$(4,61) SPC(40) STRING$(5,61)
        FOR I=1 TO 5
        READ BOY$
        READ GIRL$
        'вывод имен мальчиков и девочек в соответствующих
        'колонках
        PRINT SPC(5)BOY$SPC(40)GIRL$
        NEXT I
        END
        'конец программы
        DATA "John","Ann"
        DATA "Mark","Eve"
        DATA "Paul","Elizabeth"
        DATA "Tony","Sue"

                        Функция SQR
-----------------------------------------------------------------
Назначение    SQR возвращает значение квадратного корня.

Синтаксис     Y=SQR(числовое выражение)

Комментарий      Числовое выражение больше или равное нулю.

                 SQR вычисляет квадратный корень с использованием 
              алгоритма, который работает быстрее, чем вычисление 
              корня возведением в степень 0.5 (то есть вычисление 
              Y=SQR(X) занимает меньше времении, чем Y=X^0.5).  
                 При  попытке  извлечения  квадратного  корня  из 
              отрицательного  числа возникает ошибка выполнения 5 
              Illgal function call (неверный вызов функции).  
                 SQR возвращает значение с двойной точностью.
           
Пример       'ТАБЛИЦА КВАДРАТНЫХ КОРНЕЙ
        'разметка двух колонок
        PRINT "NUMBER"TAB(10)"SQUARE ROOT VALUE"
        PRINT
        FOR N=1 TO 10
        'использование функции TAB для вывода значения
        'корня в нужной колонке, вычисление квадратного
        'корня с помощью функции SQR
        PRINT N,TAB(15)SQR(N)
        NEXT N
        END
        'конец программы

                        Оператор STATIC
-----------------------------------------------------------------
Назначение    STATIC объявляет статические переменные в процедуре 
              или функции.

Синтаксис     STATIC  список переменных

Комментарий      Оператор STATIC, использование которого допусти-
              мо только в определениях процедур или функций, объ- 
              являет что переменные (разделенные запятыми в спис- 
              ке переменных) имеют в памяти фиксированные адреса, 
              а не базируются в стеке.  Идентификатор,  связанный 
              со статической переменной,  известен только  в  за- 
              ключающей его процедуре или функции,  то есть пере- 
              менные  в  других  частях программы и остальные ло- 
              кальные переменные могут иметь те же имена.  
                 Оператор STATIC должен быть указан в  определениях 
              функций  или  процедур  до любого выполняемого опера- 
              тора. Для того, чтобы объявить массив как статическую 
              переменную в процедуре или функции,  следует включить 
              его  идентификатор  с пустыми скобками в список пере- 
              менных,  а затем  установить  размерность  массива  в 
              следующем операторе.  
                 В отличие от локальных  переменных,  статические 
              переменные не меняют своего значения между вызовами 
              процедур   или   функций.    Они   инициализируются 
              единственный раз при запуске программы.  

См.также      LOCAL    SHARED

Пример        'объявление STATIC-процедуры со статическими
              'локальными переменными
              SUB DUMMY STATIC
              'переменная
              STATIC I%
           INCR I%
        PRINT I%
        END SUB
        'конец процедуры DUMMY
        I=16
        'два вызова процедуры
        CALL DUMMY
        CALL DUMMY
        PRINT I
        END
        'конец программы

                        Функция STICK
-----------------------------------------------------------------
Назначение    STICK возвращает информацию о позиции джойстика.

Синтаксис     Y=STICK(вариант)

Комментарий      Вариант - это целое выражение в диапазоне  от  0 
              до 3, действие которого определяется в соответствии 
              со следующей таблицей: 

        -----------------------------------------------------
            Вариант         Действие                        
        -----------------------------------------------------
               0        Возвращает Х-координату джойстика А 
               1        Возвращает Y-координату джойстика A  
               2        Возвращает Х-координату джойстика B 
               3        Возвращает Y-координату джойстика B  
        ----------------------------------------------------

                 Обратите внимание,  что интерфейс джойстика тре- 
              бует,  чтобы  до  чтения координат любого джойстика 
              процесс чтения был запущщен оператором STICK(0).  

См.также      STRIG

Пример         'опрос джойстиков для определения их
               'текущей позиции
               WHILE NOT INSTAT
            LOCATE 15,15
        PRINT STICK(0),STICK(1),STICK(2),STICK(3);
        WEND
        END
        'конец программы

                        Оператор STOP
-----------------------------------------------------------------
Назначение    STOP останавливает программу.

Синтаксис     STOP

Комментарий      STOP  прекращает  выполнение программы и возвра- 
              щает управление  операционной  системе  (или  ТУРБО 
              БЕЙСИКУ,  в  зависимости  от того,  откуда она была 
              запущена).  Оператор END выполняет ту  же  функцию, 
              но является более предпочтительным.  

Отличия          В отличие от программ на интерпретируемом БЕЙСИ-
              Ке, если программа в ТУРБО БЕЙСИКЕ остановлена опе- 
              ратором STOP,  ее выполнение не может быть  продол- 
              жено оператром CONTINUE.  

См.также      END

Пример        'запуск бесконечного цикла
           DO
             'завершение при нажатии клавиши
           IF INSTAT THEN STOP
        LOOP
        END
        'конец программы

                        Функция STR$
-----------------------------------------------------------------
Назначение    STR$ возвращает символьный эквивалент числа.

Синтаксис     S$=STR$(числовое выражение)

Комментарий      STR$ преобразует числовую переменную или выраже-
              ние  в строку,  то есть функция STR$ возвращает то, 
              что Вы увидели бы на экране, если бы выполнили опе- 
              ратор "PRINT числовое выражение". Если числовое вы- 
              ражение  больше  0,  STR$  дополняет его лидирующим 
              пробелом;  например STR$(14) возвращает  строку  из 
              трех символов, первый из которых - пробел.  
                 Обратной  к  функции  STR$ является функция VAL, 
              преобразующая символьную  строку  в  числовое  зна- 
              чение.  
    
См.также      VAL

Пример        'присвоим A% числовое значение
            A%=56789
           'используем STR$ для преобразования числа
        A$=STR$(A%)
        PRINT A%,A$
        'проверим, имеет ли A% то же значение, что и A$
        IF A%=VAL(A$) THEN
            PRINT "STR$ и VAL исправно работают"
        END IF
        END
        'конец программы

                          Функция STRIG
-----------------------------------------------------------------
Назначение    STRIG возвращает состояния клавиш джойстика.

Синтаксис     Y=STRIG(вариант)

Комментарий      Функция STRIG  возвращает информацию о триггере
              джойстика  в  соответствии  со  значением варианта.  
                 Вариант - это целое числовое выражение, управ- 
              ляющее действием функции STRIG  в  соответствии  со 
              следующей таблицей: 

    ----------------------------------------------------------
            Вариант             Действие                                 
    ---------------------------------------------------------
              0 -   Если после последнего вызова STRIG(1)    
                  была нажата клавиша 1 джойстика А, STRIG 
                  возвращает -1, в противном случае  0.   
              1 -   STRIG возвращает -1, если клавиша джой-  
                  тика А нажата в данный  момент, иначе  0.             
              2 -   Если после последнего вызова STRIG(2)    
                 была нажата клавиша 1 джойстика В, STRIG 
                 возвращает -1, иначе   0.                
              3 -   STRIG возвращает -1, если клавиша 1      
                 джойстика В нажата в данный момент, иначе
                 0.                                     
              4 -    Если после последнего вызова STRIG(4)    
                  была нажата клавиша 2 джойстика А, STRIG 
                  возвращает -1, иначе - 0.                
              5 -    STRIG возвращает -1, если клавиша 2      
                  джойстика А нажата в данный момент, иначе
                  - 0.                                     
              6 -    Если после последнего вызова STRIG(6)    
                  была нажата клавиша 2 джойстика В, STRIG 
                  возвращает -1, иначе - 0.                
              7 -    STRIG возвращает -1, если клавиша 2       
                  джойстика В нажата в данный момент, иначе
                  0.                                     
    ----------------------------------------------------------

                 До выполнения вызовов функции STRIG следует раз- 
              решить проверку клавиши джойстика с помощью  опера- 
              тора STRIG ON.  
                 Для чтения позиции джойстика используйте функцию 
              STICK.  

См.также      STICK

Пример        См. пример к оператору STRIG.

                        Оператор STRIG.
-----------------------------------------------------------------
Назначение    STRIG управляет проверкой событий, связанных с кла- 
            вишами джойстика.

Синтаксис   STRIG (ON | OFF | STOP)

Замечания        Оператор STRIG ON   включает  проверку  событий, 
              связанных с триггером,  так,  что могут выполняться 
              запросы функций STRIG и обработка  прерываний  под- 
              программой, заданной оператором ON STRIG.  
                 STRIG OFF отключает проверку соответствующих со- 
              бытий.  
                 STRIG STOP отключает реакцию на события, связан-
              ные с триггером,  но сохраняет их в памяти так, что 
              при  последующем  ваполнении  STRIG  ON  немедленно 
              возникает прерывание.  

См.также      ON STRIG

Пример         'включает проверку события
               STRIG(0) ON
               STRIG(1) ON
               STRIG(4) ON
               STRIG(6) ON
              'опрашивает состояние события для проверки
              'была ли нажата клавиша
        WHILE NOT INSTAT
            LOCATE 1,1
            PRINT STRIG(0),STRIG(1),STRIG(2),STRIG(3)
            PRINT STRIG(4),STRIG(5),STRIG(6),STRIG(7)
        WEND
        END
        'конец программы

                        Функция STRING$
-----------------------------------------------------------------
Назначение    STRING$  возвращает строку,  состоящую из заданного
              числа повторений указанного символа.

Синтаксис     S$=STRING$(счетчик,{значение|символьное выражение})

Комментарий      Счетчик и значение -  целые  выражения,  счетчик
              может меняться в диапазоне от 1 до 32767,  значение 
              -от 0 до 255.  
                 STRING$  с  числовым  аргументом вызвращает сим- 
              вольную строку,  составленную из одинаковых  симво- 
              лов,  ASCII-код которых равен значению,  а их число 
              равно счетчику.  STRING$  с  символьным  аргументом 
              возвращает  строку,  состоящую  из  первых символов 
              символьного   выражения,    число   которых   равно 
              счетчику.  
                 STRING$(n,32),  STRING$(n," ") и SPACE$(n)  при- 
              водят  к  одному  и тому же результату - возвращают 
              строку из n пробелов.  

Пример 
        'STRING$ и TAB строят прямоугольник
        'использование 40 знаков равенства (=) для
        'построения верхней грани прямоугольника, затем
        'печать
        TOP$=STRING$(40,61)
        PRINT TOP$
        'использование 1-секундной задержки для того,
        'чтобы можно было увидеть, как строится прямоугольник
        DELAY 1
        'стороны строятся с помощью цикла
        FOR I=1 TO 5
            PRINT TAB(1)"="TAB(40)"="
            DELAY 1
        NEXT I
        DELAY 1
        'нижняя грань строится также как и верхняя
        LOCATE 4,15
        PRINT "середина"
        DELAY 1
        'курсор перемещается за пределы прямоугольника
        LOCATE 20,1
        END
        'конец программы

