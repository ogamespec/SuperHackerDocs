                       Оператор OPTION BASE
-----------------------------------------------------------------     
Назначение    OPTION BASE устанавливает минимальное значение  для
              индексов массивов
              
Синтаксис     OPTION BASE (целое выражение)
              
Комментарий   Целое выражение принимает значения  от 0 до 32767.
              
                 OPTION BASE  задает  значение  индекса,  которое 
              ставится  в  соответствии первому элементу массива, 
              например,  если  оно  задано  OPTION  BASE  1,   то 
              декларативный оператор 
              
              DIM x(20),
               
              определяющий  массив  x  отводит  для него в памяти 
              место под 20 элементов  (соответствующих  значениям 
              индекса от 1 до 20),  тогда как по умолчанию был бы 
              определен 21 элемент (от 0 до 20).  
                 Хотя для управления границами изменения индексов 
              можно  использовать OPTION BASE,  ТУРБО БЕЙСИК дает 
              для этого более мощную возможность  через  оператор 
              DIM.  
              
См.также      DIM
              
Пример        ' выделить массив из трех целых переменных
              DIM FirstArray%(2)
              
              ' установить начальное значение индекса во
              ' всех массивах
              OPTION BASE 1
              
              ' выделить место в памяти для массива из двух целых
              ' переменных
              DIM SecndArray%=2
              
              FOR I=0 TO 2
                  ' в массиве SecndArray% нет значения индекса,
                  ' равного нулю
                  IF I% > 0 THEN
                     SecndArray%(I%)=I%
                  END IF
                     FirstArray%(I%)=I%
              NEXT I%
              
              FOR I% = 0 TO 2
                  ' в массиве нет значения индекса, равного 0
                  IF I% > 0 THEN
                     PRINT SecndArray%(I%)
                  END IF
                     PRINT FirstArray%(I%)
              NEXT I%
              
              END    'конец программы

                           Оператор OUT
-----------------------------------------------------------------
Назначение    OUT осуществляет вывод в порт ввода/вывода
              
Синтаксис     OUT номер порта, целое выражение
              
Комментарий      OUT  посылает  байтовую величину (от 0 до 255) в 
              аппаратный  выходной  порт с заданным номером,  где 
              номер порта - целое выражение в диапазоне от  0  до 
              65535.  
                 Оператор OUT необходим для управления различными 
              аппаратными подсистемами,  как, например, адаптером 
              связи  или  видео-адаптером.  Неправильное  исполь- 
              зование   оператора  OUT  может  привести  к  краху 
              системы.  
              
Пример        'Считывая биты состояния, подавляя и пропуская биты
              'управления, программа порождает пронзительный зву-
              'ковой сигнал в динамике

         'из порта 61 (шестнадцатиричное) считывается значение
              StatusReg%=INP(&H61)
              StatusReg%=StatusReg% AND &H00FC

        'на считанное значение накладывается маска удлинить звук,
        'чтобы его можно было услышать
            FOR J = 1 TO 100
            StatusReg%= StatusReg% XOR 2    
                OUT &H61,StatusReg%         
                delay .001
              NEXT J
              
              END

                          Оператор PAINT
-----------------------------------------------------------------
Назначение    PAINT окрашивает ограниченную область на  графичес- 
              ком экране в выбраный цвет.
              
Синтаксис     PAINT (x,y) [[,цвет] [,граница] [,фон]]
              
Комментарий      (x,y) задают точку, определяющую, где должна ра-
              сполагаться краска.  Если эта точка  задана  внутри 
              ограниченной  области,  окрашивается  эта  область. 
              Если точка находится вне границы, то будет окрашена 
              внешняя по отношению к области часть экрана.  
                 Цвет задается числовым или символьным  выражени- 
              ем.  Если  это  числовое выражение,  оно определяет 
              сплошной цвет.  Если это символьное  выражение,  то 
              оно  содержит маску, по которой область заполняется 
              некоторым шаблонным рисунком.  Если цвет не  задан, 
              будет выбран цвет с наибольшим приоритетом.  
                 Граница дает цвет линии, ограничивающей закраши- 
              ваемую  фигуру.   Окрашивание  по  оператору  PAINT 
              прекращается там, где встречается цвет границы.  
                 Фон - это необязательная символьная  маска,  ис- 
              пользуемая  в тех случаях,  если требуется перекра- 
              сить области.  Фоновая маска описывает  "слой"  из- 
              бранных  клеток,  которые  следует пропустить когда 
              проверяется, окрашена уже область или нет.  
                 С помощью оператора PAINT  можно  закрасить  об- 
              ласть  любой формы,  сколь угодно сложной.  В ТУРБО 
              БЕЙСИКЕ  выбор  байта  для   нанесения   на   экран 
              осуществляется по формуле: 
              
              y mod     tile     length
              y режим   клетка   длина
              
                 Следует убедиться в том,  что закрашиваемая  об- 
              ласть является полностью замкнутой,  иначе "утечки" 
              через границу могут полностью исказить рисунок.  
                 Усли аргумент "цвет" является числовым,  то опе- 
              ратор PAINT заполняет область заданным цветом, пре- 
              кращая  окраску  при  попадении  на пикселы с атри- 
              бутами "цвет" или "граница".  
                 Если "цвет" - это символьное выражение,  то при- 
              меняется разбиение на клетки;  оно используется для 
              создания шаблонного рисунка,  которым закрашивается 
              область.  Шаблонный рисунок, задаваемый символьными 
              аргументами цвета имеет ширину 1 байт  (представля- 
              ющий  4 пиксела при среднем разрешении и 8 пикселов 
              в режиме высокого разрешения) и длину от  1  до  64 
              байтов  (представляющих  от 1 до 64 строк развертки 
              по вертикали).  
                 При разбиении на клетки цвет должен иметь формат 
              вида:
              
              CHR$(&Hnn) + CHR$(&Hnn)...
              
                 Маска состоит из битовых значений "цвета",  пер- 
              вый  ее  символ  представляет первую линию,  второй 
              символ - вторую, и т.д.  
                 Например, следующая маска задает шахматный рису- 
              нок  (50%-ный  серый цвет) в режиме высокого разре- 
              шения: 
              
              10101010 (первый байт)
              01010101 (второй байт)

                 Для того, чтобы заполнить область этим шахматным 
              рисунком,  следует построить строку с  соответству- 

              ющей  маской.  Сначала  преобразовать  из  двоичной 
              формы в шестнадцатеричную: 
              
              10101010=&HAA
              01010101=&H55
              
                 Затем сконструировать с  помощью  CHR$  двухсим- 
              вольную строку: 
             
              pattern$ = CHR$(&HAA) + CHR$(&H55)
              
                 После этого, с помощью оператора
               
              PAINT (50,50), pattern$
              
              закрашивает весь экран серой (шахматной) краской.
     
                 "Фон" используется для  того,  чтобы  определить 
              условия  остановки при перекрашивании области,  уже 
              окрашенной с помощью шаблона.  Если окрашивание до- 
              ходит до пиксела,  которому соответствует 1 в фоно- 
              вой маске,  окрашивание не прекращается,  даже если 
              этот  пиксел имеет цвет "границы".  При разбивке на 
              клетки,  задание шаблона зависит от количества цве- 
              товых атрибутов в  каждом  режиме  экрана.  Следует 
              помнить, что количество битов, приходящихся на один 
              пиксел,  связано с количеством цветовых атрибутов в 
              каждом режиме экрана.  Количество битов  на  пиксел 
              можно вычислить по следующей формуле: 
              
              LOG  (X)=Y
                 2
              
              где  X- общее число цветовых атрибутов вашего экра- 
              на, а Y- число битов на пиксел.  
                                     
                      Разбиение на клетки в режиме 1                                   ---
               --------------------------------------------------
                 При  среднем  разрешении,  используя  предыдущую 
              формулу,  получаем:  X=4  пикселам  (которые  пред- 
              ставляются одним клеточным байтом среднего разреше- 
              ния) и,  таким образом,  Y равно двум битам на пик- 
              сел. Поскольку для каждого пиксела имеется соответ- 
              ствующий цветовой  атрибут,  потребуется  два  бита 
              клеточного байта, чтобы описать один из четырех ат- 
              рибутов.  
                 В следующей таблице приведены десятичные и шест- 
              надцатричные значения,  соответствующие каждому ат- 
              рибуту: 
            
             ----------------------------------------------------
               цветовая   атрибут в      шаблон в      шаблон в
               палитра    двоичном       двоичном      HEX коде
                          коде           коде
             ----------------------------------------------------
                 0
             зеленый        01           01010101       &H55
             красный        10           10101010       &HAA
             коричн.        11           11111111       &HFF              
             ----------------------------------------------------
                 1
             цианит         01           01010101       &H55
             фуксин         10           10101010       &HAA
             белый          11           11111111       &HAA    
             ----------------------------------------------------

                           Разбиение на клетки в режиме 2.
                          --------------------------------
                 При  высоком  разрешении пикселу соответствует 1 
              бит,  что позволяет включить в одну клетку  8  пик- 
              селов.  Там,  где в маске стоит 1,  на экране будет 
              точка. Строка может содержать до 64 байтов.  
                 Рисунок последовательно заполняет  всю  область, 
              заключенную в границу.  Если граница не определена, 
              закрашивается весь экран.  

                   Разбиение на клетки в режимах 7,8,9,10,11 и 12
                   ----------------------------------------------
                 Для этих усиленных режимов клеточный рисунок за- 
              дается  с  помощью метода,  по которому строка хра- 
              нится и интерпретируется как стек 8-битовых элемен- 
              тов,  известных  в  совокупности  как битовая плос- 
              кость.  Во всех режимах экрана требуется 4  битовых 
              плоскости,  чтобы  определить  один клеточный байт, 
              кроме режима 10,  в  котором  требуется  2  битовых 
              плоскости.  
              
Пример        ' Использование клеточных рисунков
              SCREEN 1 : CLS
              
              ' Определение клеточного шаблона для диагоналей
             TIL$=CHR$(&H40)+CHR$(&H40)+CHR$(&H10)+CHR$(&H10)+_
                  CHR$(4)+CHR$(4)+CHR$(1)+CHR$(1)
             CIRCLE(100,100),50
             PAINT (100,100),TIL$
            
            ' определение клеточного шаблона для шахматного
            ' рисунка
           TIL2$=CHR$(&HAA)+CHR$(&HAA)+CHR$(&H80)+CHR$(&H80)+_
                 CHR$(&H80)+CHR$(&H80)+CHR$(&H80)+CHR$(&H80)
           CIRCLE(225,100),50
           PAINT (225,100),TIL2$

                 Оператор PALETTE и PALETTE USING
-----------------------------------------------------------------
Назначение    PALETTE и PALETTE USING позволяют изменять один или
              несколько  цветов палитры.  (Для использования этих 
              операторов   необходимы   Расширенный   Графический 
              Адаптер  (EGA)  или  Видео  Графический Комплексный 
              Адаптер (VGA)).  
              
Синтаксис     PALETTE [атрибут,цвет]
              PALETTE USING имя целого массива (индекс массива)
              
Комментарий      атрибут представляет цвет в палитре, цвет - дей-
              ствительный цвет экрана,  заменяющий атрибут палит- 
              ры.  Цвет, выводимый на ваш экран, зависит от уста- 
              новленного  режима  экрана  и  аппаратуры   дисплея 
              (см.оператор SCREEN).  
                 Оператор  PALETTE позволяет изменять цвет текста 
              или графики непосредственно на экране, заданные из- 
              менения влияют на последующее воспроизведение  тек- 
              ста или графики. Это удобное свойство, которое поз- 
              воляет  не  перепечатывать текст или перерисовывать 
              графику, если вы хотите изменить цвет (см.пример).  
                 PALETTE также позволяет заносить в палитру номе-
              ра цветов, больше 15.  Можно даже сделать текст не- 
              видимым относительно фона,  а затем,  изменив в па- 
              литре его цвет, "внезапно" высветить его.  
                 Если в операторе PALETTE не  указаны  аргументы, 
              цвета  в палитре устанавливаются по умолчанию в со- 
              ответствии с определением.  
                 PALETTE USING позволяет задавать сразу несколько 
              изменений цветов с помощью единственного оператора. 
              Имя целочисленного массива задает массив данных для 
              изменения цветов палитры. Индекс массива задает пе- 
              рвый элемент массива (в большинстве случаев  -  0).  
              Размерность массива должна быть достаточно большой, 
              чтобы  его  элементы,  начиная  с заданного индекса 
              массива,  могли вместить  все  16  цветов  палитры.  
              Каждому  атрибуту  палитры поставлен в соответствие 
              цвет, номер которого задан в целочисленном массиве.  
                 Значение  цвета  -1 в одном из элементов массива 
              не влияет на соответствующий атрибут в палитре, од- 
              нако,  все  остальные  отрицательные значения цвета 
              недопустимы.  
                 Ниже  приведены диапазоны атрибутов и цветов для 
              различных режимов экранов и мониторов: 
              
                  Таблица 5-1  Диапазоны цветов и атрибутов
              -------------------------------------------------
              Режим   Монитор      Атрибуты      Цвета    
              -------------------------------------------------
               0      Моно/EGA       0-15         0-2
                      Цвет/EGA       0-31         0-15
               1      Цвет/EGA       0-3          0-15
               2      Цвет/EGA       0-1          0-15
               7      Цвет/EGA       0-15         0-15
               8      Цвет/EGA       0-15         0-15
               9      EGA  (64K)     0-3          0-15
                      EGA (>64K)     0-15         0-63
              10      Моно/EGA       0-3          0-8
              11      MCGA/VGA       0-1          0-1
              12      VGA            0-15         0-15
              -------------------------------------------------
Моно = Монохромный; EGA  = IBM Enhanced Graphics Adapter 
                                Расширенный Графический Адаптер
                    VGA  = Video Graphics Array Adapter
                           Видео-Графическийц Адаптер
                    MCGA = Multi-Colors Graphics Array Adapter
                            Многоцветный Графический Адаптер

Ограничение      Использование операторов PALETTE и PALETTE USING 
              возможно если есть в наличии Расширенный  Графичес-
              кий Адаптер.  
              
См.также      COLOR     DRAW     SCREEN
              
Пример        ' в следующем примере показано, как использовать
              ' оператор PALETTE для того, чтобы изменить
              ' цвет графики (и текста) без повторного
              ' рисования или воспроизведения рисунка
              
              SCREEN 8   'установить для EGA режим 640x200, 
                         '16 цветов
              PALETTE    'устанавливает для EGA палитру цветов
                         'по умолчанию
        LINE (10,10)-(630,190),1,BF  'нарисовать прямоугольник
                                     'закрасить его синим цветом
              DO
               FOR I% = 2 TO 14
                 PALETTE 1,I%              'заменить синий цвет
                 DELAY .2                  'установить задержку
               NEXT I%
              LOOP UNTIL INSTAT
              END

                          Функция  PEEK
-----------------------------------------------------------------
Назначение    PEEK возвращает байт, хранящийся  в заданной ячейке 
              памяти
              
Синтаксис     y = PEEK (смещение)
              
Комментарий      Смещение - это числовое выражение в диапазоне от 
              0 до 65535,  которое представляет собой  16-битовое 
              смещение от текущего элемента,  установленного пос- 
              ледним оператором DEF  SEG.  Возвращаемое  значение 
              может быть от 0 до 255.  
                 PEEK и дополняющий его оператор POKE осуществля- 
              ют доступ к памяти на более низком уровне,  чем ос- 
              новные  операции ТУРБО БЕЙСИКА.  Одно из применений 
              PEEK и POKE сотоит в создании  массмвов  из  байтов 
              для  приложений,  не  требующих  полного  диапазона 
              допустимых целых чисел (от -32768 до +32767).  
              
См.также      DEF SEG      POKE
              
Пример        DIM Array%(5)     'размещение массива из 6 целых 
                                'элементов
              
              DEF SEG = VARSEG (Array%(0))
              
              ' инициализация массива с помощью оператора POKE
              FOR I% = 0 TO 11
                POKE I%, &HFF
              NEXT I%
              
           ' вывод содержимого массива с помощью оператора PEEK
              FOR I% = 0 TO 11
                PRINT HEX$ (PEEK(I%))
              NEXT I%
              
              END          'конец программы

                           Функция PEN
-----------------------------------------------------------------
Назначение    PEN читает состояние светового пера
              
Синтаксис     y = PEN (вариант)
              
Замечания        Вариант - число,  управляющее информацией,  воз-
              вращаемой функцией PEN согласно следующей таблице: 
              
              ---------------------------------------------------
              Вариант            Значение
              ---------------------------------------------------
 
                0        Перо опущено с момента последней 
                         проверки (-1 = да, 0 = нет)
              
                1        X координата последней активизации пера
              
                2        Y координата последней активизации пера
              
                3        текущее положение переключателя 
                         (-1 = вниз, 0 = вверх)
              
                4        последнее значение X координаты
              
                5        последнее значение Y координаты
              
                6        строка, где последний раз было 
                         активизировано перо (1-24)
              
                7        колонка, где последний раз было 
                         активизировано перо (1-80)
              
                8        последняя строка (1-24)
              
                9        последняя колонка (1-80)
              
               --------------------------------------------------
              
                 Световое  перо  должно  быть включено оператором 
              PEN  ON  прежде,   чем  будут  выполняться  запросы 
              функции PEN.  
              
Пример        ON PEN GOSUB PenHandler  'задание подпрограммы 
                                       'обработки события
              
              PEN ON      'включить прерывание по событию
              
              PRINT "Нажмите любую клавишу для завершения"...
              WHILE NOT INSTAT
              WEND
              END         'конец программы
              
              PenHandler:
                 FOR I% = 1 TO 9
                   PRINT PEN(I%)
                 NEXT I%
              RETURN

                           Оператор PEN
----------------------------------------------------------------
              
Назначение    PEN управляет проверкой событий по световому перу
              
Синтаксис     PEN {ON | OFF | STOP}
              
Комментарий      Оператор  PEN  управляет проверкой событий, свя- 
              занных  со  световым пером.  До выполнения запросов 
              функции PEN,  световое перо должно быть включено  с 
              помощью  оператора  PEN ON.  PEN ON разрешает также 
              обработку прерываний  по  событи-ям,  связанным  со 
              световым  пером,  с  помощью процедуры,  заданной в 
              операторе ON PEN.  
                 PEN  OFF  блокирует  функцию PEN и отменяет про- 
              верку событий, связанных со световым пером.  
                 PEN STOP отменяет прерывания по событиям, но за- 
              поминает  эти события так,  что если далее выполня- 
              ется PEN ON, немедленно возникает прерывание.  
              
См.также      ON PEN
              
Пример        ON PEN GOSUB PenHandler
              ' задание подпрограммы  обработки события
              
              PEN ON      'включить прерывание по событию
              
              
              PRINT  "Нажмите любую клавишу для продолжения..."
              WHILE NOT INSTAT
              WEND
              
              END       'конец программы
              
              PenHandler|
                FOR I% = 1 TO 9
                  PRINT   PEN(I%)
                NEXT I
              RETURN

                           Функция PLAY
-----------------------------------------------------------------
Назначение    PLAY  возвращает  число  нот  в фоновом музыкальном 
              буфере
              
Синтаксис     y = PLAY (x)
              
Комментарий      x - это фиктивный числовой аргумент.

                 PLAY  возвращает  число  нот  в  фоновом  буфере 
              подготовки музыки,  ждущих исполнения.  Если музыка 
              исполняется   с   высоким   приоритетом   или    не 
              исполняется совсем, PLAY возвращает 0.  
                           
См.также      $SOUND
              
Пример        ' Исполнение до-ре-ми-фа-соль
              PLAY "MB CDEFG"
              
              Again:
               n = PLAY(1)     'может ли быть что-нибудь сыграно
                 PRINT        n "нот осталось в буфере"
                 IF n = 0 THEN PRINT  "Буфер пуст" : END
              GOTO Again

                          Оператор PLAY
-----------------------------------------------------------------
Назначение    PLAY создает музыку
              
Синтаксис     PLAY символьное-выражение
              
Комментарий      PLAY - интерпретируемый мини-язык, который игра-
              ет  для музыки ту же роль,  что и DRAW для графики. 
              PLAY позволяет  задавать  музыкальные  пассажи  как 
              последовательность  символов в символьном-выражении 
              и исполнять их с помощью динамика компьютера.  
                 Можно  использовать  84  ноты,   соответствующие 
              большинству клавиш на пианино, начиная с нот на три 
              октавы ниже среднего "до" и до четырех,  без  одной 
              ноты,  октав  выше  среднего "до".  Нота может быть 
              представлена своим номером по порядку (1-84) или  с 
              помощью непосредственного описания (то есть от A до 
              G с диезами и бемолями и указанием октавы).  
                 Например, PLAY "N44" исполняет 44-ю ноту "соль", 
              следующую  за  средним  "до".  PLAY "O3G" исполняет 
              "соль" в третьей октаве (ту же ноту).  
                 Операторы задания нот могут быть сгруппированы в 
              более длинные командные последовательности: 
              
              PLAY "O3FGA"
              
              исполняет три ноты "фа",  "соль" и "ля"  в  третьей 
              октаве.    Музыкальный   интерпретатор   игнорирует 
              пробелы,  поэтому их следует использовать для того, 
              чтобы сделать команду более понятной.  
              
              Команды
              
                 Следующие одно- и  двухсимвольные  команды  сос- 
              тавляют язык оператора PLAY: 
              
              нота [{ # | + | - }]
               
              формирует   ноту,   соответствующую   строчной  или 
              прописной букве от A до G.  Включение диеза (#  или 
              +)  или бемоля (-) после буквы,  обозначающей ноту, 
              позволяет  выбрать  заданную  черную   клавишу   на 
              пианино.  Однако  нельзя с помощью диезов и бемолей 
              выбирать  белую  клавишу;   так,   например,   "F-" 
              недопустимо.  
              
              Nn
                 Задает  ноту  n,  где n - числовое представление 
              ноты от 1 до 84. Нота 1 - нижнее "до" пианино, 84 - 
              верхнее "си".  Среднее "до" - нота номер 37. Нота 0 
              не создает звука и соответствует паузе.  
  
              On
                 Выбирает октаву n,  где n  от  0  до  6.  Каждая 
              октава  начинается  с  "до"  и  заканчивается "си". 
              Среднее  до  -  первая  нота  третьей  октавы.   По 
              умолчанию выбирается октава 4.  
              
              >n
                 Увеличивает текущую октаву на 1 и задает ноту n. 
              Если текущая октава - шестая (самая высокая), номер 
              октавы не увеличивается (остается 6).  
              
              <n
                 Уменьшает  текущую  октаву на 1 и задает ноту n. 
              Если  текущая  октава  -   0-ая   (самая   нижняя), 
              выбранная октава остается 0-ой.  

              Ln
                 Устанавливает   длительность   последующих   нот 
              согласно таблице: 
                 L1   целая
                 L2   половина
                 L4   одна четверть
                 L8   одна восьмая
                 L16  одна шестнадцатая
                 .
                 .
                 .
                 L64  одна шестьдесят четвертая

                 Допустимы также промежуточные значения (так L5 - 
              правильное значение длительности).  Наибольшее  до- 
              пустимое значение n - 64.  
              
              Pn
                 Означает паузу длиной в n долей (где n представ-
              ляет число долей, заданных в последней команде L).  
              
                 Точка в конце ноты увеличивает ее длительность в 
              полтора  раза.  Например,  четвертная нота с точкой 
              имеет длительность одной четверти и одной  восьмой. 
              Можно  использовать  не  одну  точку.  Вторая точка 
              увеличивает длительность комбинации "нота с точкой" 
              еще в полтора  раза,  так  четверть  ноты  с  двумя 
              точками  будет  исполняться  в течение 1,5 * (1,5 * 
              1/4) долей.  Точки могут также удлинять паузы.  
              
              Tn
                 Устанавливает темп,  где n  -  число  четвертных 
              долей в минуту. n может изменяться от 32 до 255. По 
              умолчанию, 120.  

              MF
                 Музыка  с  "высоким приоритетом" означает немед- 
              ленное исполнение музыки,  созданной с помощью опе- 
              ратора PLAY (то есть,  следующий оператор программы 
              не будет выполняться до тех пор, пока не закончится 
              PLAY).  
              
              MB
                 "Фоновая  музыка" означает,  что музыка исполня- 
              ется тогда,  когда программа занимается другими де- 
              лами.  По умолчанию,  в ТУРБО БЕЙСИК есть 32-нотный 
              буфер для фонового воспроизве-дения,  размер буфера 
              может  быть  увеличен  метаоператором $SOUND.  Про- 
              смотрите операторы PLAY ON и ON PLAY, которые также 
              могут периодически  контролировать  процесс  испол- 
              нения  фоновой музыки и добавлять при необходимости 
              новые ноты.  
              
              MN/ML/MS
                 Согласно этой установке ноты могут длиться  либо 
              три  четверти  времени,  заданного с помощью L (MS: 
              стаккато), либо семь восьмых (MN:  нормально), либо 
              все время, отведенное с помощью L (ML: легато).  
              
           X VARPTR$(символьная переменная) (выполнить подстроку)
                 Команда   X   (выполнить)   позволяет  ввести  в 
              оператор  PLAY  подстроку,  являющуюся  музыкальной 
              подпрограммой; например, операторы: 
              
              a$ = "C D E" : PLAY "E D E X" + VARPTR$(a$)
              
              исполняют ноты E, D, E, C, D и E.

              Переменные аргументы
                 В  каждом  операторе  PLAY  аргумент может иметь 
              либо постоянное значение,  либо задаваться  в  виде 
              VARPTR$(переменная),  где переменная - это числовая 
              пере-менная.  Обратите внимание,  что Интерпретатор 
              BASIC    позволяет    задавать   имена   переменных 
              непосредственно в строке оператора PLAY.  Например, 
              PLAY  "T=x;" устанавливает темп согласно переменной 
              x.  Хотя это и неплохая  возможность,  но  в  ТУРБО 
              БЕЙСИКЕ  она  не  реализована,  так как информация, 
              связанная  с  переменной  x,  недоступна  в  момент 
              выполнения.   Вместо   этого  следует  использовать 
              описанные выше возможности VARPTR$.  
              
См.также      ON PLAY   PLAY ON   $SOUND
              
Пример     firstline$ = "O3 L4 C L2 E E L8 E L4 E E D C F L1 <A"
           secondline$= "O3 L8 C C C L4 E D L2 <A L4 A L1 >C"
              thirdline$ = "L4 C L10 F F. F L1 E"
              PLAY "T150"             'увеличить темп
              FOR n = 1 TO 4
                PLAY firstline$
              NEXT n
              PLAY secondline$ + thirdline$ 

                          Функция  PMAP
    ------------------------------------------------------------
Назначение    PMAP  переводит физические координаты в координаты, 
              заданные пользователем, и наоборот.
              
Синтаксис     y = PMAP (x, вариант)
              
Комментарий  
              x - координата точки, подлежащая преобразованию;

              вариант - целое выражение от 0 до 3, которое упра-
                        вляет функцией  PMAP  согласно следующей 
                        таблице:
              
          -------------------------------------------------------
          Вариант   Действие
          -------------------------------------------------------
           0    Преобразует координату x в системе координат,
                заданной пользователем, в физическую координату x

           1    Преобразует координату y в системе координат,
                заданной пользователем, в физическую координату y

           2    Преобразует физическую координату x в координату
                x в системе координат пользователя

           3    Преобразует физическую координату y в координату
                y в системе координат пользователя
          -------------------------------------------------------
              
                 PMAP выполняет масштабирование, заданное послед-
              ним операторм WINDOW,  при этом вывод на  экран  не 
              производится.  
              
См.также      WINDOW
              
Пример        ' переключение в графический режим со средним 
              ' разрешением

              SCREEN 1
              
              ' определение прямоугольных координат
              ' с центром в середине экрана с большим
              ' диапазоном значений x и y, где y растет
              ' при движении вверх, а не вниз

              WINDOW (-1000,1000) - (1000,-1000)
              
              ' PMAP устанавливает соответствие между
              ' декартовыми координатами и физическими пикселами
              
              PSET (PMAP (0,0), PMAP (0,1)),2
              PSET (PMAP (50,2), PMAP (50,3)),2
           PRINT PMAP (0,0), PMAP (0,1), PMAP (50,2), PMAP (50,3)
              
              END       'конец программы

                          Функция  POINT
----------------------------------------------------------------- 
Назначение    POINT возвращает цвет пиксела или данные LPR.
              
Синтаксис     Первая форма:
              
              цвет = POINT (x,y)
              
              Вторая форма:
              
              y = POINT (вариант)
              
Комментарий      В первой форме (x,y) задают координаты графичес-
              кого  пиксела  в  среднем  или  высоком разрешении. 
              POINT возвращает значение атрибута (цвет) в пикселе 
              (x,y).  Если либо x,  либо  y  выходят  за  пределы 
              допустимого диапазона, POINT возвращает -1.  

                 Во второй форме, вариант - это числовая перемен-
              ная  или  выражение,  которое  управляет  действием 
              POINT согласно следующей таблице: 
              
       -----------------------------------------------------------
       Вариант   Действие
       -----------------------------------------------------------
        0    Возвращает текущее значение физической координаты x

        1    Возвращает текущее значение физической координаты y

        2    Возвращает текущую координату x в системе координат,
             заданной пользователем

        3    Возвращает текущую координату y в системе координат,
             заданной пользователем
       -----------------------------------------------------------
             
                 Первая форма POINT полезна для простого  оживле-
              ния   изображения   по   одному   пикселу  за  раз. 
              Используйте POINT для  определения  цвета  фонового 
              пиксела и записи его цвета во временную переменную. 
              Затем  задайте  с  помощью  PSET  цвет  движущегося 
              объекта  в  этой  точке.  Наконец,  сотрите  точку, 
              верните ей ее первоначальный цвет.  
              
См.также      PSET
              
Пример        ' переключение в графический режим со средним 
              ' разрешением

              SCREEN 1
              
              CIRCLE (160,100),50,2    'нарисовать круг
              
              ' поставить точку в центре круга

              PSET (160,100),1
              
              ' вывод цвета точки и ее местоположения

              PRINT POINT (160,100)
              PRINT POINT (0),POINT (1)
              
              END          'конец программы

                          Оператор POKE
-----------------------------------------------------------------              
Назначение    POKE записывает байт по заданному адресу
              
Синтаксис     POKE смещение, значение
              
Комментарий      смещение - это адрес, числовое значение в диапа-
              зоне от 0 до 65535; 
                 значение - байтовая величина от 0 до 255,  кото-
              рая  записывается  по  заданному  адресу.  Смещение 
              указывается относительно сегмента,  определенного в 
              последнем операторе DEF SEG.  

                 POKE записывает однобайтовые величины по  задан-
              ному адресу.  Оператор POKE осуществляет  доступ  к 
              памяти на более низком уровне,  чем основные опера- 
              ции ТУРБО БЕЙСИКА.  Поскольку оператор POKE не про- 
              веряет ошибки,  неправильное его использование  мо- 
              жет привести к краху операционной системы или вашей 
              программы.  
              
См.также      PEEK
              
Пример        DIM Array%(5)
              
              DEF SEG = VARSEG (Array%(0))
              
              FOR I% = 0 TO 11
                POKE I%, &HFF
              NEXT I%
              
              FOR I% = 0 TO 11
                PRINT HEX$(PEEK(I%))
              NEXT I%
              
              END

                           Функция  POS
-----------------------------------------------------------------              
Назначение    POS  возвращает горизонтальную позицию курсора (но-
                   мер колонки).
              
Синтаксис     y = POS (x)
              
Комментарий      x - это фиктивный числовой аргумент. 

                 Значение, возвращаемое POS,  изменяется в диапа- 
              зоне от 1 до 80 и представляет собой горизонтальную 
              позицию  (номер  колонки) курсора.  Для определения 
              вертикальной позиции (номера  строки)  следует  ис- 
              пользовать функцию CSRLIN.  
                 Для перемещения и упрятывания курсора используй-
              те оператор LOCATE.  
              
См.также      CSRLIN   LOCATE   LPOS
              
Пример        ' установка обработки события

              ON TIMER(1) GOSUB DisplayClock
              
              ' включение прерывания по событию

              TIMER ON
              
              ' до тех пор, пока не нажата клавиша,

              PRINT "Нажмите любую клавишу для завершения..."
              WHILE NOT INSTAT
              WEND
              
              END          'конец программы
              
              DisplayClock:
                OldX% = POS
                OldY% = CSRLIN
                LOCATE 1,72,1
                PRINT TIME$
                LOCATE OldY%,OLDX%,1
                RETURN

                         Оператор PRESET
-----------------------------------------------------------------              
Назначение    PRESET изображает точку на графическом экране

Синтаксис     PRESET (x,y) [,цвет]
              
Комментарий      (x,y)   абсолютные или относительные  координаты 
              изображаемой  точки  на графическом экране.  

                 Цвет - это целое выражение, определяющее,  каким 
              цветом должна быть изображена точка.  В зависимости 
              от  режима  экрана  на  цвет накладываются соответ- 
              ствующие ограничения. Допустимые диапазоны атрибута 
              в каждом  режиме  приведены  в  описании  оператора 
              PALETTE.  
                 Если цвет задан,  то оператор PRESET и дополняю- 
              щий  его оператор PSET действуют одинаково.  Разли- 
              чие между ними состоит в том, что по умолчанию зна- 
              чение  цвета  оператора PRESET равно 0 (цвет фона), 
              тогда как у оператора PSET  оно  равно  максимально 
              допустимому в текущем режиме значению. Другими сло- 
              вами, если цвет не задан, PSET зажигает пикселы,  а 
              PRESET гасит их.  
              
См.также      PSET
               
Пример        ' включение графического режима со средним 
              ' разрешением

              SCREEN 1
              
              FOR I% = 0 TO 359
                FOR J% = 0 TO 199
                  DELAY 0.01
                  PSET (I%, J%)
                NEXT J%
              NEXT I%
              
              FOR I% = 0 TO 359
                FOR J% = 0 TO 199
                  DELAY 0.01
                  PRESET (I%, J%)
                NEXT J%
              NEXT I%
              
              END        'конец программы

                          Оператор PRINT
-----------------------------------------------------------------              
Назначение    PRINT посылает данные на экран
              
Синтаксис     PRINT [список выражений] [;]
              
Комментарий      Список  выражений - последоватальность  числовых 
              и/или  символьных выражений,  разделенных точками с 
              запятой, пробелами или запятыми. Если в конце спис- 
              ка выражений не  указана  точка  с  запятой,  ТУРБО               БЕЙСИК  выводит  после данных из списка возврат ка- 
              ретки. Если список выражений опущен, PRINT выполня- 
              ет только возврат каретки.  
                 PRINT использует знаки  пунктуации,  разделяющие 
              выражения в списке,  для определения места на экра- 
              не, где разместить выходные данные.  
                                       
              Печатные зоны
              
                 Для быстрого и аккуратного вывода,  ТУРБО БЕЙСИК 
              делит экран на "печатные зоны",  каждая из  которых 
              состоит  из  14 колонок.  Запятая после выражения в 
              списке задает вывод данных,  определяемых следующим 
              выражением, с начала следующей печатной зоны.  
                 Точка с запятой или пробел после выражения зада- 
              ет вывод данных следующего выражения непосредствен- 
              но после предыдущих безотносительно к печатным  зо- 
              нам.  
                 Если оператор PRINT завершается запятой,  точкой 
              с запятой,  функциями SPC или TAB, следующий опера- 
              тор PRINT начнет вывод с той же строки. В остальных 
              случаях следующий оператор  PRINT  начнет  вывод  с 
              первой позиции следующей строки.  
                 После  числовых значений всегда указывается про- 
              бел,  положительным числам предшествует  знак  "+", 
              отрицательным - "-".  
                 Оператор  PRINT может быть сокращенно обозначен, 
              как "?" (сомнительного достоинства удобство, сохра- 
              нившееся от интерпретаторов прежних времен).  
              
              ? "Hello"
              
              означает то же самое, что и
              
              PRINT "Hello"
              
См.также      LPRINT   LPRINT USING   PRINT USING   SPC    TAB
              
Пример        N = 2
              PRINT "Строки и числа - это" N "примера";
              PRINT " вещей, которые можно напечатать"
              
              ' запятые в качестве разделителей управляют
              ' размещением данных в зонах по 14 позиций каждая 

              A = 1
              B = 2
              C = 3
              PRINT A, B, C,"Текст"
              
              ' точки запятой и пробелы в качестве разделителей
              ' выводят данные слитно

              PRINT A;B;C;"Текст"
              
              END       'конец программы

                













