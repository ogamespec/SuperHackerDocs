                         Аннотация


Диалоговая система программирования АстроФОРТ на базе языка ФОРТ-83 
относится к классу проблемно-ориентированного программного 
обеспечения, предназначенного для разработки программных систем 
широкого назначения - автоматизированных рабочих мест, 
диалоговых систем и т.д.  В данном документе приводится описание 
входного языка системы АстроФОРТ. Данный язык представляет собой 
расширение языка ФОРТ-83 сервисными средствами. В язык включены 
слова, предназначенные для организации многооконного 
пользовательского интерфейса, многозадачной работы, интерфейса 
с операционной системой, использования возможностей аппаратуры 
персональных компьютеров, совместимых с машинами семейства IBM 
PC.
Содержание


 1. Введение ............................................
 2. Общее описание языка ................................
 3. Стек данных и постфиксная нотация ...................
 4. Операции над стеком .................................
 5. Доступ к памяти .....................................
 6. Арифметические операции .............................
 7. Логические операции .................................
 8. Операции сравнения ..................................
 9. Структуры управления ................................
10. Ввод данных .........................................
11. Вывод информации ....................................
12. Определяющие слова ..................................
13. Пользовательский оконный интерфейс ..................
14. Работа с внешней памятью ............................
15. Управление выводом на дисплей .......................
16. Интерпретация и компиляция ..........................
17. Работа со словарями .................................
18. Интерпретация входного потока .......................
19. Обработка прерываний ................................
20. Интерфейс с файловой системой ДОС ...................
21. Перечень ссылочных документов .......................
Приложение 1. Глоссарий системы АстроФОРТ ...............
1. Введение

	Система АстроФОРТ относится к классу проблемно-ориентированного программного обеспечения, предназначенного для разработки программных систем широкого назначения - диалоговых систем, автоматизированных рабочих мест и т.п. Система предназначена для эксплуатации на персональных компьютерах, совместимых с машинами семейства IBM PC.
	Входным языком системы АстроФОРТ является язык ФОРТ. Язык ФОРТ представляет собой развитый язык программирования, предназначенный для создания системного и прикладного программного обеспечения. АстроФОРТ является реализацией стандарта языка ФОРТ-83 [1], разработанного в 1983 году, и помимо средств, определяемых данным стандартом, включает в себя набор расширений, предназначенных для автоматизации создания проблемно-ориентированных систем различного назначения.


2. Общее описание языка

	Язык ФОРТ ориентирован на диалоговую работу. Основным понятием языка является "слово" (иногда называемое ФОРТ-словом или ФОРТ-определением). Каждому ФОРТ-слову соответствует некоторое выполняемое действие (команда). Запись такой команды состоит из мнемонического обозначения - имени слова - в качестве которого может служить последовательность произвольных символов, не содержащая пробелов. Длина имени не должна превышать 31 символа. Программа на ФОРТе, в свою очередь, представляет собой последовательность ФОРТ-слов, разделяемых между собою произвольным числом пробелов или символов перехода на новую строку. Слова при выполнении могут обмениваться данными, снимая аргументы и оставляя результаты на стеке данных.
	Стандарт языка ФОРТ-83 предусматривает набор слов для манипулирования элементами стека данных, выполнения арифметических и логических операций, доступа к оперативной и внешней памяти, ввода и вывода информации на внешние устройства, слова для определения новых понятий и др.
	Вычислительная модель ФОРТ-системы включает в себя адресное пространство оперативной памяти объемом 64К байт, внешней (экранной) памяти на дисках объемом до 32К блоков размером по 1К байт каждый и терминала. В пределах адресного пространства ФОРТ-системы располагается словарь ФОРТ-определений, стек данных, стек возвратов, буфер для ввода текста с терминала и буфер для обменов с внешней памятью.
	Стек данных используется для передачи параметров и результатов между выполняемыми словами. Стек данных располагается в старших адресах оперативной памяти и растет в направлении уменьшения адресов. Элементами стека являются двухбайтовые значения, которые могут трактоваться ФОРТ-словами различным образом - например, как целые числа со знаком, положительные адреса оперативной памяти, 16-разрядные двоичные значения.
	Стек возвратов имеет структуру, аналогичную структуре стека данных и используется ФОРТ-системой особым образом при выполнении ФОРТ-программ.
	Начальную часть адресного пространства занимает словарь, содержащий ФОРТ-определения во внутреннем виде (словарные статьи) и различные данные. Словарь по мере пополнения исходного набора слов ФОРТ-системы растет в сторону увеличения адресов.
	В старших адресах памяти ФОРТ-системы располагаются также буфер для построчного ввода текста с терминала (его размер составляет 80 байт (1 строка текста на дисплее) и буфер для обмена с дисковой памятью объемом 1К байт.


3. Стек данных и постфиксная нотация.

	ФОРТ-слова при выполнении обмениваются данными через стек. Каждое слово, требующее входных аргументов, снимает их со стека и возвращает вырабатываемые значения на том же стеке. Наличие аппаратного стека в микропроцессоре i8086/i8088 позволяет легко реализовать работу со стеком данных в ФОРТ-системе.
	Стековый механизм передачи информации естественным образом определяет используемую в языке ФОРТ запись вычислений, а именно, постфиксную или обратную польскую запись. В постфиксной записи операнды предшествуют мнемоническому обозначению операции, и вычисления проводятся последовательно слева направо. В постфиксной записи нет скобок, и не учитывается приоритет операций. Ниже для примера приведен ряд арифметических выражений, записанных в традиционной записи и в виде постфиксных выражений.

	Обычная запись       Постфиксная запись

	3+7                  3 7 +
	a*x+b                a x * b +
	(3+a)/2+b-1          3 a + 2 / b + 1 -

	Рассмотрим для примера процесс вычисления ФОРТ-системой последнего из приведенных выражений.

	1. На стек данных помещается целочисленное значение 3.
	2. Выполняется слово с именем "a". Предполагается, что это слово вырабатывает на стеке некоторое числовое значение (например, "a" может быть обозначением целочисленной константы).
	3. Выполняется слово "+" - операция сложения. Слово "+" складывает два верхних значения стека данных, помещая вместо них результат сложения.
	4. На стек помещается значение 2.
	5. Слово "/" производит операцию целочисленного деления двух верхних элементов стека, помещая на стек результат выполнения операции.
	6. Слово "b" при выполнении помещает на стек некоторое числовое значение.
	7. Выполняется операция сложения (см. п. 3)
	8. На стек помещается значение 1.
	9. Выполняется операция вычитания.

	В результате выполнения указанной последовательности действий на стеке данных остается некоторое значение, являющееся результатом вычисления арифметического выражения.
	В ФОРТ-системе принято следующее соглашение: если при выполнении последовательности слов, некоторое слово не обнаруживается в словаре ФОРТ-системы, то делается попытка рассматривать данное слово как запись числового литерала. При этом учитывается текущее основание системы счисления, которое может меняться в зависимости от требуемого формата ввода или вывода чисел. При успешном анализе числа его машинное представление помещается на верхушку стека данных, в противном случае ФОРТ-системой выдается сообщение об ошибке.
	В последующих разделах приводится краткое описание основных стандартных слов языка ФОРТ-83 и правила их использования. Полное описание слов с указанием аргументов, результатов и семантики выполнения приводится в приложении 1.
	Для описания слов используется запись следующего вида:

	name		stack-1 --- stack-2

здесь name - имя слова;
	 stack-1 - состояние стека до выполнения слова (точнее говоря, верхних его элементов, которые используются словом name  в качестве входных параметров);
	 stack-2 -  состояние стека после выполнения слова name. Верхнее значение в списке элементов стека находится справа. Так, например, описание операции сложения выглядит следующим образом:

	+      n1 n2 --- n   сложение n=n1+n2

	Элементы стека в зависимости от того, как они трактуются теми или иными ФОРТ-словами, обозначаются следующим образом:

	addr	-	адрес в оперативной памяти - положительное число в диапозоне 0-65535
	b	-	8-разрядное значение (байт). Старшие 8 битов слова - нулевые.
	c	-	символ в коде ASCII.
	d	-	32-битовое целое число со знаком, на стеке данных представляется двумя элементами.
	f	-	логическое значение; 0 = FALSE, -1 = TRUE
	n	-	16-разрядное целое число со знаком в диапазоне от -32768 до +32768.
	u	-	16-разрядное число без знака в диапазоне от 0 до 65535.
	ud	-	32-разрядное число без знака


4. Операции над стеком

	К данной группе операций относятся слова, производящие действия над элементами стека, и не изменяющие значения самих элементов.

	DUP		n --- n n		дублирование верхушки стека
	DROP		n ---		сброс верхнего элемента стека
	OVER		n1 n2 --- n1 n2 n1
						дублирование второго сверху элемента стека
	ROT		n1 n2 n3 --- n2 n3 n1
						циклическая перестановка трех верхних элементов
	SWAP		n1 n2 --- n2 n1
						перестановка двух верхних элементов стека
	PICK		nk ... n1 n0 k  --- nk ... n1 n0 nk
						дублирование k-го сверху элемента
	ROLL		nk  nk-1 ... n1 n0 k  --- nk-1 ... n1 n0 nk
						циклическая перестановка k верхних элементов

     Для работы с 32-разрядными числами используются
следующие операции над элементами стека:

	2DUP		d --- d d		дублирование двойного значения
	2DROP	d ---		сброс верхнего двойного значения
	2OVER	d1 d2 --- d1 d2 d1
						дублирование второго сверху двойного значения
	2ROT		d1 d2 d3 --- d2 d3 d1
						циклическая перестановка трех верхних двойных значений
	2SWAP	d1 d2 --- d2 d1
						перестановка двух верхних двойных значений

	Для повышения эффективности операции над элементами стека данных реализуются, как правило, непосредственно в машинном коде и не предусматривают контроля за ошибочными ситуациями, такими как переполнение или опустошение стека данных.


5. Доступ к памяти

	Для записи и чтения данных из оперативной памяти, входящей в адресное пространство ФОРТ-системы используются следующие слова:

	@  	 addr  --- n	чтение слова n по адресу addr
	C@	 addr  --- b	чтение байта b по адреcу addr
     !	n addr ---	запись слова n по адресу addr
     C!   b addr ---	запись байта b по адресу addr

	Для доступа к 32-разрядным числам, хранящимся в памяти, имеются слова:

   2@	addr --- d    чтение двойного числа по адресу addr
   2!	d addr ---    запись двойного числа по адресу addr

	При размещении в памяти двойных значений в меньших адресах располагаются старшие 16 разрядов двойного числа, в больших адресах - младшие 16 разрядов.
	Для работы с последовательными участками памяти могут быть использованы команды пересылки данных:

	CMOVE     addr1 addr2 n ---
		пересылка n байтов с адреса addr1 по адресу addr2
	CMOVE>	addr1 addr2 n ---
		пересылка  n байтов с адреса addr1 по адресу addr2 		в направлении уменьшения адресов

	Выполнение этих слов различается только тогда, когда области источника и получателя перекрываются.
	Для доступа к данным в оперативной памяти вне основного сегмента ФОРТ-системы, имеются следующие слова:

	@L		n addr --- n1
			чтение слова n1 по адресу n:addr
	C@L		n addr --- b
			чтение байта b по адресу n:addr
	!L		n n1 addr ---
			запись слова n по адресу n1:addr
	C!L		b n adr ---
			запись байта b по адресу n:addr
	CMOVEL	n1 addr1 n2 addr2 n ---
			пересылка n байтов с адреса n1:addr1 по адресу n2:addr2 в направлении увеличения адресов
	CMOVEL>	n1 addr1 n2 addr2 n ---
			пересылка n байтов с адреса n1:addr1 по адресу n2:addr2 в направлении уменьшения адресов
	MOVEL	n1 addr1 n2 addr2 n ---
			пересылка n слов с адреса n1:addr1 по адресу n2:addr2


6. Арифметические операции

	Стандартом языка ФОРТ предусматриваются следующие арифметические операции над 16-разрядными целыми числами со знаком.

6.1 Двухместные операции

	+	n1 n2 --- n	сумма n=n1+n2
	-	n1 n2 --- n	разность n=n1-n2
	*	n1 n2 --- n	произведение n=n1*n2
	/	n1 n2 --- n	целочисленное частное от деления n1/n2
	MOD	n1 n2 --- n	остаток от деления n1/n2
	/MOD	n1 n2 --- n3 n4
					n4 - частное от деления n1/n2, n3 - остаток от деления n1/n2

6.2 Одноместные операции

     ABS       n --- n1    абсолютная величина
     NEGATE    n --- n1    значение с обратным знаком n1=-n
     1+        n --- n1    увеличение на 1 - n1=n+1
     1-        n --- n1    уменьшение на 1 - n1=n-1
     2+        n --- n1    увеличение на 2 - n1=n+2
     2-        n --- n1    уменьшение на 2 - n1=n-2
     2*        n --- n1    умножение  на 2 - n1=n*2
     2/        n --- n1    деление на 2 - n1=n/2

	При сложении, вычитании и умножении в случае возникновения переполнения разрядной сетки используются младшие 16 разрядов полученного результата, т.е. результат берется по модулю 65536. Это позволяет получать одинаковые результаты выполнения операций независимо от того, как трактуются операнды - как числа со знаком в диапазоне от -32768 до  +32767 или как числа без знака в диапазоне от 0 до 65535.
	В операциях деления /, MOD, и /MOD  операнды рассматриваются как числа со знаком. В языке ФОРТ используется деление с нижней границей: остаток имеет знак делителя или равен нулю, а частное округляется до ближайшего целого, не превышающего частное.
	При выполнении деления возможно возникновение ошибочных ситуаций - деление на нулевое значение и переполнение, возникающее при делении -32768 на -1.
	Одноместные операции ABS и NEGATE игнорируют переполнение при значении операнда, равном -32768, возвращая при этом в качестве результата ноль.
	Операции 1+, 1-, 2+, 2-, 2*, 2/ включены в язык ввиду их частого использования и реализованы наиболее эффективным образом.
	Для повышения точности вычислений в язык включены слова:

	*/		n1 n2 n3 --- n		частное от (n1*n2)/n3
	*/MOD	n1 n2 n3 --- n4 n5	n5 частное от (n1*n2)/n3, n4  остаток от (n1*n2)/n3

	При выполнении данных слов промежуточный результат n1*n2 вычисляется с двойной точностью, и при делении на n3 используются все 32 разряда. Окончательные результаты представляются в виде 16-разрядных чисел.
	Помимо 16-разрядной арифметики в язык ФОРТ включается набор операций над 32-разрядными целыми числами. Диапазон представления двойных чисел составляет от -2147483648 до +2147483647 (без учета знака - от 0 до 4294967295). При размещении на стеке данных двойное число занимает два элемента: верхний содержит старшие разряды числа, нижний - младшие разряды. Таким образом двойное число на стеке может быть преобразовано к обычной точности операцией DROP. Расширение для двойных чисел включает следующий набор слов:

     D+ 	     d1 d2 --- d   сумма d=d1+d2
     D- 	     d1 d2 --- d   разность d=d1-d2
     DABS	         d --- d   абсолютная величина d1=abs(d)
     DNEGATE	    d --- d   число с обратным знаком d1=-d

	В данную реализацию ФОРТ-системы включены также операции:

     D* 	  d u --- d   произведение d1=d*u
     D/ 	  d u --- d   частное d1=d/u
            (здесь u - 16-разрядное целое число без знака)
     DMAX	d1 d2 --- d   максимум d=max(d1,d2)
     DMIN	d1 d2 --- d   миниимум d=min(d1,d2)

	Имеется также ряд слов для выполнения арифметических операций с операндами различной точности:

	UM*		u1 u2 --- ud	32-разрядное произведение ud=u1*u2
	UM/MOD	ud u1 --- u2 u3
						u3 - частное от деления ud/u1 u2 - остаток от деления ud/u1


7. Логические операции

	Логические операции используют в качестве операндов 16-разрядные двоичные числа. Выполняются логические операции в ФОРТе поразрядно, над всеми 16 разрядами операндов:

     AND   n1 n2 --- n	 логическое И (конъюнкция)
                          n=n1 AND n2
     OR    n1 n2 --- n	 логическое ИЛИ (дизъюнкция)
                          n=n1 OR n2
     XOR   n1 n2 --- n	 исключающее ИЛИ
                          n=n1 XOR n2
     NOT       n --- n1   логическое НЕ (отрицание)
                          n1=NOT n

	Для логических констант ИСТИНА и ЛОЖЬ в ФОРТе приняты стандартные представления:

    TRUE  - представляется числом с 1 во всех разрядах, т.е. эквивалентно -1 или 65535;
    FALSE - представляется нулевым значением.


8. Операции сравнения

	Операции сравнения снимают со стека свои операнды и оставляют на стеке логические значения TRUE или FALSE (-1 или 0) в зависимости от результата сравнения.
	В ФОРТе имеются следующие слова для операций сравнения.

     <	  n1 n2 --- f	n1 меньше n2
     =	  n1 n2 --- f	n1 равно n2
     >	  n1 n2 --- f	n1 больше n2
     <=     n1 n2 --- f	n1 меньше либо равно n2
     >=     n1 n2 --- f	n1 больше либо равно n2
     <>     n1 n2 --- f	n1 не равно n2

	Для сравнения 16-разрядных чисел без знака (например, для сравнения адресов в диапазоне от 0 до 65535) используются слова:

     U<   u1 u2 --- f	u1 меньше u2
     U>   u1 u2 --- f	u1 больше u2

	Ввиду частого использования в основной набор ФОРТ-слов включены одноместные операции сравнения с нулем:

     0<   n --- f   n меньше 0
     0=   n --- f   n равно 0
     0>   n --- f   n больше 0

	Расширение для чисел двойной точности включает следующие операции сравнения 32-разрядных чисел:

     D0=	       d --- f   d равно 0
     D<      d1 d2 --- f   d1 меньше d2
     D=      d1 d2 --- f   d1 равно d2
     D<=     d1 d2 --- f   d1 меньше либо равно d2
     D>=     d1 d2 --- f   d1 больше либо равно d2
     D<>     d1 d2 --- f   d1 не равно d2
     DU<   ud1 ud2 --- f   ud1 меньше ud2 (сравнение для
                           двойных чисел без знака)


9. Структуры управления

	Структуры управления используются в языке ФОРТ, так же как и в других языках программирования для организации условного и многократного выполнения фрагментов ФОРТ-программ.
	Особенностью языка ФОРТ является то, что управляющие структуры реализуются в виде стандартных определений, включаемых в словарь ФОРТ-системы. Таким образом, набор управляющих структур может быть при необходимости изменен или дополнен.
	Управляюшие структуры могут использоваться только внутри определений и не могут использоваться в режиме интерпретации. Они реализуются в виде компилирующих слов с признаком немедленного исполнения. При вызове эти слова порождают в формируемой словарной статье код для проверки условий выполнения фрагментов ФОРТ-программы и необходимых команд перехода.
	Запись управляющих структур на ФОРТе должна удовлетворять определенным синтаксическим правилам, задающим порядок соответствующих компилирующих слов. Кроме того, каждая структура управления должна быть завершена внутри одного определения. Так, например, нельзя использовать слово IF для условного предложения в одном определении, а соответствующее ему слово THEN - в другом, даже если выполняться они будут в правильной последовательности. Допускается произвольная вложенность одних управляющих структур в другие.
	Правильность использования слов, реализующих управляющие структуры, проверяется при их выполнении на этапе компиляции содержащего их определения.

	Основными управляющими структурами в ФОРТе являются следующие:

     Условные предложения    IF ... THEN
                             IF ... ELSE ... THEN

     Циклы со счетчиком      DO ... LOOP  и  ?DO ... LOOP
                             DO ... +LOOP и  ?DO ... +LOOP

     Циклы с условием    BEGIN ... AGAIN
     завершения          BEGIN ... UNTIL
                         BEGIN ... WHILE ... REPEAT

     Оператор выбора   CASE
                        ... OF ... ENDOF
                        . . . . . . . .
                        ... OF ... ENDOF
                        ... ENDCASE

	Оператор выбора CASE не является стандартной структурой управления, однако традиционно используется при программировании на ФОРТе.


Описание управляющих структур


	1. IF ... THEN

	Формат записи:

	flag IF words THEN

	Выполнение: проверяется значение flag на верхушке стека, при этом flag со стека сбрасывается. Если значение flag отлично от FALSE (т.е. не равно нулю), то выполняется последовательность слов words, в противном случае ветвь words пропускается, и управление сразу передается на код, расположенный непосредственно за соответствующим THEN.

	Пример.

	Проверка на равенство нулю находящегося на верхушке стека числа.

     : NON-ZERO-MESSAGE
       IF ." Число не равно нулю!" THEN ;
     ok
     1 NON-ZERO-MESSAGE
     Число не равно нулю!
     ok
     0 NON-ZERO-MESSAGE
     ok


     2. IF ... ELSE .. THEN

     Формат записи:

	  flag IF words-1 ELSE words-2 THEN

	Выполнение: в зависимости от значения flag на верхушке стека выполняется либо фрагмент words-1 (при значении flag, отличном от нуля), либо фрагмент words-2 (при значении flag, равном нулю), после чего управление передается на код, расположенный непосредственно за соответствующим THEN. Значение flag сбрасывается со стека.

     Пример

     Проверка знака числа.

     : NEG-TEST
       ." Число " DUP .
       0<
       IF ." отрицательно" ELSE ." не отрицательно" THEN   ;
     ok
     1 NEG-TEST
     Число 1 не отрицательно
     ok
     -2 NEG-TEST
     Число -2 отрицательно
     ok

     3. DO ... LOOP

     Формат записи:

	  limit index DO words LOOP

	Выполнение: перед выполнением цикла на верхушке стека должны находиться начальное значение счетчика цикла index и его конечное значение limit. При входе в цикл оба указанных значения снимаются со стека, и значение index устанавливается в качестве текущего значения счетчика цикла. После выполнения последовательности слов words, составляющей тело цикла, текущее значение счетчика увеличивается на 1, и выполнение тела цикла повторяется до тех пор, пока значение счетчика не пересечет границу между величинами limit-1 и limit при переходе от прежнего значения счетчика к новому.
	Для того, чтобы прервать выполнение цикла до момента достижения его счетчиком граничного значения, внутри цикла может быть использовано специальное слово LEAVE, которое передает управление на выполнение кода, расположенного непосредственно за соответствующим данному циклу словом LOOP.
	Внутри тела цикла текущее значение счетчика может быть помещено на стек с помощью слова I. Слово J, в свою очередь, позволяет получить на стеке текущее значение счетчика для самого внутреннего цикла, статически объемлющего данный цикл.

     Примеры

	Печать квадратов первых десяти натуральных чисел.

     : SQUARES
       11 1 DO I I * . LOOP ;
     ok
     SQUARES
     1 4 9 16 25 36 49 64 81 100
     ok

	Печать таблицы умножения размером 4 * 3 для первых натуральных чисел.

     : MULTIPLY-TABLE
       4 1 DO
	   5 1 DO
	       J . ." * " I . ASCII = . I J * 2 .R 3 SPACES
	   LOOP CR
       LOOP ;
     ok
     MULTIPLY-TABLE
	1 * 1 = 1	  1 * 2 = 2   1 * 3 = 3	 1 * 4 = 4
	2 * 1 = 2	  2 * 2 = 4   2 * 3 = 6	 2 * 4 = 8
	3 * 1 = 3	  3 * 2 = 6   3 * 3 = 9	 3 * 4 =12
     ok

	Следует отметить, что тело цикла DO ... LOOP всегда выполняется по крайней мере один раз, независимо от исходных значений параметров цикла index и limit. При одинаковых значениях index и limit цикл DO ... LOOP проработает 65535 раз. В данной реализации ФОРТа имеется также цикл ?DO ... LOOP, который имеет следующий формат записи:

     limit index ?DO words LOOP

	Данный вид цикла отличается от цикла DO ... LOOP тем, что тело цикла words не выполняется ни разу, если исходные значения параметров limit и index равны между собой.
     Пример

     : ?DO-LOOP-TEST
       ?DO ." Вызов тела цикла" CR LOOP ;
     ok
     2 0 ?DO-LOOP-TEST
     Вызов тела цикла
     Вызов тела цикла
     ok
     0 0 ?DO-LOOP-TEST
     ok

     4. DO ... +LOOP

     Формат записи:

	  limit index DO words increment +LOOP

	Выполнение: отличается от выполнения цикла DO ... LOOP тем, что после каждого завершения тела цикла words текущее значение счетчика цикла увеличивается не на 1, а на величину increment, которая должна быть помещена на верхушку стека перед выполнением +LOOP. Таким образом, данная конструкция позволяет строить циклы с произвольным фиксированным, а также с переменным шагом приращения счетчика.

     Примеры

     : T1 0 10 DO I . -1 +LOOP ;
     ok
     T1
     10 9 8 7 6 5 4 3 2 1 0
     ok
     : T2 100 1 DO I . I +LOOP ;
     ok
     1 2 4 8 16 32 64
     ok

	Допускается также использование данного цикла в виде ?DO ... +LOOP с проверкой исходных значений параметров limit и index (см. описание цикла ?DO ... LOOP).

	Замечания

	При работе циклов со счетчиками для хранения параметров цикла используется три элемента на стеке возвратов, что накладывает ряд ограничений на действия, выполняемые в теле цикла. Так, например состояние стека возвратов в начале выполнения тела цикла должно совпадать с состоянием в конце выполнения тела. Нельзя также осуществлять принудительный выход из цикла с использованием слов типа EXIT, не сняв предварительно со стека возвратов используемые при работе цикла вспомогательные значения. Кроме того, следует иметь в виду, что временные данные, помещаемые на стек возвратов внутри тела цикла, делают невозможным доступ к счетчикам циклов с использованием слов I и J.

     5. BEGIN ... AGAIN

     Формат записи:

	  BEGIN words AGAIN

	Выполнение: последовательность слов words повторяется в бесконечном цикле, выход из которого возможен либо при возникновении ошибочной ситуации, либо при выполнении внутри последовательности words действий, завершающих интерпретацию слова, содержащего внутри себя данный бесконечный цикл (например, с использованием слов типа EXIT, QUIT или ABORT).

     Пример

	Ввод символов с клавиатуры с одновременным их отображением на экране терминала.

     : INKEY-ECHO BEGIN KEY EMIT AGAIN ;
     ok

     6. BEGIN ... UNTIL

     Формат записи:

	  BEGIN words flag UNTIL

	Выполнение: после выполнения последовательности слов words проверяется значение признака flag, находящегося в данный момент на верхушке стека. Если значение flag равно нулю, то выполнение последовательности words повторяется, в противном случае управление передается на код, расположенный непосредственно за словом UNTIL. Следует отметить, что в данном виде цикла, как и в цикле DO ... LOOP, тело цикла выполняется по крайней мере один раз.
	Стек возвратов словами BEGIN и UNTIL не используется.

     Пример

	Ввод символов с клавиатуры и отображение их на экране терминала до тех пор, пока не будет нажата клавиша Return (возврат каретки).

     : INKEYS BEGIN KEY DUP EMIT 13 = UNTIL ;
     ok

     7. BEGIN ... WHILE ... REPEAT

     Формат записи:

	  BEGIN words-1 flag WHILE words-2 REPEAT

	Выполнение: на каждом очередном шаге цикла после выполнения последовательности слов words-1 проверяется значение признака flag на верхушке стека. Если значение flag отлично от нуля, выполняется последовательность слов words-2, и цикл повторяется. В противном случае управление передается на код, расположенный непосредственно за словом REPEAT.

     Пример

	Поиск и печать адреса первого ненулевого байта в последовательности байтов, начинающейся с адреса, задаваемого на верхушке стека.

     : SEARCH BEGIN DUP C@ WHILE 1+ REPEAT . ;


     8. CASE ... OF ... ENDOF ... ENDCASE

     Формат записи:

	  parameter CASE
	    match-1 OF words-1 ENDOF
	    match-2 OF words-2 ENDOF
	    . . . . . . . . . . . .
	    match-n OF words-n ENDOF
	    default words
	  ENDCASE

	Выполнение: значение parameter на верхушке стека при входе в конструкцию CASE поочередно сравнивается со значениями match-i (i=1...n), каждое из которых должно задаваться последовательностью слов, вырабатывающих на стеке один элемент (например, числовой литерал). В случае совпадения значения parameter с одним из значений match-i оба значения снимаются со стека и выполняется соответствующая последовательность слов words-i, после чего управление передается на код, расположенный непосредственно за словом ENDCASE. Если значение parameter не совпало ни с одним из значений match-i, выполняется последовательность слов default words, при этом исходное значение parameter сохраняется на стеке и сбрасывается словом ENDCASE по завершении выполнения ветви default words.

     Пример

	Печать названия одного из первых трех натуральных чисел (исходное число находится на верхушке стека).

     : NUMBER-NAME
	CASE
	 1 OF ." Один" ENDOF
	 2 OF ." Два"  ENDOF
	 3 OF ." Три"  ENDOF
	 ." Число " DUP .
	 ." либо меньше 1, либо больше 3"
	 ENDCASE
     ok
     2 NUMBER-NAME
     Два
     ok
     4 NUMBER-NAME
     Число 4 либо меньше 1, либо больше 3
     ok

	Для организации переходов при реализации структур управления используются следующие слова:

	BRANCH	---		продолжить интерпретацию от значения следующего скомпилированного адреса
	?BRANCH 	f ---	при f=TRUE выполняется как BRANCH, иначе - продолжить интерпретацию от адреса, следующего за адресом перехода.


10. Ввод данных

	Для ввода информации с клавиатуры в системе АстроФОРТ имеется набор слов, позволяющих осуществить ввод отдельных символов, строк и чисел.
	Для непосредственной работы с клавиатурой и посимвольного ввода предусмотрены следующие слова:

	?TERMINAL		--- b	опрос буфера клавиатуры
	KEY			--- f	ввод символа с клавиатуры
	PCKEY		--- b	ввод управляющего символа
				--- b 0	с клавиатуры
	WAIT			--- 		ожидание нажатия клавиши
	CLEAR-KEYBRD	--- 		сброс буфера клавиатуры
	KEYBRD		--- b	опрос состояния клавиатуры
	?RSHIFT		--- f	проверка нажатия клавиши Right-Shift
	?LSHIFT		--- f	проверка нажатия клавиши Left-Shift
	?SHIFT		--- f	проверка нажатия клавиши Shift (т.е. любой из клавиш Right-Shift или Left-Shift)
	?SCROLL-LOCK	--- f	проверка установки режима Scroll Lock

	Для ввода последовательности символов (строки) в ФОРТ-системе имеются процедуры:

	EXPECT	addr n ---	ввод строки символов с терминала
	WORD		c ---		ввод строки символов из входного потока до ограничителя c


11. Вывод информации

	Вывод текстовых и числовых данных на дисплей (печатающее устройство) может быть осуществлен с использованием следующих слов:

	EMIT			c ---	вывод символа с кодом c
	CR			  ---	переход на новую строку
	?CR			  ---	переход на новую строку при непустой текущей строке
	TYPE		addr n ---	вывод строки символов
	SPACE		  ---	вывод пробела
	SPACES		n ---	вывод n пробелов
	."			  ---	печать строкового литерала (компиляция)
	".		  addr ---	печать строки
	.(			  ---	печать строкового литерала (компиляция и интерпретация)

	Для печати числовых значений используются слова:

	.		n ---  бесформатная печать числа со знаком
	U.		u ---  бесформатная печать числа без знака
	D.		d ---  бесформатная печать двойного числа
	.R    n1 n2 ---  форматная печать числа со знаком
	U.R	   u n ---  форматная печать числа без знака
	D.R	   d n ---  форматная печать двойного числа

	Для форматной печати чисел имеется набор слов, позволяющих преобразовывать числа из машинного представления в строку символов. Эти слова работают с числами двойной точности. Для преобразования используется временный буфер PAD, заполняемый в направлении уменьшения адресов. Сформированное в буфере текстовое представление числа может быть напечатано словом TYPE. Набор слов для преобразования чисел включает следующие слова:

	PAD		--- addr		выдача адреса текстового буфера
	HLD		--- addr		указатель текущей позиции выходного буфера
	#S	   d --- 0 0		перевод двойного числа в текстовый вид
	<#	   d --- d		начало преобразования числа
	#	   d --- d		выделение очередной цифры числа
	#>	   d --- addr n	завершение преобразования числа
	HOLD	   c ---			занесение символа в буфер вывода
	SIGN	   n ---			занесение знака числа в выходной буфер

	Для задания устройства вывода используются слова:

     CONSOLE  ---  установка вывода на дисплей
     PRINTER  ---  установка вывода на печатающее устройство

	После выполнения слов CONSOLE (PRINTER) все данные, выводимые  с использованием основных процедур EMIT и TYPE, будут выводиться на соответственно на дисплей или печатающее устройство вплоть до очередного переключения устройства вывода.
	Для работы с данными, хранящимися во внешней памяти, может использоваться набор интерфейсных процедур (см. раздел 20).


12. Определяющие слова

	Одной из особенностей языка ФОРТ, которая выделяет его среди других языков программирования, является возможность введения порождающих понятий, позволяющих создавать в языке средства для решения требуемых задач.
	Новые понятия (определяющие слова) вводятся с помощью определений через двоеточие с использованием специальных слов CREATE и DOES>. Определяющие слова задаются в виде:

     : name CREATE create-part DOES>  does-part ;

Здесь name - имя определяюшего слова;
	create-part (создающая часть) - последовательность слов,  выполняющаяся при определении с помощью	определяющего слова name некоторого нового слова	name-1;
	does-part (выполняющая часть) - последовательность слов, выполняемая при вызове слова name-1.
	Слово CREATE создает словарную статью с именем, считываемым из входного потока и добавляет ее в словарь ФОРТ-определений, после чего выполняется создающая часть определяющего слова. Слово DOES>, указывающее на конец создающей части, эавершает выполнение слова name. Некоторое новое слово name-1 может быть определено через слово name следующим образом:

     [ parameters ] name name-1

где parameters - возможные входные параметры определяющего слова name.
	При выполнении определенного через name слова name-1 на стек помещается адрес поля параметров слова name-1, а затем выполняется последовательность слов, заключенных между DOES> и ";" в соответствующем определяющем слове name.
	Выполняющая часть does-part может быть определена на ФОРТ-ассемблере. Для этого определяющее слово задается в виде:

	: name CREATE create-part ;CODE  does-part END-CODE

Здесь does-part - последовательность команд ФОРТ-ассемблера.
	Основной набор определяющих слов в системе АстроФОРТ включает следующие слова:

     :		 - определение выполняемой процедуры
     CONSTANT	 - определение целочисленной константы
     VARIABLE	 - определение целочисленной переменной
     2CONSTANT	 - определение константы двойной точности
     2VARIABLE	 - определение переменной двойной точности
     CODE		 - определение ассемблерного слова
     USER		 - определение пользовательской переменной
     VOCABULARY - определение словаря
     WINDOW	 - определение окна
	TASK		 - определение фоновой задачи
	HANDLE     - определение дескриптора файла
	DIRECTORY  - определение блока управления директорией


13. Пользовательский оконный интерфейс

	Окно в системе АстроФОРТ рассматривается как специальный вид определения, с которым помимо выполняемой процедуры связывается прямоугольная область вывода на экране дисплея. При вызове оконного определения (открытии окна) - на экране отображается соответствующая область вывода - отрисовывается бордюр окна (при его наличии), внутренняя часть окна заполняется пробелами. Во время выполнения оконного определения  все процедуры управления выводом на терминал (вывод символов и строк символов, перемещение курсора, протяжка экрана и т.п.) работают только в рамках соответствующего окна.
	По завершении выполнения оконного определения  (закрытии окна) восстанавливается скрытое на время ее выполнения изображение на экране дисплея, а также некоторая информация для процедур вывода - цветовые характеристики, положение и размер курсора и т.п.
	Оконные определения выполняются в стековом режиме. Динамически последнее открытое окно называется активным.      С каждым оконным определением связывается набор атрибутов, задающих размер и расположение окна на экране, форму и цвет окаймления (бордюра), цвет внутренней области окна и т.д. Часть атрибутов задается непосредственно при определении окна, часть задается с помощью сервисных процедур. Значения оконных атрибутов хранятся в специальной области памяти - блоке управления окном WCB (Window Control Block) - связываемой с каждым оконным определением. Адресом блока управления окном считается адрес поля кода CFA соответствующей словарной статьи. Значения приписанных окну атрибутов могут изменяться динамически. При изменении некоторых атрибутов окна производится соответствующее изменение изображения на экране - отрисовка нового бордюра, изменение его цвета, изменение цвета внутренней области окна. Для активного окна возможно также изменение расположения и размеров окна.
     Процедуры доступа к значениям атрибутов и процедуры манипуляции с окнами работают, как правило, с активным окном.
     Определение окна имеет следующий вид:

     lx uy width height WINDOW name body ;

	Здесь lx, uy width, height -	параметры расположения окна на экране дисплея:
	lx, uy -  x и y координаты левого верхнего угла
	width  -	ширина внутренней области  окна в знакопозициях
	height -	высота окна в строках экрана
	name	  -	имя оконного определения, под которым оно помещается в словарь
	body	  -	тело оконной процедуры. Задается в виде, аналогичном определению через двоеточие, как последовательность ФОРТ-слов.

	Для задания дополнительных атрибутов используется набор сервисных процедур. Адрес блока управления окном WCB-addr, используемый как параметр указанных процедур, может быть получен применением слова ' в виде: ' name (в режиме компиляции - применением слова [']). Адрес блока управления активным окном может быть получен с помощью слова ACTIVE.

	SET-LOCATION	lx uy width height WCB-addr ---
			изменение размеров и расположения окна
     SET-BORDER	n WCB-addr ---
			задание типа бордюра
     SET-BRDCOL	background foreground WCB-addr ---
			задание цвета бордюра
     SET-INTCOL	background foreground WCB-addr ---
			задание цвета внутренней области
     SET-PROC		addr WCB-addr ---
			изменение оконной процедуры
     SET-INF		n WCB-addr ---
			задание дополнительной информации (Под дополнительной информацией здесь понимается произвольное 16-разрядное значение, сохраняемое в блоке управления окном. Дополнительная информация может использоваться при работе с окнами произвольным образом).
     CENTER		WCB-addr ---
			центрирование окна относительно  экрана (изменение его атрибутов расположения

	Для доступа к значениям атрибутов активного окна используются следующие функции:

	W.HEIGHT	  --- b		высота окна
	W.WIDTH	  --- b		ширина окна
	W.LX		  --- b		x-координата левого верхнего угла
	W.UY		  --- b		y-координата левого верхнего угла
	W.X		  --- b		текущая x-координата курсора
	W.Y		  --- b		текущая y-координата курсора
	W.BRDCOL	  --- b		цветовой байт бордюра
	W.INTCOL	  --- b		цветовой байт внутренней области
	W.BRDTYPE	  --- n		тип бордюра
	W.SAVEADDR  --- addr	адрес области сохранения скрытой части экрана
	W.LINK	  --- addr	адрес WCB предшествующего окна
	W.INF	  --- n		дополнительная информация

	Адреса перечисленных атрибутов могут быть получены с использованием слов, в именах которых символы "." заменены на "-", например, W-HEIGHT, W-WIDTH, W-UY и т.д.
	С использованием атрибутов, значения которых хранятся в блоке управления окном, реализованы слова, выдающие некоторые дополнительные характеристики окон:

     W.RX	  --- n      x-координата правого нижнего угла
     W.DY	  --- n      y-координата правого нижнего угла

     Атрибуты расположения и размеры окна с учетом бордюра:

     W.LX'       --- n   x-координата левого верхнего угла
     W.UY'       --- n   y-координата левого верхнего угла
     W.RX'       --- n   x-координата правого нижнего угла
     W.DY'       --- n   y-координата правого нижнего угла
     W.HEIGHT'   --- n   высота окна с бордюром
     W.WIDTH'    --- n   ширина окна с бордюром
	W.SIZE'     --- n	размер области памяти, требуемой для сохранения окна

	Очевидно, что для окон без бордюра значения данных атрибутов совпадают со значениями соответствующих атрибутов для внутренней части окна.
	Изменение размеров и перемещение активного окна по экрану может быть осуществлено с помощью следующих процедур.

     MOVE-UP	  ---	 перемещение окна вверх
     MOVE-DOWN	  ---	 перемещение окна вниз
     MOVE-LEFT	  ---	 перемещение окна влево
     MOVE-RIGHT  ---	 перемещение окна вправо
     V-EXPAND	  ---	 увеличение размера по вертикали
     V-CONTRACT  ---	 уменьшение размера по вертикали
     H-EXPAND	  ---	 увеличение размера по горизонтали
     H-CONTRACT  ---	 уменьшение размера по горизонтали


14. Работа с внешней памятью

	В языке ФОРТ  используется механизм виртуальной экранной памяти, реализуемый средствами файловой системы ДОС. Экранная память ФОРТ-системы состоит из множества внешних файлов. Экранный файл может иметь произвольное имя в файловой системе ДОС, однако, при отсутствии в имени файла расширения, процедурами доступа используется по умолчанию расширение .SCR. Каждый файл делится на блоки (экраны) размером 1024 байта. Блок идентифицируется целым числом в диапазоне от 0 до 32767. В адресном пространстве ФОРТ-системы для обмена с экранными файлами выделяется буферный пул. В данной реализации системы буферный пул рассчитан на хранение одного блока, однако для повышения эффективности работы применяется механизм дополнительной буферизации с использованием буферной области, расположенной вне адресного пространства ФОРТ-системы.
	Текущий экранный файл может быть изменен выполнением слова USING в виде

     USING [d:]filename

где d: - имя внешнего устройства, filename - имя экранного файла.
	При отсутствии требуемого файла filename в текущей директории устройства d: выдается сообщение об ошибке.      Для доступа к текущему экранному файлу используются следующие процедуры:

	BLOCK	  n --- addr  -	считывание блока с номером n
	BUFFER	  n --- addr  -	выдача адреса буфера для блока n
	UPDATE	    ---	    -	установка признака модификации текущего блока
	BLOCK-READ    ---	    -	физическое чтение текущего блока с диска
	BLOCK-WRITE   ---	    -	физическая запись текущего блока на диск
	LAST-SCR	    --- n     -	номер последнего экрана в текущем файле

	При выполнении операций чтения и записи блоков в переменную DISK-ERROR помещается код ответа, равный нулю при успешном выполнении операции и отличный от нуля при обнаружении ошибок. По завершении работы с текущим файлом для фиксирования изменений во внешней памяти должна быть выполнена операция FLUSH, записывающая на диск модифицированные блоки.
	Для доступа к произвольным файлам и директориям ДОС реализован набор интерфейсных процедур, работающих с дескрипторами файлов (см. раздел 20).
	Для работы с текстовыми экранными файлами в системе АстроФОРТ предусмотрен полноэкранный редактор, работа с которым описана в руководстве пользователя [2].


15. Управление выводом на дисплей

	Все процедуры, управляющие выводом на экран дисплея, работают в рамках активного окна. К процедурам управления выводом относятся процедуры задания цветовых атрибутов выводимых символов, перемещения курсора, установки режимов протяжки окна и т.п.

15.1 Установка цветовых атрибутов

	BACKGROUND   n ---		задание цвета фона
	FOREGROUND   n ---		задание цвета символов
	COLOR-BYTE	--- addr	адрес текущего цветового байта
	?COLOR		--- b	значение текущего цветового байта
	!COLOR	   b ---		установка цветового байта

	Для задания цветовых атрибутов определены константы, соответствующие цветам, допустимым для контроллера цветного дисплея:

	 0	- Black		  Черный
	 1	- Blue		  Синий
	 2	- Green		  Зеленый
	 3	- Cyan		  Бледно-голубой
	 4	- Red		  Красный
	 5	- Magenta		  Сиреневый
	 6	- Brown		  Коричневый
	 7	- White		  Белый
	 8	- Grey		  Серый
	 9	- Light-Blue	  Ярко-синий
	10	- Light-Green	  Ярко-зеленый
	11	- Light-Cyan	  Ярко-голубой
	12	- Light-Red	  Ярко-красный
	13	- Light-Magenta  Ярко-сиреневый
	14	- Yellow		  Желтый
	15	- Light-White	  Ярко-белый

	Для установки и отмены мерцания символов, имеющих яркий цвет фона (номера цветов 8-15), используются слова BLINK и BLINK-OFF. Цвет окаймления экрана дисплея устанавливается словом BORDER. Очистка активного окна (заполнение пробелами) осуществляется словом CLEARSCREEN.


15.2 Управление курсором

	Для перемещения курсора в активном окне и некоторых других манипуляций в системе АстроФОРТ реализованы следующие процедуры.

	UP			  ---		перемещение курсора на строку вверх
	DOWN			  ---		перемещение курсора на строку вниз
	LEFT			  ---		перемещение курсора на позицию вправо
	RIGHT		  ---		перемещение курсора на позицию влево
	?CURSOR		  --- x y		выдача текущиих координат курсора в окне
	GOTOXY	   x y ---		установка курсора в позицию с заданными координатами
	HOME			  ---		установка курсора в левый верхний угол окна
	SET-CURSOR n1 n2 ---		установка размера курсора
	?cursor		  --- n1 n2	выдача размера курсора (словарь HIDDEN)
	gotoxy	   x y ---		установка курсора в произвольную позицию экрана
	[CURSOR]		  --- x y		выдача абсолютных координат курсора (словарь HIDDEN)

15.3 Управление протяжкой окна

	SCROLL		---		установка режима протяжки
	SCROLL-OFF	---		отмена режима протяжки
	SCROLL-UP		---		протяжка окна вверх
	SCROLL-DOWN	---		протяжка окна вниз
	?SCROLL		--- f	выдача режима протяжки


16. Интерпретация и компиляция

	Работа ФОРТ-системы при обработке входного текста может производиться в двух режимах - в режиме интерпретации и в режиме компиляции.
	После того, как из входного потока выделено очередное слово, ФОРТ-система выполнит те или иные действия в зависимости от текущего режима.
	В режиме интерпретации слово сразу же выполняется, в режиме компиляции адрес поля кода данного слова помещается в словарь с продвижением указателя словаря. Режим компиляции устанавливается при выполнении таких определяющих слов, как ":", WINDOW, TASK. Текущий режим определяется значением переменной STATE (TRUE - режим компиляции, FALSE - интерпретация). Управление режимами осуществляется словами "[" (установить режим интерпретации) и "]" (установить режим компиляции).
	Некоторые слова (например, слова, реализующие структуры управления) выполняются в режиме компиляции. Такие слова должны быть помечены признаком немедленного выполнения IMMEDIATE. Слово IMMEDIATE устанавливает указанный признак для последнего определенного в словаре ФОРТ-слова. В том случае, когда в режиме интерпретации некоторое слово должно быть скомпилировано, это может быть выполнено с применением слова [COMPILE], помещающего адрес поля кода следующего за ним слова в словарную статью.
	При компиляции ФОРТ-определений могут использоваться следующие слова:

	,		n ---		запись в словарь 16-разрядного слова с продвижением указателя словаря
	ALLOT	n ---		выделение памяти в словаре
	LATEST	  --- addr	адрес поля имени последнего определенного слова в словаре
	RECURSE	  ---		компиляция рекурсивного обращения к определяемому слову

	Адреса полей словарных статей имеют следующие обозначения:

    Адрес поля имени	  - NFA (Name Field Address)
    Адрес поля связи	  - LFA (Link Field Address)
    Адрес поля кода		  - CFA (Code Field Address)
    Адрес поля параметров  - PFA (Parameter Field Address)

	Для перехода от адресов одних полей к адресам других используются следующие слова:

     BODY>	   PFA --- CFA
     >NAME	   CFA --- NFA
     NAME>	   NFA --- CFA
     N>LINK	   NFA --- LFA
     L>NAME	   LFA --- CFA


17. Работа со словарями

	Множество слов, определенных в ФОРТ-системе, хранится в виде одного или нескольких списков словарных статей (словарей), связанных между собой через поле связи. Слова в списке ищутся в порядке, обратном порядку их включения в словарь.
	Каждый из списков слов создается определяющим словом VOCABULARY. Все определенные через VOCABULARY слова связываются помимо того в отдельный список - список словарей. Использование словарей позволяет, например, иметь различные реализации тех или иных слов под одинаковыми именами и, манипулируя словарями, выбирать нужную реализацию в каждом конкретном случае. Другим примером использования словарей является защита от ошибок в случае переопределения каких-либо ФОРТ-слов.
     Со словарями связаны стандартные переменные:

	VOC-LINK -	указатель последнего определенного через VOCABULARY словаря;
	CONTEXT  -	указатель первого просматриваемого при поиске словаря;
	CURRENT  -	указатель словаря пополнения, т.е. словаря, в который добавляются вводимые определения ФОРТ-слов.

	Имеется также предопределенный словарь FORTH, включаюший все стандартные слова и, в частности, само слово FORTH.
	Поиск требуемого слова осуществляется в следующей последовательности: просматривается словарь, указываемый переменной CONTEXT, затем, в случае неудачного поиска - словарь пополнения, указываемый переменной CURRENT. Последним просматриваемым словарем всегда является словарь FORTH.
	При выполнении слова, определенного через VOCABULARY,  устанавливается соответствующий словарь значением переменной CONTEXT. Слово DEFINITIONS делает словарь, указываемой переменной CONTEXT словарем пополнения. По умолчанию в начале работы с ФОРТ-системой переменные CONTEXT и CURRENT указывают на один и тот же словарь FORTH.
	Удаление требуемого слова из словаря осуществляется с помощью слова FORGET. При этом из словаря ФОРТ-системы удаляется не только слово, указанное FORGET, но и все слова, определенные позже удаляемого слова.
	Печать списка словарей с отметкой текущего порядка поиска осуществляется директивой VOCS.


18. Интерпретация входного потока

	Работа ФОРТ-системы заключается во вводе из входного потока отдельных слов-команд и их исполнении. Входным потоком может служить текст, вводимый с клавиатуры терминала или внешний экранный файл. Ввод с клавиатуры осуществляется построчно, при этом каждая введенная строка помещается во входной текстовый буфер TIB (Text Input Buffer), расположенный в адресном пространстве ФОРТа. Длина входного буфера хранится в стандартной переменной #TIB и составляет 80 символов. Слова ФОРТа выбираются из буфера словом WORD. По исчерпании входного потока в буфер TIB вводится очередная порция текста с терминала.
	При вводе текста из внешнего экранного файла входным потоком является буфер, используемый для работы с файлами. Адрес этого буфера выдается при чтении файла словом BLOCK. Переключением входного потока управляет переменная BLK, значение которой проверяется каждый раз при обращении к слову WORD. При нулевом значении BLK ввод осуществляется из терминального буфера TIB, в противном случае значение BLK рассматривается как номер текущего блока вводимого экранного файла. Текущая позиция во входном потоке указывается переменной >IN. При вводе с терминала ее значение может изменяться в диапазоне от 0 до TIB#, при вводе из внешней памяти - от 0 до значения константы B/BUF (размер блока файла).
	Конец вводимого текста отмечается во входном потоке символом с нулевым кодом. При вводе такого символа словом WORD выполняется специальное слово ФОРТа с пустым именем, которое прекращает интерпретацию входного потока.
	Интерпретацию входного потока осуществляет слово INTERPRET, которое в бесконечном цикле выполняет ввод и исполнение слов из входного потока. В случае, если очередное слово не найдено в словаре, выполняется слово NUMBER, которое пытается воспринять данное слово как запись числового литерала. При анализе используется значение переменной BASE, содержащей текущее основание системы счисления. При удачном преобразовании слово NUMBER возвращает на стеке значение числа с двойной точностью, а в переменную DPL помещает положение десятичной точки в записи числа (-1 в случае числа обычной точности). При неудачном преобразовании числа выдается сообщение о том, что соответствующее слово не определено и интерпретация входного потока прекращается.
	Для переключения входного потока на внешний файл предусмотрено слово LOAD, используемое в виде n LOAD, где n - номер начального экрана текущего экранного файла, текст которого надо интерпретировать. Для перехода от интерпретации одного экрана к следующему должно использоваться слово --> , с помощью которого можно загрузить несколько последовательных экранов. Интерпретация файла завершается либо после интерпретации экрана, не содержащего признака продолжения -->, либо при выполнении слова ;S , завершающего загрузку файла.


19. Обработка прерываний

	В общем случае для обработки аппаратных и программных прерываний используется механизм подмены вектора прерываний, содержащего адреса процедур, вызываемых для обработки соответствующего прерывания. Для установки вектора прерываний используется определенное в словаре HIDDEN слово:

     set-interrupt		segm disp n ---

где segm, disp - задают адрес процедуры обработки прерываний (segm:disp - сегмент:смещение), n - номер прерывания (0-255).
	Процедура обработки прерываний пишется на ФОРТ-ассемблере. В качестве параметра segm при этом используется основной сегмент ФОРТа, значение которого выдается словом ?cs:. Смещение disp - адрес поля параметров соответствующего CODE-определения. Процедура обработки прерываний должна позаботиться о сохранении используемых ею регистров (при вызове процедуры известно лишь, что сегментный регистр CS соответствует основному сегменту ФОРТа). Выход из процедуры должен осуществляться командой возврата из прерывания IRET.
	В системе АстроФОРТ предусмотрена обработка прерывания от клавиатуры по нажатию клавиш Ctrl/Break (прерывание 1BH). При возникновении такого прерывания ФОРТ-система последовательно закрывает все активные окна вплоть до окна, в котором работает ФОРТ-интерпретатор.
	Прерывание по Ctrl/Break  можно заблокировать, выполнив слово CLI. Закрыть прерывание необходимо, как правило, при выполнении операций, которые должны быть полностью завершены (например, открытие и закрытие окон, перемещение окон по экрану дисплея и т.д.). В частности, при реализации сервисных слов WORDS, .STACK и др., а также в редакторе EDIT прерывания от клавиатуры закрыты. Для прекращения работы подобных процедур и программ следует пользоваться предусмотренными в них функциональными клавишами (как правило, используется клавиша ESC). Открытие прерываний по Ctrl/Break  производится словом STI. Признак установки прерывания от клавиатуры хранится в USER-переменной IFL ( IFL=TRUE - прерывание разрешено, IFL=FALSE - прерывание запрещено).
	Для полного закрытия программных и аппаратных прерываний (например, в случае прямого доступа к видеопамяти дисплея и др.) определено слово cli (выполняет соответствующую команду процессора CLI - Clear Interrupts); открытие всех прерываний осуществляется словом sti (выполняется команда STI - Set Interrupts).
	Помимо прерываний от клавиатуры в системе АстроФОРТ используется подмена прерывания от аппаратного таймера (прерывание 1CH). Прерывание от таймера используется для организации многозадачного выполнения ФОРТ-определений, а также для воспроизведения музыкальных мелодий.


20. Интерфейс с файловой системой ДОС

	Набор имеющихся в системе АстроФОРТ слов позволяет осуществлять прямой и последовательный доступ к произвольным файлам и директориям ДОС. Этот набор включает средства для задания текущих директорий, манипуляции с блоками управления файлов, переназначения стандартного ввода и вывода ОС.
	Для работы с файловой системой ДОС используется понятие дескриптора файла HCB (Handle Control Block). Дескриптор файла включает в себя 64-байтовое поле, содержащее полную спецификацию имени файла в виде:

     [d:][path]filename[.filetype]

где d: - обозначение устройства, path - указатель директории, filename - имя файла, filetype - расширение имени файла.
	Кроме того, дескриптор файла содержит вспомогательную информацию, используемую интерфейсными процедурами при выполнении различных операций над файлам.
	Дескриптор файла создается с помощью определяющего слова HANDLE, используемого в виде:

     HANDLE name

где name - имя дескриптора файла.
	При создании и инициализации дескриптору приписывается фиктивное устройство "NUL". Дескриптор файла связывается с конкретным именем файла при выполнении слова FILENAME.
	При выполнении слова name, определенного через HANDLE на стек помещается адрес области памяти, выделенной для HCB, и содержимое первого ее слова. Два этих значения обозначаются далее в описании интерфейсных процедур "handle-pars" (параметры HCB). Если файл, связанный с данным HCB не открыт, то в качестве параметров HCB возвращается адрес HCB и нулевое значение.
	Дескриптор файла HCB имеет следующую структуру:

	Смещение		Содержимое

	0-1			информация ДОС
	2-3			флаги. Нулевое значение для неоткрытого файла.
	4			длина полного имени файла в символах.
	5-68			полное имя файла в коде ASCII, дополненное в конце символом с нулевым кодом.

	В операционной системе считаются предопределенными следующие "стандартные" устройства, которые могут использоваться для ввода или вывода данных с помощью процедур работы с файлами. Эти устройства не требуют предварительного открытия перед обращением к ним. Стандартными устройствами являются следующие:

	0000 -	STD-INPUT		стандартное устройство ввода. Может быть переназначено.
	0001 -	STD-OUTPUT	стандартное устройство вывода. Может быть переназначено.
	0002 -	STD-ERROR		стандартное устройство для вывода сообщений об ошибках. Устройство не может быть переназначено.
	0003 -	STD-AUX		стандартное дополнительное устройство.
	0004 -	STD-LIST		стандартное печатающее устройство.

	Для осуществления различных манипуляций с директориями (создание, удаление и т.п.) используется структура данных, называемая "Блок управления директорией" DCB (Directory Control Block). Блок управления директорией создается определяющим словом DIRECTORY, которое используется в виде:

     DIRECTORY name

	Здесь name - имя блока управления директорией. Связь DCB с конкретной директорией производится при задании имени директории с помощью слова DIRNAME. При выполнении определенного через слово DIRECTORY слова name на стек помещается адрес блока управления директорией "directory-par", который используется в качестве параметра интерфейсными процедурами.
	Блок управления директорией имеет следующий формат:

	Смещение		Содержимое

		0		длина имени директории в символах.
		1		имя директории в коде ASCII, дополненное справа символом с нулевым кодом. Максимально допустимая длина имени - 63 символа.

	Блок управления для корневой директории, обозначаемой "\", имеет специальное имя ROOT.
	Вновь создаваемый блок управления директорией по умолчанию связывается с корневой директорией "\" вплоть до явного задания имени директории с помощью слова DIRNAME.
	Максимально допустимое число одновременно открытых файлов определяется параметром операционной системы FILES, который задается в описании конфигурации ОС в файле CONFIG.SYS. По умолчанию значение FILES равно 8. Из-за наличия предопределенных стандартных устройств ввода-вывода реальное допустимое число открываемых файлов на 5 меньше значения FILES.
	Для выполнения над файлами операций чтения и записи в адресном пространстве ФОРТ-системы должны быть явно заданы буферные области требуемого размера. Это может быть сделано, например, с использованием конструкции вида:

     VARIABLE name n-2 ALLOT

	Здесь name - имя буферной области, n - размер буферной области, т.е. максимальная длина считываемых из файла или записываемых в файл записей.
	Все интерфейсные процедуры, выполняющие различные операции над файлами, возвращают на стеке код ошибки, сигнализирующий о правильности выполнения операции. Нулевое значение кода указывает на успешное выполнение операции, ненулевое - соответствует той или иной ошибочной ситуации, диагностированной при выполнении процедуры. Анализ кода ошибки и выдача соответствующего сообщения могут быть выполнены с помощью слова .STATUS, вызываемого после выполнения операции над файлом, выработавшей на стеке код ошибки. При ненулевом значении кода ошибки словом .STATUS выдается соответствующее диагностическое сообщение, выполнение процедуры прерывается и происходит переход в режим интерпретации. В противном случае нулевой код ошибки просто снимается со стека.

20.1 Пример использования интерфейса с файловой системой.

     Копирование файла A:SRC.TXT в файл B:DST.TXT.

VARIABLE BUFFER 254 ALLOT	( создание буферной области размером 256 байтов )
HANDLE SRC				( создание дескриптора файла чтения )
HANDLE DST				( создание дескриптора файла записи )
: COPY
SRC [COMPILE] FILENAME		( задание имени входного файла  )
DST [COMPILE] FILENAME  		( задание имени выходного файла )
SRC OPEN-FILE-R/O .STATUS	( открытие на чтение входного файла )
SRC MAKE-FILE .STATUS		( создание пустого файла )
BEGIN
SRC 256 BUFFER READ 0=		( чтение очередной записи  входного файла с проверкой успешности чтения )
WHILE
DST ROT BUFFER
	WRITE .STATUS DROP		( запись очередной записи   в выходной файл. Используется реальная длина записи, оставленная на стеке словом READ )
REPEAT
SRC CLOSE-FILE .STATUS		( закрытие входного файла )
DST CLOSE-FILE .STATUS ;		( закрытие выходного файла )
COPY A:SRC.TXT B:DST.TXT		( выполнение копирования )

	Ниже приводится перечень интерфейсных процедур для работы с файловой системой. Подробное описание процедур приведено в приложении 1.


Операции над файлами

	OPEN-FILE		-	открытие файла на чтение и запись
	OPEN-FILE-R/O	-	открытие файла только на чтение
	CLOSE-FILE	-	закрытие файла
	MAKE-FILE		-	создание нового файла или опустошение  уже имеющегося файла
	KILL-FILE		-	удаление файла

Доступ к директориям

	GET-ATTRIB	-	выдача байта атрибутов файла
	SET-ATTRIB	-	изменение байта атрибутов файла
	RENAME-FILE	-	переименование файла (директории)
	SEARCH-FIRST	-	поиск первого файла в директории
	SEARCH-NEXT	-	поиск очередного файла в директории
	?FILESIZE		-	выдача длины файла в байтах

Чтение - запись

	READ			-	чтение данных из файла (стандартного устройства)
	WRITE		-	запись данных в файл (стандартное устройство)
	SEEK-ABS		-	установка абсолютного значения указателя чтения-записи
	SEEK-REL		-	установка указателя чтения-записи относительно текущей позиции
	?OFFSET		-	выдача текущего значения указателя чтения-записи

Операции над директориями

	CHANGE-DIR	-	изменение директории
	KILL-DIR		-	удаление директории
	MAKE-DIR		-	создание директории
	GET-DIR		-	выдача текущей директории

Определяющие слова

	HANDLE		-	создание дескриптора файла
	DIRECTORY 	-	создание блока управления директорией

Задание имен файлов и директорий

	FILENAME		-	занесение строки с именем файла в HCB
	INPUT-FILENAME -	занесение строки с именем файла в HCB с терминала
	DIRNAME		-	занесение строки с именем директории в HCB
	INPUT-DIRNAME	-	занесение строки с именем директории в HCB с терминала

Предопределенные управляющие блоки

	ROOT			-	DCB для корневой директории "\"
	STD-INPUT		-	HCB для стандартного устройства ввода
	STD-OUTPUT	-	HCB для стандартного устройства вывода
	STD-ERROR		-	HCB для стандартного устройства диагностических сообщений
	STD-AUX		-	HCB для стандартного дополнительного устройства ввода-вывода
	STD-LIST		-	HCB для стандартного устройства печати

Печать вспомогательной информации

	.FILENAME		-	печать имени файла из HCB
	.DIR			-	печать имени директории для заданного устройства
	.STATUS		-	анализ кода ошибка и печать диагностических сообщений
	.DRV			-	печать имени текущего устройства

	Коды ошибок, возвращаемые интерфейсными процедурами, могут иметь следующие значения:

    -01 - конец файла
     00 - успешное выполнение операции
     48 - недопустимый номер функции ДОС
     49 - файл не найден
     50 - директория не найдена
     51 - слишком много блоков управления файлами
     52 - ошибка доступа
     53 - неверный блок управления файлом
     54 - ошибка распределения памяти
     55 - мало памяти
     56 - недопустимый адрес блока памяти
     57 - недопустимая среда задачи
     58 - недопустимый формат
     59 - недопустимый код доступа
     60 - недопустимые данные
     61 - недопустимый номер сообщения
     62 - ошибка в задании дисковода
     63 - попытка уничтожить текущую директорию
     64 - разные устройства
     65 - файлов в директории больше нет
     66 - нет места на диске
     67 - файл не открыть

	Ошибки с кодами 48-65 поддерживаются файловой системой ДОС, остальные добавляются интерфейсом ФОРТа. Заметим, что неверная спецификация директории или файла приведет к возникновению "ошибки доступа" (код ошибки 52).
 21. Перечень ссылочных документов

	1. Баранов С.Н., Ноздрунов Н.Р. Язык ФОРТ и его реализации. - Л.: Машиностроение. Ленинградское отделение, 1988.
	2. Система программирования АстроФОРТ. Руководство пользователя.
Приложение 1.
Глоссарий системы АстроФОРТ

 !              n addr ---
    Сохраняет 16-битовое значение n по адресу addr.

 !COLOR         b ---
    Устанавливает значение b в качестве текущего цветового
    атрибута для выводимого на экран дисплея текста. Стар-
    шие 4 бита значения b содержат цвет фона (0..15),
    младшие 4 бита - цвет символов (0..15). См. также
    BACKGROUND, FOREGROUND, ?COLOR.

 !CSP           ---
    Сохраняет текущее значение указателя стека в переменной
    CSP. Используется для обеспечения корректности  работы
    компилятора. См. также ?CSP.

 !L             n1 n2 addr ---
    Сохраняет 16-битовое значение n1 в сегменте n2 со сме-
    щением addr.

 "              ---
    Компилирует строку символов с байтом длины.
    Используется в режимах компиляции и интерпретации в
    виде:
            " cccc"
    При выполнении адрес скомпилированной строки
    помещается на стек.

 ".             addr ---
    Печатает строку с байтом длины, расположенную по
    адресу addr.

 "=             addr1 addr2 --- f
    Помещает на стек результат сравнения f (TRUE - при
    удачном сравнении, FALSE - в противном случае) двух
    строк с байтами длины, расположенных, соответственно,
    по адресам addr1 и addr2.

 #              ud1 --- ud2
    Остаток от деления ud1 на текущее значение BASE  преоб-
    разуется в символ кода ASCII и приписывается к формиру-
    руемой выходной строке в направлении  уменьшения  адре-
    сов. Частное ud2 используется для дальнейшей обработки.
    Обычно используется между словами <#  и  #> . См. также
    #S, HOLD и SIGN.

 #>             ud --- addr n
    Завершение преобразования числа в символьный вид. ud
    сбрасывается со стека, в качестве результата возвраща-
    ются адрес addr и число символов n в сформированной вы-
    ходной строке в виде, используемом словом TYPE. См.
    также <#, #, #S, SIGN и HOLD.

 #BUFF          --- n
    Константа, задающая число буферов, выделенных для обме-
    на с дисками. Для корректной работы процедур ввода/вы-
    вода значение #BUFF должно быть не менее 1.

 #S             ud1 --- 0 0
    Формируется строка символов в коде ASCII в выходном
    текстовом буфере с использованием слова # до тех пор,
    пока частное ud2 (см. слово #) не станет равным нулю.
    Если исходное число ud1 равно нулю, то в выходную стро-
    ку добавляется один символ "0". Обычно используется
    между словами <# и #> . См. также #, HOLD и SIGN.

 #TIB           --- addr
    Адрес переменной, содержащей число байтов во входном
    текстовом буфере, т.е. длину строки из входного потока,
    находящейся в данный момент во входном буфере. #TIB ис-
    пользуется словом WORD в случае, когда значение BLK
    равно нулю. Устанавливается словом QUERY равным значе-
    нию переменной SPAN после выполнения EXPECT.

 '              --- addr
    Используется в виде: ' name (режим интерпретации)
                    или: '      (режим компиляции).
    Помещает на стек адрес поля кода (адрес компиляции)
    словарной статьи с именем name. При использовании в ре-
    жиме компиляции предварительно считывает имя nаме из
    входного потока. Если имя name не находится в словаре
    при текущем порядке поиска, возникает ошибочная ситуа-
    ция. См. также ['].

 (              ---
    Используется в виде ( cccc ) .
    Символы "cccc", следующие за словом ( и ограниченные
    символом "(" (закрывающая скобка) рассматриваются как
    комментарий. Никаких действий над комментариями не вы-
    полняется. Пробел, следующий непосредственно за словом
    ( не является частью строки "cccc". Слово ( может ис-
    пользоваться как в режиме интерпретации, так и в режиме
    компиляции. Число символов в строке "cccc" не ограниче-
    но, но закрывающая скобка должна находиться в том же
    блоке входного потока, где встретилось слово ( . См.
    также .( .

 *              n1 n2 --- n3
    Помещает на стек младшие 16 разрядов произведения
    n1*n2.

 */             n1 n2 n3 --- n4
    Помещает на стек частное n4 от (n1*n2)/n3 с использова-
    нием 32-битового промежуточного результата n1*n2.

 */MOD          n1 n2 n3 --- n4 n5
    Помещает на стек остаток n4 и частное n5 от (n1*n2)/n3
    с использованием 32-битового промежуточного результата
    n1*n2.

 +              n1 n2 --- n3
    Помещает на стек сумму n1+n2.

 +!             n addr ---
    Увеличивает 16-битовое значение по адресу addr на вели-
    чину n.

 +LOOP          n --- ( run ) | sys --- ( compile )
    Используется в двоеточечном определении в виде:
            DO ... n +LOOP
    Параметр цикла index увеличивается на n. Если при при-
    ращении index переходит через границу между значениями
    параметра цикла limit-1 и limit, цикл завершается, и
    параметры управления циклом сбрасываются со стека воз-
    вратов. В противном случае передается управление на вы-
    полнение кода, расположенного непосредственно за соот-
    ветствующим заголовком цикла DO или ?DO. См. также DO,
    ?DO, LOOP, LEAVE.

 ,              n ---
    Сохраняет 16-битовое значение n по адресу, задаваемому
    текущим значением указателя словаря. Указатель словаря
    продвигается на 2 байта.

 -              n1 n2 --- n3
    Помещает на стек разность n1-n2.

 -"             ---
    Компилирует строку символов с байтом длины,
    завершающуюся символом с нулевым кодом.  Используется
    в режимах компиляции и интерпретации в виде:
            -" cccc"
    При выполнении адрес скомпилированной строки
    помещается на стек.

 -->            ---
    Продолжает интерпретацию входного текста с начала сле-
    дующего экрана текущего экранного файла.

 -1             --- -1
    Константа, соответствующая значению -1.

 -TRAILING      addr1 n1 --- addr2 n2
    В строке символов, задаваемом начальным адресом addr1 и
    длиной в байтах n1, выделяется подстрока, начинающаяся
    с адреса addr2, длиной n2 байтов и не содержащая веду-
    щих и завершающих пробелов (по стандарту FORTH-83 не
    содержащая только завершающих пробелов). Если исходная
    строка состоит из одних пробелов или ее длина n1 равна
    нулю, то результат n2 равен нулю.

 .              n ---
    Выводит значение числа n в системе счисления с текущим
    основанием BASE, дополненное справа одним пробелом. От-
    рицательные числа выводятся со знаком "-".

 ."             ---
    Используется только в режиме компиляции в виде:
            ." cccc"
    При выполнении выводит строку символов "cccc", (без ог-
    раничивающих двойных кавычек "). Первый пробел, следую-
    щий непосредственно за словом ." не является частью
    строки "cccc".

 .(             ---
    Используется в режимах интерпретации и компиляции
            в виде: .( cccc)
    Выводит строку символов "cccc", вплоть до ограничиваю-
    щей закрывающей скобки ")". Первый пробел, следующий
    непосредственно за словом .( не является частью строки
    "cccc".

 .DATE          ---
    Печатает текущую дату в виде: mm/dd/yy.

 .DIR           drive ---
    Выдает оглавление текущей директории для указанного
    устройства.

 .DRV           ---
    Выдает имя текущего устройства (A:, B:, C: и т.д.)

 .FILENAME      handle_pars ---
    Выдается полное имя директории и имя файла на который
    указывает дескриптор файла HCB.

 .LINE          n1 n2 ---
    Выводит строку текущего экранного файла, задаваемую но-
    мером экрана n2 и номером строки в экране n1.

 .NAME          nfa ---
    Печатает имя словарной статьи с адресом поля имени nfa.

 .R             n1 n2 ---
    Выводит число n1 с выключкой вправо внутри поля шириной
    n2 символов без завершающего пробела. В случае, если
    для вывода числа n1 недостаточно n2 позиций, число вы-
    водится полностью, без учета формата n2.

 .STACK         ---
    В окне выводится текущее состояние стека данных. Для
    каждого элемента стека указывается его номер (ноль -
    вершина), десятичное и шестнадцатиричное представление.

 .STATUS        status_code ---
    Анализирует код ошибки, возвращаемый словами доступа к
    файлам и выдает сообщения об ошибках доступа.
    При нулевом значении status_code никаких действий не
    производится.

 .TIME          ---
    Печатает текущее время в виде: hh:mm.

 /              n1 n2 --- n3
    Помещает на стек округленный результат деления (целая
    часть) n1/n2.

 /MOD           n1 n2 --- n3 n4
    Помещает на стек остаток n3 и частное n4 от деления
    n1 на n2.

 0              --- 0
    Константа, соответствующая значению 0.

 0<             n --- f
    Помещает на стек значение TRUE при n меньшем нуля,
    FALSE - в противном случае.

 0<>            n --- f
    Помещает на стек значение TRUE при n отличном от нуля,
    FALSE - при n равном нулю.

 0=             n --- f
    Помещает на стек значение TRUE при n равном нулю,
    FALSE - в противном случае.

 0>             n --- f
    Помещает на стек значение TRUE при n большем нуля,
    FALSE - в противном случае.

 1              --- 1
    Константа, соответствующая значению 1.

 1+             n1 --- n2
    Увеличивает значение n1 на 1.

 1-             n1 --- n2
    Уменьшает значение n1 на 1.

 2              --- 2
    Константа, соответствующая значению 2.

 2!             d addr ---
    Сохраняет 32-битовое значение d по адресу addr.

 2*             n1 --- n2
    Быстрое умножение значения n1 на 2. Реализуется 16-би-
    товым арифметическим сдвигом.

 2+             n1 --- n2
    Увеличивает значение n1 на 2.

 2-             n1 --- n2
    Уменьшает значение n1 на 2.

 2/             n1 --- n2
    Быстрое деление значения n1 на 2. Реализуется 16-бито-
    вым арифметическим сдвигом.

 2@             addr --- d
    Помещает на стек 32-битовое значение d, расположенное
    по адресу addr.

 2CONSTANT      d ---
    Используется в виде:
            d 2CONSTANT name
    Создает словарную статью с именем name. При выполнении
    слова name на стек помещается 32-разрядное значение d.

 2DROP          d ---
    Снимает со стека 32-битовое значение d.

 2DUP           d --- d d
    Дублирует 32-битовое значение d на вершине стека.

 2LITERAL       d --- (compile)
    Компилирует процедуру 2LIT для помещения на стек 32-
    разрядного числа d, помещая значение d непосредственно
    вслед за вызовом слова 2LIT.

 2OVER          d1 d2 --- d1 d2 d1
    Копирует на вершину стека второе сверху 32-битовое
    значение d1.

 2ROT           d1 d2 d3 --- d2 d3 d1
    Перемещает на вершину стека третье сверху 32-битовое
    значение d1.

 2SWAP          d1 d2 --- d2 d1
    Меняет местами два 32-битовых значения d1 и d2 на вер-
    хушке стека.

 2VARIABLE      ---
    Определяющее слово, используется в виде: 2VARIABLE name
    Создает словарную статью с именем name, резервируя в
    поле параметров 4 байта для хранения 32-разрядного зна-
    чения. При выполнении слова name на стек помещается ад-
    рес зарезервированной области памяти. Начальное значе-
    ние переменной не определено.

 4DROP          d1 d2 ---
    Сбрасывает со стека два двойных значения d1 и d2.

 :              --- sys
    Используется в виде:
            : name ... ;
    Создает словарную статью с именем name, устанавливает
    режим компиляции, словарь CONTEXT устанавливает на
    словарь CURRENT. Определенное таким образом слово на-
    зывается "двоеточечным определением". Адреса компиляции
    (адреса полей кода) слов, следующих во входном потоке
    за именем name и не помеченных признаком немедленного
    выполнения IMMEDIATE, последовательно заносятся в сло-
    варь, и в дальнейшем выполняются при вызове слова name.
    Слова, помеченные признаком IMMEDIATE выполняются не-
    медленно по мере их появления во входном потоке. Если
    очередное слово не найдено в словаре, производится его
    преобразование к числу с текущим основанием счисления
    BASE и компилируется числовой литерал соответствующей
    разрядности. При неуспешном преобразовании числа возни-
    кает ошибочная ситуация и компиляция слова name преры-
    вается.
    Созданное словом : определение считается завершенным и
    может быть найдено в словаре только после выполнения
    завершающего определение слова ; или ;CODE.

 ;              ---
    Завершает компиляцию двоеточечного определения, компи-
    лирует вызов слова EXIT в формируемую словарную статью,
    устанавливает признак завершенности определения и уста-
    навливает режим интерпретации.

 ;"             ---
    Компилирует строку символов с байтом длины,
    завершающуюся символом с кодом 13 (Return).
    Используется в режимах компиляции и интерпретации в
    виде:
            ;" cccc"
    При выполнении адрес скомпилированной строки
    помещается на стек.

 ;CODE          ---
    Обычно используется при определении определяющих слов в
    виде:
            : namex ... CREATE ... ;CODE ... END-CODE
    Завершает компиляцию слова namex, устанавливает режим
    интерпретации и подключает к текущему контексту словарь
    ASSEMBLER для компиляции машинного кода, задаваемого
    между ;CODE и END-CODE. При выполнении слова namex в
            namex name
    определяется новое слово name, в поле кода которого по-
    мещается адрес последовательности машинных команд, сле-
    дующих непосредственно за ;CODE. В дальнейшем выполне-
    ние слова name вызовет выполнение указанной последова-
    тельности.

 ;S             ---
    Завершает интерпретацию текущего экрана входного файла.

 <              n1 n2 --- f
    Помещает на стек значение TRUE при n1 меньшем n2,
    FALSE - в противном случае.

 <#             ---
    Инициализирует преобразование чисел в символьный вид
    для форматного вывода с использованием слов <#  #  #S
    SIGN HOLD и #> . Преобразование производится над 32-би-
    товыми числами с формированием выходной строки в на-
    правлении уменьшения адресов.

 <=             n1 n2 --- f
    Помещает на стек значение TRUE при n1 меньшем либо
    равном n2, FALSE - в противном случае.

 <>             n1 n2 --- f
    Помещает на стек значение TRUE при n1 отличном от n2,
    FALSE - при n1 равном n2.

 <MARK          --- addr
    Отметка текущего адреса addr для ссылки назад при
    компиляции управляющих структур.

 <RESOLVE       addr ---
    Разрешение ссылки назад по адресу addr при компиляции
    структур управления.

 <TIB>          --- addr
    Пользовательская переменная, содержащая адрес
    терминального входного буфера (см. TIB).

 =              n1 n2 --- f
    Помещает на стек значение TRUE при n1 равном n2,
    FALSE - в противном случае.

 >              n1 n2 --- f
    Помещает на стек значение TRUE при n1 большем n2,
    FALSE - в противном случае.

 ><             n1 --- n2
    Меняет местами байты в значении n1, т.е. биты 0-7
    становятся битами 8-15 и наоборот.

 >=             n1 n2 --- f
    Помещает на стек значение TRUE при n1 большем либо
    равном n2, FALSE - в противном случае.

 >BODY          cfa --- pfa
    По адресу поля кода словарной статьи cfa выдает адрес
    ее поля параметров pfa.

 >IN            --- addr
    Пользовательская переменная, содержащая текущее смеще-
    ние символа во входном потоке.

 >LINK          cfa --- lfa
    По адресу поля кода словарной статьи cfa выдает адрес
    ее поля связи lfa.

 >MARK          --- addr
    Отметка текущего адреса addr для ссылки вперед при
    компиляции управляющих структур.

 >NAME          cfa --- nfa
    По адресу поля кода словарной статьи cfa выдает адрес
    ее поля имени nfa.

 >PRN           c ---
    Вывод символа с кодом c на печатающее устройство.

 >R             n ---
    Перемещает 16-битовое значение n с арифметического сте-
    ка на стек возвратов. Следует помнить, что при входе и
    выходе из определения состояния стека возвратов должны
    быть одинаковыми. См. также R> и R@.

 >RESOLVE       addr ---
    Разрешение ссылки вперед по адресу addr при компиляции
    структур управления.

 ?              addr ---
    Выводит значение 16-разрядного числа, расположенного по
    адресу addr.
    Реализовано в виде оконной процедуры.

 ?BRANCH        f ---
    Процедура времени выполнения, компилируемая словами IF,
    UNTIL и WHILE. Используется для выполнения условных пе-
    реходов. Если значение f - FALSE, в качестве нового
    значения указателя интерпретируемой инструкции ФОРТ-ин-
    терпретатора устанавливается значение, расположенное
    непосредственно вслед за вызовом ?BRANCH, в противном
    случае флаг f снимается со стека, никаких других дей-
    ствий не производится.

 ?BREAK         --- f
    Опрашивает состояние клавиатуры и, если буфер
    клавиатуры пуст, завершает выполнение со значением f
    равным FALSE. При непустом буфере переходит в
    состояние ожидания до нажатия на клавиатуре
    любой вырабатывающей код клавиши. Если выработан код
    27 (клавиша Escape), возвращается значение TRUE,
    для любой другой клавиши возвращается значение FALSE.

 ?COLON         addr ---
    Вызывает ошибочную ситуацию в случае, если addr не
    является адресом поля кода словарной статьи,
    определенной через двоеточие.

 ?COLOR         --- b
    Выдает текущее значение цветового атрибута ("цветовой
    байт") для выводимого на дисплей текста. Старшие 4 бита
    значения b содержат цвет фона (0..15), младшие 4 бита -
    цвет символов (0..15).

 ?COMP          ---
    Вызывает ошибочную ситуацию в случае, если не установ-
    лен режим компиляции.

 ?CR            ---
    Осуществляет переход на новую строку, если курсор не
    находится в начальной позиции строки.

 ?CSP           ---
    Вызывает ошибочную ситуацию в случае, если текущее зна-
    чение указателя стека не совпадает со значением пере-
    менной CSP.

 ?CURSOR        --- x y
    Помещает на стек текущие координаты курсора в активном
    окне. См. также W.X, W.Y.

 ?DECIMAL       ---
    Вызывает ошибочную ситуацию в случае, если текущее
    основание системы счисления (значение переменной BASE)
    отлично от 10.

 ?DNEGATE       d --- d1
    Меняет значение 32-разрядного числа d на
    противоположный, если d - положительно.

 ?DO            limit index --- (run) | --- sys (comp)
    Используется в виде:
            ?DO ... LOOP или ?DO ... +LOOP
    Отмечает начало цикла с проверкой значений исходных
    параметров.  Если значения limit и index равны, цикл не
    выполняется ни одного раза и управление передается на
    код, расположенный за соответствующим словом LOOP или
    +LOOP. В противном случае цикл выполняется так же, как
    цикл вида DO ... LOOP (DO ... +LOOP).

 ?DUP           n --- n | n --- n n
    Дублирует верхний элемент стека n в том случае, если n
    отлично от нуля. В противном случае состояние стека не
    изменяется.

 ?ERROR         f n ---
    Вызывает ошибочную ситуацию с выдачей диагностического
    сообщения с номером n в случае, если значение флага f -
    TRUE.

 ?EXEC          ---
    Вызывает ошибочную ситуацию в случае, если не установ-
    лен режим интерпретации.

 ?FILESIZE      handle_pars --- file_size <double>
    Возвращает размер файла в байтах в виде положительного
    двойного целого числа. Файл предварительно должен быть
    открыт. Выполнение этого слова устанавливает указатель
    чтения-записи на конец файла.

 ?LOADING       ---
    Вызывает ошибочную ситуацию в случае, если не установ-
    лен режим загрузки входного текста из экранного файла.

 ?LSHIFT        --- f
    Помещает на стек значение TRUE в случае, если в данный
    момент на клавиатуре нажата левая клавиша SHIFT, и
    FALSE - в противном случае.

 ?NEGATE        n --- n1
    Меняет значение 16-разрядного числа n на
    противоположный, если n - положительно.

 ?OFFSET        handle_pars --- offset <double>
    Возвращает значение указателя чтения-записи файла в
    виде положительного двойного целого числа. Файл
    предварительно должен быть открыт.

 ?PAIRS         n1 n2 ---
    Вызывает ошибочную ситуацию в случае несовпадения зна-
    чений n1 и n2. Используется для диагностики соответст-
    вия управляющих структур при компиляции.

 ?RSHIFT        --- f
    Помещает на стек значение TRUE в случае, если в данный
    момент на клавиатуре нажата правая клавиша SHIFT, и
    FALSE - в противном случае.

 ?SCROLL        --- f
    Выдает признак "true" при установленном режиме протяжки
    строк в активном окне (режим SCROLL) и признак "false"
    в противном случае (режим SCROLL-OFF).

 ?SCROLL-LOCK   --- f
    Помещает на стек значение TRUE при установленном на
    клавиатуре режиме SCROLL-LOCK и FALSE - в противном
    случае.

 ?SHIFT         --- f
    Помещает на стек значение TRUE в случае, если в данный
    момент на клавиатуре нажата хотя бы одна из клавиш
    SHIFT, и FALSE - в противном случае.

 ?STACK         ---
    Вызывает ошибочную ситуацию в случае, если текущее зна-
    чение указателя стека выходит за границы допустимой для
    стека области памяти.

 ?TERMINAL      --- f
    Опрашивает состояние клавиатуры, и, если с клавиатуры
    были введены какие-либо символы (т.е. буфер клавиатуры
    не пуст), выдает значение TRUE, а в противном случае -
    FALSE. Значение TRUE при вызове ?TERMINAL будет выда-
    ваться до тех пор, пока из буфера не будут выбраны все
    символы (например, при помощи слов KEY или PCKEY).

 ?VOCABULARY    addr ---
    Вызывает ошибочную ситуацию в случае, если addr не
    является адресом поля кода словарной статьи,
    определенной через "VOCABULARY".

 ?WIDTH         --- n
    Текущее значение ширины экрана в знакопозициях.

 ?WINDOW        addr ---
    Вызывает ошибочную ситуацию в случае, если addr не
    является адресом поля кода словарной статьи,
    определенной через "WINDOW".

 ?cs:           --- n
    Помещает на стек значение регистра CS, соответствующего
    кодовому сегменту ФОРТа.

 ?vs:           --- segm
    Текущее значение сегментного адреса для вывода на
    экран (видеосегмент).

 @              addr --- n
    Помещает на стек 16-битовое значение n, расположенное
    по адресу addr.

 @DATE          --- n1 n2
    Выдает текущую системную дату. n1 - год (1980-2099);
    n2 содержит в левом байте номер месяца, в правом байте
    - число).

 @L             n1 addr --- n2
    Помещает на стек 16-битовое значение n2, расположенное
    в сегменте n1 со смещением addr.

 @TIME          --- n1 n2
    Выдает текущее системное время. n1 содержит в левом
    байте часы, в правом байте - минуты; n2 содержит в
    левом байте секунды, в правом байте - сотые доли
    секунд.

 A:             ---
    Устанавливает в качестве текущего диск A:

 ABORT          ---
    Стек сбрасывается и выполняется QUIT.

 ABORT"         f --- (run)
    Если f = TRUE, выводит сообщение Abort: "name" text
    где name - имя слова, а text - текст сообщения,
    следующий за ABORT", и выполняет ABORT.

 ABS            n --- u
    Помещает на стек абсолютную величину числа n. При n
    равном -32768 значение u совпадает с n.

 ACTIVE         --- w_addr
    Помещает на стек адрес блока управления активного окна.

 ACW            --- addr
    Пользовательская переменная, содержащая адрес блока
    управления активного окна.

 AGAIN          ---
    Используется в двоеточечных определениях в виде:
            BEGIN ... AGAIN
    Во время исполнения передает управление на
    соответствующее слово BEGIN. Состояние стека не
    изменяется. Выполнение цикла может быть прервано с
    использованием таких слов, как EXIT, ABORT или QUIT.

 ALARM          ---
    Выдача звукового сигнала тревоги.

 ALLOT          n ---
    Резервирует область памяти длиной n байтов по адресу,
    задаваемому текущим значением указателя словаря. Значе-
    ние указателя словаря увеличивается на величину n.

 AND            n1 n2 --- n3
    Помещает на стек результат n3 побитного выполнения ло-
    гической операции "И" для двух 16-разрядных значений n1
    и n2.

 ASCII          --- c | --- (compiling)
    Используется в виде:
            ASCII c
    Здесь c - символ, ограниченный пробелами. При
    исполнении на стек помещается код данного символа в
    кодировке ASCII. В режиме компиляции код символа c
    компилируется в виде числового литерала, помещаемого
    на стек при выполнении определения.

 ASSEMBLER      ---
    Подключает к текущему контексту словарь ASSEMBLER, со-
    держащий определения, используемые для компиляции ма-
    шинного кода.

 ATS            --- addr
    Переменная, содержащая указатель на CFA активного
    процесса.

 B/BUF          --- n
    Константа, определяющая размер буфера, используемого
    при работе с диском. Задает число байтов, считываемых
    с диска словом BLOCK. Совпадает по величине с размером
    одного зкрана экранного файла.

 B:             ---
    Устанавливает в качестве текущего диск B:

 BACKGROUND     n ---
    Устанавливает значение n (0..15) в качестве текущего
    цвета фона для выводимых на экран символов. Реальный
    цвет фона будет зависеть также от установки режима мер-
    цания (см. BLINK, BLINK-OFF).

 BASE           --- addr
    Пользовательская переменная, содержащая текущее значе-
    ние основания системы счисления, используемое для пре-
    образования числовых значений при вводе и выводе.

 BEEP           freq duration ---
    Подает звуковой сигнал с частотой freq (в Герцах) и
    продолжительностью duration, выраженной в сотых долях
    секунды.

 BEGIN          ---
    Используется в двоеточечных определениях в одном из
    следующих видов:
            BEGIN ... AGAIN
            BEGIN ... UNTIL
            BEGIN ... WHILE ... REPEAT
    Слово BEGIN отмечает начало последовательности действий
    которая может выполняться циклически. В первом случае
    последовательность между BEGIN и AGAIN выполняется в
    бесконечном цикле, из которого возможен только принуди-
    тельный выход (ABORT, EXIT, QUIT и т.д.). Последова-
    тельность между BEGIN и UNTIL выполняется до тех пор,
    пока в момент выполнения UNTIL на вершине стека не
    окажется значение TRUE. В третьем случае последователь-
    ность действий между WHILE и REPEAT выполняется до
    тех пор, пока перед выполнением слова WHILE на стеке
    находится значение TRUE.

 BELL           ---
    Выдача звукового сигнала продолжительностью около
    0.5 с.

 BL             --- 32
    Выдает значение ASCII-кода символа "пробел".

 BLANK          addr n ---
    Заполняет пробелами обасть памяти с адреса addr длиной
    n байтов.

 BLINK          ---
    Устанавливает режим мерцания выведенного на экран дис-
    плея текста. Режим мерцания действует на символы, цвет
    фона которых превышает значение 7, при этом видимый
    цвет фона для мерцающих символов будет на 8 меньше ре-
    ально установленного (см. BACKGROUND).

 BLINK-OFF      ---
    Отменяет режим мерцания выведенного на экран дисплея
    текста. Восстанавливается реальный цвет фона для мерца-
    ющих символов.

 BLK            --- addr
    Пользовательская переменная, содержащая текущий номер
    блока интерпретируемого экранного файла. При BLK равном
    нулю входной текст вводится с терминала.

 BLOCK          n --- addr
    Считывает из текущего экранного файла блок с номером n
    и выдает адрес буферной области addr, в которую блок
    считан. Блок физически считывается с диска только в том
    случае, если в момент обращения к BLOCK он не находится
    в одном из буферов буферной области ФОРТ-системы. При
    этом производится запись на диск последнего считанного
    блока, если для него был установлен признак модификации
    UPDATE. При считывании блока с номером, превышающим
    текущий размер файла, буфер по адресу addr заполняется
    пробелами, и устанавливается значение TRUE в переменной
    DISK-ERROR. Изменение размера файла будет произведено
    только в случае установки признака UPDATE. См. также
    BUFFER, UPDATE, FLUSH, EMPTY-BUFFERS, SAVE-BUFFERS.

 BLOCK-READ     ---
    Физическое считывание блока с номером, находящимся в
    пользовательской переменной REC, с диска.

 BLOCK-WRITE    ---
    Физическая запись блока с номером, находящимся в
    пользовательской переменной REC, на диск.

 BODY>          pfa --- cfa
    По адресу поля параметров словарной статьи pfa выдает
    адрес ее поля кода cfa.

 BORDER         n ---
    Устанавливает цвет окаймления экрана дисплея (n=0-15).

 BRANCH         ---
    Процедура времени выполнения, компилируемая словами
    ELSE, REPEAT, AGAIN. UNTIL и WHILE. Используется для
    выполнения безусловных переходов. В качестве нового
    значения указателя интерпретируемой инструкции ФОРТ-ин-
    терпретатора устанавливается значение, расположенное
    непосредственно вслед за вызовом BRANCH.

 BRKFL          --- addr
    Пользовательская переменная, содержащая признак (TRUE
    или FALSE) прерывания от клавиатуры по нажатия клавиш
    Ctrl/Break.

 BS             --- 8
    Константа, соответствующая ASCII-коду символа "возврат
    курсора" (Backspace). Имеет значение, равное 8.

 BTC            --- addr
    Пользовательская переменная, содержащая значение
    счетчика обращений к экранным файлам (используется
    процедурами доступа к экранным файлам).

 BUFF-TAB       --- addr
    Помещает на стек адрес рабочей таблицы буферов
    (используется процедурами доступа к экранным файлам).

 BUFFER         n --- addr
    Помещает на стек адрес addr первого байта буфера, при-
    писанного физическому блоку с номером n. В данной реа-
    лизации в сегменте памяти ФОРТ-системы для работы с
    дисками выделен один буфер, адрес начала которого всег-
    да выдается словом BUFFER. Содержимое буфера для номе-
    ра n, отличного от номера последнего считанного блока
    (см. BLOCK), считается неопределенным.

 BUILD          ---
    Создает заголовок словарной статьи, формируя поле
    имени из строки, расположенной по текущему адресу
    HERE. Заголовок формируется в виде, используемом в
    CODE-определениях, т.е. поле кода содержит адрес поля
    параметров.

 BYE            ---
    Осуществляет выход из ФОРТ-системы. Сохраняет все
    модифицированные буферы, закрывает текущий экранный
    файл и передает управление операционной системе.

 Black          --- 0
    Константа, соответствующая черному цвету при выводе на
    цветной дисплей.

 Blue           --- 1
    Константа, соответствующая синему цвету при выводе на
    цветной дисплей.

 Brown          --- 6
    Константа, соответствующая коричневому цвету при выводе
    на цветной дисплей.

 C!             b addr ---
    Сохраняет 8-битовое значение b по адресу addr.

 C!L            b n addr ---
    Сохраняет 8-битовое значение d в сегменте n со смещени-
    ием addr.

 C,             b ---
    Сохраняет 8-битовое значение n по адресу, задаваемому
    текущим значением указателя словаря. Указатель словаря
    продвигается на 1 байт.

 C-BYTE         n1 n2 --- b
    Формирует цветовой байт b по заданным значениям цвета
    фона n1 (0..15) и цвета символов n2 (0..15). См. также
    BACKGROUND, FOREGROUND, ?COLOR.

 C-WORD         b --- n
    Для символа с кодом b формирует слово n в виде, соот-
    ветствующем представлению символа в буфере регенерации
    дисплея (видеопамяти). Значение n содержит в младших 8
    битах заданый код b, а в старших 8 битах - текущее зна-
    чение цветового атрибута (см. ?COLOR).

 C:             ---
    Устанавливает в качестве текущего диск C:

 C@             addr --- b
    Помещает на стек 8-битовое значение b, расположенное
    по адресу addr.

 C@L            n addr --- b
    Помещает на стек 8-битовое значение b, расположенное в
    сегменте n со смещением addr.

 CASE           n --- n (run) | --- sys (compile)
    Используется в двоеточечных определениях для задания
    ветвлений в виде
         CASE
            s1 OF ... ENDOF
            s2 OF ... ENDOF
                  ...
            sn OF ... ENDOF
            . . .
         ENDCASE
    где s1,...,sn - селекторы соответствующих ветвей.

 CENTER         wcb_addr ---
    Устанавливает атрибуты расположения окна с
    адресом блока управления wcb_addr для размещения в
    центре экрана. Выполнение возможно только для
    неоткрытых окон.

 CHANGE-DIR     directory-par --- status
    Устанавливает заданную директорию в качестве текущей.
    Возвращает код завершения status. Анализ значения
    status производится словом .STATUS

 CHDIR          ---
    Используется в виде
         CHDIR path
    Устанавливает в качестве текущей директории на текущем
    или указанном устройстве директорию path.

 CLEARSCREEN    ---
    Очищает (заполняет пробелами) активное окно на экране
    дисплея и помещает курсор в левый верхний угол окна.

 CLI            ---
    Запрещение реакции на прерывание от клавиатуры по
    нажатию клавиш Ctrl/Break.

 CLOCK          ---
    Параллельный процесс выдачи реального времени в
    правом верхнем углу экрана.

 CLOSE-FILE     handle_pars --- status
    Закрывает файл, освобождает блок управления и очищает
    соответствующие флаги в HCB. Возвращает код
    завершения status. Анализ значения status
    производится словом .STATUS

 CMOVE          addr1 addr2 n ---
    Пересылает n байтов, расположенных начиная с адреса
    addr1 по адресу addr2. Пересылка производится в направ-
    лении возрастания адресов. При n равном нулю никаких
    действий не выполняется.

 CMOVE>         addr1 addr2 n ---
    Пересылает n байтов, расположенных начиная с адреса
    addr1 по адресу addr2. Пересылка производится в направ-
    лении уменьшения адресов, начиная с байта по адресу
    addr1+n-1, пересылаемого по адресу addr2+n-1. При n
    равном нулю никаких действий не выполняется.

 CMOVEL         n1 addr1 n2 addr2 n3 ---
    Пересылает n3 байтов, расположенных в сегменте n1 со
    смещением addr1 по адресу addr2 в сегменте n2. Пересыл-
    ка производится в направлении возрастания адресов. См.
    CMOVE. При n равном нулю никаких действий не выполняет-
    ся.

 CODE           ---
    Используется в виде: CODE name ... END-CODE
    Формирует словарную статью с именем name, подключает к
    текущему контексту словарь ASSEMBLER для компиляции по-
    следовательности машинных команд, заданной между name
    и END-CODE. Адрес начала данной последовательности за-
    носится в поле кода слова name, и таким образом сформи-
    рованный машинный код выполняется при вызове name.

 COLD           ---
    Cбрасываются стеки, область словаря и ФОРТ-система
    переходит в начальное состояние.

 COLOR-BYTE     --- addr
    Выдает адрес 8-битового поля, содержащего текущее зна-
    чение цветового атрибута (см. ?COLOR).

 COMPILE        ---
    Переписывает двухбайтовое значение, расположенное непо-
    средственно за вызовом COMPILE по текущему значению
    указателя словаря с продвижением его на 2 байта.

 CONSOLE        ---
    Устанавливает в качестве текущего устройства вывода
    терминал. После выполнения слова CONSOLE все данные,
    выводимые с использованием слов EMIT и TYPE, будут
    отображаться на экране дисплея. См. также PRINTER.

 CONSTANT       n ---
    Определяющее слово, используется в виде:
            n CONSTANT name
    Создает словарную статью с именем name, содержащую в
    поле параметров значение n. При выполнении слова name
    значение n помещается на стек.
 CREATE         ---
    Определяющее слово, используется в виде: CREATE name
    Создает заголовок словарной статьи с именем name, после
    чего текущее значение указателя словаря совпадает с ад-
    ресом поля параметров слова name. В момент выполнения
    слова name адрес его поля параметров помещается на
    стек. Слово CREATE не резервирует памяти в поле пара-
    метров слова name.

 CONTEXT        --- addr
    Переменная, содержащая указатель на первый словарь в
    списке словарей, определеяющем текущий порядок поиска.

 CONVERT        ud1 addr1 --- ud2 addr2
    Строка символов, начинающаяся с адреса addr1 и содержа-
    щая изображение числа, преобразуется к числовому виду.
    Значение ud2 получается путем прибавления значения оче-
    редной цифры к промежуточноmу значению ud1, умноженному
    на текущее значение BASE. Преобразование продолжается
    до тех пор, пока в исходной строке не встретится сим-
    вол, не являющийся цифрой. Адрес первого нераспознанно-
    го символа выдается в качестве результата addr2.

 COUNT          addr1 --- addr2 n
    По адресу addr1 строки символов с байтом длины помещает
    на стек адрес ее текстовой части addr2 и длину в байтах
    n. Обычно используется словом TYPE для вывода строк.

 CR             ---
    Выводит символы "возврат каретки" и "перевод строки",
    устанавливает нулевое значение переменной OUT.

 CREATE         ---
    Определяющее слово, используется в виде: CREATE name
    Создает заголовок словарной статьи с именем name, после
    чего текущее значение указателя словаря совпадает с ад-
    ресом поля параметров слова name. В момент выполнения
    слова name адрес его поля параметров помещается на
    стек. Слово CREATE не резервирует памяти в поле пара-
    метров слова name.

 CSA            --- addr
    Пользовательская переменная, содержащая адрес
    текущей строки рабочей таблицы запрограммированных
    клавиш.

 CSP            --- addr
    Переменная, содержащая значение указателя стека, ис-
    пользуемое для обнаружения ошибок в режиме компиляции.
    См. также !CSP, ?CSP.

 CURLEN         --- addr
    Пользовательская переменная, содержащая длину
    исполняемого в данный момент музыкального фрагмента
    (используется при генерации и исполнении мелодий).

 CURRENT        --- addr
    Переменная, содержащая указатель на текущий словарь по-
    полнения.

 CURSOR         ---
    Включает изображение курсора на экране.

 CURSOR-OFF     ---
    "Гасит" изображение курсора на экране.

 Cyan           --- 3
    Константа, соответствующая бледно-голубому цвету при
    выводе на цветной дисплей.

 D*             d1 u --- d2
    Помещает на стек результат умножения 32-разрядного
    числа d1 на 16-разрядное число без знака u. Результат
    d2 выдается в виде 32-разрядного числа.

 D+             d1 d2 --- d3
    Помещает на стек 32-разрядную сумму d1+d2.

 D-             d1 d2 --- d3
    Помещает на стек 32-разрядную разность d1-d2.

 D.             d ---
    Выводит значение 32-разрядного числа d с ведущим знаком
    "-" в случае, если d отрицательно. После вывода числа
    дополнительно выводится один пробел.

 D.R            d n ---
    Выводит число d с выключкой вправо внутри поля шириной
    n символов без завершающего пробела. В случае, если для
    вывода числа d недостаточно n позиций, число выводится
    полностью, без учета формата n.

 D/             d1 u --- d2
    Помещает на стек результат деления 32-разрядного
    числа d1 на 16-разрядное число без знака u. Результат
    d2 выдается в виде 32-разрядного числа.

 D0=            d --- f
    Помещает на стек значение TRUE при d (32-разрядное чис-
    ло) равном нулю, FALSE - в противном случае.

 D0=            d --- f
    Помещает на стек значение TRUE при d (32-разрядное чис-
    ло) равном нулю, FALSE - в противном случае.

 D2/            d1 --- d2
    Помещает на стек 32-разрядное число d2 - результат
    целочисленного деления числа d2 на 2.

 D:             ---
    Устанавливает в качестве текущего диск D:

 D<             d1 d2 --- f
    Помещает на стек значение TRUE при d1 меньшем d2 (d1 и
    d2 - 32-разрядные числa со знаком), FALSE - в противном
    случае.

 D<             d1 d2 --- f
    Помещает на стек значение TRUE при d1 меньшем d2 (d1 и
    d2 - 32-разрядные числa со знаком), FALSE - в противном
    случае.
    Помещает на стек максимальное из значений d1 и d2 (d1 и
    d2 32-разрядные числa со знаком).

 D<=            d1 d2 --- f
    Помещает на стек результат сравнения двух 32-разрядных
    чисел d1 и d2: TRUE - если d1 меньше либо равно d2,
    FALSE - в противном случае.

 D<>            d1 d2 --- f
    Помещает на стек значение TRUE при d1 отличном от d2
    (d1 и d2 - 32-разрядные числa со знаком), FALSE - при
    d1 равном d2.

 D=             d1 d2 --- f
    Помещает на стек значение TRUE при d1 равном d2 (d1 и
 D0=            d --- f
    Помещает на стек значение TRUE при d (32-разрядное чис-
    ло) равном нулю, FALSE - в противном случае.

 D>=            d1 d2 --- f
    Помещает на стек результат сравнения двух 32-разрядных
    чисел d1 и d2: TRUE - если d1 больше либо равно d2,
    FALSE - в противном случае.

 DABS           d1 --- +d2
    Помещает на стек абсолютную величину 32-разрядного чис-
    ла d1.

 DECIMAL        ---
    Устанавливает десятичную систему счисления (значение
    BASE, равное 10).

 DEFINITIONS    ---
    Устанавливает текущий словарь в качестве словаря попол-
    нения.

 DEL            ---
    Используется в виде
         DEL [drive][filename]
    Уничтожает один или несколько файлов на текущем или
    указанном диске. В качестве filename может
    использоваться групповое имя файла.

 DEPTH          --- n
    Выдает количество n 16-битовых элементов, находящихся
    на арифметическом стеке до помещения на стек значения
    n.

 DFLTVOC        --- addr
    Пользовательская переменная, содержащая адрес поля
    кода дополнительного словаря поиска.

 DIGIT          c n1 --- n2 true | c n1 --- false
    Преобразует символ c в коде ASCII в числовой вид n2
    в соответствии с основанием системы счисления n1 с до-
    полнением результата признаком TRUE. Если символ c не
    является цифрой, выдается признак FALSE.

 DIR            ---
    Используется в виде
         DIR [drive][filename]
    Выдает оглавление текущего или указанного диска в окне.
    В качестве filename может использоваться групповое имя
    файла.

 DIRECTORY      ---
    Определяющее слово, используется в виде:
         DIRECTORY name
    Создает блок управления директорией DCB с именем name
    и связывает его с корневой директорией "/". При даль-
    нейшем использовании слова name, на стек будет поме-
    щаться адрес сформированного DCB, называемый "directo-
    ry_par", который используется как аргумент словами
    MKDIR, CHDIR и RMDIR.

 DIRNAME        directory_par ---
    Используется в виде:
              DCB_name DIRNAME path
    Заносит спецификацию директории path из входного потока
    в блок управления директорией DCB_name. В режиме ком-
    пиляции формирует строковый литерал, копируемый в блок
    управления директорией во время выполнения.

 DISK-ERROR     --- addr
    Пользовательская переменная, содержащая признак ошибоч-
    ных ситуаций после выполнения физического чтения или
    записи на диск. Значение FALSE указывает на нормальное
    завершение обмена. Значение TRUE может использоваться
    в качестве признака конца файла при последовательном
    чтении блоков (см. BLOCK).

 DMIN           d1 d2 --- d3
    Помещает на стек минимальное из значений d1 и d2 (d1 и
    d2 - 32-разрядные числa со знаком).

 DNEGATE        d1 --- d2
    Меняет знак 32-разрядного числа d1 на противоположный.

 DO             n1 n2 ---
    Используется в двоеточечных определениях в одном из
    следующих видов:
            DO ... LOOP
            DO ... +LOOP
    Отмечает начало цикла с условием окончания в зависимос-
    ти от значений параметров управления цикла - индекса
    (index) и граничного значения n1 (limit). Начальное
    значение индекса принимается равным n2, при выполнении
    слов LOOP или +LOOP его значение изменяется и проверя-
    ется условие окончания цикла. (См. LOOP и +LOOP). Цикл
    типа DO всегда выполняется по крайней мере один раз.

 DOES>          --- addr | --- (compile)
    Определяет действия, выполняемые при вызове слова,
    сформированного с помощью определяющих слов. Использу-
    ется в виде:
            : namex ... create ... DOES> ... ;
    и далее:  namex name
    Здесь create - определяющее слово CREATE или иное, ис-
    пользующее его. Слово DOES> завершает определяющую
    часть слова namex и отмечает начало действий, выполняе-
    мых при вызове определенных с помощью namex слов. При
    выполнении определенного таким образом слова name на
    стек помещается адрес поля параметров слова name, и вы-
    полняются действия, заданные между DOES> и ; .

 DOS            ---
    Выполняется переход в командный интерпретатор
    операционной системы, при этом АстроФОРТ остается
    резидентом. Возврат в ФОРТ осуществляется командлой
    EXIT операционной системы.

 DOWN           ---
    Перемещает курсор в текущем окне на одну строку вниз
    без изменения горизонтальной позиции. При нахождении
    курсора в нижней строке, в зависимости от режима про-
    тяжки (см. SCROLL, SCROLL-OFF) осуществляется либо про-
    тяжка строк вверх, либо перевод курсора в нижнюю стро-
    ку.

 DP             --- addr
    Переменная, содержащая текущее значение указателя сло-
    варя (адрес первого свободного байта за пространством,
    занятым словарными определениями). См. также HERE.

 DPL            --- addr
    Пользовательская переменная, содержащая относительное
    положение десятичной точки (количество цифр в строке
    справа от точки) в символьном изображении числа при
    вводе (см. NUMBER). Если в изображении исходного числа
    точки нет, устанавливается значение DPL, равное -1.

 DRAW-BORDER    ---
    Отрисовка бордюра активного окна.

 DROP           n ---
    Снимает со стека 16-битовое значение n.

 DTA            --- addr
    Помещает на стек адрес начальной области передачи
    данных ДОС (Data Transfer Area), расположенной в
    префиксе программного сегмента.

 DU<            ud1 ud2 --- f
    Помещает на стек значение TRUE при ud1 меньшем ud2
    (ud1 и ud2 - 32-разрядные числa без знака), FALSE - в
    противном случае.

 DUMP           addr len ---
    В окне выводится шестнадцатиричный и текстовый дамп
    области памяти по адресу addr длиной len в командном
    сегменте ФОРТа.

 DUP            n --- n n
    Дублирует 16-битовое значение n на вершине стека.

 E:             ---
    Устанавливает в качестве текущего диск E:

 EDIT           [ [x y] screen ] ---
    Вызов текстового редактора системы АстроФОРТ. Если
    параметры не заданы, то редактируется последний
    просмотренный в редакторе или словом LIST экран, в
    противном случае редактируется экран с номером screen,
    а курсор устанавливается в позицию (x,y).

 EDITOR         ---
    Словарь определений редактора системы АстроФОРТ.

 ELSE           ---
    Используется в двоеточечных определениях в виде:
            flag IF (tp) ... ELSE (fp) ... THEN
    В случае выполнения последовательности слов (tp) по ее
    завершении слово ELSE передает управление на код,
    расположенный за соответствующим THEN, пропуская,
    таким образом, выполнение ветви (fp). См. IF, THEN.

 EMIT           b ---
    Выводит символ с ASCII-кодом b. При выводе каждого сим-
    вола значение переменной OUT увеличивается на 1. Управ-
    ляющие символы обрабатываются особым образом:
             7 - включение звукового сигнала (продолжитель-
                 ностью около 0.5 с.);
             8 - возврат курсора на одну позицию влево с
                 заменой символа, находящегося в позиции
                 курсора на пробел (backspace);
            10 - переход на следующую строку;
            13 - возврат каретки (переход к началу текущей
                 строки с обнулением переменной OUT).

 EMPTY-BUFFERS  ---
    Расписывает буферную область нулевыми кодами и помечает
    все буферы как свободные (не содержащие считанных бло-
    ков). Блоки, помеченные признаком UPDATE на диске не
    сохраняются. Используется как инициализирующая процеду-
    ра, выполняемая перед началом работы с дисками.

 ENCLOSE        addr1 c --- addr1 n1 n2 n3
    Процедура сканирования текста, используемая словом
    WORD. По адресу строки addr1 и символу-ограничителю с
    ASCII-кодом c вырабатывает смещение (относительно addr)
    n1 первого не совпадающего с разделителем символа, сме-
    щение n2 первого разделителя и смещение n3 для текста,
    следующего непосредственно за найденным разделителем.
    Обнаруживаемый при сканировании символ с нулевым кодом
    всегда рассматривается как ограничитель, при этом зна-
    чение n3 равно значению n2.

 ENDCASE        n --- (run) | sys --- (compile)
    Завершает структуру ветвления CASE.

 ENDOF          --- (run) | sys --- sys (compile)
    Завершает ветвь выбора в структуре ветвления CASE.

 ENVIRONMENT    addr --- addr1 | 0
    Поиск значения, задаваемого строкой с байтом длины,
    расположенной по адресу addr, в параметрах среды
    (Environment) операционной системы.  При успешном
    поиске результат возвращается в виде строки с байтом
    длины по адресу addr1, при неудачном поиске выдается
    нулевое значение.

 ERASE          addr n ---
    Расписывает область памяти длиной n байтов, начинающую-
    ся с адреса addr, байтами с нулевыми значениями.

 ERROR          n ---
    Выдает сообщение об ошибке с номером n и осуществляет
    инициализацию ФОРТ-интерпретатора. Все сообщения систе-
    мы размещаются в файле FORTH.MSG, начиная с экрана
    no. 4. Каждое сообщение занимает ровно одну строку. Все
    сообщения имеют сквозную нумерацию (первая строка 4-го
    экрана соответствует сообщению no. 0, первая строка
    5-го экрана - сообщению no. 16 и т.д.).
    Реализовано в виде оконной процедуры.

 EXCLUDE        ---
    Отключение текущего словаря дополнительного поиска
    (см. INCLUDE).

 EXECUTE        addr ---
    Выполняет слово с адресом поля кода addr.

 EXIT           ---
    Завершает выполнение текущего слова с передачей управ-
    ления в точку, следующую непосредственно за вызовом
    слова, в котором выполняется EXIT. Не разрешается ис-
    пользование слова EXIT внутри циклов типа DO-LOOP.

 EXPECT         addr n ---
    Вводит с терминала строку символов длиной, не превышаю-
    щей n, по адресу addr. Введенная строка дополняется в
    конце символом с нулевым кодом. Количество введенных
    словом EXPECT символов помещается в переменную SPAN.
    Реализовано в виде процедуры, работающей на активном
    окне и допускающей возможность полноэкранного редакти-
    рования текста. При нажатии клавиши "RETURN" вводится
    строка активного окна, в которой находится курсор.
    Символ "возврат каретки", вырабатываемый клавишей
    "RETURN" в содержимое вводимой строки не входит.

 FALSE          --- false
    Константа, соответствующая логическому значению "ложь"
    (false). Представляется 16-битовым словом, в котором
    все разряды нулевые (целое значение 0).

 FCHR           addr l c --- addr1 | 0
    Поиск символа с кодом c в строке длиной l,
    начинающейся с адреса addr. Если символ найден, в
    качестве результата выдается адрес его первого
    вхождения addr1, в противном случае выдается нулевое
    значение.

 FDOS           function parameter --- AX-code BX-code
    Обращение к функциям операционной системы. Реализуется
    через программное прерывание 21H. Номер функции
    function передается через регистр AH, входной параметр
    parameter - через регистр DX. В качестве результата
    выдаются значения регистров AX (AX-code) и BX
    (BX-code), возвращаемые операционной системой.

 FENCE          --- addr
    Переменная, содержащая старший адрес защищенной области
    словарной памяти. Любое словарное определения с адресом
    поля имени, не превосходящим значения переменной FENCE,
    не может быть удалено из словаря посредством операции
    FORGET без предварительного изменения переменной FENCE.
    При сохранении текущего экземпляра ФОРТ-системы во
    внешней памяти (см. SAVE) значение переменной FENCE ав-
    томатически устанавливается равным текущему значению
    указателя словаря.

 FILENAME       handle_pars ---
    Используется в виде:
              HCB_name FILENAME [path]filename
    Заносит спецификацию файла [path]filename из входного
    потока в дескриптор файла HCB_name. В режиме компиляции
    формирует строковый литерал, копируемый в дескриптор
    файла во время выполнения.

 FILL           addr n b ---
    Расписывает область памяти длиной n байтов, начинающую-
    ся с адреса addr, байтами со значением b.

 FIND           addr1 --- addr2 n
    Отыскивает в словаре в соответствии с текущим порядком
    поиска словарную статью с именем, задаваемым строкой с
    байтом длины, расположенной по адресу addr1. В случае
    успешного поиска выдается адрес поля кода addr2 найден-
    ной словарной статьи, а признак n устанавливается рав-
    ным 1, если слово помечено признаком немедленного ис-
    полнения (IMMEDIATE) и равным -1 в противном случае.
    Если слово с заданным именем в словаре не найдено, зна-
    чение addr2 совпадает с addr1, а признак n устанавли-
    вается равным нулю.

 FLUSH          ---
    Записывает на диск считанные блоки, отмеченые признаком
    UPDATE, освобождает все буфера ФОРТ-системы.
    Выполняется при смене текущего экранного файла,
    при завершении работы с ФОРТ-системой.

 FNCHR          addr l c --- addr1 | 0
    Поиск первого символа с кодом, отличным от c, в строке
    длиной l, начинающейся с адреса addr. При удачном
    поиске в качестве результата выдается адрес addr
    первого отличного от c символа, в противном случае
    выдается нулевое значение.

 FOREGROUND     n ---
    Устанавливает значение n (0..15) в качестве текущего
    цвета символов, выводимых на экран дисплея.

 FORGET         ---
    Используется в виде: FORGET name
    Удаляет из словаря определение с именем name и все оп-
    ределения, включенные в словарь после определения name,
    независимо от словарей, в которые они помещены. Если
    слово с именем name при текущем порядке поиска в слова-
    ре не находится, возникает сообщение об ошибке.

 FORTH          ---
    Устанавливает в качестве текущего словаря словарь с
    именем FORTH. Словарь FORTH является исходным словарем
    пополнения и всегда включен в текущий контекст, опреде-
    ляющий порядок поиска имен в словаре.

 FORTH-83       ---
    Устанавливает в качестве текущего словаря и словаря
    пополнения (CONTEXT и CURRENT) словарь с именем FORTH.
    Словарь FORTH является исходным словарем пополнения и
    всегда включен в текущий контекст, определяющий порядок
    поиска имен в словаре.

 FSA            --- addr
    Пользовательская переменная, содержащая адрес
    начальной строки рабочей таблицы запрограммированных
    клавиш.

 GET-ATTRIB     handle_pars --- attrib 0        (succesful)
                            --- status          (error)
    Выдает атрибуты файла (системный, только чтение и т.п.)

 GET-DIR        drive --- status
    Выдает имя текущей директории для заданного устройства
    drive. Имя директории (при нулевом коде ошибки status)
    помещается в рабочую область памяти SCRRATCH-BUFF в ви-
    де ASCII-строки, дополненной справа нулевым кодом. Уст-
    ройство drive задается целым числом в диапазоне 0-63:
    0 - текущее устройство, 1 - A:, 2 - B: и т.д. Функцию
    GET-DIR нельзя вызывать в промежутке между выполнением
    слов SEARCH-FIRST и SEARCH-NEXT.

 GOTOXY         n1 n2 ---
    Устанавливает курсор в позицию с координатами (n1,n2)
    относительно левого верхнего угла активного окна. Зна-
    чение n1 должно лежать в диапазоне 0..W.WIDTH-1, зна-
    чение n2 - в диапазоне 0..W.HEIGHT-1. Если какая-либо
    из координат n1 или n2 выходит за пределы окна, то по
    данной координате курсор устанавливается в ближайшую
    граничную позицию, лежащую внутри окна.

 Green          --- 2
    Константа, соответствующая зеленому цвету при выводе на
    цветной дисплей.

 Grey           --- 8
    Константа, соответствующая серому цвету при выводе на
    цветной дисплей.

 H-CONTRACT     ---
    Уменьшает размер активного окна по горизонтали на одну
    позицию. Правый столбец окна удаляется, правая граница
    сдвигается на один столбец влево. Если текущая ширина
    окна равна одной позиции, никаких действий не произво-
    дится.

 H-EXPAND       ---
    Увеличивает размер активного окна по горизонтали на од-
    ну позицию. В правой части окна добавляется столбец,
    заполненный пробелами с текущими цветовыми атрибутами,
    правая граница окна сдвигается на одну позицию вправо.
    Если правая граница окна совпадает с крайней правой по-
    зицией экрана, никаких действий не производится.

 HALT           ---
    Завершение работы Форт-системы, закрытие экранного
    файла и выход в операционную систему.

 HANDLE         ---
    Определяющее слово, используется в виде:
         HANDLE HCB_name
    Создает дескриптор файла (HCB), содержащий спецификацию
    файла, управляющую информацию, выдаваемую файловой сис-
    темой ОС и специальные признаки, используемые ФОРТ-сис-
    темой при выполнении операций над файлами. При дальней-
    шем выполнении слова HCB_name на стек помещаются пара-
    метры дескриптора "handle_pars" - адрес HCB и текущее
    значение управляющей информации.

 HELLO          ---
    Запускает экземпляр Форт-интерпретатора в активном
    окне.

 HELP           ---
    Выдача справочной информации по системе АстроФОРТ.
    Используется в виде
         HELP [name]
    где name - имя слова. Если name не задано, выводится
    информация о работе с клавиатурой (как при нажатии
    клавиши F1), в противном случае выдается описание
    заданного слова.

 HERE           --- addr
    Помещает на стек текущее значение указателя словаря.

 HEX            ---
    Устанавливает шестнадцатиричную систему счисления (зна-
    чение BASE, равное 16).

 HIDDEN         ---
    Словарь скрытых определений системы АстроФОРТ.

 HLD            --- addr
    Пользовательская переменная, содержащая адрес последне-
    го символа, помещенного в выходную строку, формируемую
    процедурами преобразования чисел в текстовый вид (См.
    <# # #S SIGN HOLD и #> ).

 HOLD           c ---
    Приписывает к выходной строке, используемой процедурами
    преобразования чисел в текстовый вид, символ с ASCII-
    кодом c. (См. также <# # #S SIGN HOLD и #> ).

 HOME           ---
    Устанавливает курсор в левую верхнюю позицию активного
    окна.

 I              --- n
    Используется внутри циклов типа DO-LOOP. Помещает на
    стек текущее значение индекса для самого внутреннего
    цикла. См. также J.

 IF             f --- (run) | --- sys (compile)
    Используется в двоеточечных определениях в одном из
    следующих видов:
            IF (tp) ... ELSE (fp) ... THEN
            IF (tp) ... THEN
    При выполнении проверяет значение флага f на вершине
    стека. При f отличном от нуля (TRUE) выполняется ветвь
    tp (true-part), при f равном FALSE - ветвь fp (false-
    part). По завершении выполнения той или иной ветви уп-
    равление передается в точку, следующую непосредственно
    за соответствующим THEN. Ветвь ELSE может быть опущена,
    и в этом случае при f равном FALSE управление сразу
    передается в точку, следующую за THEN.

 IFL            --- addr
    Пользовательская переменная, содержащая признак
    разрешения прерываний от клавиатуры по нажатию клавиш
    Ctrl/Break: TRUE - прерывания разрешены, FALSE -
    прерывания игнорируются.

 IMMEDIATE      ---
    Устанавливает признак немедленного исполнения для по-
    следнего определенного в словаре слова.

 INCLUDE        ---
    Установка словаря дополнительного поиска. Используется
    в виде:
            INCLUDE name ,
    где name - имя словаря. В дальнейшем при неудачном
    поиске некоторого слова в текущем контексте оно будет
    искаться дополнительно в словаре name.

 INDEX          [n1 n2] ---
    В окне выводится индекс указанного диапазона экранов
    текущего экранного файла. Если диапазон экранов не
    указан, выводится индекс всего экранного файла.

 INPUT-DIRNAME  directory_par ---
    Вводит спецификацию директории с терминала в блок уп-
    равления директорией, задаваемый параметром directo-
    ry_par. Максимальная допустимая длина имени директории
    составляет 63 символа.

 INPUT-FILENAME handle_pars ---
    Вводит спецификацию файла с терминала в дескриптор фай-
    ла, задаваемый параметром handle_pars. Максимальная до-
    пустимая длина имени файла составляет 63 символа.

 INTERPRET      ---
    Выполняет интерпретацию текста, вводимого с терминала
    из экранного файла, последовательно выполняя или компи-
    лируя (в зависимости от режима STATE) слова из входного
    потока. В случае, если очередное слово не найдено в
    словаре, производится его преобразование к числовому
    литералу в соответствии с текущим основанием счисления
    BASE. При неуспешном преобразовании числа возникает
    ошибочная ситуация и интерпретация входного потока пре-
    рывается.

 J              --- n
    Используется внутри циклов типа DO-LOOP. Помещает на
    стек текущее значение индекса для цикла, объемлющего
    цикл, в котором использовано слово J. См. также I.

 KEY            --- b
    Помещает на стек ASCII-код очередного введенного с кла-
    виатуры символа. Если в момент выполнения слова KEY бу-
    фер клавиатуры пуст, происходит переход в состояние
    ожидания ввода символа. Слово KEY может быть использо-
    вано только для реакции на нажатие клавиш, вырабатываю-
    щих ASCII-коды. При нажатии клавиш, вырабатывающих уп-
    равляющие коды слово KEY остается в состоянии ожидания.
    Для ввода управляющих кодов необходимо использовать
    слово PCKEY.

 KEYBRD         --- b
    Помещает на стек байт b состояния клавиатуры.
    Значение "1" в соответствующем бите байта состояния
    имеет следующий смысл:
            0: нажата правая клавиша Shift;
            1: нажата правая клавиша Shift;
            2: нажата клавиша Ctrl;
            3: нажата клавиша Alt;
            4: установлен режим  Scroll Lock;
            5: установлен режим  Num Lock;
            6: установлен режим  Shift/Caps Lock;
            7: установлен режим  Insert.

 KILL           ---
    Уничтожение процесса. Используется в виде
         KILL name
    где name - имя процесса. Это слово может выполняться
    только из процесса MAIN.

 KILL-DIR       directory_par --- status
    Удаляет директорию. Директория будет уничтожена
    только в том случае, когда в ней нет файлов. В противном
    случае директория не будет уничтожена.
    На стеке возвращается код завершения данной операции.
    Анализ status производится словом .STATUS

 KILL-FILE      handle_pars --- status
    Удаляет файл с дескриптором handle_pars. Если файл
    открыт, он предварительно закроется. Если файл имеет
    атрибут "read-only", файл удален не будет. Анализ
    status производится словом .STATUS

 L>NAME         lfa --- nfa
    По адресу поля связи словарной статьи lfa выдает адрес
    ее поля имени nfa.

 LAST           --- addr
    Пользовательская переменная, содержащая значение
    последнего введенного с клавиатуры символа.

 LATEST         --- addr
    Помещает на стек адрес поля имени последнего слова,
    определенного в текущем словаре пополнения.

 LEAVE          ---
    Завершает выполнение текущего цикла типа DO-LOOP. Уп-
    равление передается в точку, следующую непосредственно
    за соответствующим данному циклу ограничивающему слову
    LOOP или +LOOP. Используется внутри цикла в виде:
            DO ... LEAVE ... LOOP или
            DO ... LEAVE ... +LOOP
    Может также использоваться и в циклах ?DO-LOOP. Слово
    LEAVE может помещаться внутри других управляющих кон-
    струкций, используемых внутри цикла. Внутри одного цик-
    ла возможно многократное использование LEAVE.

 LEFT           ---
    Перемещает курсор в текущем окне на одну позицию влево.
    При нахождении курсора в крайней левой позиции произ-
    водится его перевод в крайнюю правую позицию и переме-
    щение на одну строку вверх, при этом в режиме SCROLL
    возможна протяжка активного окна (см. UP).

 LINK>          lfa --- cfa
    По адресу поля связи словарной статьи lfa выдает адрес
    ее поля кода cfa.

 LIST           n ---
    Вывод экрана n из текущего экранного файла.

 LITERAL        n --- (compile)
    Компилирует процедуру LIT для помещения на стек 16-
    разрядного числа n, или BLIT для чисел в диапазоне
    0-0FFh),размещая значение n непосредственно
    вслед за вызовом слова LIT или BLIT.

 LOAD           n ---
    Интерпретирует входной текст, начинающийся с n-го экра-
    на текущего файла. Запоминаются значения переменных
    >IN и BLK, определяющих текущий входной поток, входной
    поток переключается на начало n-го экрана установкой
    нулевого значения >IN и BLK равного n. Интерпретация
    (загрузка) текста завершается по исчерпании текста либо
    при возникновении ошибочных ситуаций. Ошибочная ситуа-
    ция возникает также при попытке загрузки экрана с номе-
    ром n меньшем либо равным нулю.
    См. также >IN, BLK, -->, BLOCK.

 LOAD-USING     n ---
    Загрузка экранного файла. Используется в виде
         n LOAD-USING [drive]filename[.filetype]
    Текущий экранный файл закрывается, а указанный файл
    становится текущим экранным. Если тип файла не указан,
    ищется файл типа .SCR. После завершения загрузки (см.
    LOAD) восстанавливается текущий экранный файл.

 LOOP           n --- ( run ) | sys --- ( compile )
    Используется в двоеточечном определении в виде:
            DO ... LOOP
    Параметр цикла index увеличивается на 1. Если новое
    значение индекса равно значению параметра цикла limit,
    цикл завершается, и параметры управления циклом сбрасы-
    ваются со стека возвратов. В противном случае передает-
    ся управление на выполнение кода, расположенного непо-
    средственно за соответствующим заголовком цикла DO или
    ?DO. См. также DO, ?DO, LOOP, LEAVE.

 LSEARCH        s1 addr1 l1 s2 addr2 l2 --- addr | 0
    Межсегментный поиск вхождения строки по адресу
    s1:addr1 длиной l1 в строке по адресу s2:addr2 и
    длиной l2.  При успешном поиске в качестве результата
    выдается адрес первого найденного вхождения addr, при
    неуспешном - нулевое значение.

 Light-Blue     --- 9
    Константа, соответствующая ярко-синему цвету при выводе
    на цветной дисплей.

 Light-Cyan     --- 11
    Константа, соответствующая ярко-голубому цвету при вы-
    воде на цветной дисплей.

 Light-Green    --- 10
    Константа, соответствующая ярко-зеленому цвету при вы-
    воде на цветной дисплей.

 Light-Magenta  --- 13
    Константа, соответствующая ярко-сиреневому цвету при
    выводе на цветной дисплей.

 Light-Red      --- 12
    Константа, соответствующая ярко-красному цвету при вы-
    воде на цветной дисплей.

 Light-White    --- 15
    Константа, соответствующая ярко-белому цвету при выводе
    на цветной дисплей.

 MAIN           ---
    Основной процесс взаимодействия с пользователем.

 MAKE-DIR       directory_par --- status
    Создает новую директорию. Имя директории и ее полная
    спецификация берутся из DCB (блок управления
    директорией). На стеке возвращается код завершения
    данной операции. Анализ status производится
    словом .STATUS

 MAKE-FILE      handle_pars --- status
    Создает файл и открывает его на запись.
    Если файл уже сушествует, то его длина становится
    равной 0. Имя файла и его полная спецификация берутся
    из дескриптора файла.
    Созданному файлу приписывается аттрибут "normal",
    который может быть изменен с помощью слова SET-ATTRIB.
    На стеке возвращается код завершения данной операции.
    Анализ status производится словом .STATUS

 MAX            n1 n2 --- n3
    Помещает на стек максимальное из значений n1 и n2.

 MESSAGE        n ---
    При положительных значениях переменной WARNING выводит
    текст сообщения с номером n из файла FORTH.MSG (см.
    ERROR), при нулевом значении WARNING выводит сообщение
    вида "Message: n", при отрицательных значениях никаких
    действий не производится.

 MIN            n1 n2 --- n3
    Помещает на стек минимальное из значений n1 и n2.

 MOD            n1 n2 --- n3
    Помещает на стек остаток от деления n1/n2. Остаток n3
    имеет тот же знак, что и делитель n2, либо равен нулю.

 MODBLK         --- addr
    Пользовательская переменная, содержащая признак (TRUE
    или FALSE) модификации последнего считанного буфера
    (используется процедурами доступа к экранным файлам).

 MODSCR         --- addr
    Пользовательская переменная, содержащая признак
    модификации текущего экрана (используется редактором
    экранного файла).

 MOVE           addr1 addr2 n ---
    Пересылает n 16-битовых слов расположенных начиная с
    адреса addr1 по адресу addr2. Пересылка производится в
    направлении возрастания адресов. При n равном нулю ни-
    каких действий не выполняется.

 MOVE-DOWN      ---
    Перемещает активное окно на экране на одну строку вниз.
    Если нижняя граница окна совпадает с нижней строкой эк-
    рана, никаких действий не производится.

 MOVE-LEFT      ---
    Перемещает активное окно на экране на одну позицию
    влево. Если левая граница окна совпадает с крайней ле-
    вой позицией экрана, никаких действий не производится.

 MOVE-RIGHT     ---
    Перемещает активное окно на экране на одну позицию
    вправо. Если правая граница окна совпадает с крайней
    правой позицией экрана, никаких действий не производит-
    ся.

 MOVE-UP        ---
    Перемещает активное окно на экране на одну строку
    вверх. Если верхняя граница окна совпадает с верхней
    строкой экрана, никаких действий не производится.

 MOVEL          segm1 disp1 segm2 disp2 n ---
    Межсегментная пересылка области памяти длиной n слов
    (2n байтов) с адреса segm1:disp1 по адресу
    segm2:disp2. Пересылка осуществляется в направлении
    возрастания адресов.

 MOVEL>         segm1 disp1 segm2 disp2 n ---
    Межсегментная пересылка области памяти длиной n слов
    (2n байтов) с адреса segm1:disp1 по адресу
    segm2:disp2. Пересылка осуществляется в направлении
    убывания адресов.

 MS             n ---
    Пауза в течение примерно n миллисекунд. (Правильное
    выполнение обеспечивается только на процессоре типа
    i8088).

 MU/MOD         d n --- rem dquot
    Выдает 16-разрядное частное rem и 32-разрядный остаток
    dquot от деления 32-разрядного числа d на 16-разрядное
    число n.

 Magenta        --- 5
    Константа, соответствующая сиреневому цвету при выводе
    на цветной дисплей.

 N>LINK         nfa --- lfa
    По адресу поля имени словарной статьи nfa выдает адрес
    ее поля связи lfa.

 NAME>          nfa --- cfa
    По адресу поля имени словарной статьи nfa выдает адрес
    ее поля кода cfa.

 NEGATE         n1 --- n2
    Меняет знак числа n1 на противоположный.

 NEXT           ---
    Переход к интерпретации следующего Форт-определения
    ("пустое слово").

 NOT            n1 --- n2
    Помещает на стек результат n2 побитного выполнения ло-
    гической операции "НЕ" для 16-разрядного значения n1.

 NUMBER         addr --- d
    Преобразует символьную строку с байтом длины, располо-
    женную по адресу addr и дополненную справа пробелом или
    символом с нулевым кодом, в 32-битовое число в соответ-
    ствии с текущим значением основания счисления BASE.
    Если в символьном изображении числа встречается деся-
    тичная точка ".", то ее относительное положение в стро-
    ке запоминается в переменной DPL, преобразование числа
    при этом осуществляется без учета положения точки.
    Если в изображении числа встречаются недопустимые в те-
    кущей системе счисления символы, возникает ошибочная
    ситуация. См. также CONVERT.

 OF             n --- n (run) | sys --- sys (compile)
    Начинает ветвь выбора в структуре ветвления CASE.

 OPEN-FILE      handle_pars --- status
    Открывает файл на запись и на чтение.
    Имя файла и его полная спецификация берутся из
    дескриптора файла. Если файл помечен как "read-only"
    (доступный для открытия только на чтение),
    то будет зафиксирована ошибка. В этом случае следует
    воспользоваться словом OPEN-FILE-R/O.
    На стеке возвращается код завершения данной операции.
    Анализ status производится словом .STATUS

 OPEN-FILE-R/O  handle_pars --- status
    Открывает файл только на чтение. При попытке записать
    какую либо информацию в открытый таким образом файл
    будет зафиксирована ошибка.
    Если файл помечен как "read-only" (только чтение),
    то открыть его можно только с помощью этого слова.
    На стеке возвращается код завершения данной операции.
    Анализ status производится словом .STATUS

 OR             n1 n2 --- n3
    Помещает на стек результат n3 побитного выполнения ло-
    гической операции "ИЛИ" для двух 16-разрядных значений
    n1 и n2.

 OUT            --- addr
    Пользовательская переменная, содержащая текущее коли-
    чество символов, выведенных в последней строке. Может
    быть использована для управления форматом вывода.

 OVER           n1 n2 --- n1 n2 n1
    Копирует на вершину стека второе сверху 16-битовое
    значение n1.

 P!             n1 n2 ---
    Выводит двухбайтовое значение n1 во внешний порт с но-
    мером n2.

 P@             n1 --- n2
    Считывает значение n1 из двухбайтового внешнего порта
    с номером n1.

 PAD            --- addr
    Выдает адрес буферной области, используемой для проме-
    жуточной обработки данных. Адрес PAD изменяется при из-
    менении значения указателя словаря, при этом помещенные
    в указанную буферную область данные могут оказаться ут-
    раченными.

 PARSE-FILENAME FCB_addr addr ---
    Анализ имени файла, задаваемого строкой по адресу
    addr, и занесение его в блок управления файлом,
    расположенный по адресу FCB_addr.

 PAUSE          ---
    Принудительное переключение процессов. Активный
    процесс прерывается и активизируется следующий в
    списке процессов. Если существует всего один процесс,
    то переключение процессов ничего не изменяет, так как
    список процессов является циклическим.

 PC!            b n ---
    Выводит однобайтовое значение b во внешний порт с ноme-
    ром n.

 PC@            n --- b
    Считывает значение b из однобайтового внешнего порта с
    номером n.

 PCKEY          --- b | --- b 0
    Ввод данных с клавиатуры. Для клавиш, вырабатывающих
    ASCII-коды, выдается код символа b, для управляющих
    клавиш - код клавиши b и нулевой флаг.

 PERFORM        addr ---
    Выполняет слово, адрес поля кода которого расположен в
    памяти по адесу addr (косвенный EXECUTE).

 PICK           n1 --- n2
    Копирует на вершину стека n1-ое сверху 16-битовое зна-
    чение n2. Элементы стека нумеруются от вершины, начи-
    ная с нулевого номера.

 PLAY           addr ---
    Воспроизводит в фоновом режиме мелодию, задаваемую
    музыкальным фрагментом, сформированным по адресу addr.

 PLAYPTR        --- addr
    Пользовательская переменная, содержащая текущее
    значение указателя для звукового генератора.

 PRINT          n1 n2 ---
    Параллельный процесс распечатки текущего экранного
    файла. n1 и n2 задают диапазон распечатываемых экранов.
    Смена текущего экранного файла не влияет на работу
    процесса PRINT.

 PRINTER        ---
    Устанавливает в качестве текущего устройства вывода
    печатающее устройство (принтер). После выполнения
    слова PRINTER все данные, выводимые с использованием
    слов EMIT и TYPE, будут выводиться на принтер. См.
    также CONSOLE.

 QUERY          ---
    Вводит строку с терминала (с использованием EXPECT) во
    входной текстовый буфер TIB, помещает количество симво-
    лов во введенной строке в перемeнную #TIB и устанавли-
    вает нулевое значение переменной >IN.

 QUIT           ---
    Инициализирует цикл ФОРТ-интерпретатора - опустошает
    стек возвратов, устанавливает значение BLK равным нулю
    для ввода входного потока с терминала.

 R0             --- addr
    Переменная, содержащая начальное значение указателя
    стека возвратов.

 R>             --- n
    Перемещает элемент с вершины стека возвратов на ариф-
    метический стек. См. также >R и R@.

 R@             --- n
    Копирует на арифметический стек верхний элемент стека
    возвратов. Состояние стека возврата не изменяется.
    См. также >R и R>.

 READ           handle_pars length buf  --- bytes_read 0
                                        --- -1      (EOF)
                                        --- status  (error)
    Чтение из файла или с устройства. Не гарантируется,
    что все байты будут прочитаны. Если чтение происходит,
    например, с клавиатуры, то символы возврата каретки и
    перехода на новую строку будут добавлены к читаемым
    данным и учтены в счетчике прочитанных данных.

 REC            --- addr
    Переменная, содержащая текущий номер блока текущего
    экранного файла. Используется операциями чтения и
    записи BLOCK-READ и BLOCK-WRITE.

 RECURSE        ---
    Компилирует рекурсивный вызов определяемого в данный
    момент слова. Используется только в режиме компиляции.

 RENAME-FILE    handle1_pars handle2_pars --- status
    Изменяет имя файла. Это слово может быть также
    использовано для перемещения файла из одной директории
    в другую в пределах одного устройства.

 REPEAT         ---
    Завершает структуру управления вида BEGIN ...
    WHILE ...
 THEN           ---
    Завершает структуры управления вида IF ... THEN и
    IF ... ELSE ... THEN.

 RIGHT          ---
    Перемещает курсор в текущем окне на одну позицию впра-
    во. При нахождении курсора в крайней правой позиции
    производится его перевод в крайнюю левую позицию и пе-
    ремещение на одну строку вниз, при этом в режиме SCROLL
    возможна протяжка активного окна (см. DOWN).

 ROLL           n1 --- n2
    Прокрутка стека. Перемещает на вершину стека
    n1-ое сверху 16-битовое значение n2. Элементы стека
    нумеруются от вершины, начиная с нулевого номера.

 ROOT           --- directory_par
    Блок управления директорией, предопределенный для
    корневой директории "\".

 ROT            n1 n2 n3 --- n2 n3 n1
    Перемещает на вершину стека третье сверху 16-битовое
    значение n1.

 RP!            addr ---
    Устанавливает начальное значение указателя стека воз-
    вратов (переменная R0) равным addr.

 RP@            --- addr
    Помещает на стек текущее значение указателя стека воз-
    вратов.

 RUN            ---
    Используется в виде
         RUN [path]filename parameters
    Выполняет указанный файл операционной системы, как
    программу. Обязательно должен быть указан тип файла
    (.COM или .EXE). Файлы типа .BAT выполнять таким
    образом нельзя (но можно выполнить COMMAND.COM, передав
    ему параметром команду выполнения файла типа .BAT)

 Red            --- 4
    Константа, соответствующая красному цвету при выводе на
    цветной дисплей.

 S0             --- addr
    Переменная, содержащая начальное значение указателя
    арифметического стека.

 S=             addr1 addr2 length --- f
    Помещает на стек результат сравнения (TRUE или FALSE)
    двух последовательностей байтов длиной length.
    Последовательности начинаются соответственно с адресов
    addr1 и addr2.

 S>D            n --- d
    Преобразует 16-разрядное число со знаком в 32-разрядное
    число со знаком.

 SAVE           ---
    Сохранение текущего состояния ФОРТ-системы на диске.
    Используется в виде
         SAVE [drive]filename[.filetype]
    Указание устройства и типа файла может быть опущено,
    в таком случае система сохраняется на текущем
    устройстве в файле типа .COM

 SAVE-BUFFERS   ---
    Записывает на диск блоки, помеченные признаком UPDATE.
    Содержимое буферов сохраняется, снимается признак
    UPDATE.

 SCF            --- addr
    Пользовательская переменная, содержащая признак (TRUE
    или FALSE) протяжки экрана.

 SCR            --- addr
    Пользовательская переменная, содержащая номер эрана те-
    кущего файла, указанного при последнем обращении к сло-
    ву LIST, или установленного при выходе из редактора
    EDIT.

 SCRATCH-FILE   --- handle_pars
    Помещает на стек параметры рабочего дескриптора
    handle_pars, используемого для работы с временными
    файлами (см. HANDLE).

 SCROLL         ---
    Устанавливает режим автоматической протяжки строк в ак-
    тивном окне при выводе текста и при перемещении курсо-
    ра. При полном заполнении нижней строки активного окна
    или при перемещении вниз курсора, находящегося в нижней
    строке, осуществляется протяжка содержимого окна вверх,
    а при перемещении вверх курсора, находящегося в верхней
    строке - протяжка вниз.

 SCROLL-DOWN    ---
    Осуществляет протяжку на одну строку вниз содержимого
    активного окна. Освобождающаяся верхняя строка заполня-
    ется пробелами с текущим цветовым атрибутом. Положение
    курсора в окне не изменяется.

 SCROLL-OFF     ---
    Отменяет режим автоматической протяжки строк в активном
    окне при выводе текста и при перемещении курсора (см.
    SCROLL). После заполнения нижней строки активного окна
    вывод текста продолжается с верхней строки. При переме-
    щении вверх (вниз) курсора, находящегося в верхней
    (нижней) строке окна, курсор переводится соответственно
    в нижнюю (верхнюю) строку без изменения горизонтальной
    позиции.

 SCROLL-UP      ---
    Осуществляет протяжку на одну строку вверх содержимого
    активного окна. Освобождающаяся нижняя строка заполня-
    ется пробелами с текущим цветовым атрибутом. Положение
    курсора в окне не изменяется.

 SD             --- addr
    Пользовательская переменная, содержащая текущее
    значение указателя свободной памяти в дополнительном
    сегменте Форт-системы.

 SEARCH         addr1 l1 addr2 l2 --- addr | 0
    Поиск вхождения строки по адресу addr1 длиной l1 в
    строке по адресу addr2 и длиной l2.  При успешном
    поиске в качестве результата выдается адрес первого
    найденного вхождения addr, при неуспешном - нулевое
    значение.

 SEARCH-FIRST   handle_pars attrib --- status
    Поиск файла с указанной спецификацией. После нахождения
    файла поиск прекращается. Поиск можно задавать по
    образцу. Возвращает результат в области передачи
    данных ДОС по адресу DTA (Data Transfer Area).
    Смотри SEARCH-NEXT.

 SEARCH-NEXT    --- status
    Поиск следующего файла с указанной спецификацией.
    Используется после выполнения слова SEARCH-FIRST.
    Входные параметры берет из SCRATCH_BUF.  Возвращает
    результат в области передачи данных ДОС по адресу DTA
    (Data Transfer Area).Смотри SEARCH-FIRST.

 SEEK-ABS       handle_pars offset<d> --- status
    Устанавливает указатель чтения/записи файла по
    абсолютному смещению от начала файла. Смещение должно
    быть положительным двойным целым.

 SEEK-EOF       handle_pars offset<d> --- status
    Устанавливает указатель чтения/записи файла относительно
    конца файла. Это слово используется словом ?FILESIZE,
    которое возвращает длину файла в байтах. Смещение
    должно быть положительным двойным целым.

 SEEK-REL       handle_pars offset<d> --- status
    Устанавливает указатель чтения/записи файла на
    указанное смещение от текущего значения указателя
    чтения/записи. Смещение должно быть двойным целым со
    знаком.

 SET-ATTRIB     handle_pars attrib --- status
    Устанавливает байт атрибута для файла (атрибут файла).
    Эта команда используется для того, чтобы пометить
    файл как "read-only", "system", "hidden" и т.д..

 SET-BORDER     n w_addr ---
    Устанавливает тип окаймления (бордюра) окна с адресом
    блока управления (адрес поля кода) w_addr.  Значение n
    равное нулю означает отсутствие бордюра, 1 - бордюр, в
    виде одинарной рамки, 2 - бордюр в виде двойной рамки
    и т.п.  Всего определено восемь типов бордюров.
    Символы, которыми бордюры отрисовываются на экране,
    хранятся в первой строке четвертого экрана файла
    диагностических сообщений FORTH.MSG (по восемь
    символов на каждый тип бордюра).  При установке типа
    бордюра для активного окна производится отрисовка
    нового бордюра на экране, при этом не разрешается
    задание n равным нулю при наличии бордюра у активного
    окна и n отличного от нуля в случае отсутствия
    бордюра.  По умолчанию при определении окна
    устанавливается тип бордюра, соответствующий n равному
    1 (одинарная рамка).

 SET-BRDCOL     background foreground w_addr ---
    Устанавливает цветовые атрибуты бордюра окна с адресом
    блока управления (адрес поля кода) w_addr. Параметр
    background задает цвет фона, а foreground - цвет симво-
    лов, которыми отрисовывается бордюр. При установке цве-
    та бордюра для активного окна производится перекраска
    нового бордюра на экране. По умолчанию при определении
    окна в качестве цветовых атрибутов бордюра устанавлива-
    ются значения Black и White (белые символы на черном
    фоне).

 SET-CURSOR     n1 n2 ---
    Устанавливает размер курсора на экране. n1 - начальная
    строка развертки символа, n2 - конечная строка
    развертки. Строки нумеруются с нуля сверху вниз
    экрана, 0 <= n1 <= n2 <= 7.

 SET-INF        n w_addr ---
    Сохраняет 16-битовое значение n в поле дополнительной
    информации блока управления окном с адресом w_addr.
    Обычно используется для хранения пользовательской ин-
    формации, связанной с данным окном.

 SET-INTCOL     background foreground w_addr ---
    Устанавливает цветовые атрибуты внутренней части окна
    с адресом блока управления (адрес поля кода) w_addr.
    Параметр background задает цвет фона, а foreground -
    цвет символов. При установке цветовых атрибутов для ак-
    тивного окна производится перекраска его внутрееней об-
    ласти на экране, кроме того, указанные атрибуты уста-
    навливаются в качестве текущих цветовых атрибутов для
    процедур вывода. По умолчанию при определении окна в
    качестве цветовых атрибутов внутренности окна устанав-
    ливаются значения Black и White (белые символы на чер-
    ном фоне).

 SET-KEY        addr key ---
    Программирование управляющих клавиш:  клавише с
    составным кодом "key 0" (см.  PCKEY) приписывается
    последовательность символов, задаваемая строкой с
    байтом длины, расположенной по адресу addr.  В
    дальнейшем каждое нажатие запрограммированной клавиши
    можно рассматривать как последовательный ввод с
    клавиатуры заданной последовательности символов.

 SET-LOCATION   lx uy width height w_addr ---
    Устанавливает атрибуты расположения окна с блоком уп-
    равления по адресу w_addr. Не разрешается использование
    данного слова для уже открытых окон.

 SET-PROC       cfa w_addr ---
    Задает процедуру, выполняемую в окне с блоком управле-
    ния w_addr. Процедура задается адресом поля кода cfa.

 SIGN           n ---
    Если число n отрицательно, приписывает к выходной стро-
    ке, используемой процедурами преобразования чисел в
    текстовый вид, символ "-", в противном случае n снима-
    ется со стека и никаких действий не производится. (См.
    также <# # #S SIGN HOLD и #> ).

 SIREN          ---
    Выдача звукового сигнала сирены.

 SMUDGE         ---
    Устанавливает признак незавершенности определения для
    последнего созданного в словаре слова. Слова,
    помеченные признаком SMUDGE игнорируются при словарном
    поиске. См. также UNSMUDGE.

 SOUND          ---
    Отключение звукового генератора.

 SOUND-OFF      ---
    Включение звукового генератора.

 SP!            addr ---
    Устанавливает начальное значение указателя арифметичес-
    кого стека (переменная S0) равным addr.

 SP@            --- addr
    Помещает на стек текущее значение указателя арифмети-
    ческого стека.

 SPACE          ---
    Выводит символ "пробел" в коде ASCII.

 SPACES         n ---
    Выводит n символов "пробел" в коде ASCII. При n меньшем
    либо равным нулю никаких действий не производится.

 SPAN           --- addr
    Адрес переменной, содержащей количество введенных с
    терминала символов при последнем выполнении слова
    EXPECT.

 SS             --- addr
    Пользовательская переменная, содержащая сегментный
    адрес для дополнительного сегмента Форт-системы.

 STATE          --- addr
    Помещает на стек адрес переменной, содержащей признак
    режима компиляции. Значение TRUE соответствует режиму
    компиляции, FALSE - режиму интерпретации.

 STD-AUX        --- handle_pars
    Предопределенный дескриптор для стандартного
    дополнительного устройства. Переопределять это
    логическое устройство нельзя.

 STD-ERROR      --- handle_pars
    Предопределенный дескриптор для стандартного
    устройства вывода сообщений об ошибках.
    Переопределять это логическое устройство нельзя.

 STD-INPUT      --- handle_pars
    Предопределенный дескриптор для стандартного
    устройства ввода. Устройство можно переопределить.

 STD-LIST       --- handle_pars
    Предопределенный дескриптор для стандартного
    устройства печати. Переопределять это логическое
    устройство нельзя.

 STD-OUTPUT     --- handle_pars
    Предопределенный дескриптор для стандартного
    устройства вывода. Устройство можно переопределить.

 STI            ---
    Включение режима реакции на прерывания от клавиатуры
    по нажатию клавиш Ctrl/Break.

 SWAP           n1 n2 --- n2 n1
    Меняет местами два 16-битовых значения n1 и n2 на вер-
    хушке стека.

 TASK           ---
    Определение параллельного процесса. Используется в виде
         TASK name ... ;
    При выполнении определенного таким образом слова
    создается параллельный процесс со своими стеками.
    Содержимое стека порождающего процесса копируется на
    стек созданного процесса. Переключение процессов
    производится равномерным циклическим квантованием по
    прерыванию от таймера или принудительно выполнением
    слова PAUSE в программе процесса. При старте АстроФОРТа
    имеется только один процесс MAIN.

 TASKS          ---
    Выводится список активных процессов (в окне).

 THEN           ---
    Завершает структуры управления вида IF ... THEN и
    IF ... ELSE ... THEN.

 TIB            --- addr
    На стек помещается адрес начала текстового буфера,
    используемого при вводе входного потока с терминала.

 TOGGLE         addr b ---
    Выполняет логическую операцию "ИЛИ" для байта, располо-
    женного по адресу addr, с 8-битовым значением b.

 TONE           n ---
    Задание частоты звучания звукового генератора. n -
    значение частоты в Герцах.

 TRACE          ---
    Эадание режима трассировки слова. Используется в виде
         TRACE name
    В дальнейшем при выполнении слова name оно будет
    трассироваться. Трассировать можно только двоеточечные
    определения.

 TRACE-OFF      ---
    Снятие режима трассировки двоеточечного определения.
    Используется в виде
         TRACE-OFF name

 TRAVERSE       addr1 n --- addr2
    По адресу addr1 выдает адрес начала (при n равном -1)
    или адрес конца (при n равном 1) поля имени в заголовке
    словарной статьи. Соответственно, при n равном -1 addr1
    задает адрес конца поля имени, а при n равном 1 - адрес
    его начала.

 TRUE           --- true
    Константа, соответствующая логическому значению "исти-
    на" (true). Представляется 16-битовым словом, в котором
    все разряды равны 1 (целое значение -1, или, в шестнад-
    цатиричном виде - FFFF).

 TYPE           addr n ---
    Выводит строку символов длиной n байтов, начинающуюся
    с адреса addr. В отличие от вывода с использованием
    EMIT никакие символы строки не обрабатываются специаль-
    ным образом.

 U.             u ---
    Выводит значение u в виде целого числа без знака в сис-
    теме счисления с текущим основанием BASE, дополненое
    справа одним пробелом.

 U.R            u n ---
    Выводит целое число без знака u с выключкой вправо
    внутри поля шириной n символов без завершающего
    пробела. В случае, если для вывода числа u недостаточно
    n позиций, число выводится полностью, без учета формата
    n.

 U<             u1 u2 --- f
    Помещает на стек значение TRUE при u1 меньшем u2 (u1 и
    u2 - 16-разрядные числa без знака), FALSE - в противном
    случае.

 U>             u1 u2 --- f
    Помещает на стек значение TRUE при u1 большем u2 (u1 и
    u2 - 16-разрядные числa без знака), FALSE - в противном
    случае.

 UM*            u1 u2 --- ud
    Помещает на стек результат умножения двух 16-разрядных
    чисел без знака u1 и u2 в виде 32-разрядного числа без
    знака.

 UM/MOD         ud u1 --- u2 u3
    Помещает на стек остаток u2 и частное u3 от деления 32-
    разрядного числа без знака ud на 16-разрядное число без
    знака u1. Результаты u2 и u3 представлены в виде 16-
    разрядных чисел без знака.

 UNSMUDGE       ---
    Отмечает последнее определенное в словаре слово как
    доступное при словарном поиске. См. также SMUDGE.

 UNTIL          f --- (run) | --- (sys)
    Завершает структуру управления вида BEGIN ... UNTIL.

 UP             ---
    Перемещает курсор в текущем окне на одну строку вверх
    без изменения горизонтальной позиции. При нахождении
    курсора в верхней строке, в зависимости от режима про-
    тяжки (см. SCROLL, SCROLL-OFF) осуществляется либо про-
    тяжка строк вниз, либо перевод курсора в нижнюю строку.

 UPDATE         ---
    Помечает последний считанный с диска блок (см. BLOCK)
    признаком, означающиюм, что его содержимое было модифи-
    цировано. Блоки, помеченные данным признаком, автомати-
    чески записываются на диск при необходимости использо-
    вания занимаемого ими буфера для считывания других бло-
    ков, а также при выполнении операций SAVE-BUFFERS и
    FLUSH.

 USER           n ---
    Определяющее слово, используется в виде: n USER name
    Создает переменную в области пользовательских перемен-
    ных со смещением n от начала области. При выполнении
    name на стек помещается адрес двухбайтного слова. На-
    чальное значение пользовательских переменных не опреде-
    лено. Максимально допустимое смещение n зависит от раз-
    мера области пользовательских переменных.

 USING          ---
    Смена экранного файла. Используется в виде
         USING [drive]filename[.filetype]
    Текущий экранный файл закрывается, а указанный файл
    становится текущим экранным. Если тип файла не указан,
    ищется файл типа .SCR

 V!             n x y ---
    Помещает значение n - символ с цветовыми атрибутами -
    в позицию экрана с координатами (x,y).

 V-CONTRACT     ---
    Уменьшает размер активного окна по вертикали на одну
    строку. Нижняя строка окна удаляется, нижняя граница
    сдвигается на одну строку вверх. Если текущая высота
    окна равна одной строке, никаких действий не произво-
    дится.

 V-EXPAND       ---
    Увеличивает размер активного окна по вертикали на одну
    строку. В нижней части окна добавляется строка, запол-
    ненная пробелами с текущими цветовыми атрибутами, ниж-
    няя граница окна сдвигается на одну строку вниз. Если
    нижняя граница окна совпадает с нижней строкой экрана,
    никаких действий не производится.

 V@             x y --- n
    Помещает на стек значение n - символ с цветовыми
    атрибутами из позиции экрана с координатами (x,y).

 VARIABLE       ---
    Определяющее слово, используется в виде: VARIABLE name
    Создает словарную статью с именем name, резервируя в
    поле параметров 2 байта для хранения 16-разрядного зна-
    чения. При выполнении слова name на стек помещается ад-
    рес зарезервированной области памяти. Начальное значе-
    ние переменной равно нулю.

 VC!            b x y ---
    Помещает символ b в позицию экрана с координатами
    (x,y).

 VC@            x y --- b
    Помещает на стек символ b из позиции экрана с
    координатами (x,y).

 VIDEO          ---
    Включение изображения на экране.

 VIDEO-ADDR     x y --- n
    Помещает на стек значение n - смещение в сегменте
    буфера регенерации изображения (видеосегменте) позиции
    экрана с координатами (x,y).

 VIDEO-OFF      ---
    Гашение изображения на экране (отключение
    видеосигнла).

 VMOVE          x1 y2 x2 y2 n ---
    Пересылка строки символов на экране. (x1,x2) -
    координаты начала исходной строки, (x2,y2) - позиция в
    которую осуществляется пересылка, n - количество
    пересылаемых символов. Пересылка осуществляется в
    направлении возрастания адресов во время вертикального
    обратного хода луча. Максимальная длина строки,
    пересылаемой без помех на экране ("снег") составляет
    около 200 символов. См. также VMOVE>.

 VMOVE>         x1 y2 x2 y2 n ---
    Пересылка строки символов на экране. (x1,x2) -
    координаты начала исходной строки, (x2,y2) - позиция в
    которую осуществляется пересылка, n - количество
    пересылаемых символов. Пересылка осуществляется в
    направлении убывания адресов во время вертикального
    обратного хода луча. Максимальная длина строки,
    пересылаемой без помех на экране ("снег") составляет
    около 200 символов. См. также VMOVE.

 VOC-LINK       --- addr
    Переменная, содержащая адрес поля словарной связи для
    последнего созданного словаря. Все словари связаны с
    помощью указанного поля в список для обеспечения пра-
    вильного выполнения операции FORGET при работе с нес-
    колькими словарями.

 VOCABULARY     ---
    Определяющее слово, используется в виде:
            VOCABULARY name
    Формирует словарную статью, определяющую словарь с име-
    нем name. При выполнении слова name указанный словарь
    подключается к текущему контексту и просматривается
    первым при поиске словарных определений. Для того, что-
    бы последующие определения помещались в требуемый сло-
    варь, необходимо после подключения к текущему контексту
    объявить его словарем пополнения (см. DEFINITIONS).

 VOCS           ---
    В окне выдается список всех словарей. Словари,
    являющиеся текущим словарем пополнения и текущим
    контекстом, выделяются в этом списке цветом.

 W-BRDCOL       --- addr
    Адрес поля цветового байта бордюра (1 байт) в блоке
    управления активного окна.

 W-BRDTYPE      --- addr
    Адрес поля типа бордюра (2 байта) в блоке управления
    активного окна (см. W.bRDTYPE).

 W-HEIGHT       --- addr
    Адрес поля высоты окна (1 байт) в блоке управления
    активного окна.

 W-INF          --- addr
    Адрес поля дополнительной информации (2 байта)
    в блоке управления активного окна.

 W-INTCOL       --- addr
    Адрес поля цветового байта внутренней области (1
    байт) в блоке управления активного окна.

 W-LINK         --- addr
    Адрес поля оконной связи (2 байта) в блоке управления
    активного окна.

 W-LX           --- addr
    Адрес поля X-координаты левого верхнего угла (1 байт)
    в блоке управления активного окна.

 W-PROC         --- addr
    Адрес поля пользовательской процедуры (2 байта) в
    блоке управления активного окна.

 W-SAVEADDR     --- addr
    Адрес поля для адреса области сохранения (2 байта) в
    блоке управления активного окна.

 W-UY           --- addr
    Адрес поля Y-координаты левого верхнего угла (1 байт)
    в блоке управления активного окна.

 W-WIDTH        --- addr
    Адрес поля ширины окна (1 байт) в блоке управления
    активного окна.

 W-X            --- addr
    Адрес поля X-координаты курсора (1 байт) в блоке
    управления активного окна.

 W-Y            --- addr
    Адрес поля Y-координаты курсора (1 байт) в блоке
    управления активного окна.

 W.BRDCOL       --- color_byte
    Помещает на стек текущий цветовой байт бордюра актив-
    ного окна.

 W.BRDTYPE      --- n
    Адрес 8-байтовой таблицы псевдографических символов,
    используемой для отрисовки бордюра активного окна.
    Нулевое значение n означет отсутствие бордюра.

 W.DY           --- n
    Y-координата нижней строки активного окна (внутренняя
    область окна).

 W.DY'          --- n
    Y-координата нижней границы активного окна с учетом
    бордюра.

 W.HEIGHT       --- height
    Помещает на стек текущую высоту внутренней области ак-
    тивного окна.

 W.HEIGHT'      --- n
    Высота активного окна с учетом наличия бордюра.

 W.INF          --- n
    Помещает на стек текущее значение поля дополнительной
    информации активного окна.

 W.INTCOL       --- color_byte
    Помещает на стек текущий цветовой байт внутренней об-
    ласти активного окна.

 W.LINK         --- n
    Значение поля оконной связи для активного окна.

 W.LX           --- lx
    Помещает на стек текущую x-координату левого верхнего
    угла внутренней области активного окна.

 W.LX'          --- n
    X-координата левой границы активного окна с учетом
    бордюра.

 W.RX           --- n
    X-координата правого столбца активного окна
    (внутренняя область окна).

 W.RX'          --- n
    X-координата правой границы активного окна с учетом
    бордюра.

 W.SAVEADDR     --- n
    Адрес области сохранения (смещение в дополнительном
    сегменте Форт-системы, см. SS, SD) для фктивного окна.

 W.SIZE'        --- n
    Размер в байтах области памяти, требуемой для
    сохранения активного окна.

 W.UY           --- uy
    Помещает на стек текущую y-координату левого верхнего
    угла внутренней области активного окна.

 W.UY'          --- n
    Y-координата верхней границы активного окна с учетом
    бордюра.

 W.WIDTH        --- width
    Помещает на стек текущую ширину внутренней области ак-
    тивного окна.

 W.WIDTH'       --- n
    Ширина активного окна с учетом наличия бордюра.

 W.X            --- x
    Помещает на стек текущую x-координату курсора в актив-
    ном окне. Координата задается относительно левого верх-
    него угла окна, таким образом ее значение может лежать
    в диапазоне от 0 до width-1.

 W.Y            --- y
    Помещает на стек текущую y-координату курсора в актив-
    ном окне. Координата задается относительно левого верх-
    него угла окна, таким образом ее значение может лежать
    в диапазоне от 0 до height-1.

 WAIT           ---
    Ожидание нажатия клавиши на клавиатуре.

 WARNING        --- addr
    Пользовательская переменная, определяющая форму вывода
    диагностических сообщений (см. MESSAGE).

 WHILE          f --- (run) | sys1 --- sys2 (compile)
    Используется в двоеточечных определениях в виде:
            BEGIN ... WHILE (tp) ... REPEAT
    Во время исполнения слово WHILE проверяет значение
    флага f на вершине стека. При f отличном от нуля
    (TRUE) выполнение продолжается до слова REPEAT с
    последующим возвратом к началу цикла непосредственно за
    словом BEGIN. В противном случае управление передается
    на код, расположенный за REPEAT.

 WINDOW         lx uy w h --- (compile) | --- (run)
    Определение оконной процедуры. Используется в виде:
            lx uy width height WINDOW name ... ;
    Формирует словарную статью с именем name, блок управле-
    ния окном и тело выполняемой в окне процедуры. Парамет-
    ры расположения окна: (lx,uy) - (x,y)-координаты левого
    верхнего угла внутренней части окна, width - ширина
    внутренней части окна в знакопозициях, height - высота
    внутренней части окна в строках. Тело выполняемой в
    окне процедуры задается в виде, аналогичном двоеточеч-
    ному определению. При выполнении определенного таким
    образом слова name все процедуры, связанные с выводом
    на экран и перемещением курсора, работают только в рам-
    ках данного окна. По завершении выполнения слова вос-
    станавливается содержимое скрытой на время его выполне-
    ния области экрана.

 WORD           c --- addr
    Вводит из входного потока строку символов, ограниченную
    с правого конца символом с ASCII-кодом c. Ведущие вхож-
    дения символов c игнорируются. Введенная строка разме-
    щается в памяти по адресу addr в виде последовательнос-
    ти символов, начинающейся с байта, содержащего коли-
    чество символов в строке, и дополненной справа символом
    "пробел", не учитывающемся в байте длины. В случае, ес-
    ли ограничитель во входном потоке найден, в переменную
    >IN заносится позиция символа из входного потока, сле-
    дующего непосредственно за ограничителем. Символ с ну-
    левым кодом во входном потоке всегда рассматривается
    словом WORD как ограничитель вводимой строки. Значение
    переменной #TIB не изменяется.

 WORDS          ---
    Выдает список словарных определений, имеющихся в слова-
    рях, включенных в текущий контекст. Для каждого опреде-
    ления выдаются его имя NAME, адрес поля имени NFA, ад-
    рес поля связи LFA, адрес поля кода (адрес компиляции)
    CFA и адрес поля параметров PFA. Реализовано в виде
    оконной процедуры.

 WRITE          handle_pars bytes buf --- bytes_written 0
                                      --- status  (error)
    Запись в файл или на устройство. Если запись
    производится на стандартное устройство вывода
    (STD-OUTPUT), то вывод может быть переопределен.
    Если число bytes_written отличается от bytes, то
    это должно рассматриваться как ошибка; причиной этого
    скорее всего может быть отсутствие свободного
    пространства на диске для записываемого файла.

 White          --- 7
    Константа, соответствующая белому цвету при выводе на
    цветной дисплей.

 XOR            n1 n2 --- n3
    Помещает на стек результат n3 побитного выполнения ло-
    гической операции "ИСКЛЮЧАЮЩЕЕ ИЛИ" для двух 16-разряд-
    ных значений n1 и n2.

 Yellow         --- 14
    Константа, соответствующая желтому цвету при выводе на
    цветной дисплей.

 [              ---
    Устанавливает режим интерпретации, задает значение пе-
    ременной STATE равным FALSE.

 [']            --- addr (run) | --- (compile)
    Используется в виде:
            ['] name
    Компилирует адрес поля кода слова name как числовой
    литерал, помещаемый на стек во время исполнения. При
    отсутствии слова name в словаре возникает ошибочная
    ситуация.

 [COMPILE]      ---
    Используется в двоеточечных определениях в виде:
            [COMPILE] name
    Компилирует слово name, помеченное признаком
    немедленного исполнения IMMEDIATE, в формируемую
    словарную статью.

 [HW]           ---
    Рабочее окно Форт-системы.

 [MESSAGE]      ---
    Рабочее окно Форт-системы, содержащее вывод
    идентификатора системы и запуск основного
    интерпретатора.

 [SCREEN]       ---
    Рабочее окно Форт-системы - основной интерпретатор.

 ]              ---
    Устанавливает режим компиляции, задает значение пере-
    менной STATE равным TRUE.

 gotoxy         x y ---
    Устанавливает курсор в позицию экрана с координатами
    (x,y) относительно левого верхнего угла внутренней
    области активного окна.  В отличие от слова GOTOXY
    допускается установка курсора в произвольную позицию
    экрана, в чаcтности, на бордюре или вне оконной
    области.

 ok             ---
    Выводит приглашение Форт-интерпретатора "ок".

 video-io       dx cx bx ax --- dx cx bx ax
    Обращение к базовой системе ввода-вывода (BIOS) для
    работы с дисплеем (прерывание 10H). Аргументы и
    результаты соответствуют значениям регистров DX, CX, BX
    и AX при обращении к прерыванию и при выходе из него.
