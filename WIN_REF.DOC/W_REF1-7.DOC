                                   Оглавление                                  
       Windows 3.0/Ref/1#7                                        = 1 =

       Глава 1. Функции интерфейса управления окнами..................5
       1.1.1 Генерация и обработка сообщений..........................6
       1.1.2 Трансляция сообщений.....................................7
       1.1.3 Контроль сообщений.......................................8
       1.1.4 Посылка сообщений........................................8
       1.1.5 Исключение тупиковых ситуаций при работе с сообщениями...9
       1.2 Функции создания окна.....................................10
       1.2.1 Классы окон.............................................11
       1.2.2 Определение местонахождения класса......................12
       1.2.3 Определение собственника класса.........................12
       1.2.4 Регистрация класса окна.................................13
       1.2.5 Разделяемые классы окон.................................13
       1.2.6 Встроенные классы окна..................................13
       1.2.7 Элементы класса окна....................................13
       1.2.8 Типы классов............................................17
       1.2.9 Внутренние структуры данных.............................19
       1.2.10 Подклассы окна.........................................19
       1.2.11 Перерисовка области пользователя.......................20
       1.2.12 Частный контекст отображения и контекст отображения....20
       1.2.13 Функция  окна..........................................21
       1.2.14 Типы окон..............................................25
       1.2.15 Окна интерфейса множества документов...................28
       1.2.16 Строка заголовка.......................................29
       1.2.17 Системное меню.........................................29
       1.2.18 Строки прокрутки.......................................29
       1.2.19 Меню...................................................29
       1.2.20 Состояние окна.........................................31
       1.2.21 Жизненный цикл окна....................................31
       1.3 Функции индицирования и перемещения.......................33
       1.4 Функции ввода.............................................35
       1.5 Аппаратные функции........................................37
       1.6 Функции рисования.........................................38
       1.6.1 Как Windows управляет дисплеем..........................39
       1.6.2 Типы контекста отображения..............................39
       1.6.3 Кэш контекстов отображений..............................43
       1.6.4 Последовательность рисования............................44
       1.6.5 Сообщение WM_PAINT......................................44
       1.6.6 Область корректировки...................................45
       1.6.7 Фон окна................................................45
       1.6.8 Настройка кисти.........................................46
       1.6.9 Рисование прямоугольных областей........................46
       1.6.10 Рисование икон.........................................47
       1.6.11  Рисование форматированного текста.....................47
       1.6.12 Рисование текста серого цвета..........................50
       1.6.13 Рисование непользовательской области...................51
       1.7 Функции панели диалога....................................53
       1.7.1 Использование панелей диалога...........................54
       1.7.2 Создание панели диалога.................................56
       1.7.3 Возвращаемые значения панелей диалога...................57
       1.7.4 Блоки управления в панели диалога.......................57
       1.8 Функции прокрутки.........................................65

       Windows 3.0/Ref/1#7                                        = 2 =

       1.1.8 Лифт строки прокрутки...................................66
       1.8.3 Запросы на прокрутку....................................67
       1.8.4 Обработка сообщений о прокрутке.........................67
       1.8.5 Прокрутка области пользователя..........................67
       1.8.6 Как спрятать стандартную строку прокрутки...............68
       1.9 Функции меню..............................................69
       1.10 Информационные функции...................................71
       1.11 Системные функции........................................72
       1.12 Функции системного буфера................................73
       1.13 Функции ошибок...........................................74
       1.14 Функции псевдокурсора....................................75
       1.14.1 Создание и индицирование псевдокурсора.................75
       1.15 Функции курсора..........................................77
       1.15.1 Устройства манипулирования и курсор....................77
       1.15.2 Как индицировать и прятать курсор......................77
       1.15.3 Позиционирование курсора...............................78
       1.15.4 Точка привязки курсора и ограничение курсора...........78
       1.15.5 Создание заказного курсора.............................78
       1.16 Функции ловушек..........................................80
       1.16.1 Цепочка функций фильтра................................80
       1.16.2 Установка функции фильтра..............................81
       1.17 Функции свойств..........................................82
       1.18 Функции прямоугольника...................................85
       1.18.1 Использование прямоугольников в прикладных программах..85
       1.18.2 Координаты прямоугольника..............................86
       1.18.3 Создание прямоугольников и манипулирование ими.........86
       1.19 Заключение...............................................88
       Глава 2. Функции интерфейса графического устройства...........90
       2.1. Функции контекста устройства.............................90
       2.1.1 Атрибуты контекста устройства...........................91
       2.1.2 Сохранение контекста устройства.........................93
       2.1.3 Удаление контекста устройства...........................93
       2.1.4 Совместимый контекст устройства.........................93
       2.1.5 Информационные контексты................................93
       2.2 Функции средств рисования.................................95
       2.2.1 Использование средств рисования.........................96
       2.2.2 Цвет....................................................98
       2.3 Функции цветовой палитры.................................100
       2.3.1 Как работает цветовая палитра..........................101
       2.3.2 Использование цветовой палитры.........................103
       2.4. Функции атрибутов рисования.............................105
       2.4.1 Режим и цвет фона......................................105
       2.4.2 Режим растяжения/сжатия................................106
       2.4.3 Цвет текста............................................106
       2.5 Функции отображения......................................107
       2.5.1 Ограниченные режимы отображения........................109
       2.5.2 Частично ограниченные и неограниченные режимы
             отображения............................................109
       2.5.3 Уравнения преобразования...............................110
       2.5.4 Пример: MM_TEXT........................................111
       2.5.5 Пример: MM_LOENGLISH...................................112
       2.6 Функции координат........................................113

       Windows 3.0/Ref/1#7                                        = 3 =

       2.7 Функции области..........................................114
       2.8 Функции отсечения........................................116
       2.9 Функции рисования линий..................................117
       2.9.1 Координаты функции.....................................117
       2.9.2 Типы, цвета и ширина пера..............................117
       2.10 Функции эллипса и многоугольника........................119
       2.10.1 Координаты функции....................................119
       2.10.2 Ограничивающие прямоугольники.........................120
       2.11 Функции растровой карты.................................121
       2.11.1 Растровые карты и устройства..........................122
       2.11.2 Независимые от устройства функции растровой карты.....122
       2.12 Функции текста..........................................124
       2.13 Функции шрифтов.........................................125
       2.13.1 Семейство шрифтов.....................................126
       2.13.2 Знакоместо............................................127
       2.13.3 Модификации символов..................................128
       2.13.4 Разрывы между строками................................129
       2.13.5 Набор символов........................................130
       2.13.6 Шаг...................................................131
       2.13.7 Выбор шрифта при помощи GDI...........................132
       2.13.8 Файлы шрифтов и ресурсы шрифтов.......................138
       2.14 Функции метафайла.......................................139
       2.14.1 Создание метафайла....................................139
       2.14.2 Хранение метафайла в памяти или на диске..............141
       2.14.3 Удаление метафайла....................................141
       2.14.4 Изменение порядка выполнения метафайла в Windows......141
       2.15 Функции управления принтером............................143
       2.16 Управляющие функции печати..............................144
       2.16.1 Формирование данных для вывода........................144
       2.16.2 Вывод с разделением на  порции........................145
       2.16.3 Запуск и завершение задания печати....................145
       2.16.4 Завершение задания печати.............................146
       2.16.5 Информационные escape-функции.........................146
       2.16.6 Добавочные escape-функции.............................146
       2.17 Функции окружения.......................................148
       2.18 Заключение..............................................149

       Windows 3.0/Ref/1#7                                        = 4 =

       Глава 3. Функции интерфейса системного сервиса...............150
       3.1 Функции управления модулем...............................151
       3.2 Функции управления памятью...............................152
       3.3. Функции сегментов.......................................156
       3.4 Функции прерываний операционной системы..................158
       3.5 Функции задачи...........................................159
       3.6 Функции управления ресурсами.............................160
       3.7 Функции манипулирования строками.........................161
       3.8 Функции управления атомами...............................163
       3.9 Функции файла инициализации..............................164
       3.10 Функции коммуникаций....................................165
       3.11 Функции озвучивания.....................................166
       3.12 Вспомогательные функции и макросы.......................168
       3.13 Функции ввода/вывода файлов.............................169
       3.14 Функции отладки.........................................170
       3.15 Функции средств оптимизации.............................171
       3.16 Функции выполнения прикладной программы.................172
       3.17 Заключение..............................................173

       Windows 3.0/Ref/1#7                                        = 5 =

                     Глава 1.      Функции интерфейса управления окнами        
       ----------------------------------------------------------------

             Эта  глава  описывает  функции  Microsoft Windows, которые
        обрабатывают сообщения, создают, перемещают или каким-то другим
        образом воздействуют на окно, а также создают системный  вывод.
        Эти функции и составляют интерфейс управления окнами.

             Эта глава состоит из следующих тем:

             Функции сообщений
             Функции создания окна
             Функции индикации и перемещения
             Функции ввода
             Функции управления аппаратурой
             Функции рисования
             Функции панелей диалога
             Функции прокрутки
             Функции меню
             Информационные функции
             Системные функции
             Функции системного буфера
             Функции обработки ошибок
             Функции псевдокурсора
             Функции курсора
             Функции ловушек
             Функции свойств
             Функции прямоугольника

             Функция                Описание
             -------------------------------
             WinMain                Служит точкой входа для выполнения
                                    прикладной программы в среде
                                    Windows



       Windows 3.0/Ref/1#7                                        = 6 =

                          1.1.1 Генерация и обработка сообщений                
       ----------------------------------------------------------------

             Операционная  среда Windows генерирует сообщение на каждое
        событие   по   вводу   информации,   такое   как    перемещение
        пользователем "мыши" или нажатие клавиши на клавиатуре. Windows
        собирает  эти  сообщения  о  вводе в общую системную очередь, а
        затем помещает их (например, сообщения таймера или сообщения  о
        рисовании)  в  очередь прикладной программы. Очередь прикладной
        программы - это очередь типа FIFO (первый-в/первый-из), которая
        принадлежит  отдельно  каждой  прикладной   программе;   однако
        сообщения  таймера  и  рисования задерживаются в очереди до тех
        пор, пока не будут обработаны все остальные сообщения.  Windows
        помещает   сообщения,   которые  принадлежат  специфицированной
        программе,  в  соответствующую  ей  очередь.  Затем  прикладная
        программа  считывает сообщения, используя функцию GetMessage, и
        направляет их соответствующей функции окна,  используя  функцию
        DispatchMessage.
             Windows   посылает   некоторые  сообщения  непосредственно
        функции окна прикладной  программы,  минуя  очередь  прикладной
        пограммы. Такие сообщения называются внеочередными. В основном,
        внеочередное  сообщение  -  это  некоторое  сообщение,  которое
        воздействует  только  на  окно.  Функция  SendMessage  посылает
        сообщение непосредственно в окно.
             Например, функция CreateWindow заставляет Windows  послать
        сообщение  WM_CREATE  в  функцию  окна  прикладной  программы и
        ожидать до тех пор, пока сообщение не будет обработано функцией
        окна. Windows посылает это сообщение непосредственно в  функцию
        и не помещает его в очередь прикладной программы.
             Хотя  большинство  сообщений  генерируется средой Windows,
        прикладные программы могут создавать свои собственные сообщения
        и размещать их в очереди других прикладных программ.
             Прикладная   программа   может   выбирать   сообщения   из
        соответствующей ей очереди, используя функцию  GetMessage.  Эта
        функция  осуществляет  поиск  сообщения  в очереди и возвращает
        первое сообщение в очереди, если оно существует.  Если  очередь
        прикладной  программы пуста, GetMessage ожидает, пока сообщение
        будет помещено в очередь. На время ожидания GetMessage передает
        управление среде Windows, что позволяет другим программам взять
        управление и обработать свои собственные сообщения.
             Как только основная функция получает сообщение из очереди,
        она  может  передать  его  функции  окна,   используя   функцию
        DispatchMessage.  Эта функция побуждает Windows вызвать функцию
        окна, связанную с сообщением, и передать содержимое сообщения в
        качестве  аргументов  функции.   Функция   окна   может   затем
        обработать  сообщение и выполнить любые запрашиваемые изменения
        окна.  Когда  функция  окна  возвращает   управление,   Windows
        возвращает  управление основной функции. Основная функция может
        затем выбрать следующее сообщение из очереди.
             Примечание.  Чтобы каждый раз не оговаривать, заметим, что
        Windows может посылать сообщения  в  любой  последовательности.
        Прикадная  программа  не должна полагаться на порядок получения
        сообщений.

       Windows 3.0/Ref/1#7                                        = 7 =

             Каждый  раз,  когда  пользователь  нажимает   клавишу   на
        клавиатуре,  Windows  генерирует сообщение виртуальной клавиши.
        Сообщение виртуальной клавиши содержит код виртуальной клавиши,
        который определяет, какая клавиша была нажата, но не определяет
        символьное значение этой  клавиши.  Для  того,  чтобы  получить
        символьное  значение  этой  клавиши,  основная  функция  должна
        преобразовать значение виртуальной клавиши,  используя  функцию
        TranslateMessage.  Эта  функция  помещает  другое  сообщение  с
        соответствующим  символьным  значением  в  очередь   прикладной
        программы.  Это  сообщение  затем может быть отправлено функции
        окна.
                                1.1.2 Трансляция сообщений                     

             На  самом  деле,  основная  функция  должна   использовать
        функцию  TranslateMessage для преобразовании каждого сообщения,
        а не только сообщений виртуальных клавиш. Хотя TranslateMessage
        не воздействует на другие типы сообщений, она гарантирует,  что
        любая информация с клавиатуры преобразуется правильно.
             Приведенный  ниже фрагмент программы иллюстрирует типичный
        цикл, используемый основной функцией для выборки  сообщений  из
        очереди   и   направления   их   функциям   окна:
        int  PASCAL WinMain(hInstance,hPrevInstance,lpCmdLine,nShowCmd)
        HANDLE hInstance;
        HANDLE hPrevInstance;
        LPSTR lpCmdLine;
        int nShowCmd;
        {
           MSG msg;
           . . .
           while(GetMessage((LPMSG)&msg,NULL,0,0))
           {
              TranslateMessage((LPMSG)&msg);
              DispatchMessage((LPMSG)&msg);
           }
           exit(msg.wParam);
        }

             Прикладные    программы,    которые   используют   клавиши
        ускорения,  должны  загрузить  таблицу  ускорителей  из   файла
        ресурсов,   используя   функцию   LoadAccelerators,   а   затем
        преобразовать   сообщения   клавиатуры   в   сообщения   клавиш
        ускорения,  используя  функцию  TranslateAccelerator.  Основной
        цикл для прикладных программ,  которые  используют  ускорители,
        должен иметь следующий вид:

        while (GetMessage((LPMSG)&msg,(HWND)NULL,0,0))
           {
           if(TranslateAccelerator(hWindow,hAccel,(LPMSG)&msg)==0)
              {
              TranslateMessage((LPMSG)&msg);
              DispatchMessage(LPMSG)&msg);
              }

       Windows 3.0/Ref/1#7                                        = 8 =

           }
        exit(msg.wParam);

             Вызов  функции  TranslateAccelerator  должен  стоять перед
        стандартными  функциями  TranslateMessage  и   DispatchMessage.
        Более     того,    поскольку    функция    TranslateAccelerator
        автоматически направляет  сообщение  ускорения  соответствующей
        функции  окна,  функции  TranslateMessage  и DispatchMessage не
        должны   вызываться,   если   TranslateAccelerator   возвращает
        ненулевое значение.
                                                                               
           1.1.3 Контроль сообщений

             Прикладная    программа    может    использовать   функцию
        PeekMessage, если необходимо контролировать очередь на  наличие
        сообщения,  но  не  желательно  извлекать сообщение из очереди.
        Функция возвращает ненулевое значение, если сообщение находится
        в очереди, и позволяет прикладной программе получить  сообщение
        и обработать его, не проходя через основной цикл.
             PeekMessage   обычно   используется   для   периодического
        контроля  на  наличие  сообщения,  когда  прикладная  программа
        выполняет   такие   длительные  операции,  как  ввод  и  вывод.
        Например, эта функция может быть использована для  контроля  на
        наличие   сообщений,   которые   завершают   операцию.  Функция
        PeekMessage  также  дает   прикладной   программе   возможность
        передать  управление, если для нее нет никаких сообщений, т. к.
        эта функция может вернуться,  если  в  очереди  нет  сообщений.
        должны быть помещены в очередь. Это позволяет другим прикладным
        программам  взять  управление  и  обработать  свои  собственные
        сообщения,  если  очередь  прикладной  программы пуста. Windows
        возвращает управление  прикладной  программе,  когда  сообщение
        помещается в очередь.
                                 1.1.4 Посылка сообщений                       

             Функции  SendMessage  и  PostMessage  позволяют прикладным
        программам передавать сообщения своим окнам  или  окнам  других
        прикладных программ.
             Функция PostMessage заставляет Windows передать сообщение,
        помещая его  в  очередь  прикладной  программы.  Она  сразу  же
        возвращает управление вызывающей программе, и выполнение любого
        действия,   которое   должно  быть  произведено  как  результат
        обработки сообщения, откладывается до тех пор,  пока  сообщение
        не будет считано из очереди.
             Функция  SendMessage  заставляет Windows послать сообщение
        непосредственно данной функции окна, минуя  очередь  прикладной
        программы.   Windows   не   возвращает   управление  вызывающей
        программе до тех пор, пока функция окна, принимающая сообщение,
        не обработает его.
             Когда прикладная программа передает сообщение, она  должна
        послать  его  с  помощью  функции  SendMessage, если дальнейшая
        работа   основана   на   возвращаемом    значении    сообщения.
        Возвращаемое    значение    функции    SendMessage   аналогично

       Windows 3.0/Ref/1#7                                        = 9 =

        возвращаемому значению функции, обрабатывающей  это  сообщение.
        Функция  PostMessage  возвращается  немедленно  после  передачи
        сообщения,  так  что  ее  возвращаемое  значение  -  булевское,
        показывающее только, удачно ли передано сообщение, а не то, как
        сообщение было обработано.
             Windows  взаимодействует  с  прикладными программами через
        сообщения окон. Сообщения посылаются в функцию окна  прикладной
        программы  для  обработки.  Хотя  основная  функция  прикладной
        программы также может читать и  передавать  сообщения  окон,  в
        большинстве случаев их обрабатывает функция окна.
             1.1.5 Исключение тупиковых ситуаций при работе с сообщениями      

             Прикладная  программа может создавать тупиковые ситуации в
        Windows, если она  возвращает  управление  в  момент  обработки
        сообщения,  полученного  от другой прикладной программы (или от
        Windows   от   имени   другой  программы)  посредством  функции
        SendMessage. Прикладная программа ни в коем  случае  не  должна
        передавать управление. Вызов одной из нижеперечисленных функций
        приводит к передаче управления:

             DialogBox
             DialogBoxInderect
             DialogBoxInderectParam
             DialogBoxParam
             GetMessage
             MessageBox
             PeekMessage
             Yield

             Обычно задача, которая вызывает  функцию  SendMessage  для
        передачи  сообщения  другой задаче, не продолжает выполнение до
        тех пор, пока не вернется та процедура окна,  которая  получила
        сообщение.  Однако,  если  задача,  которая получила сообщение,
        передала управление, Windows может быть поставлена в  тупиковую
        ситуацию,  когда  посланная  задача  нуждается  в  выполнении и
        обработке сообщений,  но  не  может  этого  сделать,  т.к.  она
        ожидает возвращения функции SendMessage.
             Прикладная   программа   может   определить,  передано  ли
        полученное сообщение  с  помощью  функции  SendMessage,  вызвав
        функцию   InSendMessage.   Перед   тем,  как  вызвать  одну  из
        вышеперечисленных функций во время обработки сообщения, функция
        окна должна сначала вызвать  функцию  InSendMessage.  Если  эта
        функция  возвращает  TRUE, то перед тем, как вызвать какую-либо
        из функций, передающей управлени, функция окна  должна  вызвать
        функцию ReplyMessage.
             Как  альтернативу  можно  использовать системные модальные
        панели диалога или панели сообщения. Т.к.  системные  модальные
        окна  запрещают  другим  окнам  получать  фокусировку ввода или
        сообщения, прикладная программа должна  использовать  системные
        модальные окна только когда это необходимо.



       Windows 3.0/Ref/1#7                                       = 10 =

                                 1.2 Функции создания окна                     
       ----------------------------------------------------------------

             Функции  создания  окна создают, разрушают, модифицируют и
        получают информацию об  окнах.  Нижепреведенный  список  кратко
        описывает каждую функцию создания окна:

             Функция                    Описание
             ----------------------------------------------------------
             AdjustWindowRect           Вычисляет размеры окна для дан-
                                        ной области пользователя.

             AdjustWindowRectEx         Вычисляет размеры окна раширен-
                                        ного типа для данной области
                                        пользователя.

             CreateWindow               Создает перекрывающиеся, накла-
                                        дываемые и дочерние окна.

             CreateWindowExt            Создает перекрывающиеся, накла-
                                        дываемые и дочерние окна расши-
                                        ренного типа.

             DefDlgProc                 Обеспечивает обработку по умол-
                                        чанию  для тех сообщений панели
                                        диалога, которые прикладная
                                        программа не обрабатывает.

             DefFrameProc               Обеспечивает обработку по умол-
                                        чанию для  тех  сообщений  окна
                                        фрейма  MDI, которые прикладная
                                        программа не обрабатывает.

             DefMDIChildProc            Обеспечивает обработку по умол-
                                        чанию тех сообщений дочернего
                                        окна MDI, которые программа не
                                        обраьатывает.

             DefWindowProc              Обеспечивает обработку по умол-
                                        чанию тех сообщений окна, кото-
                                        рые прикладная программа не об-
                                        рабатывает.

             DestroyWindow              Разрушает окно.

             GetClassInfo               Получает информацию о специфи-
                                        цированном классе.

             GetClassLong               Получает информацию о классе
                                        окна из сруктуры WNDCLASS.

             GetClassName               Получает имя класса окна.


       Windows 3.0/Ref/1#7                                       = 11 =

             GetClassWord               Получает информацию о классе
                                        окна из сруктуры WNDCLASS.

             GetLastActivPopup          Определяет, какое накладываемое
                                        окно, принадлежащее другому ок-
                                        ну, было последним активным ок-
                                        ном.

             GetWindowLong              Получает информацию об окне.

             GetWindowWord              Получает информацию об окне.

             RegisterClass              Регистрирует класс окна.

             SetClassLong               Заменяет информацию в структуре
                                        WNDCLASS.

             SetClassWord               Заменяет информацию в структуре
                                        WNDCLASS.

             SetWindowLong              Изменяет атрибуты окна.

             SetWindowWord              Изменяет атрибуты окна.

             UnregisterClass            Удаляет класс окна из таблицы
                                        классов.

                                     1.2.1 Классы окон                         

             Класс  окна  -  это  набор  атрибутов,  который определяет
        внешний вид окна и его характеристики. Перед тем, как создать и
        использовать окно, прикладная  программа  должна  определить  и
        зарегистрировать  класс окна. Прикладная программа регистрирует
        класс   окна   при   помощи   функции   RegisterClass.    Можно
        зарегистрировать  любое  число  классов  окна. Как только класс
        зарегистрирован, Windows разрешает прикладной программе создать
        любое    число    окон,     принадлежащих     этому     классу.
        Зарегистрированный класс остается доступным до тех пор, пока он
        не будет удален, или программа не завершит свою работу.
             Хотя  класс  окна  состоит  из  многих  элементов, Windows
        требует, чтобы прикладная программа задала только  имя  класса,
        адрес  функции  окна,  обрабатывающей  все  сообщения  для окон
        данного  класса  и  дескриптор   экземпляра,   идентифицирующий
        прикладную  программу,  зарегистрировавшую данный класс. Другие
        элементы класса окна определяют  атрибуты  окна  по  умолчанию,
        такие как форма курсора или содержимое меню окна.
             Существует  три  типа  классов  окна.  Они  различаюся  по
        области действия и по тому, когда они создаются и разрушаются.

             Системные глобальные классы

             При загрузке Windows создает системные глобальные  классы.

       Windows 3.0/Ref/1#7                                       = 12 =

        Эти классы доступны для использования всеми программами в любое
        время.  Поскольку  Windows  создает системные глобальные классы
        для  всех  прикладных  программ,  никакая  программа  не  может
        создать  или  разрушить  какой-либо  из  этих классов. Примером
        системных глобальных классов могут служить классы редактируемых
        блоков управления и панелей перечня.

            Программные глобальные классы

             Прикладные программы или  (наиболее  вероятно)  библиотеки
        создают  программные глобальные классы, специфицируя для класса
        тип CS_GLOBALCLASS. Будучи  созданным,  он  глобально  доступен
        всем  прикладным  программам  внутри  системы. Чаще программный
        глобальный класс создает  библиотека,  так  что  те  программы,
        которые вызывают эту библиотеку, могут этот класс использовать.
        Windows разрушает программный глобальный класс, когда создавшая
        его  программа  или  библиотека  завершает свою работу. Поэтому
        существенно,  чтобы  все  прикладные  программы  разрушили  все
        использующие  этот класс окна до того, как закончит свою работу
        библиотека или программа, создавшая этот класс.

             Программные локальные классы

             Программные   локальные   классы   создаются    прикладной
        программой   для   внутреннего   использования.   Это  наиболее
        распространенный тип класса, создаваемого программой.
                                                                               
            1.2.2 Определение местонахождения класса

             Когда прикладная программа создает окно специфицированного
        класса,  Windows  использует  следующий алгоритм для нахождения
        класса:

             1. Windows ищет локальный класс с заданным именем.

             2. Усли Windows не  находит  локальный  класс  с  заданным
        именем,   она   просматривает   список  программных  глобальных
        классов.

             3.  Усли  Windows  не  находит  данного  имени  в   списке
        программных   глобальных   классов,  она  просматривает  список
        системных глобальных классов.

             Эта  процедура  используется  для  всех  окон,   созданных
        прикладной  программой,  включая  окна, созданные по требованию
        программы, такие как блоки управления панели диалога.  Возможно
        затем  системные  отменить  системные  глобальные  классы   без
        воздействия на другие прикладные программы.
                                                                               
            1.2.3 Определение собственника класса

             Windows определяет собственника  класса  при  помощи  поля
        hInstance   структуры   WNDCLASS,  которое  передается  функции

       Windows 3.0/Ref/1#7                                       = 13 =

        RegisterClass,  когда  прикладная  программа   или   библиотека
        регистрирует  класс. Для библиотек Windows это поле должно быть
        дескриптором   экземпляра    библиотеки.    Когда    программа,
        зарегистрировавшая  класс,  закончила  работу,  или библиотека,
        зарегтстрировавшая   класс,   выгружена,   класс   разрушается.
        Поэтому,   все  окна,  использующие  этот  класс,  должны  быть
        разрушены прежде, чем программа али библиотека завершат работу.
                                                                               
            1.2.4 Регистрация класса окна

             Когда  Windows  регистрирует  класс  окна,  она   копирует
        атрибуты  класса  в  свою  собственную  область памяти. Windows
        использует эти сохраненные внутри  атрибуты,  когда  прикладная
        программа  ссылается на этот класс окна по имени; поэтому самой
        прикладной программе,  которая  первоначально  зарегистрировала
        класс окна, нет необходимости хранить эту структуру.
                                                                               
            1.2.5 Разделяемые классы окон

             Прикладные      программы      не     должны     разделять
        зарегистрированные классы с  другими  прикладными  программами.
        Некоторая   информация,   относящаяся  к  классу  окна,  такая,
        например, как адрес функции окна, специфична только для  данной
        программы   и   не  может  использоваться  другими  прикладными
        программами.  Однако  прикладные  программы   могут   разделять
        программный   глобальный  класс.  См.  "Программные  глобальные
        классы"  в  разделе  1.2.1  для   получения   более   подробной
        информации.
                                                                               
            1.2.6 Встроенные классы окна

             Windows  обеспечивает  несколько  встроенных классов окна.
        Эти  классы  определяют  специальные  окна  блоков  управления,
        которые   выполняют   общие  задачи  по  вводу,  что  позволяет
        пользователю вводить текст,  управлять  прокруткой  и  выбирать
        имена   из   перечня.  Встроенные  классы  окна  доступны  всем
        прикладным программам и могут быть использованы любое число раз
        для создания любого числа окон блоков управления.
                                1.2.7 Элементы класса окна                     

             Элементы класса окна  определяют  поведение  по  умолчанию
        окон,  относящихся  к  данному  классу.  Прикладная  программа,
        которая регистрирует класс окна,  определяет  элементы  класса,
        устанавливая  значения  соответствующих  полей структуры данных
        WNDCLASS   и   передавая   структуру   функции   RegisterClass.
        Прикладная  программа  может  получить информацию о данном окне
        через функцию GetClassInfo.



       Windows 3.0/Ref/1#7                                       = 14 =

             В  таблице 1.1 приведены элементы класса окна.

        Таблица 1.1                 Элементы класса окна
        ============================================================
               Элемент        |           Назначение
        ======================|=====================================
           Имя класса         | Отличает  данный класс от других за-
                              | регистрированных классов.
                              |
           Адрес функции окна | Указатель  на функцию, которая обра-
                              | батывает  все  сообщения, посылаемые
                              | окнам  этого класса, и определяет по-
                              | ведение окна.
                              |
           Дескриптор экземп- | Идентифицирует программу, которая заре-
           ляра               | гистрировала класс.
                              |
           Курсор класса      | Определяет форму курсора, когда курсор
                              | находится в окне данного класса.
                              |
           Икона класса       | Определяет  форму иконы, которую Windows
                              | индицирует, когда окно,  принадлежащее
                              | данному классу, закрывается.
                              |
           Кисть фона класса  | Определяет цвет и шаблон, используе-
                              | мые  Windows для заливки области
                              | пользователя, когда окно открывается
                              | или прорисовывается.
                              |
           Меню класса        | Определяет  меню по умолчанию, испо-
                              | льзуемое  для  любого окна в классе,
                              | которое явно не определяет меню.
                              |
           Тип класса         | Специфицирует,   как  корректировать
                              | окно после перемещения или изменения
                              | размера,  как обработать двойное на-
                              | жатие  на кнопку "мыши", как отвести
                              | место  для  контекста  отображения и
                              | другие аспекты, связанные с окном.
                              |
           Дополнительная     | Определяет  объем памяти (в байтах),
           память класса      | который Windows должна зарезервиро-
                              | вать в конце структуры данных класса.
                              |
           Дополнительная     | Определяет  объем памяти (в байтах),
           память окна        | который Windows должна зарезервиро-
                              | вать  в конце любой структуры окна,
                              | относящегося к данному классу.

             Нижеследующие разделы описывают  элементы  класса  окна  и
        содержат  значения  по  умолчанию  для этих элементов, когда не
        задано точных значений при регистрации класса.


       Windows 3.0/Ref/1#7                                       = 15 =

             Имя класса

             Каждому классу  окна  необходимо  иметь  имя  класса.  Имя
        класса  отличает  один  класс  от другого. Прикладная программа
        присваивает имя классу, записав в поле lpszClassName  структуры
        WNDCLASS  адрес  оканчивающейся  нулем строки, которая содержит
        имя.
             В  случае  программного  глобального  класса,  имя  класса
        должно  быть  уникальным для того, чтобы отличить один класс от
        другого. Если  прикладная  программа  регистрирует  программный
        глобальный  класс,  дав  ему  имя,  принадлежащее существующему
        программному   глобадбному   классу,   функция    RegisterClass
        возвращает  FALSE, что означает ошибку. Условленным методом для
        обеспечения  этой   уникальности   является   включение   имени
        прикладной программы в имя программного глобального класса.
             Имя  класса  должно  быть  уникальным  для  всех  классов,
        регистрирумых прикладной программой.  Прикладная  программа  не
        может    зарегистрировать   программный   локальный   класс   и
        программный глобальный класс под одним и тем же именем класса.

             Адрес функции окна

             Каждому   классу   необходим  адрес  функции  окна.  Адрес
        определяет точку входа функции окна, используемой для обработки
        всех сообщений окон этого класса.  Windows  передает  сообщения
        функции,  чтобы  выполненить  такие  действий,  как рисование в
        области пользователя или получение ответа на ввод пользователя.
        Прикладная программа присваивает адрес  функции  окна,  копируя
        адрес  в  поле  lpfnWndProc  структуры  WNDCLASS.  Функция окна
        должна быть объявлена как expotr  в  файле  определения  модуля
        (.DEF).  Смотри  главу  10,  "Операторы  определения модуля", в
        Справочном руководстве, том 2, для  получения  более  подробной
        информации.  Более  подробно  функция  окна  описана  в разделе
        1.2.13 "Функция окна".

             Дескриптор экземпляра

             Каждому  классу  необходим   дескриптор   экземпляра   для
        идентификации  прикладной  программы, регистрирующей класс. Как
        многозадачная система Windows разрешает в одно и  то  же  время
        работать  нескольким программам, поэтому дескрипторы экземпляра
        необходимы  для   отслеживания   выполнения   всех   прикладных
        программ. Windows присваивает уникальные дескрипторы экземпляра
        каждой копии работающей программы.
             Windows    передает   дескриптор   экземпляра   прикладной
        программе, когда она впервые начинает работать. В свою  очередь
        программа   присваивает   этот  дескриптор  экземпляра  классу,
        копируя его в поле hInstance структуры WNDCLASS.

             Курсор класса

             Курсор класса определяет форму курсора, когда он находится
        в  области  пользователя  окна,  принадлежащего данному классу.

       Windows 3.0/Ref/1#7                                       = 16 =

        Windows автоматически устанавливает заданную форму курсора, как
        только он попадает внутрь области пользователя, и сохраняет эту
        форму все время, пока курсор находится в  данной  области.  Для
        присваивания  формы  курсора  классу  окна прикладная программа
        обычно  загружает  ее  из  своих  ресурсов,  используя  функцию
        LoadCursor,  а  затем присваивает полученный дескриптор курсора
        полю hCursor структуры WNDCLASS.
             Windows  не  требует  обязательного  определения   курсора
        класса.  Если  курсор класса не определен, подразумевается, что
        форма курсора будет устанавливаться  окном  каждый  раз,  когда
        курсор в него попадает.

             Икона класса

             Икона  класса  определяет  форму  иконы,  используемой при
        минимизации  окна  заданного  класса.  Для  присваивания  иконы
        классу  окна  прикладная  программа  обычно  загружает икону из
        своих ресурсов, используя функцию LoadIcon, а затем присваивает
        полученный дескриптор иконы полю hIcon структуры WNDCLASS.
             Windows не требует обязательной иконы класса.  Если  икона
        класса  не  определена,  подразумевается,  что  программа будет
        рисовать икону каждый раз, когда окно  минимизируется.  В  этом
        случае Windows посылает соответствующее сообщение функции окна,
        запрашивая перерисовку иконы.

             Кисть фона класса

             Кисть фона класса - это кисть, используемая для подготовки
        области  пользователя  окна для последующего рисования. Windows
        использует кисть  для  заливки  области  пользователя  сплошным
        цветом   или   шаблоном,   тем   самым  удаляя  все  предыдущие
        изображения  из  этой  области   вне   зависимости   от   того,
        принадлежат они окну или нет.
             Для  того,  чтобы  присвоить кисть фона классу, прикладная
        программа  обычно  создает  кисть,  используя   соответствующие
        функции  GDI,  а  затем присваивает полученный дескриптор кисти
        полю hbrBackground структуры WNDCLASS.
             Вместо  того,  чтобы  создавать  кисть,  программа   может
        использовать стандартные системные цвета, устанавливая значение
        поля в одно из следующих цветовых значений:

             COLOR_ACTIVECAPTION
             COLOR_APPWORKSPACE
             COLOR_BACKGROUND
             COLOR_BTNFACE
             COLOR_BTNSHADOW
             COLOR_BTNTEXT
             COLOR_CAPTIONTEXT
             COLOR_GRAYTEXT
             COLOR_HIGHLIGHT
             COLOR_HIGHLIGHTTEXT
             COLOR_INACTIVECAPTION
             COLOR_MENU

       Windows 3.0/Ref/1#7                                       = 17 =

             COLOR_MENUTEXT
             COLOR_SCROLLBAR
             COLOR_WINDOW
             COLOR_WINDOWFRAME
             COLOR_WINDOWTEXT

             Для использования стандартного системного цвета прикладная
        программа должна увеличить значение цвета фона на 1.  Например,
        COLOR_BACKGROUND+1 - это системный цвет фона.


             Меню класса

             Меню  класса  определяет меню по умолчанию, которое должно
        быть использовано окнами данного  класса,  если  меню  явно  не
        задано   при   создании  окон.  Меню  -  это  перечень  команд,
        появляющийся в верхней части окна  под  строкой  заголовка,  из
        которого пользователь выбирает действия, выполняемые прикладной
        программой.   Для  задания  меню  класса  прикладная  программа
        присваивает  полю   lpszMenuName   структуры   WNDCLASS   адрес
        оканчивающейся  нулем  строки,  содержащей  имя  ресурса  меню.
        Предполагается,  что  меню  -  это  ресурс  данной   прикладной
        программы.  При  необходимости  Windows автоматически загружает
        меню. Заметим, что,  если  ресурс  меню  идентифицирован  целым
        значением, а не именем, то полю lpszMenuName это целое значение
        присваивается    после    обработки    значения   макрокомандой
        MAKEINTRESOURCE.
             Для Windows меню  класса  не  обязательно.  Если  меню  не
        задано, предполагается, что окна данного класса не имеют строки
        меню.  Но если даже меню класса не задано, прикладная программа
        может определить меню при создании окна.
             Windows  не  допускает  использование  строки   меню   для
        дочерних  окон.  Если  задано  меню  класса,  и  дочернее  окно
        создается с использованием этого класса, меню игнорируется.
                                    1.2.8 Типы классов                         

             Тип класса определяет дополнительные элементы класса окна.
        Допускается  объединение нескольких типов с помощью поразрядной
        операции OR. В приведенной ниже таблице 1.2 перечисляются  типы
        классов:

         Таблица 1.2                    Типы классов окон
        ============================================================
                Тип         |              Описание
        ====================|=======================================
         CS_BYTEALIGNCLIENT | Выравнивает  область пользователя окна
                            | на границу байта (в направлении х).
                            |
         CS_BYTEALIGNWINDOW | Выравнивает  окно  на границу байта (в
                            | направлении х).
                            |

       Windows 3.0/Ref/1#7                                       = 18 =

         CS_CLASSDC         | Отводит один контекст отображения, ко-
                            | торый  будет  разделяться всеми окнами
                            | данного класса.
                            |
         CS_DBLCLKS         | Посылает  сообщения  о двойном нажатии
                            | кнопки "мыши" функции окна.

         CS_GLOBALCLASS     | Специфицирует, что класс окна является
                            | программным глобальным классом. Програм-
                            | ный глобальный класс создается прикладной
                            | программой или библиотекой, и доступен
                            | для всех прикладных программ. Класс раз-
                            | рушается, когда программа или библиотека,
                            | создавшие этот класс, закончили работу;
                            | следовательно, перед этим должны быть за-
                            | крыты все окна, принадлежащие этому прог-
                            | раммному глобальному классу.
                            |
         CS_HREDRAW         | Требует, чтобы вся область пользователя
                            | перерисовывалась, если перемещение или из-
                            | менение  размера  окна изменило ширину
                            | области пользователя.
                            |
         CS_NOCLOSE         | Препятствует выполнению команды Завершить
                            | системного меню.
                            |
         CS_OWNDC           | Отводит уникальный  контекст отображе-
                            | ния для каждого окна данного класса
                            |
         CW_PARENTDC        | Дает контекст отображения родительского
                            | окна классу окна
                            |
         CS_SAVEBITS        | Сохраняет часть образа экрана, которая
                            | недоступна окну; Windows использует сох-
                            | раненную растровую карту для воссозда-
                            | ния образа экрана, когда окно удалено.
                            | Windows индицирует растр в соответствии
                            | с  его первоначальным положением и не
                            | посылает сообщения WM_PAINT окнам, кото-
                            | рые не могут быть ими обработаны, если
                            | память, используемая для растровой карты,
                            | не может сбрасываться, и если другие ма-
                            | нипуляции с экраном не делают его образ
                            | недействительным.
                            |
         CS_VREDRAW         | Требует, чтобы вся область пользователя
                            | перерисовалась, если перемещение или из-
                            | менение  размера  окна изменило высоту
                            | области пользователя


             Для  присвоения  типа  классу  окна  прикладная  программа
        присваивает значение типа полю style структуры WNDCLASS.


       Windows 3.0/Ref/1#7                                       = 19 =

                                                                               
            1.2.9 Внутренние структуры данных

             Windows  поддерживает  внутренние  структуры  данных   ждя
        каждого  класса  окна  и  собственно  окна.  Эти  структуры  не
        доступны  напрямую  прикладной   программе,   но   могут   быть
        просмотрены и изменены при помощи следующих функций:

             GetClassInfo
             GetClassLong
             GetClassName
             GetClassWord
             GetWindowLong
             GetWindowWord
             SetClassLong
             SetClassWord
             SetWindowLong
             SetWindowWord

             В  разделе 1.2.10 описываются некоторые способы, с помощью
        которых могут быть изменеы класс окна или само окно.
                                   1.2.10 Подклассы окна                       

             Подкласс  - это окно или множество окон, которые относятся
        к одному  классу  окна,  но  чьи  сообщения  перехватываются  и
        обрабатываются  другой  функцией  (или  ) функциями окна, перед
        тем, как они будут переданы в функцию окна класса.
             Для того, чтобы  создать  подкласс,  используется  функция
        SetWindowLong для изменения функции окна, связанной с отдельным
        окном,  что  заставляет  Windows  вызывать  новую  функцию окна
        взамен   ранее   объявленной.   Те   сообщения,   которые    не
        обрабатываются   новой  функцией  окна,  должны  быть  переданы
        предыдущей  функции  при  помощи  вызова  CallWindowProc.   Это
        позволяет   Windows   создавать  цепочку  функций  окна.  Адрес
        предыдущей функции окна может быть получен  посредством  вызова
        функции     GetWindowLong    перед    использованием    функции
        SetWindowLong.
             Сходным  образом  функция  SetClassLong  изменяет  функцию
        окна,   связанную   с   классом   окна.  Каждое  окно,  которое
        последовательно создается, используя этот класс, связывается  с
        меняющейся  функцией  окна  этого  класса  при  помощи передачи
        дескриптора окна функции SetClassLong.  Однако,  это  не  будет
        воздействовать   на  другие  существующие  окна  этого  класса,
        которые были созданы ранее.
             Когда создан подкласс  окна  или  класс  окон,  необходимо
        экспортировать  заменяемую  функцию  окна  в  файле определения
        модуля  и  создать   адрес   процедуры,   переданной   функциям
        SetWindowLong    или    SetClassLong    при    помощи   функции
        MakeProcInstance.
             Примечание.  Прикладная  программа  не   должна   пытаться
        создать  подкласс  стандартных блоков упрасления среды Windows,
        таких как комбинированные панели и клавиши.


       Windows 3.0/Ref/1#7                                       = 20 =

                                                                               
            1.2.11 Перерисовка области пользователя

             При  перемещении  окна  Windows   автоматически   копирует
        содержимое  области  пользователя на новое место. Это сохраняет
        время, потому что окну не надо при перемещении пересчитывать  и
        перерисовывать  область  пользователя. Если окно перемещается и
        изменяет размер, Windows копирует только  ту  часть  предыдущей
        области  пользователя, которая необходима для заполнения нового
        местоположения окна. Если окно увеличивается в размере, Windows
        копирует всю область пользователя  и  посылает  окну  сообщение
        WM_PAINT  для  заполнения  новой  области. При перемещении окна
        предполагается, что содержимое  области  пользователя  остается
        корректным  и  без  модификации может быть скопировано на новое
        место.
             Однако, для некоторых  окон,  особенно  при  изменении  их
        размера   при   перемещении,  содержимое  области  пользователя
        становится некорректным. Например программа "Clock",  чье  окно
        всегда  содержит  полное  изображение  часов, должна каждый раз
        перерисовывать окно при изменении его размера и  корректировать
        время  после  перемещения  окна.  Для того, чтобы не копировать
        предыдущее  содержимое  области   пользователя,   окно   должно
        специфицировать в классе окна типы CS_VREDRAW и CS_HREDRAW.
          1.2.12 Частный  контекст  отображения  и  контекст   отображения     
              класса

             Контекст  отображения  -  это  специальный набор значений,
        который прикладная программа используют для рисования в области
        пользователя своих окон. Windows требует  контекст  отображения
        для  каждого  окна на системном дисплее, но позволяет некоторую
        гибкость в том, как этот контекст отображения будет храниться и
        обрабатываться системой.
             Если  контекст отображения не задан явно, подразумевается,
        что каждое окно  данного  класса  будет  использовать  контекст
        отображения,  получаемый  из  пула  контекстов Windows. В таком
        случае каждое окно должно получить и инициализировать  контекст
        отображения перед рисованием и освободить его после рисования.
             Для того, чтобы не получать  контекст  отображения  каждый
        раз,  когда  пришел  запрос  на рисование, прикладная программа
        может определить тип CS_OWNDC для класса окна. Этот тип  класса
        побуждает   Windows   создать  собственный  (частный)  контекст
        отображения, т.е. назначить уникальный контекст отображения для
        каждого из окон класса.  В  этом  случае  программе  достаточно
        только   один   раз  получить  контекст  отображения,  а  затем
        использовать  его  во  всех   последующих   прорисовках.   Хотя
        использование  этого  типа  и удобно, злоупотреблять им нельзя:
        каждый контекст отображения занимает около  800  байтов  памяти
        динамической области GDI.
             При  задании типа CS_CLASSDC прикладная программа получает
        некоторые возможности  собственного  контекста отображения  без
        назначения  отдельного  контекста отображения для каждого окна.
        Этот  тип  побуждает  Windows  создать  единственный   контекст
        отображения   класса;  т.е.  один  контекст  отображения  будет

       Windows 3.0/Ref/1#7                                       = 21 =

        разделяться всеми окнами  этого  класса.  Прикладной  программе
        нужно  будет  только передать этот контекст отображения окну, и
        окно будет использовать его до тех пор, пока какое-либо  другое
        окно данного класса не затребует контекст отображения.
             Сходным  образом, специфицируя тип CS_PARENTDC, прикладная
        программа может  создавать  дочерние  окна,  которые  наследуют
        контекст отображения своего родительского окна.
                                   1.2.13 Функция  окна                        

             Функция  окна  обрабатывает все сообщения, посылаемые окну
        данного класса. Windows посылает сообщения функции окна,  когда
        она   получает  предназначенную  для  данного  окна  информацию
        пользователя,  или  когда  ей  необходимо  выполнить  некоторые
        действия  в  окне,  такие,  например,  как  рисование в области
        пользователя.
             Функция окна получает  сообщения  о  вводе  с  клавиатуры,
        "мыши"  или таймера. Она также получает информационные запросы,
        например, запрос о  заголовке  окна,  уведомления  о  системных
        изменениях,  выполняемых  другими  окнами,  например, изменения
        файла WIN.INI, и сообщения, дающие  возможность  модифицировать
        стандартный  ответ  системы на определенные действия, такие как
        настройка меню перед его индикацией. Она  получает  запросы  на
        выполнение   некоторых   действий   над   окном   или  областью
        пользователя, например,  таких,  как  запрос  на  корректировку
        области  пользователя. Функция окна также получает информацию о
        своем состоянии относительно  других  окон,  такую  как  потеря
        доступа к клавиатуре или активизация окна.
             Большинство сообщений функция окна получает от Windows, но
        она  также  может  получать сообщения и от других окон, включая
        окна, которыми она владеет. Эти сообщения могут быть  запросами
        на  информацию  или  уведомлениями  о  том,  что  в другом окне
        произошло данное событие.
             Функция окна продолжает получать сообщения от системы  (и,
        возможно,   от   других   окон)   до   тех  пор,  пока  функция
        родительского  окна  или  система  не  разрушит  окно.  Даже  в
        процессе   разрушения   функция  окна  получает  дополнительные
        сообщения, которые дают ей  возможность  выполнить  и  сбросить
        задачи  перед завершением работы. Но как только окно разрушено,
        сообщения  перестают  передаваться  функции  этого  окна.  Если
        имеется  несколько  окон  одного  класса, то функция продолжает
        принимать сообщения, переданные другим окнам до тех  пор,  пока
        они, в свою очередь, не будут разрушены.
             Функция  окна  определяет действительное поведение данного
        окна, т.е. она определяет, какой ответ окно  даст  на  команды,
        полученные  от  пользователя  или  системы.  Сообщения, которые
        функция  окна  получает  от   системы,   содержат   информацию,
        известную  функции (например, пользователь активизировал строку
        прокрутки, или выбрал команду Open  из  меню  File  или  дважды
        нажал кнопку "мыши" в области пользователя).
             Функция  окна  должна проверить каждое сообщение и решить,
        какое действие выполнить, если это необходимо.  Например,  если
        пользователь  нажал  кнопку  "мыши" в строке прокрутки, функция

       Windows 3.0/Ref/1#7                                       = 22 =

        окна  должна  прокрутить  область  пользователя.  Хотя  Windows
        предоставляет  подробную  информацию  о  том, что произойдет, и
        некоторый  инструментарий  для  выполнения  таких  задач,   как
        рисование и  прокрутка,  функция  окна  должна  сама  выполнить
        выполнить эту реальную задачу.
            Функция окна может также выбрать, отвечает она или  нет  на
        данное  сообщение. Если не отвечает, то необходимо дать системе
        возможность все-таки получить ответ, передав сообщение  функции
        DefWindowProc.  Эта  функция  выполняет  действия по умолчанию,
        основываясь на данном сообщении  и  его  параметрах.  Множество
        сообщений,   особенно   сообщения  непользовательской  области,
        должны  быть  обработаны,   так   что   функция   DefWindowProc
        необходима во всех функциях окон.
             Функция   окна   также   получает   сообщения,  которые  в
        действительности  предназначены  для  обработки   средой.   Эти
        сообщения,  называемые  сообщениями непользовательской области,
        информируют функцию о том, выполнил ли  пользователь  некоторые
        действия  в  непользовательской  области окна, такие, например,
        как нажатие на  кнопку  "мыши"  в  строке  заголовка,  или  что
        необходима некоторая информация об окне, касающаяся перемещения
        или изменения размера окна. Хотя Windows посылает эти сообщения
        в   функцию   окна,   последняя   должна  передать  их  функции
        DefWindowProc, не пытаясь обработать их. В любом случае функция
        окна не должна игнорировать сообщение, передавая их,  если  это
        необходимо, функции DefWindowProc.

             Сообщения окон

             Сообщение  окна  - это множество значений, которые Windows
        посылает  в  функцию  окна,  когда  ей   необходимо   выполнить
        некоторые  действия или информировать окно о том, что произошел
        ввод. Каждое сообщение состоит из четырех частей:  дескриптора,
        идентифицирующего   окно,   идентификатора   сообщения  и  двух
        значений,  зависящих  от  данного  сообщения  -  16-битового  и
        32-битового.   Функция   окна   затем  проверяет  идентификатор
        сообщения, чтобы определить, какие действия предпринять  и  как
        интерпритировать эти 16- и 32-битовые значения.
             Windows  имеет  широкий  спектр сообщений, которые она или
        прикладна программа может посылать  функции  окна.  Большинство
        сообщений  посылается  окну  как  результат выполнения заданной
        функции или как информация от пользователя.
             Посылая сообщение функции окна, Windows предполагает,  что
        функция  окна имеет четыре параметра и использует соглашения по
        вызову системы Паскаль. Ниже приводится синтаксис функции окна:

             LONG FAR PASCAL WndProc(hWnd, wMsg, wParam, lParam)
             HWND hWnd;
             WORD wMsg;
             WORD wParam;
             DWORD lParam;

             Параметр  hWnd  идентифицирует окно, получающее сообщение;
        параметр wMsg - идентификатор сообщения; параметр wParam  -  16

       Windows 3.0/Ref/1#7                                       = 23 =

        бит   дополнительной   информации,   специфичной   для  данного
        сообщения; параметр lParam - 32 бита дополнительной информации.
        Функция окна должна  возвращать  32-битовое  значение,  которое
        представляет  собой результат обработки сообщения. Возвращаемое
        значение зависит от конкретного посланного сообщения.
             Windows  предполагает  межсегментный  вызов  функции окна,
        поэтому функция должна быть  объявлена  с  атрибутом  FAR.  Имя
        функции  окна  должно быть экспортировано посредством включения
        его в оператор  EXPORTS  файла  определения  модуля  прикладной
        программы.

             Функция окна по умолчанию

             Функция  DefWindowProc  обрабатывает   по   умолчанию   те
        сообщения,  которые  не  должны  или  не  могут быть обработаны
        функцией   окна.   Для   большинства   функций   окон   функция
        DefWindowProc  выполняет  большинство,  если  не  всю обработку
        сообщений      непользовательской      области.       Сообщения
        непользовательской   области   -   это  те  сообщения,  которые
        предполагают выполнение действий над теми частями окна, которые
        не входят в область пользователя.  В  таблице  1.3  перечислены
        сообщения,    обрабатываемые    функцией    DefWindowProc,    и
        соответствующие действия по умолчанию:


       Windows 3.0/Ref/1#7                                       = 24 =


        Таблица 1.3          Реакция на сообщения по умолчанию

        ===============================================================
            Сообщение       |       Действие по умолчанию
        ====================|==========================================
         WM_ACTIVATE        | Устанавливает или уничтожает фокусировку
                            | ввода.
                            |
         WM_CANCELMODE      | Завершает внутреннюю обработку стандарт-
                            | ного ввода строки прокрутки, внутреннюю
                            | обработку меню и раэрешает ввод от
                            | "мыши".
                            |
         WM_CLOSE           | Вызывает функцию DestroyWindow.
                            |
         WM_CTLCOLOR        | Устанавливает цвет фона и текста и возв-
                            | ращает дескриптор кисти, используемой для
                            | заливки фона блока управления.
                            |
         WM_ERASEBKGND      | Заливает область пользователя, используя
                            | цвет и шаблон, определяемые кистью класса,
                            | если таковая существует.
                            |
         WM_GETTEXT         | Копирует заголовок окна в специфицирован-
                            | ный буфер.
                            |
         WM_GETTEXTLENGTH   | Возвращает длину (в симвалах) заголовка
                            | окна.
                            |
         WM_ICONERASEBKGND  | Заливает область пользователя иконы кистью
                            | фона родительского окна.
                            |
         WM_NCACTIVATE      | Активизирует или дезактивизирует окно и
                            | перерисовывает икону или строку заголовка
                            | окна, чтобы показать новое состояние.
                            |
         WM_NCCALCSIZE      | Вычисляет размеры области пользователя.
                            |
         WM_NCCREATE        | Инициализирует стандартную строку прокру-
                            | тки, если существует, и устанавливает за-
                            | головок окна по умолчанию.
                            |
         WM_NCDESTROY       | Освобождает память, внутренне выделенную
                            | для заголовка окна.
                            |
         WM_NCHITTEST       | Определяет, в какой части окна находится
                            | "мышь".
                            |
         WM_NCLBUTTONDBLCLK | Тестирует данную точку на предмет место-
                            | положения "мыши" и, если необходимо, ге-
                            | нерирует дополнительные сообщения.
                            |

       Windows 3.0/Ref/1#7                                       = 25 =

         WM_NCLBUTTONDOWN   | Определяет, была ли нажата левая кнопка
                            | "мыши" в то время, когда "мышь" находи-
                            | лась в непользовательской области.
                            |
         WM_NCLBUTTONUP     | Тестирует данную точку на предмет место-
                            | положения "мыши" и, если необходимо, ге-
                            | нерирует дополнительные сообщения.
                            |
         WM_NCMOUSEMOVE     | Тестирует данную точку на предмет место-
                            | положения "мыши" и, если необходимо, ге-
                            | нерирует дополнительные сообщения.
                            |
         WM_NCPAINT         | Рисует непользовательскую область окна.
                            |
         WM_PAINT           | Помечает для перерисовки измененную об-
                            | ласть, но не перерисовывает ее.
                            |
         WM_PAINITICON      | Рисует икону класса, когда окно минимизи-
                            | руется.
                            |
         WM_QUERYENDSESSION | Возвращает TRUE.
                            |
         WM_QUERYOPEN       | Возвращает TRUE.
                            |
         WM_SETREDRAW       | Требует немедленной корректировки инфор-
                            | мации об области отсечения полного окна.
                            |
         WM_SETTEXT         | Устанавливает и индицирует заголовок окна.
                            |
         WM_SYSCHAR         | Генерирует сообщение WM_SYSCOMMABD для
                            | ввода из меню
                            |
         WM_SYSCOMMAND      | Выполняет запрошенную системную команду
                            |
         WM_SYSKEYDOWN      | Проверяет заданную клавишу и генерирует
                            | сообщение WM_SYSKEYDOWN, если эта клавиша
                            | TAB или ENTER
                                     1.2.14 Типы окон                          

             Windows  обеспечивает  несколько  различных  типов   окон,
        которые  могут комбинироваться для формирования окон различного
        вида. Эти типы используются функцией CreateWindow при  создании
        окна.

             Перекрывающиеся окна

             Перекрывающееся  окно  -  это всегда окно верхнего уровня.
        Другими  словами,  перекрывающееся  окно   никогда   не   имеет
        родительского окна. Оно имеет область пользователя, окантовку и
        строку  заголовка.  Окно этого типа также может иметь системное
        меню, панели максимизации/минимизации окна, строки прокрутки  и
        меню,  если  все эти элементы определены при открытии окна. Для

       Windows 3.0/Ref/1#7                                       = 26 =

        окон,  используемых   в   качестве   основного   интерфейса   с
        пользователем,    настоятельно    рекомендуется    использовать
        системное меню и панели максимизации/минимизации.
             Каждое перекрывающееся окно имеет  соответствующую  икону,
        которую    Windows    индицирует    при    минимизации    окна.
        Минимизированное окно не разрушается. Оно  может  быть  открыто
        вновь   восстановлением  его  из  иконы.  Прикладная  программа
        минимизирует окно для сохранения экранного пространства,  когда
        в одно и то же время открыто несколько окон.
             Перекрывающееся   окно   создается   с   помощью   функции
        CreateWindow посредством использования типа  WS_OVERLAPPED  или
        WS_OVERLAPPEDWINDOW.  Если  перекрывающееся  окно  имеет только
        заголовок и окантовку, то оно создается с  использованием  типа
        WS_OVERLAPPED.  Тип WS_OVERLAPPEDWINDOW создает перекрывающееся
        окно  с  заголовком,  окантовкой,  системным  меню  и  панелями
        минимизации и максимизации.

             Зависимые окна

             Зависимые  окна  -  это  специальный  тип перекрывающегося
        окна. Каждое зависимое окно имеет владельца. Этот владелец  так
        же  должен  быть  перекрывающимся  окном.  Зависимое окно имеет
        следующие ограничения:

             Зависимое окно всегда должно быть "выше" своего  владельца
        во    время    упорядочивания    окон.    Попытка   переместить
        окно-владельца поверх  зависимого  окна  приводит  к  изменению
        положения последнего таким образом, чтобы оно всегда оставалось
        сверху.

             Windows  автоматически  разрушает  зависимое  окно,  когда
        разрушается его владелец.

             Зависимые окна невидимы, когда окно-владелец минимизировано.

             Прикладная  программа  создает  зависимое окно посредством
        задания  дескриптора  окна-владельца  в  параметре   hWndParent
        функции   CreateWindow,   которая  создает  окно,  имеющее  тип
        WS_OVERLAPPED.
             Панели диалога являются зависимыми  окнами  по  умолчанию.
        Функция,  которая  создает  панель диалога, получает дескриптор
        окна-владельца в качестве параметра hParentWnd.

             Накладываемые окна

             Накладываемые окна - это специальный тип  перекрывающегося
        окна.  Основное  различие между накладываемым и перекрывающимся
        окном состоит в том, что перекрывающееся окно  всегда  содержит
        заголовок   в  то  время,  как  для накладываемого окна сторока
        заголовка  является  необязательным  атрибутом.  Так  же  как и
        перекрывающиеся окна накладываемые окна могут быть зависимыми.
             Накладываемое   окно  создается  функцией  CreateWindow  с
        заданным типом окна WS_POPUP.  Накладываемое  окно  может  быть

       Windows 3.0/Ref/1#7                                       = 27 =

        открыто или закрыто функцией ShowWindow.

             Дочерние окна

             Дочернее  окно - это тип окна, заключенного внутри области
        пользователя другого окна. Обычно  дочерние  окна  используются
        для  разделения  области  пользователя  родительского  окна  на
        различные функциональные области.
             Дочернее окно создается функцией CreateWindow  с  заданным
        типом  окна  WS_CHILD.  Дочернее  окно  может  быть открыто или
        закрыто функцией ShowWindow.
             Каждое  дочернее  окно  должно  иметь  родительское  окно.
        Родительское   окно   может   быть    перекрывающимся    окном,
        накладываемым   окном   или   даже   другим   дочерним   окном.
        Родительское окно  отводит  часть  своей  области  пользователя
        дочернему  окну,  из  которой  дочернее  окно  и  получает  всю
        вводимую информацию. Для различных дочерних окон одного и  того
        же   родительского   окна  класс  окна  не  обязательно  должен
        совпадать.  Это   означает,   что   Windows   может   заполнить
        родительское окно дочерними окнами, которые выглядят по-разному
        и выполняют различные задачи.
             Дочернее  окно  имеет  область  пользователя,  но не имеет
        других атрибутов окна,  если  только  они  не  были  специально
        заданы. Прикладная программа может запросить для дочернего окна
        окантовку,  строку заголовка, панели максимизации/минимизации и
        строки прокрутки. В большинстве  случаев  прикладная  программа
        создает для дочерних окон свои собственные атрибуты.
             Хотя это и не требуется, каждому  дочернему  окну  следует
        иметь   уникальный  целый  идентификатор.  Этот  идентификатор,
        заданный в параметре меню функции CreateWindow на  месте  меню,
        помогает различать дочерние окна, когда их у родительского окна
        несколько. Дочернее окно должно использовать этот идентификатор
        во   всех   сообщениях,   посылаемых  родительскому  окну.  Это
        позволяет родительскому окну, имеющему несколько дочерних окон,
        идентифицировать то окно, которое послало ему сообщение.
             Windows  всегда  располагает  дочернее  окно  относительно
        верхнего левого угла области пользователя  родительского  окна.
        Координаты  всегда  являются  координатами  пользователя.  (Для
        получения информации об отображении смотри раздел 2.5  "Функции
        отображения").   Если  дочернее  окно  полностью  или  частично
        перемещается за  пределы  видимой  части  области  пользователя
        родительского  окна,  то  это дочернее окно отсекается, т.е. та
        часть, которая  оказалась  за  пределами  области  пользователя
        родительского окна, не индицируется.
             Дочернее окно является независимым окном, получающим  свои
        собственные  сообщения  о вводе и другие сообщения. Информация,
        предназначенная дочернему окну, поступает непосредственно в это
        окно,  а  не  передается   через   родительское.   Единственным
        исключением  служит  случай,  когда  ввод  делается  недоступен
        дочернему окну с помощью функции EnableWindow.  В  этом  случае
        Windows  передает всю информацию, предназначенную для дочернего
        окна, родительскому окну. Это  дает  возможность  родительскому
        окну   осуществлять   контроль   над   вводом   и,   в   случае

       Windows 3.0/Ref/1#7                                       = 28 =

        необходимости, блокировать дочернее окно.
             Действия,   влияющие   на   родительское    окно,    могут
        воздействовать  и  на дочернее окно. Ниже приводится - перечень
        действий, влияющих через родителькое окно на дочернее.

         Родительское окно                 Дочернее окно
        ---------------------------------------------------------------

         Делается видимым          Делается видимым после  родительско-
                                   го окна.

         Делается невидимым        Делается невидимым прежде, чем роди-
                                   тельское окно будет закрыто. Дочер-
                                   нее окно  может  быть  видимо  только
                                   тогда, когда видимо родительское.

         Разрушается               Разрушается до разрушения родите-
                                   льского окна.

         Перемещается              Перемещается с областью пользова-
                                   теля родительского окна. Дочернее
                                   окно отвечает за рисование  после
                                   перемещения.

         Увеличивается в раз-      Перерисовывает те части родительско-
         мере или максимизируется  го окна, которые остались незащищен-
                                   ными в результате увеличения размера.
                                   области  пользователя.

             Windows автоматически не отсекает дочернее окно из области
        пользователя родительского окна. Это означает, что родительское
        окно будет рисовать поверх дочернего, если оно работает на  той
        же  части  области  пользователя,  что и дочернее окно. Windows
        будет   выполнять   отсечение   дочернего   окна   из   области
        пользователя родительского окна в том случае, если родительское
        окно  имеет  тип  WS_CLIPCHILDREN. Если дочернее окно отсечено,
        родительское окно не может рисовать поверх дочернего.
             Дочернее  окно  может  перекрывать  другие  дочерние окна,
        занимающие ту же самую область пользователя. Два дочерних  окна
        одного  и  того  же  родительского окна могут рисовать каждое в
        области пользователя другого, если только одно из дочерних окон
        не имеет типа WS_CLIPSIBLING. В этом случае  имеют  место  т.н.
        родственные  окна  -  дочерние  окна,  разделяющие одно и то же
        родительское окно. Если Windows указала этот тип для  дочернего
        окна,  будет  отсекаться любая часть родственного окна, которая
        лежит внутри этого окна.
             Если окно имеет тип  WS_CLIPCHILDREN  или  WS_CLIPSIBLING,
        возможны незначительные потери в выполнении.
                                                                               
            1.2.15 Окна интерфейса множества документов

             Интерфейс     множества     документов    (MDI)    Windows
        предусматривает прикладные программы со стандартным интерфейсом

       Windows 3.0/Ref/1#7                                       = 29 =

        для индикации множества документов  внутри  одного  и  того  же
        экземпляра   прикладной  программы.  Прикладная  программа  MDI
        создает окно фрейма, содержащее пользовательское окно на  месте
        своей   области   пользователя.  Прикладная  программа  создает
        пользовательское   окно   MDI   посредством   вызова    функции
        CreateWindow с классом MDICLIENT, передавая ей структуру данных
        CREATESTRUCT в качестве параметра lpParam. Это пользовательское
        окно,  в свою очередь, может быть владельцем множества дочерних
        окон,  каждое  из  которых   индицирует   отдельный   документ.
        Прикладная  программа  MDI  управляет  этими  дочерними окнами,
        посылая сообщение их пользовательскому окну.
             Для получения более  подробной  информации  об  интерфейсе
        множества документов смотрите Руковдство по обучению.
                                                                               
            1.2.16 Строка заголовка

             Строка  заголовка,  прямоугольник  в  верхней  части окна,
        содержит  заголовок  окна   или   имя.   Прикладная   программа
        определяет  заголовок  окна при его создании. Программа может в
        любое время изменить это  имя,  вызвав  функцию  SetWindowText.
        Если   окно   имеет   строку   заголовка,   Windows   позволяет
        пользователю перемещать окно, используя "мышь".
                                                                               
            1.2.17 Системное меню

             Системное меню, представленное иконой в левом конце строки
        заголовка,  представляет  собой  накладываемое  меню,   которое
        содержит  системные  команды.  Системные команды - это команды,
        выбираемые пользователем и заставляющие Windows выполнить такие
        действия, воздействуюшие на окно,  как,  например,  перемещение
        или закрытие.
             Если  в  окне  предполагается  наличие системного меню или
        панели закрытия, то при его создании необходимо специфицировать
        типы WS_SYSMENU и WS_CAPTION.
                                                                               
            1.2.18 Строки прокрутки

             Горизонтальная  и  вертикальная  строки прокрутки, строки,
        расположенные  в  правой   и  нижней  частях  окна,   позволяют
        пользователю   прокручивать  содержимое  области  пользователя.
        Windows  посылает  запросы  на  прокрутку  в   виде   сообщений
        WM_HSCROLL  и  WM_VSCROLL.  Если  окно  разрешает  прокрутку, в
        функции  окна  должна   быть   предусмотрена   обработка   этих
        сообщений.
             Окно  может иметь одну или обе строки прокрутки. Для того,
        чтобы создать окно со строкой прокрутки,  прикладная  программа
        должна  специфицировать  тип окна WS_HSCROLL или WS_VSCROLL при
        создании окна.
                                        1.2.19 Меню                            

             Меню - это список команд, из которого  пользователь  может
        выбрать нужный ему элемент, используя  "мышь"  или  клавиатуру.

       Windows 3.0/Ref/1#7                                       = 30 =

        Когда    пользователь    выбрал   элемент,   Windows   посылает
        соответствующее  сообщение  в  функцию   окна   для   индикации
        выбранной  команды.  В Windows  предусматрено  два  типа  меню:
        строка   меню   (иногда   называемая   статическим   меню)    и
        накладываемое меню.
             Строка   меню   -   это   горизонтальное   меню,   которое
        располагается в верхней части окна под строкой заголовка,  если
        таковая  существует. Каждое окно, исключая дочернее окно, может
        иметь строку меню. Если прикладная программа  не  специфицирует
        меню при создании окна, окно получает строку меню по умолчанию,
        определенную в классе окна.
             Накладываемое  меню содержит вертикальный список элементов
        и часто индицируется, когда пользователь выбрал элемент  строки
        меню.  В  свою  очередь  элемент  накладываемого   меню   может
        индицировать  следующее  накладываемое меню. Накладываемое меню
        может быть  и  "всплывающим".  Всплывающее  накладываемое  меню
        может  появится  в  том  месте  экрана,  где  это предусмотрено
        прикладной  программой.  Прикладная  программа  создает  пустое
        накладываемое меню при помощи вызова функции CreatePopupMenu, а
        затем заполняет его, используя функции AppendMenu и InsertMenu.
        Накладываемое  меню  индицируется  посредством  вызова  функции
        TrackPopupMenu.
             Отдельный элемент меню может быть создан или модифицирован
        при  помощи  типа   MF_OWNERDRAW,   показывающего,   что   этот
        элемент является элементом, рисуемым владельцем. В этом  случае
        владелец  меню является ответственным за рисование всех видимых
        аспектов  элемента меню, включая его отметку, заблокированное и
        подсвеченное  состояния.  Когда  меню  появляется   на   экране
        впервые,  окно,  являющееся владельцем меню, получает сообщение
        WM_MEASUREITEM. Параметр lParam этого  сообщения  указывает  на
        структуру  данных  MEASUREITEMSTRUCT.  Затем владелец заполняет
        эту  структуру   данных   размерами   элемента   и   возвращает
        управление.  Windows  использует  информацию  из этой структуры
        данных для определения размера  элемента;  т.о.  Windows  может
        соответственно  определить  взаимодействие  пользователя с этим
        элементом.
             Windows посылает сообщение WM_DRAWITEM всякий  раз,  когда
        владелец   меню   должен   изменить   визуальное  представление
        элемента. В  отличие  от  других  блоков  управления,  рисуемых
        владельцем,   владелец   меню   не  должен  получать  сообщение
        WM_DELETEITEM при  удалении  элемента  из  меню.  Элемент  меню
        верхнего уровня не может быть элементом, рисуемым владельцем.
             Когда  прикладная  программа  вызывает функции AppendMenu,
        InsertMenu  или  ModifyMenu  для  добавления   элемента   меню,
        рисуемого  владельцем, или  для перевода существующего элемента
        меню в состояние  рисования  владельцем,  прикладная  программа
        должна  представить  функции  32-битовое  значение  в  качестве
        параметра  lpNewItem.  Прикладная  программа может использовать
        этот параметр для сохранения добавочной информации, связанной с
        этим элементом.  Это  значение  доступно  прикладной  программе
        через  поле  itemData  структуры,  указанной  параметром lParam
        сообщений  WM_MEASUREITEM   и   WM_DRAWITEM.   Например,   если
        прикладная  программа  выводит  текст в элемент меню, используя

       Windows 3.0/Ref/1#7                                       = 31 =

        заданный цвет, 32-битовое значение должно  содержать  указатель
        на  строку.  Прикладная  программа  может затем установить цвет
        текста перед рисованием элемента, когда она  получит  сообщение
        WM_DRAWITEM.
                                                                               
            1.2.20 Состояние окна

             Окно  может быть в открытом или закрытом состоянии (в виде
        иконы), невидимо или видимо, заблокировано или  разблокировано.
        Первоначальное состояние окна может быть установлено при помощи
        задания следующих типов:

             WS_DISABLED
             WS_MINIMIZE
             WS_MAXIMIZE
             WS_VISIBLE

             Windows  создает  окна,  в  которые первоначально разрешен
        ввод, т.е. окна, которые могут  начать  принимать  сообщения  о
        вводе немедленно.  В  некоторых  случаях  прикладной  программе
        нужно  запретить  ввод  во  вновь  созданное  окно.  Ввод можно
        заблокировать, специфицирую для окна тип WS_DISABLED.
             Новое окно не видимо на экране до тех пор, пока прикладная
        программа  не  откроет его при помощи вызова функции SwowWindow
        или  задания   типа   WS_VISIBLE   при   создании   окна.   Для
        перекрывающихся  окон  тип окна WS_ICONIC создает окно, которое
        первоначально минимизировано.
                                1.2.21 Жизненный цикл окна                     

             Поскольку  основное  назначение  каждого   окна   -   дать
        пользователю   возможность   вводить  данные  или  индицировать
        информацию, то жизненный  цикл  окна  начинается  тогда,  когда
        прикладная  программа нуждается во вводе или выводе информации.
        Жизненый  цикл  окна  продолжается  до  тех  пор,   пока   окно
        становится  не нужным, или когда прикдадная программа завершает
        работу. Некоторые окна, например такие, которые служат основным
        пользовательским  интерфейсом   прикладной   программы,   имеют
        жизненный   цикл,  совпадающий  с  временем  работы  прикладной
        программы.  Другие  окна,  например,  окна,  используемые   для
        панелей диалога, живут на экране всего несколько секунд.
             Первый  шаг  жизненного  цикла  окна - его создание. Задав
        зарегистрированный класс окна с соответствующей функцией  окна,
        прикладная   программа   использует  функцию  CreateWindow  для
        создания  окна.  Эта  функция  побуждает  Windows   подготовить
        внутреннюю  структуру данных окна и возвратить уникальное целое
        значение,  называемое  дескриптором  окна,  которое  прикладная
        программа   может   использовать   для   идентификации  окна  в
        последующих вызовах функции.
             Первое сообщение, которое обрабатывают большинство окон, -
        это сообщение о создании окна WM_CREATE.  Функция  CreateWindow
        посылает  его  для  информирования  функции окна о том, что она
        может  теперь   выполнить   некоторую   инициализацию,   такую,

       Windows 3.0/Ref/1#7                                       = 32 =

        например,  как распределение памяти и подготовку файлов данных.
        Параметр wParam этого сообщения  не  используется,  а  параметр
        lParam   содержит   длинный   указатель   на  структуру  данных
        CREATESTRUCT, чьи поля соответствуют параметрам, передаваемым в
        функцию CreateWindow.
             Оба  сообщения,  WM_CREATE   и   WM_NCCREATE,   посылаются
        непосредственно   функции   окна,   минуя   очередь  прикладной
        программы.  Это  означает,  что  прикладная   программа   будет
        создавать  окно  и обрабатывать сообщение WM_CREATE прежде, чем
        она войдет в основной цикл программы.
             После  того,  как  окно  создано,  оно должно быть открыто
        (индицировано) прежде,  чем  будет  использоваться.  Прикладная
        программа  может  открыть  окно одним из двух способов: указать
        тип окна WS_VISIBLE в  функции  CreateWindow  для  немедленного
        открытия  окна  после его создания; немного подождать и вызвать
        функцию ShowWindow для открытия окна.  При  создании  основного
        окна   прикладная   программа  не  должна  специфицировать  тип
        WS_VISIBLE, а должна вызвать  функцию  ShowWindow  из  основной
        функции   Windows,  установив  параметр  nCmdShow  в  требуемое
        значение.
             Когда  окно  больше  не  нужно,  или  прикладная программа
        завершает свою работу, окно должно быть разрушено. Это делается
        с помощью функции DestroyWindow. Функция DestroyWindow  удаляет
        окно  с системного экрана и делает недоступным дескриптор окна.
        Она  также  посылает  сообщения  WM_DESTROY  и  WM_NCDESTROY  в
        функцию окна.
             Сообщение WM_DESTROY обычно является последним сообщением,
        которое   обрабатывает   функция   окна.  Оно  выдается,  когда
        вызывается функция DestroyWindow , или когда сообщение WM_CLOSE
        обрабатывается  функцией  DefWindowProc.  Когда  функция   окна
        получает сообщение WM_DESTROY, она должна освободить занимаемую
        память и закрыть все открытые файлы данных.
             Окно,  используемое в качестве основного пользовательского
        интерфейса, должно быть последним разрушаемым  окном,  и  через
        него  прикладная  программа должна завершать свою работу. Когда
        окно получает сообщение WM_DESTROY, оно должно вызвать  функцию
        PostQuitMessage.  Эта  функция  копирует  сообщение  WM_QUIT  в
        очередь сообщений прикладной программы как сигнал  о  том,  что
        работа  должна быть завершена, когда сообщение будет считано из
        очереди.



       Windows 3.0/Ref/1#7                                       = 33 =

                          1.3 Функции индицирования и перемещения              
       ----------------------------------------------------------------

              Функции индицирования и перемещения индицируют,  скрывают,
        перемещают  и  получают  информацию о количестве и расположении
        окон  на  экране.  Ниже  кратко  описывается   каждая   функция
        индицирования и перемещения:

             Функция                       Описание
        ---------------------------------------------------------------

         ArrangeIconicWindows    Упорядочивает минимизированных (инди-
                                 цированных в виде иконы) дочерних окон.

         BeginDeferWindowPos     Инициализирует память, использумую
                                 функцией DeferWindowPos.

         BringWindowToTop        Переносит окно в начало стека перекры-
                                 вающихся окон.

         CloseWindow             Прячет или минимизирует специфицирова-
                                 нное окно.

         DeferWindowPos          Записывает информацию о позиционирова-
                                 нии окна, которое переместилось или
                                 изменило размер при помощи функции
                                 EndDeferWindowPos.

         EndDeferWindowPos       Изменяет позицию или размеры одновре-
                                 менно  нескольких окон, основываясь на
                                 информации, полученной функцией
                                 DeferWindowPos.

         GetClientRect           Копирует координаты области пользова-
                                 теля окна.

         GetWindowRect           Копирует размеры полного окна.

         GetWindowText           Копирует заголовок окна в буфер.

         GetWindowTextLenght     Возвращает длину (в символах) данного
                                 заголовка окна или текста

         IsIconis                Специфицирует, открыто или закрыто ок-
                                 но (индицировано в виде иконы).

         IsWindowVisible         Определяет, видимо ли даннное окно.

         IsZoomed                Определяет, максимизировано ли окно.

         MoveWindow              Изменяет размер и положение окна.

         OpenIcon                Открывает специфицированное окно.

       Windows 3.0/Ref/1#7                                       = 34 =


         SetWindowPos            Изменяет размеры, положение и порядок
                                 дочерних или накладываемых окон.

         SetWindowText           Устанавливает заголовок или текст окна.

         ShowOwnedPopups         Индицирует или прячет все накладывае-
                                 мые окна.

         ShowWindow              Идицирует или удаляет специфицирован-
                                 ное окно.



       Windows 3.0/Ref/1#7                                       = 35 =

                                     1.4 Функции ввода                         
       ----------------------------------------------------------------

             Функции  ввода  запрещают  ввод  с  системных   устройств,
        управляют  системными  устройствами  или определяют специальные
        действия,  выполняемые  Windows,  когда  прикладная   программа
        получает   ввод   от   системного   устройства.   (К  системным
        устройствам  относятся  "мышь",  клавиатура  и  таймер).   Ниже
        приведен список, кратко описывающий каждую функцию ввода:

             Функция                       Описание
        ---------------------------------------------------------------

          EnableWindow            Разрешает или запрещает ввод от "мыши"
                                  или клавиатуры из прикладной
                                  программы.

          GetActiveWindow         Возвращает дескриптор активного окна.

          GetCapture              Возвращает дескриптор окна, получивше-
                                  го ввод от "мыши".

          GetCurrentTime          Возвращает текущее время Windows.

          GetDoubleClickTime      Возвращает текущее время двойного на-
                                  жатия на кнопку "мыши".

          GetFocus                Возвращает дескриптор окна, получив-
                                  шего право на ввод в данное время.

          GetTickCount            Возвращает число тиков таймера, про-
                                  шедших с момента запуска сисмемы.

          IsWindowEnabled         Определяет, разрешен ли в данное окно
                                  ввод от "мыши" или клавиатуры.

          KillTimer               Убивает специфицированное событие
                                  таймера.

          ReleaseCapture          Разрешает ввод от"мыши" и восстанав-
                                  ливает нормальную обработку ввода.

          SetActiveWindow         Делает окно активным.

          SetCapture              Запрещает специфицированному окну по-
                                  лучать ввод от "мыши".

          SetDoubleClickTime      Устанавливает время двойного нажатия
                                  на кнопку "мыши".

          SetFocus                Предоставляет специфицированному окну
                                  фокусировку ввода.


       Windows 3.0/Ref/1#7                                       = 36 =

          GetSysModalWindow       Делает специфицированное окно систем-
                                  но-модальным.

          GetTimer                Создает событие системного таймера.

          SwapMouseButton         Меняет значения левой и правой кнопки
                                  "мыши".



       Windows 3.0/Ref/1#7                                       = 37 =

                                  1.5 Аппаратные функции                       
       ----------------------------------------------------------------

             Аппаратные  функции  изменяют  состояний устройств ввода и
        получают информацию об их состоянии. Windows использует  "мышь"
        и  клавиатуру в качестве устройств ввода. Ниже приведен список,
        кратко описывающий каждую аппаратную функцию:

             Функция                       Описание
        ---------------------------------------------------------------

         EnableHardwareInput       Разрешает или запрещает ввод от "мы-
                                   ши" или клавиатуры из прикладной
                                   программы.

         GetAsyncKeyState          Возвращает информацию уровня пре-
                                   рывания состояния клавиши.

         GetInputState             Возвращает TRUE, если произошел ввод
                                   от "мыши" или клавиатуры.

         GetKBCodePage             Определяет, загружены ли таблицы
                                   OEM/ANSI.

         GetKeyboardState          Копирует массив, содержащий состоя-
                                   ния клавиш клавиатуры.

         GetKeyNameText            Получает строку, содержащую имя кла-
                                   виши, из списка, поддерживаемого
                                   драйвером клавиатуры.

         GetKeyState               Получает состояние виртуальной кла-
                                   виши.

         MapVirtualKey             Принимает виртуальный или scan-код
                                   клавиши и возвращает соответствую-
                                   щий scan-код, виртуальный код или
                                   значение в коде ASCII.

         OemKeyScan                Отображает код 0 OEM ASCII через
                                   код 0x0FF в списке scan-кодов OEM и
                                   изменяет состояния.

         SetKeyboardState          Устанавливает состояния клавиш кла-
                                   виатуры при помощи изменений значе-
                                   ний массива.

         VkKeyScan                 Переводит символ в коде ANSI в соот-
                                   етствующий виртуальный код клавиши и
                                   изменяет состояние текущей клавиату-
                                   ры.



       Windows 3.0/Ref/1#7                                       = 38 =

                                   1.6 Функции рисования                       
       ----------------------------------------------------------------

             Функции  рисования  подготавливают  окно  для  рисования и
        выполняют   ряд   простых   графических   операций    основного
        назначения.   Хотя  все  функции  рисования  предназначены  для
        использования на  основном  устройстве  индикации  -  системном
        дисплее,  некоторые  из  них  могут  применяться  и  для других
        устройств. Ниже приведен  список,  кратко  описывающий  функции
        рисования:

             Функция                       Описание
        ---------------------------------------------------------------

         BeginPaint                 Подготавлтвает окно для рисования.

         DrawFocusRect              Рисует прямоугольник заданного типа,
                                    использующийся для индикации фокуси-
                                    ровки ввода.

         DrawIcon                   Рисует икону.

         DrawText                   Рисует символы специфицированной
                                    строки.

         EndPaint                   Заканчивает перерисовку окна.

         ExcludeUpdateRgn           Запрещает рисование внутри недейст-
                                    вительной области окна.

         FillRect                   Закрашивает данную область, исполь-
                                    зуя специфицированную кисть.

         FrameRect                  Рисует окантовку для данного прямоу-
                                    гольника.

         GetDC                      Получает контекст отображения для
                                    области пользователя.

         GetUpdateRect              Копирует размеры прямоугольника,
                                    заключающего в себя область окна.

         GetUpdateRgn               Копирует область окна, подлежащую
                                    корректировке.

         GetWindowDC                Получает контекст отображения для
                                    полного окна.

         GrayString                 Выводит строку символов, используя
                                    "серый" текст.

         InvalidateRect             Помечает прямоугольник для перери-
                                    совки.

       Windows 3.0/Ref/1#7                                       = 39 =


         InvalidateRgn              Помечает область для перерисовки.

         InvertRect                 Инвертирует индицированные биты
                                    специфицировааного прямоугольника.

         ReleaseDC                  Освобождает контекст отображения.

         UpdateWindow               Уведомляет прикладную программу,
                                    когда части окна нуждается в пере-
                                    рисовке.

         ValidateRect               Освобождает специфицированный пря-
                                    моугольник от перерисовки.

         ValidateRgn                Освобождает специфицированную об-
                                    ласть от перерисовки.
                           1.6.1 Как Windows управляет дисплеем                

             Системный  дисплей  -  это основное устройство отображения
        для  прикладных  программ,  работающих  в  среде  Windows.  Все
        прикладные   программы   свободны  в  выборе  формы  вывода  на
        системный дисплей, но  поскольку  одновременно  может  работать
        несколько   прикладных   программ,   им   не  дается  право  на
        использование  всего  системного  дисплея.   Полный   системный
        дисплей  должен  быть  разделяемым. Windows разделяет системный
        дисплей,  осторожно  управляя  доступом,  которые  имеют к нему
        прикладные  программы.  Windows  гарантирует,  что   прикладная
        программа  будет  иметь  место  для индицирования вывода, но не
        будет   рисовать   в   зарезервированном   другими  прикладными
        программами месте.
             Windows   управляет   системным  дисплеем,  используя  тип
        контекста отображения. Контекст отображения -  это  специальный
        контекст устройства, который трактует каждое окно как отдельный
        экран  дисплея. Прикладные программы, которые получает контекст
        отображения   для   специфицированного   окна,   имеют   полное
        управление  над  системным дисплеем в пределах этого окна, но у
        них нет доступа к какой-либо  части  экрана,  расположенной  за
        пределами   окна.  Имея  контекст  отображения,  Windows  может
        использовать для  рисования  в  заданном  окне  функции  GDI  и
        функции вывода, описанные в данном разделе.
                             1.6.2 Типы контекста отображения                  

             Имеется  четыре типа контекста отображения: общий, класса,
        собственный и  окна.  Общий,  класса  и  собственный  контексты
        отображения  дают  возможность  рисовать в области пользователя
        заданного окна. Контекст отображения окна позволяет рисовать  в
        любом  месте  окна.  При  создании окна Windows присваивает ему
        общий, класса или собственный контекст  отображения,  базируясь
        на  типе  контекста  отображения,  определенном  в  данном типе
        класса окна.

       Windows 3.0/Ref/1#7                                       = 40 =


             Общий контекст отображения

             Общий контекст отображения - это контекст по умолчанию для
        всех окон. Windows присваивает общий контекст отображения окну,
        если тип контекста отображения явно  не  задан  в  типе  класса
        окна.
             Общий контекст отображения позволяет  рисовать  в  области
        пользователя  окна,  но  не  сразу  доступен для использования.
        Общий контекст отображения должен быть взят из кэша  контекстов
        отображения перед тем, как окно сможет выполнить любые действия
        по  рисованию  в  своей области пользователя. Функции GetDC или
        BeginPaint  получают  контекст  отображения  и  возвращают  его
        дескриптор.  Этот  дескриптор может быть использован в функциях
        GDI для рисования в области пользователя  данного  окна.  После
        того,  как  рисование  будет  закончено,  контекст  отображения
        должен быть возвращен в кэш с  помощью  функции  ReleaseDC  или
        EndPaint.  После  освобождения контекста рисовать нельзя до тех
        пор, пока не будет получен другой контекст отображения.
             После  того,  как  общий  контекст  отображения   получен,
        Windows передает ему выбранные по умолчанию перо, кисть, шрифт,
        область  отсечения  и  другие атрибуты. Эти атрибуты определяют
        средства, доступные в данный момент для  рисования.  В  таблице
        1.4  перечислена  выборка  по  умолчанию  для  общего контекста
        отображения:

        Таблица 1.4     Атрибуты по умолчанию для контекста отображения
        ===============================================================
              Атрибут               Значение по умолчанию
        ===============================================================
         Цвет фона               Белый

         Режим фона              OPAQUE

         Растровая карта         Не определена

         Кисть                   WHITE_BRUSH

         Начальное положение     (0, 0)
         кисти

         Область отсечения       Вся область пользователя с областью
                                 корректировки, вырезаемой соответстве-
                                 нно. Дочерние и накладываемые окна,
                                 принадлежащие области пользователя,
                                 также отсекаются.

         Цветовая палитра        DEFAULT_PALETTE

         Текущая позиция пера    (0, 0)

         Начало координат        Левый верхний угол области пользовате-
                                 ля

       Windows 3.0/Ref/1#7                                       = 41 =


         Режим рисования         R2_COPYPEN

         Шрифт                   SYSTEM_FONT (SYSTEM_FIXED_FONT для
                                 прикладных программ, работающих под
                                 Windows версии младше 3.0

         Межсимвольный           0
         промежуток

         Режим отображения       MM_TEXT

         Перо                    BLACK_PEN

         Режим заливки           ALTERNATE
         многоугольника

         Флаг абсолютный/         ABSOLUTE
         относительный

         Режим растяжения/        BLACKONWHITE
         сжатия

         Цвет текста              Черный

         Протяженность            (1, 1)
         области просмотра

         Начало области           (0, 0)
         просмотра

         Протяженность окна       (1, 1)

         Начальное положение      (0, 0)
         окна

             Прикладная   программа   может   модифицировать   атрибуты
        контекста  устройства,  используя  функции  выборки  и  функции
        атрибутов  контекста  устройства. Напимер, прикладная программа
        обычно изменяет выбранные перо, кисть и шрифт.
             Когда  общий  контекст  отображения освобождается, текущие
        выборки, такие  как  режим  отображения  и  область  отсечения,
        теряются.  Windows  не  сохраняет предыдущие выборки для общего
        контекста  отображения,  поскольку   эти   контексты   являются
        разделяемыми,  и  Windows не может гарантировать, что следующее
        окно, использующее данный  общий  контекст  отображения,  будет
        последним   окном,   использующим   этот  контекст.  Прикладные
        программы,  которые  модифицируют  атрибуты  общего   контекста
        отображения, должны делать это каждый раз при получении другого
        контекста отображения.


       Windows 3.0/Ref/1#7                                       = 42 =

             Контекст отображения класса

             Окно имеет контекст отображения класса,  если  класс  окна
        специфицирует   тип  CS_CLASSDC.  Контекст  отображения  класса
        разделяется всеми окнами данного класса.  Контекст  отображения
        класса  не является частью кэша контекстов отображения. Windows
        специально   выделяет   контекст   отображения    класса    для
        использования его только данным классом окна.
             Перед  использованием  контекст  отображения класса должен
        быть получен, а после использования освобождать его не надо. До
        тех  пор,  пока  хотя  бы  одно  окно  класса  использует  этот
        контекст  класса,  он  может   сохраняться   и   использоваться
        повторно.  Если  другое окно класса хочет использовать контекст
        этого типа,  то  перед  рисованием  оно  должно  получить  его.
        Получая   контест,   необходимо  установить  корректные  начало
        координат и область отсечения для нового окна и убедиться,  что
        контекст  применяется  к корректному окну. Дескриптор контекста
        отображения класса может быть получен с помощью  функции  GetDC
        или  BeginPaint.  Функции  ReleaseDC  и  EndPaint  не оказывают
        влияния на контекст отображения класса.
             Контекст  отображения  класса задает те же самые атрибуты,
        что и общий контекст отображения,  при  создании  первого  окна
        класса (смотри Таблицу 1.4 "Атрибуты по умолчанию для контекста
        отображения).  Windows  сохраняет  все новые атрибуты, заданные
        для  контекста  отображения  класса,  за  исключением   области
        отсечения  и  начала  координат,  которые  устанавливаются  для
        текущего окна при  получении  контекста.  Все  другие  атрибуты
        остаются   без   изменения.   Это   означает,   что  изменения,
        выполненные для  одного  окна,  действуют  и  на  другие  окна,
        последовательно использующие контекст класса.
             Примечание.   Изменение   режима   отображения   контекста
        отображения  класса  может  иметь  нежелательный   эффект   при
        стирании  фона  окна.  Для получения более подробной информации
        смотри  раздел  1.6.7  "Фон  окна"  и   раздел   2.5   "Функции
        отображения".

             Собственный контекст отображения

             Окно имеет собственный контекст  отображения,  если  класс
        окна   специфицирует   тип   CS_OWNDC.   Собственный   контекст
        отображения   используется    исключительно    данным    окном.
        Собственный   контекст  отображения  не  является  частью  кэша
        контекстов отображения. Вместо этого Windows специально отводит
        контекст для исключительного использования данным окном.
             Собственный контекст отображения получают только один раз.
        Более того, его можно сохранять и использовать для данного окна
        любое число раз. Windows  автоматически  корректирует  его  для
        того,  чтобы  отразить  изменения  окна,  например,  такие  как
        перемещение  или  изменение  размера.  Дескриптор  собственного
        контекста  отображения  может  быть  получен  с помощью функции
        GetDC или BeginPaint. Функции ReleaseDC и EndPaint не оказывают
        воздействия на собственный контекст отображения.
             При   создании   окна   создается   собственный   контекст
        отображения,  который задает те же атрибуты по умолчанию, что и
        общий  контекст  отображения  (смотри  таблицу   "Атрибуты   по

       Windows 3.0/Ref/1#7                                       = 43 =

        умолчанию  для  контекста отображения). Эти атрибуты могут быть
        модифицированы в любой момент времени. Windows сохраняет каждый
        новый атрибут для  собственного  контекста  отображения.  Новые
        атрибуты,   такие  как  область  отсечения  и  кисть,  остаются
        выбранными  до  тех  пор,  пока  окно  специально  не   сделает
        изменения.
             Примечание.   Изменение   режима   отображения   контекста
        отображения  класса  может  иметь  нежелательный   эффект   при
        стирании  фона  окна.  Для получения более подробной информации
        смотри  раздел  1.6.7  "Фон  окна"  и  раздел   2.5.   "Функции
        отображения".

             Контекст отображения окна

             Контекст отображения  окна  разрешает  рисование  в  любом
        месте  окна, включая строку заголовка, меню и строки прокрутки.
        Начало его координат - верхний левый угол окна,  а  не  верхний
        левый угол области пользователя.
             Функция  GetWindowDC получает контекст отображения окна из
        того же самого кэша, где находятся общие контексты отображения.
        Следовательно,  окно,  использующее  этот  контекст отображения
        окна, должно освободить его с помощью функции  ReleaseDC  сразу
        же после рисования.
             Windows  всегда  устанавливает  текущие атрибуты контекста
        отображения окна в те же  значения  по  умолчанию,  что  и  для
        общего контекста отображения, и не сохраняет изменений, которые
        окно  могло  сделать  для  этих  атрибутов  (смотри таблицу 1.4
        "Атрибуты по умолчанию для контекста отображения"). Windows  не
        разрешает  иметь  собственный  контекст  отображения  окна  или
        контекст отображения окна  для  класса,  поэтому  типы  классов
        CS_OWNDC  и  CS_CLASSDC  не  оказывают  воздействия на контекст
        отображения окна.
             Контекст отображения окна  предназначен  для  специального
        рисования  внутри  непользовательской  области  окна. Поскольку
        рисование в непользовательской области перекрывающихся окон  не
        рекомендуется,   большинство  прикладных  программ  резервируют
        контекст  отображения  для  создания  заказных  дочерних  окон.
        Например,  прикладная  программа  может использовать данный тип
        контекста отображения для рисования специальной окантовки окна.
        В  этом  случае  окно  обычно   само   обрабатывает   сообщение
        WM_NCPAINT  вместо  передачи  его  функции  DefWindowProc.  Для
        прикладных программ, не обрабатывающих сообщений WM_NCPAINT, но
        желающих рисовать  в  непользовательской  области,  может  быть
        использована  функция  GetSystemMetrics  для получения размеров
        различных частей непользовательской области, таких  как  строка
        заголовка, строка меню и строки прокрутки.
                                                                               
            1.6.3 Кэш контекстов отображений

             Windows поддерживает кэш контекстов  отображений,  который
        используется  для  общих  контекстов  отображений  и контекстов
        отображений окон. Кэш содержит пять контекстов  отображений,  а
        это  означает,  что  активными  в  один и тот же момент времени

       Windows 3.0/Ref/1#7                                       = 44 =

        могут быть только пять контекстов отображений. Для того,  чтобы
        предотвратить   возможность   вызова   более   пяти  контекстов
        одновременно, окно, использующее общий контекст отображения или
        контекст отображения  окна,  должно  освободить  этот  контекст
        сразу же после рисования.
             Если  окно  не  освободило общий контекст отображения, все
        пять контекстов отображения могут быть активны и недоступны для
        всех  других  окон.  В  этом  случае  Windows  игнорирует   все
        последующие  запросы  на  общий контекст отображения. В обычной
        версии Windows система будет заблоктрована (т.е. "повиснет"), в
        то время, как отладочная версия Windows аварийно завершит  свою
        работу, предупреждая разработчика о возникшей проблеме.
             Функция  ReleaseDC  освобождает  контекст  отображения   и
        возвращает его в кэш. Контекст отображения класса и собственные
        контексты  отображения  индивидуально  выделяются  для  каждого
        класса и окна; они не принадлежат кэш и их не нужно освобождать
        после использования.
                                                                               
            1.6.4 Последовательность рисования

             Windows   выполняет   множество   операций  по  управлению
        системным  дисплеем,  которые  влияют  на  содержимое   области
        пользователя.  Если  Windows  перемещает,  изменяет размеры или
        изображение на экране, эти изменения могут повлиять  на  данное
        окно.  Если это произошло, Windows помечает область, измененную
        во время операции, как готовую к корректировке, и,  при  первой
        возможности,  посылает  окну  сообщение  WM_PAINT  с тем, чтобы
        перерисовать в окне измененную  область.  Если  окно  рисует  в
        своей   области   пользователя,   оно  должно  вызвать  функцию
        BeginPaint для  получения  дескриптора  контекста  отображения,
        скорректировать  измененную  область,  а  затем вызвать функцию
        EndPaint для завершения операции.
             Окно может рисовать в своей области пользователя  в  любое
        время,  т.  е. оно в ответе за сообщение WM_PAINT. Единственным
        требованием  является  получение  контекста   отображения   для
        области пользователя перед выполнением любой операции.
                                 1.6.5 Сообщение WM_PAINT                      

             Для   корректировки  изображения  данного  окна  требуется
        сообщение WM_PAINT, посылаемое  из  Windows.  Windows  посылает
        окну   сообщение   WM_PAINT   каждый   раз,   когда  необходимо
        перерисовать  часть  окна  прикладной  программы.  Когда   окно
        получает   сообщение   WM_PAINT,   оно   должно  найти  область
        корректировки с  помощью  функции  BeginPaint  и  выполнить  те
        действия,  которые  необходимы  для  корректировки  этой  части
        области пользователя.
             Функции  InvalidateRect  и  InvalidateRgn  фактически   не
        генерируют сообщений WM_PAINT. Вместо этого Windows накапливает
        все  изменения,  выполняемые этими функциями и свои собственные
        изменения, пока окно обрабатывает другие сообщения  из  очереди
        прикладной  программы.  Задержка  сообщения  WM_PAINT позволяет
        окну обработать все изменения за один раз,  вместо  того  чтобы

       Windows 3.0/Ref/1#7                                       = 45 =

        отрабатывать каждый небольшой шаг изменений.
             Окно может (с помощью функции UpdateWindow) потребовать от
        Windows   послать   сообщение  WM_PAINT.  Функция  UpdeteWindow
        посылает сообщение непосредственно функции окна вне зависимости
        от наличия других сообщений  в  очереди  прикладной  программы.
        UpdateWindow    обычно    используется,    когда   окно   хочет
        скорректировать   свою    область    пользователя,    например,
        непосредственно после создания окна.
             После того,  как  окно  получит  сообщение  WM_PAINT,  оно
        должно  вызвать  функцию  BeginPaint  для  получения  контекста
        отображения  области  пользователя  и другой информации, такой,
        например, как область корректировки и был ли стерт фон.
             Функция BeginPaint очищает область корректировки для того,
        чтобы предотвратить генерацию  последующих  сообщений  WM_PAINT
        для той же самой области.
             После  завершения операции перерисовки окно должно вызвать
        функцию EndPaint для освобождения контекста отображения.
                                1.6.6 Область корректировки                    

             Область корректировки - это  часть  области  пользователя,
        помеченная  для  перерисовки  при следующем сообщении WM_PAINT.
        Назначение области корректировки - сберечь время, затрачиваемое
        на перерисовку всего содержимого области пользователя.  Если  к
        области  корректировки  добавилась   только   какая-то   часть,
        нуждающаяся    в   перерисовке,   то   только   эта   часть   и
        перерисовывается.  Например,  если   в   области   пользователя
        прикладной  программы  обработки текстов изменилось одно слово,
        то только это слово, а не  целая  строка  текста,  нуждается  в
        перерисовке.  Это сохраняет время, которое прикладная программа
        тратит  на  вывод  текста, особенно, если в иексте используется
        множество шрифтов разных размеров и начертаний.
             Функции  InvalidateRect и InvalidateRgn добавляют заданный
        прямоугольник  или  область  к   области   корректировки.   Эти
        прямоугольник  или область задаются в координатах пользователя.
        Сама область корректировки так же  определяется  в  координатах
        пользователя. Windows добавляет свои собственные прямоугольники
        и  области  корректировки  окна  после  таких   операций,   как
        перемещение, изменение размера или прокрутка окна.
             Функции  ValidateRect  и  ValidateRgn   удаляют   заданные
        прямоугольник или область из области корректировки. Эти функции
        обычно используются, когда окно скорректировало некоторую часть
        изображения  в области корректировки перед получением сообщения
        WM_PAINT.
             Функции GetUpdateRect и GetUpdateRgn  получают  наименьший
        прямоугольник, включающий в себя всю область корректировки. Эти
        функции могут быть использованы для вычисления текущего размера
        области    корректировки,    определяемой,    если    требуется
        перерисовка.
                                                                               
            1.6.7 Фон окна

             Фон  окна  -  это  цвет  или   шаблон  (текстура)  области

       Windows 3.0/Ref/1#7                                       = 46 =

        пользователя,  которым  она  заполняется, устанавливаемые перед
        рисованием в этой области. Windows автоматически  устанавливает
        фон окна или дает окну такую возможность, посылая ему сообщение
        WM_ERASEBKGND,  когда  прикладная  программа  вызывает  функцию
        BeginPaint.
             Стирание фона очень важно, поскольку, если это не сделать,
        область   пользователя   будет  содержать  прежнюю  информацию,
        находившуюся на экране перед тем, как окно туда  переместилось.
        Windows  стирает  фон, закрашивая его кистью фона, определенной
        для класса окна.
             Прикладные   программы   Windows,   использующие  контекст
        отображения класса или собственный контекст отображения, должны
        быть осторожны со стиранием фона. Windows предполагает, что фон
        вычисляется с помощью режима отображения MM_TEXT. Если контекст
        отображения имеет другой режим отображения,  стираемая  область
        может быть вне видимой части области пользователя.
                                   1.6.8 Настройка кисти                       

             Настройка кисти особенно важна на системном  дисплее,  где
        прокрутка  и  перемещение - обычное дело. Кисть - это шаблон из
        битов, имеющий минимальный размер 8 х 8  битов.  GDI  рисует  с
        помощью  кисти,  повторяя  шаблон  снова и снова внутри данного
        прямоугольника  или  области.  Если  область  переместилась  на
        призвольное  расстояние,  например, при прокрутке окна, и кисть
        используется  снова  для  заполнения  пустых  областей   вокруг
        первоначальной  области,  нет гарантии того, что первоначальный
        шаблон и новый шаблон будут правильно настроены. Например, если
        при прокрутке первоначально заполненная область перемещается на
        один пиксель вверх, пересечение первоначальной области и  вновь
        рисуемой областей не будет выравнено на один пиксель или бит. В
        зависимости  от шаблона это может дать нежелательный визуальный
        эффект.
             Для того, чтобы  быть  уверенным  в  правильной  настройке
        кисти  после  перемещения  окна,  прикладная  программа  должна
        выполнить следующие шаги:

             1. Вызвать функцию SelectObject для выбора другой кисти.

             2. Вызвать функцию SetBrushOrg для  перенастройки  текущей
        кисти.

             3.   Вызвать  функцию  UnrealizeObject  для  перенастройки
        начального   положения   первоначальной   кисти,   когда    она
        используется снова.

             4.  Вызвать функцию SelectObject для выбора первоначальной
        кисти.
                                                                               
            1.6.9 Рисование прямоугольных областей

             Для  выполнения  операций  рисования   прямоугольников   в
        области  пользователя предназначены функции FillRect, FrameRect

       Windows 3.0/Ref/1#7                                       = 47 =

        и InvertRect, которые делают это наиболее простым способом.
             Функция FillRect заливает прямоугольник, используя цвет  и
        шаблон   выбранной   кисти.  Эта  функция  заливает  все  части
        прямоугольника, включая границу или окантовку.
             Функция FrameRect использует  кисть  для  рисования  рамки
        вокруг  прямоугольника.  Ширина и высота рамки задаются в одних
        единицах.
             Функция   InvertRect   инвертирует   содержимое    данного
        прямоугольника. На монохромном дисплее белые пиксели становятся
        черными и наоборот. На цветном  дисплее  результат  зависит  от
        метода,  используемого  дисплеем  для  генерации цвета. В обоих
        случаях вызов функции InvertRect дважды для одного  и  того  же
        прямоугольника восстанавливает первоначальный цвет изображения.
                                                                               
            1.6.10 Рисование икон

             Функция  DrawIcon  служит  для  рисования  икон в заданном
        месте  области  пользователя.  Икона  -  это  растровая  карта,
        которую  окно  использует  в качестве символа для представления
        элемента  или  понятия,  такого,   например,   как   прикладная
        программа или предупреждение.
             Икона может быть создана  с  помощью  программы  SDKPaint,
        добавлена к ресурсам прикладной программы с помощью компилятора
        ресурсов  и  загружена  в  память  с  помощью функции LoadIcon.
        Прикладная программа также может в любой момент вызвать функцию
        CreateIcon  для  создания  иконы   или   модифицировать   ранее
        загруженную  или  созданную  икону.  Ресурс  иконы  находится в
        глобальной  памяти,  а ее дескриптор является дескриптором этой
        памяти.   Прикладная   программа   может   освободить   память,
        используемую для хранения иконы, созданной функцией CreateIcon,
        при помощи вызова функции DeleteIcon.
                         1.6.11  Рисование форматированного текста             

             Функция   DrawText   форматирует  и  рисует  текст  внутри
        заданного прямоугольника в области  пользователя.  Эта  функция
        обеспечивает  простую  обработку  текста,  которую  большинство
        других прикладных программ (кроме текстовых процессоров)  могут
        использовать  для  индикации  текста.  Вывод  с помощью функции
        DrawText подобен выводу, генерируемому терминалом,  кроме  того
        она  использует выбранный шрифт и может отсекать текст, если он
        выходит за пределы  данного  прямоугольника.  Функция  DrawText
        обеспечивает   множество   различных  типов  форматирования.  В
        таблице 1.5 перечислены эти доступные типы:

         Таблица 1.5     Типы форматирования текста
        ---------------------------------------------------------------
             Значение                        Описание
        ---------------------------------------------------------------
         DT_BOTTOM            Выравнивание текста   по  нижней  границе
                              (только одна строка).

         DT_CENTER            Центрирование.

       Windows 3.0/Ref/1#7                                       = 48 =


         DT_EXPANDTABS        Увеличивает число  позиций,  на   которое
                              происходит  перемещение при табуляции.  В
                              противном случае табуляции трактуются как
                              перемещение на один символ.  Величина та-
                              буляции зависит от значения границы табу-
                              ляции,    специфицированной   посредством
                              DT_TABSTOP.  Если значение DT_TABSTOP  не
                              задано, по умолчанию берется восемь пози-
                              ций.

         DT_EXTERNALLEADING   Включает внешний разрыв шрифта  в  высоту
                              строки.  Обычно внешний разрыв не включа-
                              ется в высоту строки  текста.  (Разрыв  -
                              это  расстояние  между  строками текста).
                              Если  DT_EXTERNALLEADING  не  задан,   то
                              расстояния  между  строками текста не су-
                              ществует.  В  зависимости  от  выбранного
                              шрифта, символы в различных строках могут
                              соприкасаться или перекрываться.

         DT_LEFT              Выравнивание по левому краю.  Задается по
                              умолчанию.

         DT_NOCLIP            Выводит текст  без отсечения.  Весь текст
                              должен быть выведен, даже если его размер
                              больше специфицированного прямоугольника.
                              Функция DrawText работает  немного  быст-
                              рее, если используется тип DT_NOCLIP.

         DT_RIGHT             Выравнивание по правому краю.

         DT_SINGLELINE        Только одна строка. Возврат каретки и ко-
                              нец строки не разрывают строку.  По умол-
                              чанию  используется  форматирование  мно-
                              жества строк.

         DT_TABSTOP           Установка границы табуляции. Старший байт
                              параметра  wForvmat содержит число симво-
                              лов для каждой табуляции.  Если  значение
                              DT_TABSTOP  не  задано,  то  по умолчанию
                              значение табуляции равно 8 символам.

         DT_TOP               Выравнивание по верхней  границе  (только
                              одна строка). Задается по умолчанию.

         DT_VCENTER           Вертикальное центрирование (только одна
                              строка).

         DT_WORDBREAK         Устанавливает пословное разделение. Стро-
                              ки автоматически разделяются между слова-
                              ми, если слово заходит за границу прямоу-
                              гольника,  специфицированного  параметром

       Windows 3.0/Ref/1#7                                       = 49 =

                              lpRect. Последовательность возврат карет-
                              ки/перевод  строки  также вызывает разрыв
                              строки.  Символами разделения слов  явля-
                              ются пробел,  табуляция, возврат каретки,
                              перевод строки и комбинация  возврат  ка-
                              ретки/перевод строки.  Применяется только
                              при многострочном форматировании.

             Функция   DrawText  использует  выбранный  шрифт,  поэтому
        прикладная программа может выводить  форматированный  текст  не
        только системным шрифтом.
             Хотя функция DrawText выравнивает текст по правой и  левой
        границе  и  центрирует  его,  она  не  может комбинировать типы
        выравнивания.  Другими  словами,  она  не  может   одновременно
        выполнять выравнивания по правому и левому краю.
             DrawText распознает некоторое число управляющих символов и
        выполняет  специальные  действия,  когда встретит их. В таблице
        1.6 перечмслены эти управляющие символы  и  соответствуюшие  им
        действия:


       Windows 3.0/Ref/1#7                                       = 50 =


          Таблица 1.6         Управляющие символы DrawText
        ---------------------------------------------------------------
          Символ (в коде ANSI)                Действие
        ---------------------------------------------------------------

          Возврат каретки (13)     Интерпретируется как символ прерыва-
                                   ния строки. Текст немедленно преры-
                                   вается и продолжается со следующей
                                   строки прямоугольника.

          Перевод строки (10)      Интерпретируется как символ прерыва-
                                   ния строки. Текст немедленно преры-
                                   вается и продолжается со следующей
                                   строки прямоугольника.
                                   Комбинация возврат каретки/перевод
                                   строки интерпретируется как один
                                   символ прерывания строки.

          Пробел (32)              Интерпретируется как символ преры-
                                   выния слова, если задан тип
                                   DT_WORDBREAK. Если текст очень длин-
                                   ный для текущей строки прямоугольника
                                   форматирования, строка прерывается на
                                   самом близком к концу строки символе
                                   прерывания слова.

          Табуляция (9)            Вставка заданного числа пробелов,
                                   если задан тип DT_EXPANDTAB. Число
                                   пробелов зависит от того, какое зна-
                                   чение задано с типом DT_TABSTOP. По
                                   умолчанию равно 8.
                           1.6.12 Рисование текста серого цвета                

             Прикладная  программа  может  рисовать текст серого цвета,
        вызвав функцию SetTextColor, чтобы  установить  цвет  текста  в
        значение   COLOR_GRAYTEXT,   сплошной   серый  системный  цвет,
        использующийся   для   вывода   запрещенной   в  данный  момент
        информации.   Однако,   если   текущий   драйвер   дисплея   не
        поддерживает  сплошной серый цвет, это значение устанавливается
        в ноль.
             Функция  GrayString  -  это  многоцелевая  функция, дающая
        прикладным программам другой способ  изменить  цвет  текста  на
        серый  или  выполнить  другие заказные операции над текстом или
        растровыми  картами  перед  выводом  полученного  результата  в
        области  пользователя.  Для серого цвета текста функция создает
        растровую карту памяти, рисует строку в растровой карте и затем
        изменяет ее цвет на серый, используя серую кисть. Наконец,  эта
        функция  копирует  текст серого цвета на экран дисплея. Однако,
        прикладная  программа  может  перехватывать  и   модифицировать
        каждый  шаг  этого  процесса,  обеспечивая  выполнение заказных
        эффектов, например, таких как изменение серой  кисти  на  кисть

       Windows 3.0/Ref/1#7                                       = 51 =

        шаблона или рисование иконы вместо строки.
             Если  функция GrayString используется только для рисования
        текста серого цвета, она использует выбранный  шрифт  заданного
        контекста  отображения.  Функция  GrayString устанавливает цвет
        текста в черный. Она создает растровую карту и затем использует
        функцию TextOut для записи данной строки в эту растровую карту.
        Затем она использует функцию PatBlt и серую кисть для  создания
        текста  серого цвета и функцию BitBlt для копирования растровой
        карты в область пользователя.
             Функция GrayString предполагает, что контекст  отображения
        области  пользователя  имеет  режим отображения MM_TEXT. Другие
        режимы дают непредвиденный результат.
             Функция GrayString дает возможность  прикладной  программе
        модифицировать   процедуру   изменения  цвета  на  серый  тремя
        способами: определением дополнительной кисти, объединяющейся  с
        текстом  перед  его  индикацией; заменой вызова функции TextOut
        вызовом   функции,   предоставляемой   прикладной   программой;
        запретом вызова функции PatBlt.
             Дополнительная  кисть определяется как параметр. Эта кисть
        объединяется  с  текстом,  когда  текст  копируется  в  область
        пользователя  с  помощью  функции  BitBlt. Дополнительная кисть
        предназначена для получения  текста  нужного  цвета,  поскольку
        растровая  карта,  используемая  для рисования текста, является
        монохромной.
             Предоставляемая  прикладной  программаой   функция   также
        определяется   как  параметр.  Если  для  этой  функции  задано
        значение, не  равное  NULL,  функция  GrayString  автоматически
        вызывает  функцию прикладной программы взамен функции TextOut и
        передает ей  дескриптор  контекста  отображения  для  растровой
        карты памяти, а также длинный указатель и счетчик, передаваемый
        в  GrayString.  Эта  функция  может  выполнять любые операции и
        интерпретировать  длинный  указатель  и   счетчик   по   своему
        усмотрению.     Например,     отрицательный    счетчик    может
        использоваться для  определения  того,  что  длинный  указатель
        указывает  на  дескриптор  иконы,  и  сигнализировать  функции,
        предоставляемой прикладной программой, о том,  что  икону  надо
        перерисовать,  а  затем позволить функции GrayString сделать ее
        серой и отобразить на экране.  Не  имеет  значения,  какой  тип
        рисования  выполняет  функция; GrayString предполагает, что оно
        прошло успешно, если функция  прикладной  программы  возвратила
        TRUE.
             Функция GrayString не выполняет изменение цвета на  серый,
        если  она получает параметр ncount равным -1, и предоставляемая
        прикладной программой  функция  возвращает  FALSE.  Это  способ
        объединения заказных шаблонов с текстом без использования серой
        кисти.
                                                                               
            1.6.13 Рисование непользовательской области

             Windows посылает окну  сообщение  WM_NCPAINT  каждый  раз,
        когда  необходимо перерисовать непользовательскую область окна,
        например, строку заголовка, строку меню и рамку окна. Обработка
        этого сообщения не рекомендуется, поскольку окно, делающее  эту

       Windows 3.0/Ref/1#7                                       = 52 =

        обработку,  должно  быть  в  состоянии  перерисовать  все части
        непользовательской области окна. Другими словами,  окно  должно
        передать  это  сообщение функции DefWindowProc для обработки по
        умолчанию, если только прикладная программа Windows не  создала
        заказную непользовательскую область для дочернего окна.



       Windows 3.0/Ref/1#7                                       = 53 =

                                1.7 Функции панели диалога                     
       ----------------------------------------------------------------

             Функции  панели  диалога  создают,  изменяют,  тестируют и
        разрушают панели диалога  и  блоки  управления  внутри  панелей
        диалога.  Панель  диалога - это временное окно, которое Windows
        создает для специального целевого ввода, и  которое  немедленно
        разрушается  после  использования.  Прикладная программа обычно
        использует  панель   диалога   для   запроса   у   пользователя
        дополнительной   информации   о   текущей   выбранной  команде.
        Нижеприведенный перечень кратко описывает каждую функцию панели
        диалога:

             Функция                           Описание
        ---------------------------------------------------------------
        CheckDlgButton            Помещает/удаляет отметку или изменяет
                                  состояние 3-х позиционной клавиши.

        CheckRadioButton          Помечает специфицированную клавишу
                                  установки и удаляет пометку со всех
                                  остальных.

        CreateDialogInderect      Создает безтипную панель диалога по
                                  шаблону.

        CreateDialogInderectParam Создает безтипную панель диалога по
                                  шаблону и передает ей данные при
                                  создании.

        CreateDialogParam         Создает безтипную панель диалога и
                                  передает ей данные при создании.

        DefDlgProc                Обеспечивает обработку по умолчанию
                                  для всех сообщений Windows, которые
                                  не обрабатывает панель дилога с
                                  собственным классом окна.

        DialogBox                 Создает модальную панель диалога.

        DialogBoxInderect         Создает модальную панель диалога по
                                  шаблону.

        DialogBoxInderectParam    Создает модальную панель диалога по
                                  шаблону и передает ей данные при соз-
                                  дании.

        DialogBoxParam            Создает модальную панель диалога и
                                  передает ей данные при создании.

        DlgDirList                Заполняет панель перечня именами
                                  файлов, имеющих одинаковый маршрут.

        DlgDirListComboBox        Заполняет комбинированную панель пе-

       Windows 3.0/Ref/1#7                                       = 54 =

                                  речня именами файлов, имеющих одина-
                                  ковый маршрут.

        DlgDirSelect              Копирует текущую выборку из панели
                                  перечня в строку.

        DlgDirSelectComboBox      Копирует текущую выборку из комбини-
                                  рованной панели перечня в строку.

        EndDialog                 Освобождает ресурсы и разрушает окно,
                                  связанное с модальной панелью диалога.

        GetDialogBaseUnits        Возвращает базовые единицы диалога,
                                  используемые Windows при создании па-
                                  нели диалога.

        GetDlgCtrID               Возвращает значение ID окна управле-
                                  ния.

        GetDlgItem                Получает дескриптор элемента диалога
                                  данной панели диалога.

        GetDlgItemInt             Переводит текст элемента управления в
                                  целое значение.

        GetDlgItemText            Копирует текст элемента управления в
                                  строку.

        GetNextDlgGroupItem       Возвращает дескриптор окна следующего
                                  элемента группы.

        GetNextDlgTabItem         Возвращает дескриптор окна следующего
                                  или предыдущего элемента.

        IsDjgButtonChecked        Проверяет, отмечена ли клавиша.

        MapDialogRect             Переводит координаты панели диалога в
                                  координаты пользователя.

        SendDlgItemMessage        Посылает сообщение элементу панели
                                  диалога.

        SetDlgItemInt             Устанавливает заголовок или текст
                                  элемента в строку, представленную це-
                                  лым значением.

        SetDlgItemText            Устанавливает заголовок или текст
                                  элемента в строку.
                            1.7.1 Использование панелей диалога                

             Для   удобства   и  сохранения  своего  кода  от  введения
        зависящих  от   устройства   значений,   прикладная   программа

       Windows 3.0/Ref/1#7                                       = 55 =

        использует  панели  диалога  вместо  создания своих собственных
        окон. Эта независимость от устройства поддерживается при помощи
        использования логических координат  в  панели  диалога.  Панели
        диалога  удобны для использования, поскольку все аспекты панели
        диалога,  кроме  способа  выполнения  поставленных  перед  ними
        задач,  предопределены.  Панели  диалога  имеют  класс  окна  и
        функцию обработки  окна  и  создают  свое  окно  автоматически.
        Прикладные программы имеют функцию диалога для выполнения задач
        и   саму   панель   диалога,  описывающую  тип  диалога  и  его
        содержимое.

             Безтипная панель диалога

             Безтипная панель диалога позволяет пользователю поставлять
        информацию в панель диалога и возвращаться в предыдущую  задачу
        беэ  отмены  или  удаления  панели  диалога.  Безтипные  панели
        диалога  обычно  используются   для   того,   чтобы   позволить
        пользователю непрерывно поставлять информацию о текущей  задаче
        вместо  того, чтобы каждый раз выбирать команду меню. Например,
        безтипная панель диалога часто используется с  командой  поиска
        текста  в  прикладной  программе  обработки  текста. Эта панель
        диалога остается индицированной  во  время  выполнения  поиска.
        Пользователь  может  затем  вернуться в выполнить поиск того же
        самого слова снова  или  изменить  входные  значения  в  панели
        диалога и выполнить поиск другого слова.
             Прикладная   программа   с   безтипной   панелью   диалога
        обрабатывает  сообщения  для  этой  панели,  используя  функцию
        IsDialogMessage внутри  главного  цикла  прикладной  программы.
        Функция   диалога   безтипной  панели  диалога  должна  послать
        сообщение  родительскому  окну,  если  она   имеет   для   него
        информацию.  Она  так  же  должна  разрушить  панель диалога за
        ненадобностью.  Безтипная  панель  диалога  должна  разрушаться
        функцией DestroyWindow. Прикладная программа не должна вызывать
        функцию EndDialog для разрушения безтипной панели диалога.

             Модальная панель диалога

             Модальная панель диалога требует от пользователя ответа на
        запрос  прежде, чем продолжить выполнение прикладной программы.
        Обычно модальная панель диалога  используется,  если  выбранной
        команде   для   продолжения   работы  требуется  дополнительная
        информация. Пользователь не может продолжить выполнение  другой
        операции  до  тех  пор, пока эта команда не будет отменена, или
        для нее не будет предоставлена дополнительная информация.
             Модальная  панель диалога блокирует свое родительское окно
        и создает свой собственный цикл обработки  сообщений,  временно
        получая   управление   над  очередью  прикладной  программы  от
        главного   цикла   программы.    Модальная    панель    диалога
        индицируется,   когда  прикладная  программа  вызывает  функцию
        DialogBox.
             По   умолчанию   модальная   панель   диалога   не   может
        перемещаться  пользователем. Прикладная программа может создать
        перемещаемую панель диалога, специфицируя тип  окна  WS_CAPTION

       Windows 3.0/Ref/1#7                                       = 56 =

        и, что необязательно, тип окна WS_SYSMENU.
             Панель  диалога  находится  на  экране до тех пор, пока не
        будет  вызвана  функция  EndDialog,  или не завершится Windows.
        Родительское окно остается заблокированным  до  тех  пор,  пока
        панель диалога не разблокирует его. Заметим,  что  после  того,
        как  родительское  окно уже не мешает модальной панели диалога,
        блокировка его не рекомендуется.

             Системная модальная панель диалога

             Системная модальная панель диалога тождественна  модальной
        панели  диалога,  но только она блокирует все окна, а не только
        родительское.   Системно-модальные   панели   диалога    должны
        использоваться  с  осторожностью,  поскольку  они действительно
        закрывают систему до  тех  пор,  пока  пользователь  не  введет
        требуемую информацию.
                               1.7.2 Создание панели диалога                   

             Панель  диалога  создается  посредством  использования или
        функции  CreateDialog  или  функции  DialogBox.   Эти   функции
        загружают   шаблон   панели   диалога   из  выполняемого  файла
        прикладной  программы,  а  затем  создают  накладываемое  окно,
        которое  отвечает  спецификациям  этого шаблона. Панель диалога
        относится к предопределенному классу панели диалога, в то время
        как  другие  классы   непосредственно   определяются.   Функция
        DialogBox    создает    модальную   панель   диалога;   функция
        CreateDialog создает безтипную панель диалога.
             Для того, чтобы панель диалога появилась на  экране  сразу
        после создания, необходимо использовать тип WS_VISIBLE.

             Шаблон панели диалога

             Шаблон панели диалога - это описание  панели  диалога:  ее
        высоты  и  ширины,  блоков управления, которые она содержит, ее
        тип, тип используемой окантовки и  т.д.  Шаблон  -  это  ресурс
        прикладной  программы,  и он должен быть добавлен в выполняемый
        файл прикладной программы при помощи компилятора ресурсов.
             Панели диалога могут  легко  модифицироваться  и  являются
        системно-независимыми, что  позволяет  разработчику  прикладной
        программы изменять шаблон без изменения исходного кода.
             Функции CreateDialog и DialogBox загружают ресурс в память
        при создании панели  диалога,  и  затем  используют  информацию
        шаблона  панели  диалога для создания и позиционирования панели
        диалога и для создания  и  позиционирования  блоков  управления
        данной панели.
             Компилятор  ресурсов  берет  текстовое  описание шаблона и
        переводит его в  требуемый  двоичный  вид.  Этот  двоичный  вид
        добавляется к выполняемому файлу прикладной программы.

             Единицы измерения панели диалога

             Размеры панели диалога и блоков управления и их координаты

       Windows 3.0/Ref/1#7                                       = 57 =

        являются  независимыми от устройства. Т.к. панель диалога может
        индицироваться  на  системном  дисплее,  который  имеет  разную
        разрешающую способность, размеры  панели  диалога  определяются
        вместо  пикселей  высотой и шириной системного символа. Символы
        являются гарантией самого  лучшего  внешнего  вида  панели  для
        данного  дисплея.  Одна  единица  по  оси  x равна 1/4 основной
        единицы ширины  диалога.  Одна  единица  по  оси  y  равна  1/8
        основной  единицы  высоты  диалога.  Основные  единицы  диалога
        вычисляются из  высоты  и  ширины  системного  шрифта;  функция
        GetDialogBaseUnits  возвращает  основные  единицы  диалога  для
        текущего дисплея.  Прикладная  программа  может  перевести  эти
        единицы измерения в пиксели, используя функцию MapDialogRect.
             Windows  не позволяет панели диалога превышать по высоте и
        ширине окно, занимающее полный экран.
                                                                               
            1.7.3 Возвращаемые значения панелей диалога

             Функция  DialogBox, создающая модальную панель диалога, не
        возвращает управления до  тех  пор,  пока  функция  диалога  не
        вызывет  функцию  EndDialog  для закрытия панели диалога. Когда
        функция DialogBox вернет, наконец, управление, ее  возвращаемое
        значение  эквивалентно  значению,  специфицированному в функции
        EndDialog. Это означает, что  модальная  панель  диалога  может
        возвращать значение через функцию EndDialog.
             Безтипные панели диалога не могут возвращать значения этим
        способом,   т.к.   они  не  используют  функцию  EndDialog  для
        завершения выполнения и не передают управление  тем  же  путем,
        что  модальные  панели  диалога.  Вместо этого безтипные панели
        диалога возвращают значения своим родительским окнам, используя
        функцию  SendMessage  для  передачи   уведомляющего   сообщения
        родительскому окну. Хотя Windows не определяет точно содержимое
        уведомляющего   сообщения,   большинство   прикладных  программ
        используют   сообщение   WM_COMMAND,   где   параметр    wParam
        представляет  собой  целое,  идентифицирующее панель диалога, а
        параметр  lParam  содержит  возвращаемое  значение.   Модальные
        панели   диалога  также  используют  этот  метод  для  передачи
        значений своим родительским окнам перед завершением работы.
                          1.7.4 Блоки управления в панели диалога              

             Панель диалога  может  содержать  некоторое  число  блоков
        управления различных типов. Блок упраления - это дочернее окно,
        относящееся    к   предопределенному   задаваемому   прикладной
        программой   классу   окна   и   дающее   пользователю    метод
        ввода  информации  в  прикладную  программу.  Примерами  блоков
        управления  являются  мягкие  клавиши  и  редактируемые   блоки
        управления. Большинство панелей диалога содержат один или более
        блоков   управления   предопределенного  класса.  Число  блоков
        управления, порядок их создания и местоположение каждого  блока
        в  панели  диалога определяется операторами блоков управления в
        шаблоне панели диалога.


       Windows 3.0/Ref/1#7                                       = 58 =

             Идентификаторы блоков управления

             Каждый  блок  управления  в  панели  диалога  нуждается  в
        уникальном  идентификаторе блока управления, т.н. ID, для того,
        чтобы отличить его от других блоков управления. Т.к. все  блоки
        управления   посылают   информацию   в  функцию  диалога  через
        сообщение WM_COMMAND, идентификатор блока управления  необходим
        панели  диалога  для  определения, какой блок управления послал
        данное сообщение.
             Все идентификаторы всех блоков управления  панели  диалога
        должны  быть  уникальны. Если панель диалога имеет строку меню,
        то между идентификаторами  элементов  меню  и  идентификаторами
        блоков управления не должно быть конфликтов. Как только Windows
        передаст  функции  диалога  ввод  от  меню в качестве сообщения
        WM_COMMAND, конфликты  между  идентификаторами  меню  и  блоков
        управления  приведут  к  ошибкам.  Меню  в  панелях  диалога не
        рекомендуются.
             Обычно функция диалога различает блоки  управления  по  их
        идентификаторам.  Иногда  функции  диалога требуется дескриптор
        окна, который  присваивается  блоку  управления  при  создании.
        Функция   диалога  может  получить  это  дескриптор,  используя
        функцию GetDlgItem.

             Основные типы блоков управления

             Тип  WS_TABSTOP  специфицирует,  что  пользователь   может
        переместить   фокусировку   ввода   в  данный  блок  управления
        посредством  нажатия  клавиши   TAB   или   комбинации   клавиш
        SHIFT+TAB. Обычно каждый блок управления в панели диалога имеет
        этот тип, так что пользователь может перемещать фокус из одного
        блока управления в другой. Если в  панели  диалога  содержаться
        два  или  более блоков управления, клавиша TAB перемещает фокус
        по блокам управления в том порядке, в каком они  были  созданы.
        Клавиши  SHIFT+TAB  перемещают  фокус  в  обратном порядке. Для
        модальных панелей диалога клавиши TAB и SHIFT+TAB автоматически
        разрешены для  перемещения  фокусировки  ввода.  Для  безтипных
        панелей диалога  для  фильтрации  сообщений  панели  диалога  и
        обработки  этой последовательности клавиш должна использоваться
        функция IsDialogMessage. В  противном  случае  эти  клавиши  не
        будут иметь  специального  значения,  и  тип  WS_TABSTOP  будет
        игнорироваться.
             Тип   WS_GROUP   специфицирует,   что  пользователь  может
        перемещать  фокусировку  ввода  в   данный   блок   управления,
        используя  клавиши управления курсором (DIRECTION). Обычно этот
        тип   имеют  первый  и  последний  блоки  управления  в  группе
        последовательных блоков управления в панели  диалога,  так  что
        пользователь может перемещать фокусировку ввода из одного блока
        управления в другие. Клавиши DOWN и RIGHT перемещают  фокус  по
        блокам  управления  в  том  порядке,  в каком они были созданы.
        Клавиши UP и  LEFT  перемещают  фокусировку  ввода  в  обратном
        порядке.  Для  модальных  панелей  диалога  клавиши  управления
        курсором разрешены автоматически  для  перемещения  фокусировки
        ввода.  Для  безтипных панелей диалога для фильтрации сообщений
        панели  диалога  и  обработки  этой  последовательности  клавиш

       Windows 3.0/Ref/1#7                                       = 59 =

        должна  использоваться  функция  IsDialogMessage.  В  противном
        случае эти клавиши не будут иметь специального значения, и  тип
        WS_GROUP будет игнорироваться.

             Клавиши

             Клавишные  блоки  управления являются основным интерфейсом
        панели диалога. Почти все панели диалога  имеют  хотя  бы  одну
        мягкую  клавишу  по  умолчанию  и  одну или более мягких клавиш
        других выдов. Множество  панелей  диалога  имеют  набор  клавиш
        установки,   объединеных   в  групповую  панель,  или  перечень
        помечаемых клавиш.
             Большинство   модальных  или  безтипных  панелей  диалога,
        которые  используют  специальный  интерфейс  клавиатуры,  имеют
        мягкую клавишу по умолчанию, чей идентификатор блока управления
        равен  е1,  так что, действие, выполняемое функцией диалога при
        выборе этой клавиши идентично действию, выполняемому по нажатии
        клавиши ENTER. Может существовать только одна клавиша  с  типом
        по  умолчанию; однако, прикладная программа может назначать тип
        по умолчанию любой клавише в любое время. Панели диалога  могут
        также  устанавливать идентификатор другой мягкой клавиши равным
        2, что равнозначно  нажатию  клавиши  ESCAPE  при  выборе  этой
        клавиши.
             Когда  панель  диалога  впервые  начинает  работу, функция
        диалога должна установить  первоначальное  состояние  клавишных
        блоков  управления,  используя  функцию CheckDlgButton, которая
        устанавливает или очищает состояние клавиши (устанавливает  или
        снимает   контрольную   отметку  или  подсветку).  Это  функция
        наиболее часто  используется  для  определения состояния  клавиш
        установки  или  помечаемых  клавишных  блоков  управления. Если
        панель диалога содержит  группу  клавиш  установки,  в  которой
        только  одна  клавиша должна быть установлена в каждый заданный
        момент  времени,  функция  диалога  должна   использовать   для
        установки  клавиши  и  автоматического снятия установки со всех
        остальных клавиш функцию CheckRadioButton.
             Перед  тем,  как  панель  диалога  завершит  свою  работу,
        функция диалога должна проверить состояние  каждого  клавишного
        блока управления при помощи функции IsDlgButtonChecked, которая
        возвращает  текущее  состояние  клавиши.  Обычно панель диалога
        сохраняет  эту  информацию  для  того,  чтобы  инициализировать
        клавиши   в  другой  раз,  когда  панель  диалога  вновь  будет
        индицирована.

             Редактируемые блоки управления

             Множество панелей  диалога  содержат  редактируемые  блоки
        управления,   которые  позволяют  пользователю  вводить  текст.
        Большинство функций диалога инициализируют  редактируемый  блок
        управления   при   первоначальной   загрузке   панели  диалога.
        Например,  функция  может  поместить  в  этот  блок  управления
        предполагаемое  имя файла, которое пользователь может исправить
        или модифицировать. Панель  диалога  может  поместить  текст  в
        редактируемый блок управления, используя функцию SetDlgIteText,

       Windows 3.0/Ref/1#7                                       = 60 =

        которая копирует текст из заданного буфера в редактируемый блок
        управления.   Когда   редактируемый  блок  управления  получает
        фокусировку ввода,  весь  текст  автоматически  выбирается  для
        редактирования.
             Т.к.  редактируемые   блоки   управления   не   возвращают
        автоматически  текст  в  панель диалога, функция диалога должна
        автоматически получить текст перед завершением работы. Получить
        текст она  может  с  помощью  функции  GrtDlgItemText,  которая
        копирует  текст  из  редактируемого  блока  управления в буфер.
        Обычно функция диалога сохраняет этот  текст  для  того,  чтобы
        инициализировать  редактируемый  блок  управления  позднее, или
        передает его в родительское окно для обработки.
             Некоторые панели диалога  используют  редактируемые  блоки
        управления  для  того,  чтобы  позволить  пользователю  вводить
        числа. Функция диалога может получить число  из  редактируемого
        блока  управления  с  помощью  функции  GetDlgItemInt,  которая
        получает  текст  из  блока  управления  и  переводит  текст   в
        десятичное  значение.  Пользователь  вводит  число в десятичных
        единицах. Оно может  быть  знаковым  или  беззнаковым.  Функция
        диалога   может   индицировать   целое   при   помощи   функции
        SetDlgItemInt. Она переводит знаковое или беззнаковое  целое  в
        строку десятичных чисел.

             Панели перечня и содержимое директорий

             Некоторые  панели  диалога  индицируют  перечни,  например
        такие, как списки имен файлов, из  которых  пользователь  может
        выбрать одно или несколько имен. Панели диалога, которые обычно
        индицируют  список,  обычно используют блоки управления панелью
        перечня и функции DlgDirList и DlgDirSelect. Функция DlgDirList
        автоматически  заполняет  панель перечня именами файлов текущей
        директории. Функция DlgDirSelect получает выбранное  имя  файла
        из  панели  перечня.  Вместе  они обеспечивают удобный путь для
        панели диалога индицировать содержимое директории  и  позволить
        пользователю  выбрать файл, не вводя имени директории и файла с
        клавиатуры.

             Комбинированные панели

             Другим   методом   предоставления   пользователю    списка
        элементов   является   использование  комбинированных  панелей.
        Комбинированная  панель  состоит или из статического текстового
        поля,  или  из  редактируемого  поля,  соединенного  с  панелью
        перечня.  Панель  перечня  может находиться на экране все время
        или раскрываться пользователем. Если  панель  перечня  содержит
        статическое  текстовое  поле,  то оно всегда отображает текущую
        выборку   (если   она   имеется)   в   части   панели    списка
        комбинированной  панели. Если комбинированная панель использует
        редактируемое поле, пользователь  может  вводить  информацию  в
        выборку;  панель  перечня  подсветит  первый  элемент  (если он
        существует),  который  показывает,  что  пользователь  ввел   в
        редактируемое  поле.  Пользователь может затем выбрать элемент,
        подсвеченный в панели перечня для полной выборки.

       Windows 3.0/Ref/1#7                                       = 61 =


             Рисуемые владельцем блоки управления панели диалога

             Панели перечня, комбинированные  панели  и  клавиши  могут
        быть  определены как блоки управления, рисуемые владельцем, при
        присвоении им следующих типов во время создания:

             Тип                                  Значение
        ---------------------------------------------------------------
         LBS_OWNERDRAWFIXED           Создает рисуемую владельцем панель
                                      перечня, содержащую элементы, име-
                                      ющие одну и ту же фиксированную
                                      высоту.

         LBS_OWNERDRAWVARIABLE        Создает рисуемый владельцем панель
                                      перечня, содержащую элементы, име-
                                      ющие различную высоту.

         CBS_OWNERDRAWFIXED           Создает рисуемую владельцем комби-
                                      нированную панель, содержащую эле-
                                      менты, имеющие одну и туже фикси-
                                      рованную высоту.

         CBS_OWNERDRAWVARIABLE        Создает рисуемую владельцем комби-
                                      нированную панель, содержащую эле-
                                      менты, имеющие различную высоту.

         BS_OWNERDRAW                 Создает рисуемую владельцем кла-
                                      вишу.

             Если блок  управления  имеет  тип  "рисуемый  владельцем",
        Windows   управляет   взаимодействием   пользователя  с  блоком
        управления  обычным  образом,  определяя,  когда   пользователь
        выбрал  клавишу  и уведомляя владельца клавиши об этом событии.
        Однако, т.к. это рисуемый владельцем блок управления,  владелец
        блока   управления   полностью   ответственен   за   визуальное
        представление этого блока.
             Когда  Windows  впервые создает панель диалога, содержащую
        рисуемые владельцем блоки управления,  она  посылает  владельцу
        сообщение  WM_MEASUREITEM  для  каждого  блока управления этого
        типа. Параметр lParam этого  сообщения  содержит  указатель  на
        структуру данных MEASUREITEMSTRUCT. Когда владелец получает это
        сообщение  для  блока  управления, он заполняет соответствующие
        поля этой структуры и передает  управление.  Это  дает  Windows
        информацию  о  размерах блока управления или его элементах, так
        что Windows может соответственно определить вид  взаимодействия
        пользователя  с  блоком  управления.  Если  панель  перечня или
        комбинированная  панель  имеют  тип  LBS_OWNERDRAWVARIABLE  или
        CBS_OWNERDRAWVARIABLE,  это  сообщение посылается владельцу для
        каждого элемента в блоке управления, поскольку  каждый  элемент
        может  измениться  по  высоте. В противном случае это сообщение
        посылается один раз  для  целого  блока  управления,  рисуемого
        владельцем.

       Windows 3.0/Ref/1#7                                       = 62 =

             Всякий раз,  когда  рисуемый  владельцем  блок  управления
        нуждается  в  перерисовке,  Windows  посылает  владельцу  блока
        управления  сообщение  WM_DRAWITEM.   Параметр   lParam   этого
        сообщения    содержит    указатель    на    структуру    данных
        DRAWITEMSTRUCT,  которая  содержит  информацию   о   рисовании,
        требуемом  для этого блока управления. Сходным образом, если из
        панели перечня или комбинированной  панели  удаляется  элемент,
        Windows  посылает сообщение WM_DELETEITEM, содержащее указатель
        на  структуру  данных   DELETEITEMSTRUCT,   которая   описывает
        удаляемый элемент.

             Сообщения для блоков управления панели диалога

             Множество  блоков  управления  распознают предопределенные
        сообщения,  которые,  будучи  посланными  в  блок   управления,
        заставляют  его  выполнить  некоторые действия. Функция диалога
        может  послать   сообщение   в   блок   управления,   передавая
        идентификатор   блока  управления  функции  SendDlgItemMessage,
        которая идентична функции SendMessage, если  не  считать  того,
        что   она   использует   для   определения   блока  управления,
        получающего  сообщение,  его  идентификатор  управления  вместо
        дескриптора окна.

             Интерфейс клавиатуры панели диалога

             Windows обеспечивает специальный интерфейс клавиатуры  для
        модальных  панелей  диалога  и  тех  безтипных панелей диалога,
        которые  используют  функцию  IsDialogMessage  для   фильтрации
        сообщений.  Этот  интерфейс  клавиатуры  выполняет  специальную
        обработку некоторых  клавиш  и  генерирует  сообщения,  которые
        соответствуют  определенным  клавишам  в  панели  диалога,  или
        перемещают фокусировку  ввода  из  одного  блока  управления  в
        другой.  В  таблице  1.7  перечислены клавиши, используемые для
        этого интерфейса, и соответствующие действия:

         Таблица 1.7               Интерфейс клавиатуры панели диалога
        ---------------------------------------------------------------
             Клавиша                       Действие
        ---------------------------------------------------------------
          DOWN                  Перемещает фокусировку ввода в следую-
                                щий блок управления, имеющий тип
                                WS_GROUP.

          ENTER                 Посылает сообщение WM_COMMAND в функцию
                                диалога. Параметр wParam равен 1, если
                                имеет место клавиша по умолчанию.

          ESCAPE                Посылает сообщение WM_COMMAND в функцию
                                диалога. Параметр wParam равен 2.

          LEFT                  Смотри UP.

          RIGHT                 Смотри DOWN.

       Windows 3.0/Ref/1#7                                       = 63 =


          SHIFT+TAB             Перемещает фокусировку ввода в предыду-
                                щий блок управления, имеющий тип
                                WS_TABSTOP.

          TAB                   Перемещает фокусировку ввода в следую-
                                щий блок управления, имеющий тип
                                WS_TABSTOP.

          UP                    Перемещает фокусировку ввода в предыду-
                                щий блок управления, имеющий тип
                                WS_GROUP.

             Клавиши TAB и DIRECTION не имеют  никакого  эффекта,  если
        блоки  управления  в панели диалога не имеют тип WS_TABSTOP или
        WS_GROUP. Эти клавиши не работают и в безтипной панели диалога,
        если для фильтрации сообщений панели  диалога  не  используется
        функция IsDialogMessage.
             Примечание.  Для прикладных программ, использующих клавиши
        ускорения (акселераторы), и имеющих безтипные  панели  диалога,
        функция   IsDialogMessage   должна  вызываться  перед  функцией
        TranslateAccelerator. В протовном случае, интерфейс  клавиатуры
        для панели диалога может обрабатываться некорректно.
             Прикладные   программы,  которые  имеют  безтипные  панели
        диалога и хотят, чтобы эти панели имели  специальный  интерфейс
        клавиатуры,  должны  отфильтровывать  сообщения,  полученные из
        очереди прикладной  программы,  через  функцию  IsDialogMessage
        перед  тем, как выполнить любую другую обработку. Это означает,
        что  прикладная  программа  должна  передать  сообщение  в  эту
        функцию   немедленно   после  получения  сообщения  от  функций
        GetMessage или PeekMessage.  Большинство  прикладных  программ,
        которые   имеют  безтипные  панели  диалога, вставляют  функцию
        IsDialogMessage в основной  цикл  обработки  сообщений  функции
        WinMain.  Функция  IsDialogMessage  автоматически  обрабатывает
        любое сообщение для панели диалога. Это означает, что если  эта
        функция  возвратила ненулевое значение, то сообщение не требует
        дополнительной обработки  и  должно  быть  передано  в  функцию
        TranslateMessage  или DispatchMessage.
             Функция       IsDialogMessage      также      обрабатывает
        последовательность ALT+мнемоника.


       Windows 3.0/Ref/1#7                                       = 64 =

             Прокрутка в панелях диалога

             В  модальных  панелях  диалога клавиши управления курсором
        выполняют специфические функции, зависящие об блоков управления
        в панелях диалога. Например, для группы блоков  управления  эти
        клавиши перемещают фокусировку ввода из одного блока управления
        в  другой, перемещают курсор в редактируемом блоке управления и
        прокручивают содержимое панели перечня.  Клавиши  DIRECTION  не
        могут   использоваться  для  прокручивания  содержимого  панели
        диалога, имеющей свои  собственные  строки  прокрутки.  Если  в
        панели  диалога  имеются строки прокрутки, прикладная программа
        должна обеспечить соответствующий интерфейс клавиатуры для этих
        строк прокрутки. Заматим, что, если система  имеет  "мышь",  то
        для прокрутки доступен интерфейс "мыши".



       Windows 3.0/Ref/1#7                                       = 65 =

                                   1.8 Функции прокрутки                       
       ----------------------------------------------------------------

             Функции  прокрутеи управляют прокруткой содержимого окна и
        строками прокрутки окна. Прокрутка  -  это  перемещение  данных
        внутрь  и  за пределы области пользователя по пользовательскому
        запросу. Это дает пользователю возможность просмотреть документ
        или график по частям, если Windows  не  может  поместить  целый
        документ   или   график  внутрь  области  пользователя.  Строки
        прокрутки   позволяют   пользователю   управлять    прокруткой.
        Нижеприведенный  перечень  кратко  описывает  каждую из функций
        прокрутки:

             Функция                        Описание
        ---------------------------------------------------------------

         GetScrollPos        Получение текущей позиции лифта строки
                             прокрутки.

         GetScrollRange      Копирует максимальную и минимальную пози-
                             цию данной строки прокрутки для специфици-
                             рованной прокрутки.

         ScrollDC            Прокручивает прямоугольник битов по гори-
                             зонтали и вертикали.

         ScrollWindow        Перемещает содержимое области пользователя.

         SetScrollPos        Устанавливает лифт строки прокрутки.

         ShowScrollBar       Индицирует или прячет строку прокрутки и
                             ее блоки управления.

             1.8.1 Стандартные  строки  прокрутки  и  блоки управления
                   строкой прокрутки

             Стандартная    строка    прокрутки     -     это     часть
        непользовательской области окна. Она создается вместе с окном и
        появляется  на  экране  при  индицировании  окна.  Единственным
        назначением стандартной строки прокрутки является генерирование
        пользовательского  запроса  на  прокрутку  обласи  пользователя
        окна. Окно содержит  стандартную  строку  прокрутки,  если  оно
        создано   с  использованием  типа  WS_VSCROLL  или  WS_HSCROLL.
        Стандартная строка  прокрутки  может  быть  горизонтальной  или
        вертикальной.  Вертикальная строка всегда расположена на правой
        границе  области  пользователя;  горизонтальная  строка  всегда
        расположена  внизу.  Стандартная  строка прокрутки всегда имеет
        высоту и ширину,  которые  определены  системными  метрическими
        значениями  SM_CXVSCROLL  и  SM_CYHSCROLL. (Для получения более
        подробной информации смотрите описание функции GetSystemMetrics
        в главе 4 "Список функций").
             Блок   управления  строкой  прокрутки  -  это  окно  блока
        управления, которое выглядит и действует как стандартная строка

       Windows 3.0/Ref/1#7                                       = 66 =

        прокрутки. Но в отличие от стандартной  строки  прокрутки  блок
        управления  строкой  прокрутки  не  является частью какого-либо
        окна. Как отдельное  окно  блок  управления  строкой  прокрутки
        может получать фокусировку  ввода  и  отображать  это  событие,
        индицируя  мигающий  псевдокурсор в лифте (бегунке). Когда блок
        управления  строкой  прокрутки   получил   фокусировку   ввода,
        пользователь   может  использовать  клавиатуру  для  управления
        прокруткой. В  отличие  от  стандартных  строк  прокрутки  блок
        управления   строкой   прокрутки   предусматривает   встроенный
        интерфейс клавиатуры. Блоки управления строкой прокрутки  могут
        также   использоваться   для   других   целей.  Например,  блок
        управления строкой прокрутки может  использоваться  для  выбора
        значений из диапазона значений (выбор цвета из спектра цветов).
                                1.1.8 Лифт строки прокрутки                    

             Лифт  строки  прокрутки  -  это  небольшой прямоугольник в
        строке прокрутки. Он показывает приблизительное  местоположение
        внутри  текущего  документа  или  поля данных, индецированных в
        текущий момент в области пользователя. Например, лифт находится
        в  центре  строки  прокрутки,  когда  в  области   пользователя
        находится третья страница пятистраничного документа.
             Функция  SetScrollPos устанавливает позицию лифта в строке
        прокрутки.  Т.  к.  Windows   не   корректирует   автоматически
        положение  лифта, когда прикладная программа выполнила операцию
        прокрутки, то  для  корректировки  позиции  лифта  должна  быть
        использована   функция   SetScrollPos.   Функция   GetScrollPos
        возвращает текущую позицию.
             Позиция   лифта   -   это    целое    значение.    Позиция
        устанавливается  относительно  левого  или верхнего края строки
        прокрутки в зависимости от того, горизонтальна или  вертикальна
        строка прокрутки. Позиция должна располагаться внутри диапазона
        строки  прокрутки,  который  определяется  своими минимальным и
        максимальным значениями.  Позиции  равномерно  распределены  на
        протяжении  всей  строки  прокрутки.  Например, если установлен
        диапазон от 0 до 100, то вдоль строки прокрутки существует  100
        позиций,  которые  равномерно  распределены  таким образом, что
        позиция 50 находится в центре строки прокрутки.  Первоначальный
        диапазон   зависит  от  строки  прокрутки.  Стандартные  строки
        прокрутки  имеют  начальный  диапазон  от  0  до   100;   блоки
        управления строкой прокрутки имеют пустой диапазон (минммальное
        и максимальное значение равны 0), если при создании этого блока
        управления не было точно  задано  значение  диапазона.  Функция
        SetScrollRange  устанавливает  новые минимальное и максимальное
        значения, так что прикладная программа  может  всегда  изменить
        существующий  диапазон. Функция GetScrollRange получает текущие
        минимальное и максимальное значения. Минимальное и максимальное
        значения  могут  принимать  любые  целые  значения.   Например,
        программа   динамической  таблицы,  имеющей  255  строк,  может
        установить диапазон прокрутки по горизонтали от 1 до 255.
             Если функция SetScrollPos специфицирует значение  позиции,
        которое меньше минимального или больше максимального, то вместо
        него   используются   минимальное  или  максимальное  значение.
        Функция SetScrollPos перемещает лифт от позиции к позиции.

       Windows 3.0/Ref/1#7                                       = 67 =

                                                                               
            1.8.3 Запросы на прокрутку

             Пользователь   генерирует   запрос   на  прокрутку,  когда
        нажимает  на  кнопку  "мыши",  находясь  на  строке  прокрутки.
        Windows   посылает  запрос  в  данное  окно  в  виде  сообщений
        WM_HSCROLL и  WM_VSCROLL.  Параметр  lParam  содержит  значение
        позиции   и  дескриптор  блока  управления  строкой  прокрутки,
        который  сгенерировал  это  сообщение  (lParam  равно  0,  если
        сообщение  поступило от стандартной строки прокрутки). Параметр
        wParam специфицирует тип прокрутки, такой как  прокрутка  вверх
        на  одну  строку,  прокрутка  вниз на страницу или прокрутка до
        конца. Тип прокрутки определяется областью строки прокрутки, на
        которой пользователь нажал кнопку "мыши".
             Пользователь   может   также   сгенерировать   запрос   на
        прокрутку,   используя   лифт   строки   прокрутки,   небольшой
        прямоугольник внутри строки прокрутки. Пользователь  перемещает
        лифт, буксируя "мышь", т.е. оставляет левую кнопку нажатой в то
        время,  как  курсор  находится  на  лифте.  Если   пользователь
        перемещает  лифт,  то  строка  прокрутки  посылает   прикладной
        программе  флаги  SB_THUMBTRACK и SB_THUMBPOSITION с сообщением
        WM_HSCROLL  или  WM_VSCROLL.  Каждое  сообщение   специфицирует
        текущую позицию бегунка.
                                                                               
            1.8.4 Обработка сообщений о прокрутке

             Прикладная   программа,   которая   разрешает   прокрутку,
        нуждается в стандартной строке прокрутки или в блоке управления
        строкой прокрутки для того, чтобы дать возможность пользователю
        сгенерировать  запросы  на  прокрутку,  и   в   функции   окна,
        обрабатывающей     сообщения     WM_HSCROLL    и    WM_VSCROLL,
        представляющие запросы на прокрутку. Хотя результат запроса  на
        прокрутку  воздействует  на  все  окно,  окно  обычно выполняет
        прокрутку, перемещаясь  в  некотором  направлении  относительно
        текущего  положения  или  к  известному  началу  или концу, или
        индицируя данные на новом месте. Например, прикладная программа
        обработки  текстов  может  выполнить  прокрутку  на   следующую
        строку, на следующую страницу или до конца документа.
                           1.8.5 Прокрутка области пользователя                

             Простейший  способ  прокрутки - стереть текущее содержимое
        области пользователя, а затем  вывести  новую  информацию.  Это
        метод  для  той  прикладной  программы,  которая  подходит  для
        использования запросов SB_PAGEUP, SB_PAGEDOWN, SB_POT и SB_END,
        когда требуется полностью новое содержимое.
             Для некоторых запросов, таких как SB_LINEUP и SB_LINEDOWN,
        не требуется стирание всего  содержимого,  т.к.  некоторая  его
        часть  должна  будет  остаться видимой после прокрутки. Функция
        ScrollWindow сохраняет часть содержимого области  пользователя,
        перемещает  ее на специфицированное расстояние и подготавливает
        остальную  часть  области   пользователя   для   вывода   новой

       Windows 3.0/Ref/1#7                                       = 68 =

        информации.  Функция ScrollWindow использует функцию BitBlt для
        перемещения части области пользователя на новое  местоположение
        внутри  области пользователя. Любая часть области пользователя,
        являющаяся  открытой  (не  принадлежащей   сохраняемой   части)
        является   недействительной  и  должна  быть  стерта  и  заново
        перерисована при следующем сообщении WM_PAINT.
             Функция ScrollWindow также позволяет прикладной  программе
        отсекать часть области пользователя из  области  прокручивания.
        Это  делается  для  сохранения элементов, имеющих фиксированные
        позиции (например, таких как дочерние  окна),  от  перемещения.
        Это  действие  автоматически  делает  недействительной ту часть
        области пользователя, которая должна получить новую информацию,
        т.о. прикладная программа не должна сама вычислять свои области
        отсечения.
                                                                               
            1.8.6 Как спрятать стандартную строку прокрутки

             Для стандартных строк прокрутки, если равны максимальное и
        минимальное значения, строка прокрутки становится запрещенной и
        прячется.   Это   дает  возможность  временно  спрятать  строку
        прокрутки, если для текущего содержимого  области  пользователя
        она стала ненужной.
             Функция  ShowScrollBar   прячет   и   делает   недоступной
        стандартную строку  прокрутки,  сделав  равными  минимальное  и
        максимальное  значения.  Спрятанная  строка  прокрутки не может
        генерировать   никакие   запросы    на    прокрутку.    Функция
        SetScrollRange  делает  доступной строку прокрутки и индицирует
        ее снова, установив для минимального и  максимального  значений
        разные    величины.    Функция    ShowScrollBar   также   может
        использоваться для индицирования и  убирания  с  экрана  строки
        прокрутки.   Она   не  оказывает  влияния  на  диапазон  строки
        прокрутки или позицию лифта.



       Windows 3.0/Ref/1#7                                       = 69 =

                                     1.9 Функции меню                          
       ----------------------------------------------------------------

             Функции меню создают, изменяют и разрушают  меню.  Меню  -
        это инструмент ввода в прикладную программу, работающую в среде
        Windows,  который  предлагает  пользователю  выбрать  одну  или
        несколько возможностей при помощи "мыши" и клавиатуры.  Элемент
        строки  меню  может  индицировать  накладываемое меню, и каждый
        элемент накладываемого меню может, в свою очередь, индицировать
        другое накладываемое меню. Накладываемое меню может  появляться
        в  любом  месте экрана. Нижеприведенный список кратко описывает
        каждую функцию меню:

             Функция                             Описание
        ---------------------------------------------------------------

         AppendMenu                  Добавляет в меню элемент меню.

         CheckMenuItem               Ставит или перемещает контрольную
                                     отметку элементов накладываемого
                                     меню.

         CreateMenu                  Создает пустое меню.

         CreatePopupMenu             Создает пустое накладываемое меню.

         DeleteMenu                  Удаляет элемент меню и разрушает
                                     все связанные с ним накладываемые
                                     меню.

         DestroyMenu                 Разрушает специфицированное меню.

         DrawMenuBar                 Перерисовывает строку меню.

         EnableMenuItem              Разрешает, запрещает или выводит
                                     серым цветом элемент меню.

         GetMenu                     Получает дескриптор меню специфи-
                                     цированного окна.

         GetMenuCheckMarkDimensions  Возвращает размеры по умолчанию
                                     растровой карты контрольной отмет-
                                     ки элемента меню.

          GetMenuItemCount           Возвращает число элементов в меню.

          GetMenuItemID              Возвращает идентификатор элемента.

          GetMenuState               Получает состояние элемента меню.

          GetMenuString              Копирует "этикетку" меню в строку.

          GetSubMenu                 Получает дескриптор накладываемого

       Windows 3.0/Ref/1#7                                       = 70 =

                                     меню.

          GetSystemMenu              Делает доступным системное меню
                                     для копирования и изменения.

          HiliteMenuItem             Подсвечивает или снимает подсветку
                                     с элемента меню верхнего уровня
                                     (строки меню).

          InsertMenu                 Вставляет в меню элемент меню.

          LoadMenuInderect           Загружает ресурс меню.

          ModifyMenu                 Изменяет элемент меню.

          RemoveMenu                 Удаляет элемент из строки меню, не
                                     разрушая ее.

          SetMenu                    Специфицирует для окна новое меню.

          SetMenuItemBitmaps         Связывает растровые карты с элеме-
                                     нтом меню для отображения, когда
                                     элемент меню существует и не поме-
                                     чен.

          TrackPopupMenu             Индицирует накладываемое меню в
                                     заданном месте экрана и отслежива-
                                     ет взаимодействие пользователя с
                                     этим меню.



       Windows 3.0/Ref/1#7                                       = 71 =

                                1.10 Информационные функции                    
       ----------------------------------------------------------------

             Информационные  функции  получают  информацию  о  числе  и
        расположении окон  на  экране.  Нижеприведенный  список  кратко
        описывает каждую информационную функцию:

             Функция                             Описание
        ---------------------------------------------------------------

         AnyPopup                Определяет, существуют ли накладывае-
                                 мые окна.

         ChildWindowFromPoint    Определяет, какое из дочерних окон со-
                                 держит специфицированную точку.

         EnumChildWindows        Перечисляет дочерние окна, относящиеся
                                 к специфицированному радительскому
                                 окну.

         EnumTaskWindows         Перечисляет все окна, связанные с дан-
                                 ной задачей.

         EnumWindows             Перечисляет все окна на экране.

         FindWindows             Возвращает дескриптор окна, имеющего
                                 заданный класс и заголовок.

         GetNextWindow           Возвращает дескриптор следующего или
                                 предыдущего окна.

         GetParent               Получает дескриптор специфицированного
                                 родительского окна.

         GetTopWindow            Возвращает дескриптор дочернего окна
                                 верхнего уровня.

         GetWindow               Возвращает дескриптор из списка систе-
                                 мы управления окнами.

         GetWindowTask           Возвращает дескриптор задачи, связан-
                                 ной со специфицированным окном.

         IsChild                 Определяет, происходит ли окно от
                                 специфицированного окна.

         SetParent               Изменяет родительское окно для дочер-
                                 него окна.

         WindowFromPoint         Идентифицирует окно, содержащее специ-
                                 фицированную точку.



       Windows 3.0/Ref/1#7                                       = 72 =

                                                                               
            1.11 Системные функции
       ----------------------------------------------------------------

             Системные  функции  возвращают  информацию   о   системных
        размерах,   цвете  и  времени.  Нижеприведенный  список  кратко
        описывает каждую системную функцию:

             Функция                             Описание
        ---------------------------------------------------------------

         GetCurrentTime            Возвращает время, прошедшее с момен-
                                   та загрузки системы.

         GetSysColor               Возвращает системный цвет.

         GetSystemMetrics          Возвращает информацию о системных
                                   размерах.

         SetSysColor               Изменяет один или несколько систем-
                                   ных цветов.



       Windows 3.0/Ref/1#7                                       = 73 =

                              1.12 Функции системного буфера                   
       ----------------------------------------------------------------

             Функции системного буфера осуществляют обмен данными между
        прикладными программами, работающими в среде Windows. Системный
        буфер  -  это  пространство,  используемое  для  этого   обмена
        данными;   он   предоставляет  место,  из  которого  прикладные
        программы могут передавать дескрипторы данных другим прикладным
        программам.  Нижеприведенный  список  кратко  описывает  каждую
        функцию системного буфера:

             Функция                             Описание
        ---------------------------------------------------------------

          ChangeClipboardChain       Удаляет окно из цепочки окон,
                                     просматривающих системный буфер.

          CloseClipboard             Закрывает системный буфер.

          EmptyClipboard             Очищает системный буфер и переназ-
                                     начает его владельца.

          EnumClipboardFormat        Перечисляет форматы, доступные
                                     системному буферу.

          GetClipboardData           Получает данные из системного бу-
                                     фера.

          GetClipboardFormatName     Возвращает формат системного буфе-
                                     ра.

          GetClipboardOwner          Возвращает дескриптор окна, связа-
                                     нный с текущим владельцем системно-
                                     го буфера.

          GetClipboardViewer         Возвращает дескриптор первого окна
                                     в цепочке наблюдающих за системным
                                     буфером.

          GetPriorityClipboardFormat Получает данные из системного бу-
                                     фера в первом формате из приорите-
                                     тного списка форматов.

          IsClipboardFormatAvailable Возвращаеи TRUE, если данные в
                                     заданном формате доступны.

          OpenClipboard              Открывает системный буфер.

          RegisterClipboardFormat    Регистрирует новый формат систем-
                                     ного буфера.

          SetClipboardData           Копирует дескриптор данных.


       Windows 3.0/Ref/1#7                                       = 74 =

          SetClipboardViewer         Добавляет дескриптор в цепочку
                                     окон, наблюдающих за системным бу-
                                     фером.
                                                                               
            1.13 Функции ошибок
       ----------------------------------------------------------------

             Функции  ошибок  индицируют  ошибки   и   запрашивают   от
        пользователя подсказку. Нижеприведенный список кратко описывает
        каждую функцию ошибок:

             Функция                             Описание
        ---------------------------------------------------------------
         FlashWindow              Заставляет мигать окно, инвертируя
                                  активное/неактивное состояния.

         MessageBeep              Генерирует сигнал системного динамика.

         MessageBox               Создает окно с заданным текстом и за-
                                  головком.



       Windows 3.0/Ref/1#7                                       = 75 =

                                1.14 Функции псевдокурсора                     
       ----------------------------------------------------------------

             Функции   псевдокурсора    воздействуют    на    системный
        псевдокурсор  -  мигающую  линию,  блок  или  растровую карту,-
        который отмечает  текущее  положение  в  области  пользователя.
        Псевдокурсор особенно полезен в прикладных программах обработки
        текстов  для  того,  чтобы отметить текущий символ в тексте при
        редактировании с клавиатуры. Эти  функции  создают,  разрушают,
        индицируют,  делают  невидимым   и   изменяют   время   мигания
        псевдокурсора.  Нижеприведенный  список кратко описывает каждую
        функцию псевдокурсора:

             Функция                             Описание
        ---------------------------------------------------------------

         CreateCaret              Создает псевдокурсор.

         DestroyCaret             Разрушает текущий псевдокурсор.

         GetCurrentBlinkTime      Возвращает время мигания псевдокурсо-
                                  ра.

         GetCaretPos              Возвращает текущую позицию псевдокур-
                                  сора.

         HideCaret                Удаляет псевдокурсор из специфициро-
                                  ванного окна.

         SetCaretBlinkTime        Устанавливает время мигания псевдо-
                                  курсора.

         SetCaretPos              Перемещает псевдокурсор в заданную
                                  позицию.

         ShowCaret                Индицирует вновь созданный псевдокур-
                                  сор или возвращает на экран спрятан-
                                  ный псевдокурсор.
                       1.14.1 Создание и индицирование псевдокурсора           

             Windows формирует псевдокурсор,  инвертируя  цвет  пикселя
        внутри  прямоугольника,  заданного позицией псевдокурсора и его
        шириной и  высотой.  Windows  заставляет  мигать  псевдокурсор,
        попеременно  инвертируя и восстанавливая в предыдущее состояние
        его изображение. Время мигания псевдокурсора (в  миллисекундах)
        определяет    время    задержки    между    инвертированием   и
        восстановлением    изображения.    Полный    цикл     изменения
        (восстановить  - инвертировать - восстановить) равен удвоенному
        времени мигания.
             Функция  CreateCaret   создает   форму   псевдокурсора   и
        закрепляет   его  за  данным  окном.  Псевдокурсор  может  быть
        сплошным или серым, или (для  растровых  псевдокурсоров)  любым

       Windows 3.0/Ref/1#7                                       = 76 =

        требуемым  шаблоном.  Псевдокурсор  может иметь любую форму, но
        типичными его формами являются линия, сплошной блок, серый блок
        и шаблон, как показано на рисунке 1.1.

              Подчеркивание
              Вертикальная линия
              Сплошной блок
              Серый блок
              Растровая карта

              Рисунок 1.1 Формы псевдокурсора

             Windows индицирует сплошной псевдокурсор, инвертируя  весь
        прямоугольник,  заданный  шириной  и высотой псевдокурсора. Для
        серого псевдокурсора Windows инвертирует каждый второй пиксель.
        Для шаблона Windows инвертирует только белые биты  определяющей
        шаблон  растровой карты. Ширина и высота псевдокурсора задается
        в логических единицах; это означает, что они связаны с  режимом
        отображения окна.

             1.14.2 Разделение псевдокурсора

             Разрешен    только    один   псевдокурсор,   и,   поэтому,
        одновременно   может   быть   активна   только    одна    форма
        псевдокурсора. Прикладные программы должны разделять (совместно
        использовать)  псевдокурсор,  чтобы предотвратить нежелательные
        последствия. Windows не информирует прикладную программу, когда
        создается  или  разрушается  псевдокурсор,  поэтому   для   его
        совместного  использования  окно  должно создавать, перемещать,
        индицировать или делать невидимым  псевдокурсор  только  в  том
        случае,  когда  оно  активно  или  захватило  ввод. Окно должно
        разрушить псевдокурсор прежде, чем оно теряет монополию на ввод
        или станет неактивным.
             Растровые карты для псевдокурсора могут быть  созданы  при
        помощи   функции   CreateBitmap   или   загружены  из  ресурсов
        прикладной программы с помощью  функции  LoadBitmap.  Растровые
        карты,  загруженные  из  ресурсов, могут быть созданы с помощью
        программы SDKPaint и добавлены к ресурсам прикладной  программы
        при  помощи компилятора ресурсов. (Для получения дополнительной
        информации    о    компиляторе    ресурсов     смотри     книгу
        "Инструментальные средства").



       Windows 3.0/Ref/1#7                                       = 77 =

                                   1.15 Функции курсора                        
       ----------------------------------------------------------------

             Функции  курсора  устанавливают,  перемещают,  индицируют,
        прячут  и  ограничивают  курсор.  Курсор - это растровая карта,
        которая  индицируется  на  системном дисплее, показывая текущее
        положение.  Нижеприведенный  список  кратко  описывает   каждую
        функцию курсора:

             Функция                             Описание
        ---------------------------------------------------------------

           ClipCursor                Ограничивает курсор данным прямоу-
                                     гольником.

           CreateCursor              Создает курсор из двух битовых ма-
                                     сок.

           DestroyCursor             Разрушает курсор, созданный при по-
                                     мощи функции CreateCursor.

           GetCursorPos              Запоминает позицию курсора (в ко-
                                     ординатах экрана).

           LoadCursor                Загружает курсор из файла ресурсов.

           SetCursor                 Устанавливает форму курсора.

           SetCursorPos              Устанавливает позицию курсора.

           ShowCursor                Увеличивает или уменьшает счетчик
                                     индицирования курсора.
                                                                               
            1.15.1 Устройства манипулирования и курсор

             Если  система  имеет  "мышь"  (или  какое-либо  устройство
        манипулирования  другого  типа),  курсор   показывает   текущую
        позицию  "мыши".  Windows автоматически индицирует и перемещает
        курсор  при  перемещении  "мыши".  Если  "мышь"  в  системе  не
        установлена,  Windows  не  индицирует  и  не  перемещает курсор
        автоматически. Для того, чтобы перемещать курсор, если "мышь" в
        системе не установлена, прикладные программы могут использовать
        функции курсора.
                                                                               
            1.15.2 Как индицировать и прятать курсор

             В системе, не имеющей "мыши", Windows не индицирует  и  не
        перемещает  курсор  до  тех  пор,  пока пользователь не выберет
        некоторые  системные  команды,  такие,  например,  как  команды
        перемещения  или  изменения  размера.  Это  означает, что после
        вызова SetCursor соответствующий  курсор  будет  оставаться  на
        экране до тех пор, пока следующий вызов SetCursor с параметром,
        равным  NULL,  не  удалит  курсор,  или  до  тех  пор,  пока не

       Windows 3.0/Ref/1#7                                       = 78 =

        выполнится системная  команда.  Прикладные  программы,  которые
        хотят  работать с курсором,  не имея "мышь", обычно моделируют
        ввод с  "мыши"  при  помощи  клавиш клавиатуры ( например,
        клавиш управления курсором), используя функции курсора.
             Функция  ShowCursor  индицирует  или  прячет  курсор.  Она
        используется для временного сокрытия курсора и последующего его
        восстановления без изменения текушей формы курсора. Эта функция
        устанавливает внутренний счетчик, который определяет, должен ли
        курсор быть выведен на экран. Операции сокрытия и индицирования
        накапливаются, так что, если курсор был спрятан  пять  раз,  то
        требуется пять раз его индицировать для того, чтобы он появился
        на экране.
                                                                               
            1.15.3 Позиционирование курсора

             Функции  SetCursorPos  и  GetCursorPos устанавливают и воз
        вращают текущее положение курсора в  координатах  экрана.  Хотя
        курсор  может  быть  установлен в положение, не соответствующее
        текущему  положению  "мыши",  но,   если   "мышь"   в   системе
        установлена,  следующее  ее  перемещение переустановит курсор в
        положение "мыши". Функции SetCursorPos и GetCursorPos  наиболее
        часто  применяются  в  прикладных  программах, использующих для
        перемещения    курсора    клавиатуру    и     специфицированные
        последовательности  нажатия  на  клавиши.   Заметим,   что   на
        координаты   экрана  не  оказывает  влияния  режим  отображения
        области пользователя окна.
                                                                               
            1.15.4 Точка привязки курсора и ограничение курсора

             Курсор имеет точку привязки. Когда Windows выводит  курсор
        на  экран,  она  всегда  помещает  точку привязки в ту точку на
        экране дисплея, которая представляет текущее положение "мыши" и
        клавиш управления курсором. Например, точка привязки  указателя
        - это местоположение массива.
             Функция    ClipCursor    ограничивает    курсор     данным
        прямоугольником на экране дисплея. Курсор может перемещаться по
        границе  прямоугольника,  но  не  может  за  нее выйти. Функция
        ClipCursor обычно используется для ограничения курсора в данном
        окне, например, в панели диалога, содержащей  предупреждение  о
        серьезной   ошибке.   Этот   прямоугольник  всегда  задается  в
        координатах  экрана  и  не  может   находиться   внутри   окна,
        содержащего выполняемую в данный момент прикладную программу.
                                                                               
            1.15.5 Создание заказного курсора

             Функция SetCursor устанавливает и  рисует  форму  курсора.
        Если   "мышь"  в  системе  установлена,  Windows  автоматически
        изменяет форму курсора, когда он пересекает  границу  окна  или
        попадает в различные области окна, такие как заголовок окна или
        строка  меню.  Windows использует стандартные формы курсора для
        различных  областей  окна,  например,   указатель   на   строку
        заголовка.   Функция   SetCursor   дает   прикладной  программе
        возможность удалять стандартный  курсор  и  устанавливать  свой

       Windows 3.0/Ref/1#7                                       = 79 =

        собственный  заказной  курсор. Курсор сохраняет эту новую форму
        до тех пор, пока "мышь" не переместиться или не будет выполнена
        системная команда.



       Windows 3.0/Ref/1#7                                       = 80 =

                                   1.16 Функции ловушек                        
       ----------------------------------------------------------------

             Функции ловушек управляют  системными  ловушками,  которые
        являются     разделяемыми     ресурсами,    устанавливливающими
        специальный  тип  функции  фильтра.  Функция  фильтра   -   это
        предоставляемая  прикладной  программой  функция  многократного
        вызова, специфицированная посредством функции  SetWindowHook  и
        обрабатывающая   события   прежде,   чем  они  достигнут  цикла
        обработки  сообщений  прикладной  программы.  Windows  посылает
        сообщения,  генерируемые  специальным  типом события, в функцию
        фильтра, установленную для ловушки этого типа.  Нижеприведенный
        список кратко описывает каждую функцию ловушки:

             Функция                             Описание
        ---------------------------------------------------------------

          CallMsgFilter             Передает сообщение и другие данные
                                    текушей функции фильтрации сообще-
                                    ний.

          DefHookProc               Вызывает следующую функцию из цепо-
                                    чки функций фильтра.

          SetWindowsHook            Устанавливает функцию фильтра сис-
                                    темы и/или прикладной программы.

          UnhookWindowsHook         Удаляет функцию ловушки Windows из
                                    цепочки функций фильтра.
                              1.16.1 Цепочка функций фильтра                   

             Цепочка функций фильтра - это последовательность связанных
        функций фильтра для отдельной системной ловушки. Например,  все
        функции    фильтра   клавиатуры   устанавливаются   с   помощью
        WH_KEYBOARD, а  все  функции  фильтра  для  ведения  журнальных
        записей  -  с  помощью  WH_JOURNALRECORD.  Прикладные программы
        передают эти функции  фильтра  системным  ловушкам  при  помощи
        вызова  функции  SetWindowsHook.  Каждый  вызов добавляет новую
        функцию фильтра в начало цепочки. Каждый раз, когда  прикладная
        программа  передает  функцию  фильтра  системной  ловушке,  она
        должна резервировать место для адреса следующей функции фильтра
        в цепочке. Функция SetWindowsHook возвращает этот адрес.
             Как  только  каждая  функция фильтра выполнит свою задачу,
        она должна вызвать функцию DefHookProc. Эта функция  использует
        адрес, запомненный в ячейке, которая зарезервирована прикладной
        программой для доступа к следующей функции фильтра в цепочке.
             Для   удаления   функции  фильтра  из  цепочки  прикладная
        программа должна вызвать функцию UnhookWindowsHook,  задав  тип
        ловушки и указатель на функцию.
                 Существует  пять  типов  стандартных оконных ловушек и
        два типа отладочных ловушек. В таблице 1.8 перечислены эти типы
        и описано их назначение.

       Windows 3.0/Ref/1#7                                       = 81 =


             Таблица 1.8                 Системные ловушки
        ---------------------------------------------------------------
             Тип                            Назначение
        ---------------------------------------------------------------
         WH_CALLWNDPROC        Устанавливает функцию фильтра окна.

         WH_GETMESSAGE         Устанавливает фильтр сообщений (только
                               для отладочной версии).

         WH_JOURNALPLAYBACK    Устананавливает фильтр "пролистывания
                               назад" журнальной записи.

         WH_JOURNALRECORD      Устанавливает фильтр журнальных записей.

         WH_KEYBOARD           Устанавливает фильтр клавиатуры.

         WH_MSGFILTER          Устанавливает фильтр сообщений.

         WH_SYSMSGFILTER       Устанавливает фильтр системных сообще-
                               ний.

             Примечание.   Ловушки   WH_CALLWNDPROC   и   WH_GETMESSAGE
        воздействуют  на  работу  системы.  Они используются только для
        отладочных целей.
                                                                               
            1.16.2 Установка функции фильтра

             Для установки функции фильтра прикладная программа  должна
        выполнить следующее:
             1. Экспортировать функцию в своем файле определения модуля.
             2. Получить    адрес    функции,    использовав    функцию
        MakeProcInstance.
             3.  Вызвать  функцию  SetWindowsHook,  задав  тип  функции
        ловушки (см. Таблицу 1.8 "Системные ловушки)  и  адрес  функции
        (возвращенный функцией MakeProcInstance).
             4. Запомнить возвращаемое функцией SetWindowsHook значение
        в  зарезервированной  ячейке.  Это  значение  является  адресом
        предыдущей функции фильтра.
             Примечание.  Функции  фильтра  и   возвращаемое   значение
        функции  SetWindowHook  должны  располагаться  в  фиксированных
        библиотечных  кодовых  сегментах  и   сегментах   данных.   Это
        позволяет  данным ловушкам работать в больших фреймах окружения
        EMS.



       Windows 3.0/Ref/1#7                                       = 82 =

                                   1.17 Функции свойств                        
       ----------------------------------------------------------------

             Функции свойств создают и осуществляют  доступ  к  перечню
        свойств окна. Перечень свойств - это область памяти, содержащая
        дескрипторы данных, которые прикладная программа хочет  связать
        с  данным окном. Нижеприведенный список кратко описывает каждую
        функцию свойств:

             Функция                             Описание
        ---------------------------------------------------------------
          EnumProps              Передает свойства окна функции перечи-
                                 сления.

          GetProp                Возвращает дескриптор, связанный со
                                 строкой из перечня свойств окна.

          RemoveProp             Удаляет строку из перечня свойств.

          SetProp                Копирует строку и дескриптор данных в
                                 перечень свойств окна.

             Использование перечней свойств

             Поскольку  перечень  свойств  окна   содержит   дескриптор
        данных,  каждая  прикладная  программа  может получить доступ к
        этому дескриптору, если ей к тому  же  доступно  окно.  Поэтому
        перечень  свойств  является  удобным  средством создания данных
        (например, альтернативных заголовков или меню окна),  доступных
        прикладной программе при модификации окна.
             Каждое   окно  имеет  собственный  перечень  свойств.  При
        создании окна перечень пуст. Функция SetProp добавляет элементы
        к перечню. Каждый элемент  содержит  уникальную  ANSI-строку  и
        дескриптор   данных.   ANSI-строка  идентифицирует  дескриптор;
        дескриптор  идентифицирует  данные,  связанные  с  окном,   как
        показано на рисунке 1.2:


       Windows 3.0/Ref/1#7                                       = 83 =


                        ANSI-строка        Дескриптор
                   -------------------------------------
                   | "двоичные данные"  |   hMemory    |
                   |--------------------|--------------|
                   | "икона"            |   hIcon      |
                   |--------------------|--------------|
                   | "текст на экране"  |   hText      |
                   |--------------------|--------------|
                   |         :          |        :     |
                   |         .          |        .     |

                        Рисунок 1.2 Перечень свойств

             Дескриптор  данных может идентифицировать любой объект или
        блок памяти,  которые  прикладная  программа  хочет  связать  с
        окном.  Функция  GetProp  получает  дескриптор  данных элемента
        перечня, не удаляя этот элемент. Этот  дескриптор  может  затем
        использоваться  для получения или использования данных. Функция
        RemoveProp удаляет элемент из перечня, если он больше не нужен.
             Хотя основной задачей перечня свойств является  связывание
        данных  с окном для использования их той прикладной программой,
        которой принадлежит это окно, дескрипторы  из  перечня  свойств
        фактически  доступны любой прикладной программе, имеющей доступ
        к окну. Это означает, что прикладная программа может получить и
        использовать  дескриптор  данных  из  перечня   свойств   окна,
        созданного   другой   прикладной  программой.  Но  использовать
        дескрипторы данных другой прикладной программы нужно осторожно.
        Другими  прикладными  программами  можно  использовать   только
        разделяемые   объекты   глобальной  памяти,  например  объекты,
        рисуемые  функциями  GDI.  Если   перечень   свойств   содержит
        дескрипторы  локальной  или  глобальной  памяти или дескрипторы
        ресурсов,  то  их  может  использовать  только  та   прикладная
        программа,  которая создала окно. Дескрипторы глобальной памяти
        могут разделяться другими  прикладными  программами  с  помощью
        системного  буфера.  (Для  получения  дополнительной информации
        смотри раздел 1.2  "Функции  системного  буфера".)  Дескрипторы
        локальной памяти вообще не могут разделяться.
             Содержимое   перечня  свойств  может  быть  перечислено  с
        помощью  функции  EnumProps.  Эта  функция  передает  строку  и
        дескриптор  данных  каждого  элемента перечня в предоставляемую
        прикладной программой функцию. Эта  предоставляемая  прикладной
        программой функция может выполнять любую задачу.
             Дескрипторы  данных  из перечня свойств всегда принадлежат
        той прикладной программе, которая их создала. Сам  же  перечень
        свойств,  как  и  другие данные, связанные с окном, принадлежит
        Windows.   Перечень   свойств   окна   всегда   размещается   в
        динамической   области   памяти  USER.  Это  зависит  от  числа
        созданных  окон,  классов  окна  и  других  связанных  с  окном
        объектов.
             Прикладная   программа   создает   элементы,  составляющие
        перечень свойств. Перед разрушением окна или завершением работы
        прикладной программы, которая владеет окном, необходимо удалить

       Windows 3.0/Ref/1#7                                       = 84 =

        все элементы из перечня свойств с помощью  функции  RemoveProp.
        Если  при удалении элементов произошла ошибка, перечень свойств
        остается в динамической области  памяти  USER,  и  эта  область
        памяти   становится   недоступной  для  последующих  прикладных
        программ. Это обязательно приведет к переполнению  динамической
        области  памяти  USER.  Элементы  перечня  свойств  согут  быть
        удалены в любое время при помощи функции  RemoveProp.  Если  во
        время  передачи  окну  сообщения  WM_DESTROY  в перечне свойств
        остались неудаленные элементы, то они должны быть удалены в это
        время.  Чтобы  убедиться  в  том,  что  все  элементы  удалены,
        используйте  функцию  EnumProps для перечисления всех элементов
        перечня свойств. Прикладной программе следует удалять только те
        свойства, которые она  добавила  в  перечень  свойств.  Windows
        добавляет  свойства  для  своего  собственного  использования и
        удаляет  их  автоматически.  Прикладная  программа  не   должна
        удалять свойства, добавленые в список самой Windows.



       Windows 3.0/Ref/1#7                                       = 85 =

                                1.18 Функции прямоугольника                    
       ----------------------------------------------------------------

             Функции  прямоугольника  служат для получения информации о
        прямоугольниках в области пользователя окна.  В  среде  Windows
        прямоугольник   определяется   структурой   данных   RECT.  Эта
        структура содержит координаты двух  точек:  верхнего  левого  и
        нижнего  правого  углов  прямоугольника. Стороны прямоугольника
        начинаются в этих  двух  точках  и  параллельны  осям  х  и  у.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        прямоугольника:

             Функция                             Описание
        ---------------------------------------------------------------
         CopyRect               Создает копию существующего прямоуголь-
                                ника.

         EqualRect              Определяет, равны ли два прямоугольника.

         InflateRect            Увеличивает или уменьшает специфициро-
                                ванный прямоугольник.

         IntersectRect          Находит область пересечения двух прямо-
                                угольников.

         OffsetRect             Перемещает данный прямоуголькник.

         PtInRect               Определяет, находится ли
                                специфицированная точка внутри данного
                                прямоугольника.

         SetRectEmpty           Делает прямоугольник пустым.

         UnionRect              Сохраняет объединение двух прямоуголь-
                                ников.
                                                                               
       1.18.1 Использование прямоугольников в прикладных программах

             Прямоугольники используются для определения  прямоугольных
        областей  на  экране  или  в  окне, таких как область отсечения
        курсора,    область    перерисовки    пользователя,     область
        форматирования  для  форматирования текста и область прокрутки.
        Прямоугольники используются также для заливки,  обрамления  или
        инвертирования  части  области пользователя при помощи заданной
        кисти и для получения координат окна или  области  пользователя
        окна.
             Поскольку  прямоугольники   используются   для   множества
        различных  целей,  функции  прямоугольников  не используют явно
        задаваемых единиц измерения.  Вместо  этого  все  координаты  и
        размеры   прямоугольника  задаются  логическими  величинами  со
        знаком. Фактические единицы измерения определяются функцией,  в
        которой прямоугольник используется.


       Windows 3.0/Ref/1#7                                       = 86 =

                             1.18.2 Координаты прямоугольника                  

             Значения  координат прямоугольника должны быть в диапазоне
        от -32,768 до 32,767. Его ширина и высота, которые должны  быть
        положительными значениями, находятся в пределах от 0 до 32,767.
        Это  означает, что прямоугольник, у которого какая-либо сторона
        длиннее, чем 32,76 единиц, является  недопустимым.  На  рисунке
        1.3   показан   прямоугольник,   верхний  левый  угол  которого
        находится слева от начала координат, а ширина меньше 32,767:

                                      Y │                (16000,2000)
            ┌───────────────────────────┼──────────────────────────┐
            │                           │                          │
            │                           │                          │
            │                           │                          │
          ──┼───────────────────────────┼──────────────────────────┼─
            │                           │                          │ X
            │                           │                          │
            │                           │                          │
            └───────────────────────────┼──────────────────────────┘
        (-16000,-2000)

        Ширина =  16000-(-16000) = 32000 <= 32767

         Рисунок 1.3  Границы прямоугольника
                   1.18.3 Создание прямоугольников и манипулирование ими       

             Функция SetRect создает  прямоугольник,  функция  CopyRect
        создает  копию  данного  прямоугольника, а функция SetRectEmpty
        создает  пустой  прямоугольник.  Пустой  прямоугольник  -   это
        прямоугольник, который имеет нулевую ширину, нулевую высоту или
        то и другое вместе.
             Функция InflateRect увеличивает  или  уменьшает  ширину  и
        высоту  прямоугольника.  Она увеличивает или уменьшает ширину с
        двух сторон прямоугольника или увеличивает или уменьшает высоту
        сверху и снизу прямоугольника.
             Функция OffsetRect перемещает  прямоугольник  на  заданное
        расстояние. Она перемещает углы прямоугольника, добавляя данное
        значение x и y к координатам углов.
             Функция      PtInRect     определяет,     находится     ли
        специфицированная  точка  внутри  данного прямоугольника. Точка
        находится внутри прямоугольника, если она  расположена  на  его
        верхней   или  левой  границе  или  полность  находится  внутри
        прямоугольника.
             Функция  IsRectEmpty  определяет,   является   ли   данный
        прямоугольник пустым.
             Функция  IntesectRect создает новый прямоугольник, который
        является  пересечением   двух   существующих   прямоугольников.
        Пересечение  -  это  наибольший  прямоугольник,  содержащийся в
        обоих   существующих    прямоугольниках.    Пересечение    двух
        прямоугольников показано на рисунке 1.4:


       Windows 3.0/Ref/1#7                                       = 87 =

             Рисунок 1.4 Пересечение двух прямоугольников

             1. Прямоугольник 1
             2. Прямоугольник 2
             3. Пересечение

             Функция  UnionRect  создает  новый  прямоугольник, который
        является   объдинением   двух   существующих   прямоугольников.
        Объединение двух прямоугольников показано на рисунке 1.5:

             Рисунок 1.5 Объединение двух прямоугольников

             1. Объединение
             2. Объединение
             3. Прямоугольник 1
             4. Прямоугольник 2

             Для  получения  информации  о функциях, рисующих эллипсы и
        многоугольники,  смотри  раздел   2.10   "Функции   эллипса   и
        прямоугольника".



       Windows 3.0/Ref/1#7                                       = 88 =

                                      1.19 Заключение                          
       ----------------------------------------------------------------

             Функции    интерфейса   управления   окнами   обрабатывают
        сообщения, создают, перемещают или изменяют  окно  или  создают
        системный вывод. Для получения более полной информации по теме,
        относящейся  к  функциям  интерфейса  управления окнами, смотри
        следующие разделы:

              Тема                               Ссылка
        ---------------------------------------------------------------
         Описания функций       Справочное руководство, том 1: Глава 4,
                                "Перечень функций"

         Сообщения Windows      Справочное руководство, том 1: Глава 5,
                                "Обзор сообщений" и Глава 6, "Перечень
                                сообщений"

         Типы данных и струк-   Справочное руководство, том 2: Глава 7,
         туры в Windows         "Типы данных и структуры"

         Использование компи-   Справочное руководство, том 2: Глава 8,
         лятора ресурсов        "Операторы описания ресурсов"

                                Tools: Глава 3, "Компиляция ресурсов:
                                Компилятор ресурсов"

         Основная информация    Руководство программиста: Глава 1,
         о программировании в   "Обзор среды Windows"
         среде Windows

         Создание окна и уп-    Руководство программиста: Глава 2,
         равление им            "Прикладная программа Generic"

         Управление выводом     Руководство программиста: Глава 4,
                                "Ввод с использованием "мыши" и кла-
                                виатуры" и Глава 6, "Курсор, "мышь" и
                                клавиатура"

         Иконы                  Руководство программиста: Глава 5,
                                "Иконы"


       Windows 3.0/Ref/1#7                                       = 89 =

         Меню                   Руководство программиста: Глава 7,
                                "Меню"

         Блоки управления и     Руководство программиста: Глава 8,
         панели диалога         "Блоки управления" и Глава 9, "Панели
                                диалога"

         Создание икон и кур-   Tools: Глава 4, "Создание образов:
         соров                  SDKPaint"

         Создание панелей диа-  Tools: Глава 5, "Создание панелей диа-
         лога                   лога: Редактор диалога"



       Windows 3.0/Ref/1#7                                       = 90 =

                Глава 2.        Функции интерфейса графического устройства     
       ----------------------------------------------------------------

             Эта   глава   описывает   функции,  которые  выполняют  не
        зависящие  от  устройства   графические   операции   прикладной
        программы  в  среде  Windows,  включая  создание  вывода  линий
        различной   толщины,  текста  и  растровых  карт  на  множество
        графических устройств. Эти  функции  и  образовывают  интерфейс
        графического устройства среды Windows.

             Эта глава содержит следующие категории функций:

             Функции контекста устройства
             Функции инструментов рисования
             Функции цветовой палитры
             Функции атрибутов рисования
             Функции режима отображения
             Функции координат
             Функции областей
             Функции отсечения
             Функции вывода линий
             функции эллипсов и многоугольников
             Функции растров
             Функции вывода текста
             Функции шрифтов
             Функции метафайла
             Функции управления принтером
             Функции работы с управляющими последовательностями принтера
             Функции окружения
                             2.1. Функции контекста устройства                 

             Функции   контекста   устройства   создают,  уничтожают  и
        воостанавливают контексты устройства (DC). Контекст  устройства
        -  это  связь  между  прикладной программой, работающей в среде
        Windows, драйвером устройства и устройством вывода,  таким  как
        принтер или плоттер.
             На  рисунке  2.1  показан  поток  информации от прикладной
        программы,  работающей  в   среде   Windows,   через   контекст
        устройства и драйвер устройства на устройство вывода:


             Рисунок 2.1  Поток информации на устройство вывода

        (Примечание. Здесь и далее рисунки пропущены из-за невозможнос-
                     ти показа средствами программы-справочника.)


             Любая прикладная программа, работающая  в  среде  Windows,
        должна  использовать  функции  GDI  для  доступа  к  устройству
        вывода. GDI передает вызовы (которые являются  независящими  от

       Windows 3.0/Ref/1#7                                       = 91 =

        устройства)  от  прикладной  программы  к  драйверу устройства.
        Драйвер устройства затем переводит эти вызовы  в  зависимые  от
        устройства операции.
             Нижеприведенный  список  кратко  описывает  каждую функцию
        контекста устройства:

            Функция                                Описание
        ---------------------------------------------------------------
         CreateCompatibleDC        Создает контекст устройства памяти.

         CreateDC                  Создает контекст устройства.

         CreateIC                  Создает информационный контекст.

         DeleteDC                  Удаляет контекст устройства.

         GetDCOrg                  Возвращает начальный адрес специфи-
                                   цированного контекста устройства.

         RestoreDC                 Восстанавливает контекст устройства.

         SaveDC                    Сохраняет текущее состояние контек-
                                   ста устройства.
                            2.1.1 Атрибуты контекста устройства                

             Атрибуты контекста устройства описывают выбранные  объекты
        рисования  (перья и кисти), выбранные шрифты и их цвета, способ
        рисования (или отображения) объектов на устройство, область  на
        устройстве,  доступную для вывода (область отсечения), и другую
        важную информацию. Структура данных, содержащая  эти  атрибуты,
        называется блоком данных контекста устройства (DC).
             В таблице 5 перечисляются атрибуты контекста устройства по
        умолчанию и те функции GDI, которые изменяют или используют эти
        атрибуты.

        Таблица 2.1   Атрибуты по умолчанию для контекста отображения и
                      соответствующие функции GDI
        ===============================================================
              Атрибут      Значение по умолчанию       Функции GDI
        ===============================================================
         Цвет фона               Белый             SetBkColor

         Режим фона              OPAQUE            SetBkMode

         Растровая карта         Не определено     CreateBitmap
                                                   CreateBitmapInderect
                                                   CreateCompatible-
                                                   Bitmap
                                                   SelectObject

         Кисть                   WHITE_BRUSH       CreateBrushInderect
                                                   CreateDIBPattern-

       Windows 3.0/Ref/1#7                                       = 92 =

                                                   Brush
                                                   CreateHatchBrush
                                                   CreatePatternBrush
                                                   CreateSolidBrush
                                                   SelectObject

         Начальное положение     (0, 0)            SetBrushOrg
         кисти                                     UnrealizeObject

         Область отсечения       Поверхность       ExcludeClipRect
                                 дисплея           IntersectClipRect
                                                   OffsetClipRgn
                                                   SelectClipRgn

         Цветовая палитра        DEFAULT_PALETTE   CreatePalette
                                                   RealizePalette
                                                   SelectPalette

         Текущая позиция пера    (0, 0)            MoveTo

         Режим рисования         R2_COPYPEN        SetROP2

         Шрифт                   SYSTEM_FONT       CreateFont
                                                   CreateFontInderect
                                                   SelectObject

         Межсимвольный           0                 SetTextCharacter-
         промежуток                                Extra

         Режим отображения       MM_TEXT           SetMapMode

         Перо                    BLACK_PEN         CreatePen
                                                   CreatePenInderect
                                                   SelectObject

         Режим заливки           ALTERNATE         SetPolyFillMode
         многоугольника

         Режим растяжения/        BLACKONWHITE     SetStretchBltMode
         сжатия

         Цвет текста              Черный           SetTextColor

         Протяженность            (1, 1)           SetViewportExt
         области просмотра

         Начало области           (0, 0)           SetViewportOrg
         просмотра

         Протяженность окна       (1, 1)           SetWindowExt

         Начальное положение      (0, 0)           SetWindowOrg
         окна

       Windows 3.0/Ref/1#7                                       = 93 =

                                                                               
            2.1.2 Сохранение контекста устройства

             Иногда  необходимо  сохранять  контекст  устройства с тем,
        чтобы  позднее  можно  было  бы   использовать   первоначальное
        значение  атрибутов.  Например,  прикладной  программе  в среде
        Windows может потребоваться сохранить  свою  начальную  область
        отсечения  с  тем,  чтобы восстановить первоначальное состояние
        области пользователя после серии  проведенных  изменений.  Этой
        цели служат функции SaveDC и RestoreDC.
                                                                               
            2.1.3 Удаление контекста устройства

             Функция   DeleteDC  удаляет  контекст  устройства,  причем
        разделяемые ресурсы не удаляются до  тех  пор,  пока  не  будет
        удален   последний   контекст.   Драйвер   устройства  является
        разделяемым ресурсом.
                                                                               
            2.1.4 Совместимый контекст устройства

             Функция CreateCompatibleDC побуждает Windows рассматривать
        часть  памяти  как  виртуальное  устройство.  Это означает, что
        Windows  создает  контекст  устройства,  имеющий  те  же  самые
        атрибуты,  что и устройство, для которого он создается, но этот
        контекст устройства пока не подсоединен к утройству вывода. Для
        использования   совместимого  контекста  устройства  прикладная
        программа создает совместимую растровую карту и выбирает  ее  в
        контексте  устройства. Любая выводимая на устройство информация
        рисуется  в  выбранной  растровой  карте.  Поскольку   контекст
        устройства совместим с некоторым реальным устройством, контекст
        растровой  карты  может  быть  скопирован непосредственно в это
        устройство и  наоборот.  Это  также  означает,  что  прикладная
        программа  может  послать  выводимую  информацию  в  память (до
        посылки  на  реальное   устройство).   Отметим,   что   функция
        CreateCompatibleDC  работает  только  с  устройствами,  которые
        имеют возможности BitBlt.
                              2.1.5 Информационные контексты                   

             Функция   CreateIC   создает    информационный    контекст
        устройства. Информационный контекст - это контекст устройства с
        ограниченными  возможностями;  он не может быть использован для
        записи   на   устройство.   Прикладная   программа   использует
        информационный   контекст  для  сбора  информации  о  выбранном
        устройстве.  Информационный  контекст   полезен   для   больших
        прикладных программ, требующих консервации памяти.
             Используя  информационный контекст и функцию GetDeviceCaps
        можно получить следующую информацию об устройстве:

             Особенности устройства
             Физические размеры экрана
             Цветовые возможности устройства
             Объекты рисования, доступные на устройстве

       Windows 3.0/Ref/1#7                                       = 94 =

             Возможности отсечения устройства
             Растровые возможности устройства
             Возможности рисования кривых на устройстве
             Возможности рисования линий на устройстве
             Возможности рисования многоугольников на устройстве
             Текстовые возможности устройства



       Windows 3.0/Ref/1#7                                       = 95 =

                               2.2 Функции средств рисования                   
       ----------------------------------------------------------------

             Функции  средств  рисования  создают  и  удаляют  средства
        рисования,  которые GDI использует при выводе на устройство или
        экран дисплея. Нижеприведенный список кратко  описывает  каждую
        функцию средств рисования:

            Функция                                Описание
        ---------------------------------------------------------------
         CreareBrushInderect          Создает логическую кисть.

         CreateDIBPatternBrush        Создает логическую кисть, имеющую
                                      шаблон, определяемый независимой
                                      от устройства растровой картой
                                      (DIB).

         CreateHatchBrush             Создает логическую кисть, имеющую
                                      шаблон штриховки.

         CreatePatternBrush           Создает логическу кисть, имеющую
                                      шаблон, определяемый растровой
                                      картой памяти.

         CreatePen                    Создает логическое перо.

         CreatePenInderect            Создает логическую кисть.

         CreateSolidBrush             Создает логическую кисть.

         DeleteObject                 Удаляет логические перо, кисть,
                                      шрифт, растровую карту или об-
                                      ласть.

         EnumObject                   Перечисляет доступные перья или
                                      кисти.

         GetBrushOrg                  Возвращает текущее начальное по-
                                      ложение кисти для контекста уст-
                                      ройства.

         GetObject                    Копирует байты логических данных,
                                      определяющих объект.

         GetStockObject               Возвращает дескриптор одного из
                                      ранее определенных наборов перьев,
                                      кистей, шрифтов или цветовых па-
                                      литр.

         SelectObject                 Выбирает объект в качестве текуще-
                                      го объекта.

         SetBrushOrg                  Устанавливает начальное положение

       Windows 3.0/Ref/1#7                                       = 96 =

                                      всех кистей, выбранных в заданном
                                      контекте устройства.

         UnrealizeObject              Ориентирует GDI на сброс начального
                                      положения заданной кисти.
                           2.2.1 Использование средств рисования               

             Прикладная  программа,  работающие  в среде Windows, может
        использовать любое  из  трех  средств  рисования  для  создания
        выводимой   информации:   растровую   карту,  кисть  или  перо.
        Прикладная программа может использовать перо или кисть  вместе,
        очерчивая  область  или объект пером и выполняя заливку области
        или объекта кистью. GDI дает возможность  прикладной  программе
        создавать  перья сплошного цвета, растровую карту сплошного или
        комбинированного цвета и кисть сплошного  или  комбинированного
        цвета.   (Доступные   цвета  и  комбинации  цветов  зависят  от
        возможностей устройства вывода.)

             Кисти

             Существует  семь   встроенных   кистей,   доступных   GDI;
        прикладная  программа  выбирает  одну из них, используя функцию
        GetStockObject. Нижеприведенный перечень описывает эти кисти:

             Черная
             Темно-серая
             Серая
             Прозрачная
             Светло-серая
             Нулевая
             Белая.
             Существует  шесть  шаблонов  штриховки  кистью  (текстур);
        прикладная  программа  может  выбрать  любой  из этих шаблонов,
        используя функцию  CreateHatchBrush.  (Линия  штриховки  -  это
        такая  линия,  которая появляется через регулярные интервалы на
        сплошном фоне. Нижеприведенный перечень описывает эти кисти:

             Обратная диагональная
             Перекрестная
             Диагональная перекрестная
             Прямая диагональная
             Горизонтальная
             Вертикальная.
             На рисунке 2.2 представлены все шаблоны штриховок. Простая
        прикладная  программа,  работающая  в  среде  Windows,  создает
        следующий рисунок:

             Рисунок 2.2 Шаблоны штриховок кистью

             Перья

             Существуют  три   встроенных   пера,   используемых   GDI;

       Windows 3.0/Ref/1#7                                       = 97 =

        прикладная  программа  выбирает  одно из них, используя функцию
        GetStockObject. Нижеприведенный перечень описывает эти перья:

             Черное
             Нулевое
             Белое.
             В  добавление  к  выбранному  встроенному перу, прикладная
        программа может создать собственное перо, используя функцию GDI
        CreatePen. Эта функция позволяет прикладной  программе  выбрать
        один  из  шести  типов  пера,  толщину  пера  и цвет пера (если
        устройство имеет возможность использовать цвет). Тип пера может
        быть  сплошным,  пунктирным,  точечным,  штрих-пунктирным   или
        нулевым.   Толщина  пера  -  это  число  логических  элементов,
        отображаемых GDI на  определенное  число  пикселей  (это  число
        зависит  от  текущего  режима  отображения, если перо выбрано в
        контексте устройства). Цвет пера - это цветовое значение RGB.
             На  рисунке  2.3  представлен  ряд  шаблонов пера, которые
        могут быть  получены  при  помощи  функции  CreatePen.  Простая
        прикладная программа в среде Windows создает следующий рисунок:


             Сплошное                      Толщина линии 1
             ───────────                  ────────────────

             Пунктирное                   Толщина линии 4
             ___________

             Точечное                     Толщина линии 7
             ............

             Штрих-пунктирное             Толщина линии 10
             _._._._._._._

             Штртх-пунктирное с двумя     Толщина линии 13
             точками
             _.._.._.._.._

             Рисунок 2.3 Шаблоны пера


       Windows 3.0/Ref/1#7                                       = 98 =

                                        2.2.2 Цвет                             

             Многие  функции  GDI,  которые  создают  перья  и   кисти,
        требуют,  чтобы вызывающая прикладная программа определила цвет
        в виде значения COLORREF. Значение COLORREF задает  цвет  одним
        из трех способов:

             Как точное значение RGB
             Как индекс в таблице логических палитр
             Как значение RGB относительно палитры
             Второй  и  третий  способ  требуют от прикладной программы
        создание логической  палитры.  Раздел  2.3,  "Функции  цветовой
        палитры",  описывает  цветовые  палитры  Windows   и   функции,
        используемые    прикладной   программой   для   разработки   их
        возможностей.
             Точное  значение  COLORREF  RGB представляет собой длинное
        целое, которое содержит красное, зеленое и синее цветовые поля.
        Первый  (младший)  байт  содержит  красное  поле,  второй  байт
        содержит  зеленое  поле  и  третий  байт содержит голубое поле;
        четвертый (старший  байт)  должен  быть  нулевым.  Каждое  поле
        определяет  интенсивность  цвета: нуль соответствует наименьшей
        интенсивности,  а  255   -   наибольшей.   Например,   значение
        0x00FF0000  специфицирует  чистый  голубой цвет, а 0x0000FF00 -
        чистый зеленый.  Макро  RGB  принимает  значения  относительной
        интенсивности  трех  цветов и возвращает значение RGB COLORREF.
        Когда GDI получает значение RGB в качестве  параметра  функции,
        то передает это значение RGB непосредственно драйверу утройства
        вывода,  который  выбирает наиболее подходящий цвет устройства.
        Функция   GetNearestColor   возвращает   наиболее    подходящий
        логический   цвет  для  специфицированного  логического  цвета,
        которое данное устройство может представить.
             Если в  качестве  устройства  выступает  плоттер,  драйвер
        преобразует  значение  RGB  в  тот  цвет, который соответствует
        одному из перьев устройства.

       Windows 3.0/Ref/1#7                                       = 99 =

             Если устройство использует технологию цветного  растра,  а
        значение  RGB  определяет  цвет  пера,  драйвер  будет выбирать
        сплошной цвет. Если устройство использует  технологию  цветного
        растра,  а  значение  RGB  определяет цвет кисти, драйвер будет
        выбирать  из  ряда  доступных  цветовых  комбинаций.  Так   как
        большинство  цветных  растровых  устройств  могут отображать на
        экране только небольшое количество цветов, реальный цвет  может
        эмулироваться  "возбуждениеим",  т.е.  перемешиванием  пикселей
        цветов,    которые    дисплей    может     воспроизводить     в
        действительности.
             Если устройство - монохромное (черно-белое), драйвер будет
        выбирать  цвета  черный, белый или ту или иную степень серого в
        зависимости от значения RGB.  Если  сумма  значений  RGB  равна
        нулю,  драйвер  выбирает  черную кисть. Если сумма значений RGB
        равна 765, драйвер выбирает белую кисть.  Если  сумма  значений
        RGB  находится  между  нулем  и  765,  драйвер выбирает один из
        доступных серых шаблонов.
             Функции GetRValue, GetGValue и GetBValue выбирают значения
        красного, зеленого и голубого из точного значения RGB COLORREF.



       Windows 3.0/Ref/1#7                                      = 100 =

                               2.3 Функции цветовой палитры                    
       ----------------------------------------------------------------

             Многие  цветные  графические дисплеи способны индицировать
        широкий  спектр  цветов.   В   большинстве   случаев,   однако,
        действительное    число    цветов,    которое   дисплей   может
        воспроизвести  в  данный  момент   времени,   намного   меньше.
        Например,  дисплей, который потенциально способен воспроизвести
        около 262,000 различных цветов, может индицировать  только  256
        цветов из этого количества одновременно, что зависит от свойств
        аппаратуры.  В  этом  случае  устройство  индицирования   часто
        поддерживает   цветовую  палитру;  когда  прикладной  программе
        требуется  цвет,  который  в  настоящее  время  не   отображен,
        устройство  индицирования  добавляет  требуемый цвет в палитру.
        Однако,   когда   количество   требуемых    цветов    превышает
        максимальное допустимое число для устройства, необходима замена
        существующего цвета на требуемый цвет. В результате, если общее
        количество   цветов,  требуемое  для  одного  или  более  окон,
        превышает  допустимое  для  устройства  количество,   множество
        реальных индицированных цветов будут некорректными.
             Цветовые   палитры   Windows  действуют  как  буфер  между
        прикладными  программами,  использующими   большое   количество
        цветов,  и системой, позволяя прикладной программе использовать
        столько  цветов,  сколько   ей   необходимо,   не   вступая   в
        противоречие  со  своим  собственным  индицированым  цветом или
        цветом, индицированным  другими  окнами.  Когда  окно  получило
        фокусировку    ввода,    Windows    обеспечивает    возможность
        индицирования  всех   цветов,   требуемых   окну,   вплоть   до
        максимального  числа,  одновременно  доступного  на  устройстве
        индицирования,  и  отображает  дополнительные  цвета,  подбирая
        наиболее подходящий среди доступных цветов. Кроме того, Windows
        как  можно  точнее подбирает цвета, требуемые неактивным окнам,
        из доступных цветов. Это  значительно  сокращает  нежелательное
        изменение цветов, индицируемых в неактивном окне.
             Нижеприведенный    список    кратко   описывает   функции,
        вызываемые прикладной  программой  для  использования  цветовой
        палитры:


       Windows 3.0/Ref/1#7                                      = 101 =


            Функция                                Описание
        ---------------------------------------------------------------
         AnimatePallete             Заменяет элементы в логической па-
                                    литре; Windows немедленно вставляет
                                    новые элементы в системную палитру.

         CreatePallete              Создает логическую палитру.

         GetNearestPalleteIndex     Возвращает индекс элемента логичес-
                                    кой палитры, наиболее близко подхо-
                                    дящего к специфицированному значению
                                    RGB.

         GetPalleteEntries          Возвращает элементы логической пали-
                                    тры.

         GetSystemPalleteEntries    Возвращает ряд элементов из систем-
                                    ной палитры.

         GetSystemPalleteUse        Определяет, имеет ли прикладная прог-
                                    рамма доступ ко всей системной палит-
                                    ре.

         RealisePallete             Помещает элементы логической палитры
                                    в системную палитру.

         SelectPallete              Выбирает логическую палитру из кон-
                                    текста устройства.

         SetPalleteEntries          Устанавливает новые элементы в логи-
                                    ческой палитре; Windows не помещает
                                    эти новые элементы в системную пали-
                                    тру до тех пор, пока прикладная
                                    программа не реализует логическую
                                    палитру.

         SetSystemPalleteUse        Позволяет прикладной программе ис-
                                    пользовать всю системную палитру.

         UpdateColors               Выполняет попиксельное преобразова-
                                    ние текущего цвета каждого пикселя
                                    для системной палитры. Это позволяет
                                    неактивному окну скорректировать
                                    свои цвета без перерисовки области
                                    пользователя.
                            2.3.1 Как работает цветовая палитра                

             Цветовые  палитры  обеспечивают  независимый от устройства
        способ    использования    цветовых   возможностей   устройства
        индицирования  при  помощи  управления  физической  (системной)
        палитрой устройства,  если  она  доступна.  Обычно  устройства,

       Windows 3.0/Ref/1#7                                      = 102 =

        которые   могут   индицировать  по  крайней  мере  256  цветов,
        используют физическую палитру.
             Прикладная программа применяет системную палитру, создавая
        и  используя  одну  или  несколько  логических  палитр.  Каждый
        элемент  палитры  содержит  определенный  цвет.  В  этом случае
        вместо того, чтобы специфицировать точное  значение  цвета  при
        выполнении графических операций, прикладная программа указывает
        индицируемый цвет при помощи индекса в логической палитре.
             Т.к.  использовать  логическую  палитру  могут   несколько
        прикладных  программ (не обязательно одна), то может возникнуть
        ситуация,  при  которой  общее  число  цветов,  требуемых   для
        отображения   на   экране,   превысит   возможности  устройства
        индикации. В этом случае Windows действует как посредник  между
        этими прикладными программами.
             Когда  окно  требует,  чтобы  все  необходимые  цвета были
        представлены в  его  логической  палитре  (процесс,  называемый
        реализацией палитры), Windows сначала точно сравнивает элементы
        логической палитры с текущими элементами системной палитры.
             Если  точного  соответствия  данному  элементу  логической
        палитры не существует, Windows устанавливает элемент логической
        палитры в неиспользуемый элемент системной палитры.
             Наконец,  когда  использованы  все  элементы  в  системной
        палитре, Windows берет  те  элементы  логической  палитры,  для
        которых  не нашлось точного соответствия, и находит им наиболее
        близкое соответствие среди  элементов  системной  палитры.  Для
        дальнейшей помощи в этой подборке цветов Windows "откладывает в
        сторону" в системной палитре 20 статических цветов  (называемых
        "палитрой  по  умолчанию"),  с  помощью  которых  система может
        подбирать элементы в палитре фона.
             Windows в первую очередь всегда  удовлетворяет  требования
        верхнего   окна;  это  обеспечивает  активному  окну  наилучшие
        возможности  индицирования  цвета. Что касается остальных окон,
        то  Windows  удовлетворяет  цветовые  требования  окна, которое
        последним  получило фокусировку ввода, затем окна, которое было
        активным перед ним и т.д.

             Рисунок  2.4  Алгоритм  подбора  цветов системы управления
                           палитрой

             1. Системная палитра
             2. Логическая палитра 1
                (Активное окно)
             3. Логическая палитра 2

             Рисунок 2.4. иллюстрирует этот процесс.  На  этом  рисунке
        некий   гипотетический   дисплей   имеет   системную   палитру,
        содержащую 12 цветов.  Прикладная  программа,  которая  создала
        Логическую  Палитру  1,  обладает активным окном и первой будет
        реализовывать  свою  логическую  палитру,  которая  содержит  8
        цветов.  Логическая  палитра  2  является  собственностью окна,
        которое реализовало свою логическую палитру в то  время,  когда
        оно было неактивным.
             Поскольку  активное окно было активным во время реализации

       Windows 3.0/Ref/1#7                                      = 103 =

        своей палитры, Windows прямо отображает все цвета из Логической
        Палитры 1 на системную палитру.
             Три  цвета  (1,  3  и  5) в Логической Палитре 2 идентичны
        цветам системной палитры; для того,  чтобы  сохранить  место  в
        палитре,  Windows   просто  заменяет  эти  цвета  существующими
        системными цветами, когда вторая прикладная программа реализует
        свою палитру. Однако, цветов 0, 2, 4 и 6 еще не существовало  в
        системной палитре, и Windows отобразило их в системную палитру.
             Т.к.  системная  палитра  теперь  полна,  Windows не может
        отобразить оставшиеся два цвета (которым нет точных аналогов  в
        системной  палитре)  в  системную  палитру.  Вместо  этого  она
        заменяет их наиболее близкими цветами из системной палитры.
                           2.3.2 Использование цветовой палитры                

             Прежде,   чем   рисовать   на   устройстве   индикации   с
        использованием цветовой палитры,  прикладная  программа  должна
        сначала    создать    логическую    палитру,   вызвав   функцию
        CreatePalette, а затем вызвать функцию SelectPalette для вабора
        палитры для контекста устройства (DC) вывода,  на  котором  она
        будет  использоваться.  Прикладная  программа не может выбирать
        палитру  внутри   контекста   устройства,   используя   функцию
        SelectObject.
             Все   прикладные  программы,  которые  принимают  параметр
        цвета,   принимают   индекс   элемента   логической    палитры.
        Спецификатор  индекса  палитры  -  это  длинное целое значение,
        в котором первый бит старшего байта установлен в  1,  а  индекс
        палитры  находится  в  двух  младших байтах. Например, значение
        0x01000005 будет специфицировать элемент палитры с индексом  5.
        Макрокоманда    PALETTEINDEX    принимает    целое    значение,
        представляющее  собой  индекс  элемента  логической  палитры  и
        возвращает   значение   индекса   палитры   COLORREF,   которое
        прикладная программа может использовать  в  качестве  параметра
        для функции GDI, которой необходим цвет.
             Прикладная  программа  может  также специфицировать индекс
        палитры  непосредственно,  используя   зависимое   от   палитры
        значение  RGB  COLORREF.  Если устройство индикации, на которое
        посылаются значения, поддерживает логические  палитры,  Windows
        подбирает такое зависимое от  палитры  значение  RGB  COLORREF,
        которое  точно  соответствует элементу палитры; если устройство
        индикации,  на  которое  производится  вывод,  не  поддерживает
        палитры,  то  значение  RGB  используется, как если бы оно было
        точным значением RGB COLORREF. Зависимое  от  палитры  значение
        RGB   COLORREF  идентично  точному  значению  RGB  COLORREF  за
        исключением того, что второй бит старшего байта установлен в 1.
        Например, значение 0x02FF0000 будет  специфицировать  зависимое
        от   палитры   значение  RGB  COLORREF  чисто  голубого  цвета.
        Макрокоманда  PALETTERGB  принимает  значения   для   красного,
        зеленого  и  голубого цветов, и возвращает зависимое от палитры
        значение  RGB  COLORREF,  которое  прикладная  программа  может
        использовать в качестве параметра для той функции GDI,  которая
        требует задания цвета.
             Если   прикладная  программа  специфицирует  значение  RGB

       Windows 3.0/Ref/1#7                                      = 104 =

        вместо элемента палитры, Windows  будет  использовать  наиболее
        подходящий  цвет  из  палитры по умолчанию, которая содержит 20
        статических цветов.
             Примечание.  Если  контексты  принимающего  и  передающего
        устройств  выбирают  и  реализуют  различные  палитры,  функция
        BitBlt   некорректно   перемещает  биты  растровой  карты  в/из
        контекста устройства памяти. В этом случае  необходимо  вызвать
        функцию GetDlBits с параметром wUsage, установленным в значение
        DLB_RGB_COLORS,  для получения битов передающей растровой карты
        в независимом от устройства формате.  Затем  надо  использовать
        функцию  SetDlBits для помещения полученных битов в принимающую
        растровую карту.  Это  дает  уверенность  в  том,  что  Windows
        корректно  осуществит  обмен  цветами  между  двумя контекстами
        отображения.
             Функция  BitBlt может корректно переместить биты растровой
        карты между двумя контекстами отображения экрана, даже если они
        вабрали  и  реализуют  разные   палитры.   Функция   StretchBlt
        корректно  перемещает  биты  растровой  карты между контекстами
        устройств, независимо от того, используют они  или  нет  разные
        палитры.



       Windows 3.0/Ref/1#7                                      = 105 =

                             2.4. Функции атрибутов рисования                  
       ----------------------------------------------------------------

             Функции  атрибутов  рисования  воздействуют на внешний вид
        выводимой Windows информации, которая может быть представлена в
        четырех  формах:  линия,  кисть,  растровая  карта   и   текст.
        Нижеприведенный   список  описывает  каждую  функцию  атрибутов
        рисования:

            Функция                                Описание
        ---------------------------------------------------------------
         GetBkColor                Возвращает текущий цвет фона.

         GetBkMode                 Возвращает текущий режим фона.

         GetPolyFillMode           Получает текущий режим заливки
                                   многоугольника.

         GetROP2                   Получает текущий режим рисования.

         GetStretchBltMode         Получает текущий режим растяжения/
                                   сжатия.

         GetTextColor              Получает текущий цвет текста.

         SetBkColor                Устанавливает цвет фона.

         SetBkMode                 Устанавливает режим фона.

         SetPolyFillMode           Устанавливает режим заливки
                                   многоугольника.

         SetROP2                   Устанавливает текущий режим
                                   рисования.

         SetStretchBltMode         Устанавливает режим растяжения/
                                   сжатия.

         SetTextColor              Устанавливает текущий цвет текста.
                                                                               
            2.4.1 Режим и цвет фона

             Выводимая  линия  может  быть  сплошной  или   прерывистой
        (пунктирной, точечной или их комбинацией). Если она прерывиста,
        то разрывы  могут  быть  заполнены  установкой  режима  фона  в
        значение  OPAQUE  и выборкой цвета. При установке режима фона в
        TRANSPARENT разрывы остаются в  первоначальном  состоянии.  Эту
        задачу выполняют функции SetBkMode и SetBkColor.
             Информация,  выводимая  при  помощи  кисти,  может   иметь
        сплошной  цвет,  шаблон  (текстуру) или штриховку. Пространство
        между штрихами может быть заполнено установкой  режима  фона  в
        OPAQUE  и выборкой цвета. Когда среда Windows создает на экране
        выводимую кистью информацию, она объединяет  существующий  цвет

       Windows 3.0/Ref/1#7                                      = 106 =

        экрана  с цветом кисти и получает новый окончательный цвет; это
        побитовая    растровая    операция.    Если    не    существует
        соответствующей  растровой  операции  по  умолчанию, выбирается
        новая с помощью функции SetROP2.
                                                                               
            2.4.2 Режим растяжения/сжатия

             Если прикладная  программа  копирует  растровую  карту  на
        устройство,  и  необходимо  сжать или расширить растровую карту
        перед рисованием, действия функций StretchBlt  и  StretchDlBits
        могут управляться посредством вызова функции SetStretchBltMode,
        котрая   устанавливает   текущий  режим  растяжения/сжатия  для
        контекста устройства. Режим растяжения/сжатия  определяет,  как
        сочетаются линии, исключенные из растровой карты.
                                                                               
            2.4.3 Цвет текста

             Внешний  вид  текста  при  выводе  ограничен только числом
        доступных шрифтов и цветовыми возможностями устройства  вывода.
        Функция    SetBkColor    устанавливает    цвет    фона   текста
        (неиспользуемая    часть   каждого   знакоместа),   а   функция
        SetTextColor устанавливает цвет самого символа.



       Windows 3.0/Ref/1#7                                      = 107 =

                                  2.5 Функции отображения                      
       ----------------------------------------------------------------

             Функции  отображения  служат  для  изменения  и  получения
        информации   о   режимах   отображения  GDI.  Для  того,  чтобы
        обеспечить независимость от устройства, GDI формирует выводимую
        информацию в логическом пространстве и отображает его на экран.
        Режим  отображения  определяет  взаимосвязь  между   элементами
        логического     пространства     и     пикселями    устройства.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        отображения:

            Функция                                Описание
        ---------------------------------------------------------------
         GetMapMode                 Получает текущий режим отображения.

         GetViwportExt              Получает размеры области просмотра
                                    контекста устройства.

         GetViwportOrg              Получает начальное положение области
                                    просмотра контекста устройства.

         GetWindowExt               Получает размеры окна контекста
                                    устройства.

         GetWindowOrg               Получает начальное положение окна
                                    контекста устройства.

         OffsetViewportOrg          Модифицирует начальное положение
                                    области просмотра.

         OffsetWindowOrg            Модифицирует начальное положение
                                    окна.

         ScaleViwportExt            Модифицирует размеры области прос-
                                    мотра.

         ScaleWindowExt             Модифицирует размеры окна.

         SetMapMode                 Устанавливает режим отображения
                                    специфицированного контекста уст-
                                    ройства.

         SetViewportExt             Устанавливает размеры области прос-
                                    мотра контекста устройства.

         SetViewportOrg             Устанавливает начальное положение
                                    области просмотра контекста уст-
                                    ройства.

         SetWindowExt               Устанавливает размеры окна контекс-
                                    та устройства.


       Windows 3.0/Ref/1#7                                      = 108 =

         SetWindowOrg               Устанавливает начальное положение
                                    окна контекста устройства.

             Существует    восемь    различных   режимов   отображения:
        MM_ANISOTROPIC,   MM_HIENGLISH,   MM_HIMETRIC,    MM_ISOTROPIC,
        MM_LOENGLISH,  MM_LOMETRIC,  MM_TEXT  и  MM_TWIPS. Каждый режим
        используется в прикладных программах Windows для разных  целей.
        Таблица 2.2 описывает эти восемь режимов отображения GDI:

        Таблица 2.2             Режимы отображения GDI
        ---------------------------------------------------------------
           Режим отображения                  Назначение
        ---------------------------------------------------------------
         MM_ANISOTROPIC            Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в произвольную физическую
                                   единицу. Оси x и y имеют
                                   произвольный масштаб.

         MM_HIENGLISH              Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в 0.001 дюйма. Положительное
                                   направление оси y - вверх.

         MM_HIMETRIC               Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в 0.01 дюйма. Положительное
                                   направление оси y - вверх.

         MM_ISOTROPIC              Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в произвольную физическую
                                   единицу. Одна единица по оси x всегда
                                   равна одной единице по оси y.

         MM_LOENGLISH              Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в 0.01 дюйма. Положительное
                                   направление оси y - вверх.

         MM_LOMETRIC               Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в 0.1 миллиметра. Положительное
                                   напрвление оси y - вверх.

         MM_TEXT                   Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в один пиксель. Положительное
                                   направление оси y - вниз.

         MM_TWIPS                  Используется в прикладных программах,
                                   которые отображают одну логическую
                                   единицу в 1/1440 дюйма (1/20 точки

       Windows 3.0/Ref/1#7                                      = 109 =

                                   принтера). Положительное направление
                                   оси y - вверх.
                           2.5.1 Ограниченные режимы отображения               

             GDI   классифицирует   шесть   режимов   отображения   как
        ограниченные  режимы  отображения:  MM_HIENGLISH,  MM_HIMETRIC,
        MM_LOENGLISH, MM_LOMETRIC, MM_TEXT и MM_TWIPS. В каждом из этих
        режимов   одна   логическая   единица  отображается  в  заранее
        определенную  физическую  единицу.  Например,   режим   MM_TEXT
        отображает одну логическую единицу в один пиксель устройства, а
        режим  MM_LOENGLISH  отображает  одну логическую единицу в 0.01
        дюйма  на   устройстве.   Эти   режимы   отображения   являются
        ограниченными,   поскольку  масштаб  фиксирован,  и  прикладная
        программа не может изменить число  логических  единиц,  которые
        Windows отображает в физические единицы. Таблица 2.3 показывает
        чмсло  логических   единиц,   которое   в   различных   режимах
        отображается в определенную физическую единицу:

        Таблица 2.3     Таблица логического/физического преобразования
        --------------------------------------------------------------
         Режим отображения     Логические         Физическая
                                единицы             единица
        --------------------------------------------------------------
         MM_HIENGLISH             1000            1 дюйм
         MM_HIMETRIC               100            1 миллиметр
         MM_LOENGLISH              100            1 дюйм
         MM_LOMETRIC                10            1 миллиметр
         MM_TEXT                    10            пиксель устройства
         MM_TWIPS                 1440            1 дюйм

           2.5.2 Частично ограниченные и неограниченные режимы отображения     

             Неограниченные   режимы   отображения    MM_ISOTROPIC    и
        MM_ANISOTROPIC   используют   две   прямоугольные  области  для
        установки масштаба и ориентации: окно и область просмотра. Окно
        располагается в пространстве логических  координат,  а  область
        просмотра  -  в  пространстве  физических  координат. Обе имеют
        начало координат  и  протяженность  по  осям  х  и  у.  Началом
        координат   может   быть   один   из   четырех  углов  области.
        Протяженность по оси х  -  это  расстояние  по  горизонтали  от
        начала координат до противоположного угла. Протяженность по оси
        у  -  это  расстояние  по  вертикали  от  начала  координат  до
        противоположного угла. Windows создает масштаб по  горизонтали,
        разделив   протяженность   по   оси   х  области  просмотра  на
        протяженность по оси х окна, и создает  масштаб  по  вертикали,
        разделив   протяженность   по   оси   y  области  просмотра  на
        протяженность по оси y  окна.  Эти  масштабы  определяют  число
        логических   единиц,   которые   Windows  отображает  на  число
        пикселей. Кроме определения масштаба окно и  область  просмотра
        определяют ориентацию объекта. Windows всегда отображает начало
        координат   окна   на   начало   коодинат   области  просмотра,

       Windows 3.0/Ref/1#7                                      = 110 =

        протяженность по оси х окна на протяженность по оси  х  области
        просмотра и протяженность по оси y окна на протяженность по оси
        у области просмотра.

             Частично ограниченные режимы отображения

             Прикладная программа создает вывод с равным  масштабом  по
        осям,  используя  режим отображения MM_ISOTROPIC. Это означает,
        что Windows будет отображать  симметричные  объекты  (например,
        квадрат  или  круг)  в  логическом  пространстве в симметричные
        объекты   в   физическом   пространстве.   Для   того,    чтобы
        удовлетворить  требованиям симметрии, GDI сжимает протяженность
        по одной из осей области просмотра. Степень сжатия  зависит  от
        затребованной  протяженности  и коэффициента сжатия устройства.
        Такой  режим  отображения  называется  частично   ограниченным,
        поскольку  прикладная программа не имеет полного управления над
        изменением масштаба.

             Неограниченный режим отображения

             Прикладная программа может полностью изменить  масштаб  по
        горизонтали   и   вертикали,   использовав   режим  отображения
        MM_ANISOTROPIC  и  установив  протяженности  окна   и   области
        просмотра   в   любое   значение   после  выбора  этого  режима
        отображения. При этом режиме Windows не может изменять  масштаб
        одновременно по обеим осям.
                              2.5.3 Уравнения преобразования                   

             GDI  использует  следующие  уравнения  для  преобразования
        логических  единиц  в  единицы устройства и единиц устройства в
        логические единицы:

             Преобразование логических единиц в единицы устройства:

             Dx=(Lx-xWO)*xVE/xWE+xVO
             Dy=(Ly-yWO)*yVE/yWE+yVO

             Преобразование  физических единиц в логические единицы:

             Lx=(Dx-xVO)*xWE/xVE+xWO
             Ly=(Dy-yVO)*yWE/yVE+yWO

             Ниже описываются переменные,  используемые  в  приведенных
        уравнениях преобразования:

             Переменная                        Описание
        ---------------------------------------------------------------
             xWO                Значение по оси х начала координат окна

             yWO                Значение по оси у начала координат окна

             xWE                Значение по оси х протяженности окна

       Windows 3.0/Ref/1#7                                      = 111 =


             yWE                Значение по оси у протяженности окна

             xVO                Значение по оси х начала координат
                                области просмотра

             yVO                Значение по оси у начала координат
                                области  просмотра

             xVE                Значение по оси х протяженности области
                                просмотра

             yVE                Значение по оси у протяженности области
                                просмотра

             Lx                 Координата по оси х в системе логических
                                координат

             Ly                 Координата по оси у в системе логических
                                координат

             Dx                 Координата х устройства

             Dy                 Координата у устройства

             Приведенные  ниже четыре отношения являются коэффициентами
        масштабирования:

             xVE/xWE
             yVE/yWE
             xWE/xVE
             yWE/yVE

             Они  используются для определения необходимости растяжения
        или сжатия логических элементов. Смещение начального  положения
        окна  и  области просмотра в ту или другую сторону производится
        соответствующим смещением компонент уравнения.
                                   2.5.4 Пример: MM_TEXT                       

             Режим отображения по умолчанию - MM_TEXT.  В  этом  режиме
        отображения один логический элемент отображается в один пиксель
        устройства или экрана.
             Простая прикладная программа в среде Windows  создает  три
        прямоугольника,  которые представлены в логическом и физическом
        пространстве при режиме отображения MM_TEXT, как  это  показано
        на   рисунке   2.5.   Рисунок   слева  иллюстрирует  логическое
        пространство;   рисунок   справа   иллюстрирует    пространство
        устройства,   или  физическое  пространство.  Прямоугольники  в
        физической системе координат вытянуты по  вертикали,  поскольку
        пиксели  для  выбранного дисплея имеют большую протяженность по
        вертикали. Прямоугольники  отображаются  перевернутыми  ("вверх
        ногами"),  поскольку  положительное  направление  по  оси  у  в

       Windows 3.0/Ref/1#7                                      = 112 =

        физической системе координат - вниз.

             Рисунок 2.5 Отображение с использованием режима MM_TEXT

             Логическая система координат
             Физическая система координат
             Ось y
             Начальное положение
             Ось x
             Начальное положение
             Ось x
             Ось y
                                2.5.5 Пример: MM_LOENGLISH                     

             Прикладная  программа  в   среде   Windows   создала   три
        прямоугольника  и  отобразила  их из логического пространства в
        физическое   пространство,    используя    режим    отображения
        MM_LOENGLISH,  как  это  показано на рисунке 2.6. Рисунок слева
        показывает, как прямоугольники располагаются относительно  осей
        x   и   y   в  логической  системе  координат.  Рисунок  справа
        показывает, как прямоугольники располагаются относительно  осей
        x и y в физической системе координат.

             Рисунок 2.6 Отображение   с   использованием   режима
                         MM_LOENGLISH

             Логическая система координат
             Физическая система координат
             Ось y
             Ось y
             Начальное положение
             Начальное положение
             Ось x
             Ось x



       Windows 3.0/Ref/1#7                                      = 113 =

                                   2.6 Функции координат                       
       ----------------------------------------------------------------

             Функции  координат  переводят  координаты  пользователя  в
        координаты  экрана  (или  наоборот) и определяют местоположение
        специфицированной  точки.  Эти  функции  полезны  в  прикладных
        программах,  интенсивно  использующих  графику. Нижеприведенный
        список кратко описывает каждую функцию координат:

            Функция                                Описание
        ---------------------------------------------------------------
         ChildWindowFromPoint       Определяет, какое дочернее окно
                                    содержит специфицированную точку.

         ClientToScreen             Переводит координаты пользователя в
                                    координаты экрана.

         DPtoLP                     Переводит единицы устройства (отно-
                                    сительно начального положения окна)
                                    в логические единицы.

         LPtoDP                     Переводит логические единицы в еди-
                                    ницы устройства.

         ScreenToClient             Переводит координаты экрана в коор-
                                    динаты пользователя.

         WindowFromPoint            Определяет, какое окно содержит
                                    специфицированную точку.




       Windows 3.0/Ref/1#7                                      = 114 =

                                    2.7 Функции области                        
       ----------------------------------------------------------------

             Функции области создают, изменяют и получают информацию об
        области. Область - это  овальное  или  многоугольное  замкнутое
        пространство   внутри  окна,  в  которое  может  осуществляться
        графический вывод. Прикладная программа использует эти  функции
        в   сочетании  с  функциями  отсечения  для  создания  областей
        отсечения. Для получения более подробной информации о  функциях
        отсечения    смотрите    раздел    2.8   "Функции   отсечения".
        Нижеприведенный список кратко описывает каждую функцию области:

            Функция                                Описание
        ---------------------------------------------------------------
         CombineRgn                Объединяет две существующие области
                                   в одну новую область.

         CreateEllipticRgn         Создает эллиптическую область.

         CreateEllipticRgnInderect Создает эллиптическую область.

         CreatePolygonRgn          Создает многоугольную область.

         CreatePolyPolygonRgn      Создает область, состоящую из неско-
                                   льких замкнутых многоугольников,
                                   которые заполняются так, как если бы
                                   они были одним многоугольником.

         CreateRectRgn             Создает прямоугольную область.

         CreateRectRgnInderect     Создает прямоугольную область.

         CreateRoundRectRgn        Создает скругленную прямоугольную
                                   область.

         EqualRgn                  Определяет, идентичны ли две области.

         FillRgn                   Заливает данную область, используя
                                   шаблон кисти.

         FrameRgn                  Рисует окантовку для данной области.

         GetRgnBox                 Получает координаты прямоугольника,
                                   ограничивающего область.

         InvertRgn                 Инвертирует цвета в области.

         OffsetRgn                 Перемещает данную область.

         PaintRgn                  Заливает область выбранным шаблоном
                                   кисти.


       Windows 3.0/Ref/1#7                                      = 115 =

         PtInRgn                   Определяет, находится ли точка внутри
                                   области.

         RectInRgn                 Определяет, принадлежит ли какая-либо
                                   часть прямоугольника области.

         SetRectRgn                Создает прямоугольную область.



       Windows 3.0/Ref/1#7                                      = 116 =

                                   2.8 Функции отсечения                       
       ----------------------------------------------------------------

             Функции отсечения создают, проверяют  и  изменяют  области
        отсечения.  Область  отсечения - это часть области пользователя
        окна, где создает свой вывод GDI;  любая  выводимая  информация
        посылаетяс  в  эту  часть области пользователя; если информация
        находится  за  пределами  области  отсечения,  то   она   будет
        невидима. Области отсечения полезны в тех прикладных программах
        в  среде  Windows,  которые  нуждаются в сохранении одной части
        области пользователя и одновременно посылают  вывод  в  другую.
        Нижеприведенный  список кратко описывает каждую функцию области
        отсечения:

            Функция                                Описание
        ---------------------------------------------------------------
         ExcludeClipRect         Исключает прямоугольник из области
                                 отсечения.

         GetClipBox              Копирует размеры ограничивающего прямо-
                                 угольника.

         IntersectClipRect       Формирует пересечение области отсечения
                                 и прямоугольника.

         OffsetClipRgn           Перемещает область отсечения.

         PtVisible               Определяет, лежит ли точка в области.

         RectVisible             Определяет, лежит ли часть прямоуголь-
                                 ника в области.

         SelectClipRgn           Выбирает область отсечения.



       Windows 3.0/Ref/1#7                                      = 117 =

                                2.9 Функции рисования линий                    
       ----------------------------------------------------------------

             Функции  рисования линий служат для вывода различных типов
        линий выбранным пером. Нижеприведенный список кратко  описывает
        каждую функцию рисования линий:

            Функция                                Описание
        ---------------------------------------------------------------
         Arc                    Рисует дугу.

         LineDDA                Вычисляет последующие точки на линии.

         LineTo                 Рисует линию выбранным пером.

         MoveTo                 Изменяет текущую позицию специфицирован-
                                ной точки.

         Polyline               Рисует множество сегментов линии.

             На  рисунке 2.7 показана дуга, созданная с помощью функции
        Arc. Верхняя часть  рисунка  показывает  дугу  в  том  виде,  в
        котором  она  будет  появляться на экране; нижняя часть рисунка
        представляет дугу с ограничивающим ее прямоугольником,  который
        GDI использует для определения размеров и формы дуги.

         Рисунок 2.7 Дуга и ее ограничивающий прямоугольник
                                                                               
            2.9.1 Координаты функции

             Функции рисования линий требуют  координаты  в  логических
        единицах,   которые   GDI  использует  для  рисования  линии  в
        логическом  пространстве.   Использование   логических   единиц
        обеспечивает   независимость   от   устройств  в  Windows.  GDI
        отображает эти линии из логического пространства  в  физическое
        пространство,   используемое   устройством.   Число  логических
        единиц, которые GDI отображает в пиксель, зависит  от  текущего
        режима  отображения.  Когда  GDI  рисует  линию,  он  исключает
        последнюю  специфицированную  точку.  Например,  если   функция
        LineTo  задана  аргументами  (Х1,  У1)  и (Х2, У2), линия будет
        рисоваться от точки (Х1, У1) до точки (Х2-1, У2-1).
                              2.9.2 Типы, цвета и ширина пера                  

             Если  прикладная программа рисует линии и не создает новое
        перо, GDI использует перо по умолчанию. Это  перо  -  черное  и
        имеет  ширину в один пиксель, если режим отображения - MM_TEXT.
        Прикладная программа может создать новое перо различной ширины,
        типа и цвета, используя функцию CreatePen. Новый  цвет  зависит
        от  цветовых  возможностей  устройства  вывода. Тип линии может
        быть сплошным, точечным, пунктирным или  штрих-пунктирным.  Как
        только  прикладная  программа  создала  новое  перо,  она может
        выбирать  его  в  контексте  отображения  с   помощью   функции

       Windows 3.0/Ref/1#7                                      = 118 =

        SelectObject.
             На  рисунке  2.8  представлен простой вывод линий, который
        создан с помощью функций LineTo и MoveTo. Прикладная  программа
        создала прямоугольник слева с помощью штрих-пунктирного пера, а
        прямоугольник справа - с помощью сплошного.

             Рисунок 2.8 Прямоугольники,   созданные   с   помощью
                         штрих-пунктирного и сплошного перьев

             Штрих-пунктирное перо
             Сплошное перо



       Windows 3.0/Ref/1#7                                      = 119 =

                           2.10 Функции эллипса и многоугольника               
       ----------------------------------------------------------------

             Функции  эллипса  и  многоугольника   рисуют   эллипсы   и
        многоугольники.  GDI  рисует периметр каждого объекта выбранным
        пером и  заливает  внутреннюю  область  выбранной  кистью.  Эти
        функции  полезны, в частности, в прикладных программах, которые
        рисуют и чертят. Нижеприведенный список кратко описывает каждую
        функцию эллипса и многоугольника:

            Функция                                Описание
        ---------------------------------------------------------------
         Chord                   Рисует хорду.

         DrawFocusRect           Рисует прямоугольник такого типа, кото-
                                 рый используется для индикации фокуса.

         Ellipse                 Рисует эллипс.

         Pie                     Рисует сектор.

         Polygon                 Рисует многоугольник.

         PolyPolygon             Рисует множество замкнутых многоуголь-
                                 ников, которые заливаются так, как если
                                 бы они были одним многоугольником.

         Rectangle               Рисует прямоугольник.

         RoundRect               Рисует скругленный прямоугольник.
                                                                               
            2.10.1 Координаты функции

             Функции эллипса  и  многоугольника  требуют  координаты  в
        логических единицах, которые  GDI  использует  для  определения
        местоположения  и  размера  объекта  в логическом пространстве.
        Использование логических единиц обеспечивает  независимость  от
        устройств  в  Windows.  GDI  использует функции отображения для
        отображения  логических  единиц  в  пиксели  устройства.  Число
        логических  единиц,  которые Windows отображает в один пиксель,
        зависит от текущего режима отображения.  Режим  отображения  по
        умолчанию,  MM_TEXT,  отображает одну логическую единицу в один
        пиксель.
             Когда  GDI  рисует  прямоугольник,  он  использует  четыре
        аргумента. Первые два элемента специфицируют верхний левый угол
        прямоугольника.  Последние  два  аргумента  на  самом  деле  не
        специфицируют  часть  прямоугольника;  они специфицируют точку,
        примыкающую к нижнему правому углу. Например, если первая точка
        специфицирована при  помощи  пары  (Х1,  У1),  а  вторая  точка
        специфицирована при помощи пары (Х2, У2), то верхний левый угол
        прямоугольника  будет  (Х1,  У1),  а  нижний  правый угол будет
        (Х2-1, У2-1).


       Windows 3.0/Ref/1#7                                      = 120 =

                                                                               
            2.10.2 Ограничивающие прямоугольники

             Вместо требования размеров радиуса или окружности  функции
        Chord,  Ellipse  и  Pie используют ограничивающий прямоугольник
        для   определения    размера    создаваемого    ими    объекта.
        Ограничивающий прямоугольник невидим, GDI использует его только
        для описания местоположения и размера объекта.
             Для  получения информации о функциях, которые изменяют или
        получают информацию о прямоугольниках,  создаваемых  в  области
        пользователя    окна,    смотрите    раздел    1.18    "Функции
        прямоугольника".



       Windows 3.0/Ref/1#7                                      = 121 =

                               2.11 Функции растровой карты                    
       ----------------------------------------------------------------

             Функции  растровой  карты  индицируют   растровую   карту.
        Растровая  карта  -  это  биты  матрицы или памяти, которые при
        выполнении копирования на устройство определяют цвет  и  шаблон
        соответствующей матрицы пикселей на поверхности экрана дисплея.
        Растровые  карты  полезны  в  прикладных  программах рисования,
        черчения и обработки текстов, поскольку они позволяют создавать
        изображения в памяти, а затем быстро копировать их на  дисплей.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        растровой карты:

            Функция                                Описание
        ---------------------------------------------------------------
         BitBlt                  Копирует растровую карту из устройства-
                                 источника в устройство-получатель.

         CreateBitmap            Создает растровую карту.

         CreateBitmapInderect    Создает растровую карту, описанную в
                                 структуре данных.

         CreateCompatibleBitmap  Создает растровую карту, которая сов-
                                 местима со специфицированным устройст-
                                 вом.

         CreateDiscardableBitmap Создает сбрасываемую растровую карту,
                                 совместимую со специфицированным
                                 устройством.

         ExtFloodFill            Заливает поверхность экрана, находящу-
                                 юся внутри или вне области, данным
                                 цветом.

         FloodFill               Заливает поверхность экрана, попавшую
                                 внутрь границы.

         GetBitmapBits           Получает из памяти биты специфициро-
                                 ванной растровой карты.

         GetBitmapDimension      Получает размер растровой карты.

         GetPixel                Получает значение RGB пикселя.

         LoadBitmap              Загружает растровую карту из файла
                                 ресурсов.

         PatBlt                  Создает шаблон битов.

         SetBitmapsBits          Устанавливает биты растровой карты.

         SetBitmapDimension      Устанавливает ширину и высоту растровой

       Windows 3.0/Ref/1#7                                      = 122 =

                                 карты.

         SetPixel                Устанавливает значение RGB пикселя.

         StretchBlt              Копирует растровую карту из устройства-
                                 источника в устройство-получатель (сжи-
                                 мая или растягивая ее при необходимос-
                                 ти).
                                                                               
            2.11.1 Растровые карты и устройства

             Отношение между битами растровой карты памяти и  пикселями
        устройства  зависит  от  устройства.  На монохромном устройстве
        соответствие, обычно,  один  на  один,  т.е.  один  бит  памяти
        соответствует одному пикселю устройства.
                 2.11.2 Независимые от устройства функции растровой карты      

             Microsoft   Windows,   версия  3.0,  предлагает  множество
        функций,  определяющих  и  манипулирующих   цветной   растровой
        картой,   которая   может   соответственно   индицироваться  на
        устройстве с заданной разрешающей способностью, не принимая  во
        внимание  способ,  которым  дисплей представляет цвет в памяти.
        Эти функции переводят независимые  от  устройства  спецификации
        растровой  карты  в  формат  устройства,  используемый  текущим
        дисплеем. Ниже приведен список этих функций:

            Функция                                Описание
        ---------------------------------------------------------------
         CreateDIBitmap           Создает специфичную   для  устройства
                                  растровую карту памяти из  специфика-
                                  ции независемой от устройства растро-
                                  вой карты (DIB) и инициализирует биты
                                  растровой карты (необязательно).  Эта
                                  функция подобна функции CreateBitmap.

         GetDIBits                Получает из памяти биты специфициро-
                                  ванной растровой карты в независемой
                                  от устройства форме.

         SetDIBits                Устанавливает биты  растровой   карты
                                  памяти  из  DIB.  Эта функция подобна
                                  функции SetBitmapsBits.

         SetDIBitsToDevice        Устанавливает биты на поверхности эк-
                                  рана непосредственно из DIB.

         StretchDIBits            Перемещает независемую  от устройства
                                  растровую карту (DIB) из  прямоуголь-
                                  ника-источника в прямоугольник назна-
                                  чения,  при необходимости  растягивая
                                  или сжимая растровую карту.


       Windows 3.0/Ref/1#7                                      = 123 =

             Спецификация  независемой  от  устройства  растровой карты
        состоит из двух частей:

             1. Структуры данных BITMAPINFO, которая определяет  формат
        растровой карты и предоставляет (необязательно) таблицу цветов,
        используемых растровой картой.

             2.   Массива  байтов,   которые  содержат  значения  битов
        растровой карты.

             Основываясь на значениях, содержащихся в структуре  данных
        с информацией о растровой карте, значения битов растровой карты
        могут   специфицировать  точные  цветовые  значения  (RGB)  или
        индексы в таблице цветов.  К  тому  же,  таблица  цветов  может
        состоять  из  индексов текущей реализованной логической палитры
        вместо точных цветовых значений RGB. Необходимо  заметить,  что
        начальное положение  системы  координат  для  DIB  находится  в
        нижнем  левом  углу,  а  не в верхнем правом, как установлено в
        Windows по умолчанию.



       Windows 3.0/Ref/1#7                                      = 124 =

                                    2.12 Функции текста                        
       ----------------------------------------------------------------

             Функции  текста  получают  текстовую  информацию, изменяют
        выравнивание текста, распределяют  текст  равномерно  до  конца
        строки  и  выводят  текст  на  устройство  или  на  поверхность
        дисплея.  GDI  использует  для  вывода  текста  текущий  шрифт.
        Нижеприведенный список кратко описывает каждую функцию текста:

            Функция                                Описание
        ---------------------------------------------------------------
         ExtTextOut               Выводит строку символов внутри прямо-
                                  угольной  области,  используя текущий
                                  шрифт.  Прямоугольная  область  может
                                  быть   непрозрачной  (залита  текущим
                                  цветом фона) или областью отсечения.

         GetTabbedTextExtent      Вычисляет ширину  и   высоту   строки
                                  текста, содержащей символы табуляции.

         GetTextAlign             Получает маску флага выравнивания
                                  текста.

         GetTextExtent            Использует текущий шрифт для вычисле-
                                  ния ширины и высоты текста.

         GetTextFace              Копирует в буфер текущее имя шрифта.

         GetTextMetrics           Заполняет буфер параметрами выбранного
                                  шрифта.

         SetTextAlign             Позиционирует строку текста на экране
                                  или на устройстве.

         SetTextJustification     Выравнивает строку текста по границам
                                  строки.

         TabbedTextOut            Выводит строку символов с реализован-
                                  ной табуляцией, используя текущий
                                  шрифт.

         TextOut                  Выводит строку символов, используя
                                  текущий шрифт.



       Windows 3.0/Ref/1#7                                      = 125 =

                                   2.13 Функции шрифтов                        
       ----------------------------------------------------------------

             Функции шрифтов служат  для  создания,  выборки,  удаления
        шрифта  или  получения  информации  о  нем.  Шрифт  - это набор
        символов  определенного  начертания.   Нижеприведенный   список
        кратко описывает каждую функцию шрифта:

            Функция                                Описание
        ---------------------------------------------------------------
         AddFontResource              Добавляет ресурс шрифта из специ-
                                      фицированного файла в системную
                                      таблицу шрифтов.

         CreateFont                   Создает логический шрифт, который
                                      имеет специфицированные характе-
                                      ристики.

         CreateFontInderect           Создает логический шрифт, который
                                      имеет специфицированные характе-
                                      ристики.

         EnumFonts                    Перечисляет шрифты, доступные на
                                      данном устройстве.

         GetCharWidth                 Получает ширину отдельного символа.

         RemoveFontResource           Удаляет ресурс шрифта из таблицы
                                      шрифтов.

         SetMappesFlags               Изменяет алгоритм шрифта, исполь-
                                      зуемый разметчиком шрифта.

             Семейство   шрифтов   -  это  группа  начертаний,  имеющая
        аналогичные характеристики штрихов и черточек. Начертание - это
        набор  символов  (букв,  цифр,  знаков  пунктуации,  символов),
        имеющих  общую  конструкцию.  Символы  шрифта  обладают  такими
        специфическими характеристивами, как размер точки и яркость.
             Заметим, что термины, которые GDI использует для  описания
        шрифтов,   начертаний   и   семейств  шрифтов,  не  обязательно
        соответствуют традиционным типографским терминам.
             Начертание Helv является  примером  начертания  семейства.
        Доступными  шрифтами  с этим начертанием являются 8-ми точечный
        жирный шрифт Helv и 10-ти точечный курсив Helv.
             На  рисунке  2.9  показаны   некоторве   шрифты,   имеющие
        начертание Helv и Courier.

             Рисунок 2.9 Шрифты двух начертаний

             Эта строка 12-ти точечного Helv.
             Эта строка 12-ти точечного жирного Helv.
             Эта строка 12-ти точечного курсива Helv.


       Windows 3.0/Ref/1#7                                      = 126 =

             Эта строка 12-ти точечного Courier.
             Эта строка 12-ти точечного жирного Courier.
             Эта строка 12-ти точечного курсива Courier.
                                 2.13.1 Семейство шрифтов                      

             GDI  группирует  шрифты  по  семействам;  каждое семейство
        обладает начертаниями и шрифтами, имеющими  общую  конструкцию.
        Семейства  отличаются   характеристиками   толщины   штриха   и
        черточки.  Термин  черточка,  обозначающий  горизонтальную  или
        вертикальную линию, пришел из обычного рукописного документа, в
        котором    буквы    составляются    из    отдельных   черточек.
        Горизонтальная   черточка   называется   поперечной.   Основная
        вертикальная  линия называется ножкой (литеры). На рисунке 2.10
        показана строчная буква f, составленная из поперечной  черточки
        и ножки с завитушкой наверху.

             Рисунок 2.10 Поперечная черточка и ножка литеры

             Поперечная черточка
             Ножка литеры

             Штрих  -  это  короткая  поперечная линия, нарисованная на
        концах  основных  черточек  буквы.  Если  начертание  не  имеет
        штрихов, то обычно оно называется бесштриховым. На рисунке 2.11
        показано использование штрихов.

             Рисунок 2.11 Штрихи

             Штрих
             Штрих
             Штрих

             GDI  использует  пять различных имен семейств, применяемых
        для распределения по категориям начертаний  и  шрифтов.  Шестое
        имя  используется  в общих случаях. Заметим, что имена семейств
        GDI не соответствуют традиционным  типографским  категориям.  В
        таблице  2.4  перечисляются  имена  семейств  шрифтов  и кратко
        описывается каждое семейство.

             Таблица 2.4 Семейства шрифтов
        ---------------------------------------------------------------
             Имя                      Описание
        ---------------------------------------------------------------
         Dontcare        Общее имя семейства. Используется, когда инфо-
                         рмации о шрифте не существует или она не имеет
                         значения.

         Decorative      Новый шрифт.

         Modern          Шрифт с одинаковой толщиной черточки
                         (fixed-pitch) с/без штрихов. Шрифты fixed-pitch
                         - это  обычно современные шрифты.

       Windows 3.0/Ref/1#7                                      = 127 =


         Roman           Шрифт переменной толщины ширины черточки
                         (пропорциональный) со штрихами.

         Script          Шрифт  рукописного  вида.

         Swiss           Шрифт переменной толщины черточки (пропорцио-
                         нальный) без штрихов.

                                     2.13.2 Знакоместо                         

             Символ - основной элемент  шрифта.  В  GDI  каждый  символ
        содержится в прямоугольной области, называемой знакоместом. Эта
        прямоугольная  область  состоит  из определенного числа строк и
        столбцов и обладает шестью основными характеристиками, в  числе
        которых: подъем, базовая линия, спуск, высота, начало отсчета и
        ширина. Нижеприведенный список описывает эти характеристики:

             Характеристика                    Описание
        ---------------------------------------------------------------
           Подъем                Определяет расстояние в строках знако-
                                 мест от базовой линии знакоместа до
                                 его верхней точки.

           Базовая линия         Служит основой, на которой располага-
                                 ются  все символы (некоторые строчные
                                 буквы имеют части, спускающиеся ниже
                                 базовой линии - например, буквы g или
                                 y).

           Спуск                 Определяет расстояние в строках знако-
                                 мест от базовой линии знакоместа до его
                                 нижней точки.

           Высота                Определяет высоту строки знакоместа.

           Начало  отсчета       Используется как указатель при выводе
                                 символа на устройство или поверхность
                                 дисплея. Начало отсчета - это верхний
                                 левый угол знакоместа.

           Ширина                Определяет ширину столбца знакоместа.

             На   рисунке   2.12  представлено  знакоместо,  содержащее
        прописную букву  А.  Базовая  линия  расположена  свеху  второй
        строки. Заметим, что прописная буква А использует базовую линию
        в  качестве  стартовой  точки.  Заметим также, что что величины
        ширины и высоты зависят от ширины и высоты знакоместа, а не  от
        ширины и высоты отдельного символа:

             Рисунок 2.12 Размеры знакоместа


       Windows 3.0/Ref/1#7                                      = 128 =

             Начало отсчета
             Подъем
             Высота
             Ширина
             Спуск
                                2.13.3 Модификации символов                    

             Символы  могут  иметь  различные  размеры  и формы. В этом
        разделе описывается, как GDI  модифицирует  символы  для  того,
        чтобы получить отдельный шрифт.

             Курсив

             При  выделении  шрифта курсивом GDI изменяет символы таким
        образом, что они кажутся наклоненными. При этом основа  символа
        остается без изменений, в то время как верхняя часть сдвигается
        вправо.  Наибольший  сдвиг имеет место в верхней части символа,
        наименьший - в районе базовой линии. На рисунке  2.13  показаны
        символы, выведенные курсивом и не курсивом:

             Рисунок 2.13 Нормальные символы и курсив

             Эти   два  примера  иллюстрируют  результат  использования
        курсива. Основа каждого символа остается неизменной, в то время
        как их верхняя часть наклоняется вправо.

             Жирный шрифт

             Шрифт   становится   жирным   при  увеличении  его  ширины
        (яркости) по отношению к стандартной ширине линий или черточек,
        из которых состоит символ. Шрифты, имеющие более толстые линии,
        называются жирными.  На  рисунке  2.14  показаны  нормальные  и
        жирные символы:

             Рисунок 2.14 Нормальные и жирные символы

             Эти два примера иллюстрируют результат  изменения  толщины
        шрифта. Увеличение толщины дает жирный шрифт.

             Подчеркивание

             Шрифт с подчеркиванием имеет  сплошную  линию  под  каждым
        символом.    При    подчеркивании   эта   линия   располагается
        непосредственно под базовой линией знакоместа. На рисунке  2.15
        показаны подчеркнутые символы:

             Рисунок 2.15 Подчеркнутые символы

             Это  шрифт  с подчеркиванием. Сплошная линия рисуется ниже
        базовой линии каждого знакоместа.


       Windows 3.0/Ref/1#7                                      = 129 =

             Зачеркивание

             Шрифт с зачеркиванием имеет сплошную горизонтальную линию,
        проходящую  через  каждый  символ.  Положение этой линии внутри
        каждой ячейки  символов  постоянно  для  заданного  шрифта.  На
        рисунке 2.16 показаны зачеркнутые символы:

             Рисунок 2.16 Зачеркнутые символы

             Эта  строка текста иллюстрирует эффект применения атрибута
        зачеркивания.
                               2.13.4 Разрывы между строками                   

             Разрыв  -  это  расстояние  между  базовыми  линиями  двух
        соседних  строк  текста. При разработке шрифтов между соседними
        строками  предусматривается  некоторое  свободное  место.   Оно
        необходимо  для  того,  чтобы  символы  в  соседних  строках не
        перекрывали  друг  друга.  Существует  два  способа  добавления
        свободного места: резервирование его внутри  знакоместа  шрифта
        (внутренний  разрыв)  и  добавление  его  между строками текста
        (внешний разрыв).

             Внутренний разрыв

             Внутренний разрыв -  это  пространство,  зарезервированное
        внутри   знакомест   отдельного  шрифта.  Внутри  пространства,
        зарезервированного для внутреннего разрыва, размещаются  только
        такие значки алфавита, как знаки ударения, умляуты и тильды. На
        рисунке  2.17  представлены  две  строки  текста,  использующие
        внутренний разрыв.

             Рисунок 2.17 Внутренний разрыв

             Верхняя граница знакоместа
             Внутренний разрыв
             Базовая линия знакоместа
             Разрыв
             Базовая линия знакоместа
             Нижняя граница знакоместа

             Внешний разрыв

             Внешний  разрыв  представляет  собой  пространство   между
        верхней и нижней границей знакомест двух соседних строк текста.
        При  разработке  шрифта  необходимо задавать внешний разрыв для
        обеспечения большего удобства чтения отдельного шрифта. Внешний
        разрыв  не  встраивается в шрифт; его необходимо добавить перед
        печатью текста  на  устройстве.  На  рисунке  2.18  представлен
        внешний разрыв.

             Рисунок 2.18 Внешний разрыв

             Внешний разрыв

       Windows 3.0/Ref/1#7                                      = 130 =

                                   2.13.5 Набор символов                       

             Все  шрифты  используют  набор  символов.  Набор  символов
        содержит знаки пунктуации, цифры, прописные и строчные буквы  и
        все  остальные  печатные  символы.  Каждому  символу  из набора
        символов присвоено некоторое численное значение.  Это  значение
        используется для доступа к элементу набора символов.
             Наиболее часто используемый набор символов в Windows - это
        расширение   набора  символов  U.S.  ANSI,  который  определяет
        символы для 92 числовых  значений  от  32  до  127.  Существует
        четыре основных группы наборов символов:

             ANSI
             OEM
             Символьный набор
             Набор, определяемый поставщиком

             Набор символов ANSI

             Набор  символов  ANSI  -  наиболее  распространенный набор
        символов. Первым символом набора символов ANSI является  символ
        пробела.  Он  имеет  шестнадцатиричное  значение  0x20, которое
        соответствует  десятичному  значению  32.  Последний  символ  в
        наборе  символов  ANSI  имеет  шестнадцатиричное значение 0xFF,
        которое соответствует десятичному значению 255.
             Многие шрифты определяют символ по умолчанию. При  запросе
        символа,  не  содержащегося  в  наборе  символов, выдается этот
        символ. В  большинстве  шрифтов,  использующих  набор  символов
        ANSI,   это   символ   точки   (.).   В  наборе  символов  ANSI
        шестнадцатиричное значение для точки - 0x2E или десятичное 46.
             Шрифты  используют  для  разделения  слов или выравнивания
        текста  некоторый  разделяющий  символ.  Большинство   шрифтов,
        использующих набор символов ANSI, специфицируют символ пробела,
        имеющий шестнадцатиричное значение 0x20 или десятичное 32.

             Набор символов OEM

             Windows  предоставляет  второй  набор символов, называемый
        набором символов OEM. Обычно это набор  символов,  используемый
        DOS  для  отображения информации на экране. Символы набора OEM,
        имеющие значения от 32 до 127, обычно идентичны соответствующим
        128 символам набора U.S. ANSI, которые также находятся в наборе
        символов ANSI. Остальные символы набора (от 0 до 31 и от 128 до
        255) соответствуют  символам,  которые  могут  отображаться  на
        экране при работе в DOS и обычно отличаются от символов ANSI.

             Символьный набор

             Символьный  набор  содержит  специальные  символы,  обычно
        используемые для отображения математических и научных формул.


       Windows 3.0/Ref/1#7                                      = 131 =

             Набор символов, определяемый поставщиком

             Большое количество принтеров  и  других  уствойств  вывода
        содержат  шрифты,  основанные на наборах символов, отличающихся
        от наборов ANSI и  OEM,  например,  таких  как  набор  символов
        EBCDIC.  В  этих  случаях  драйвер принтера должны осуществлять
        перевод в один или более наборов, поддерживаемых принтером  или
        другим устройством.
                                        2.13.6 Шаг                             

             Термин   "шаг"  традиционно  относится  к  числу  символов
        отдельного шрифта, помещающихся на  одном  дюйме.  Однако,  GDI
        использует  этот  термин в другом смысле. Термин "фиксированный
        шаг" относится к шрифту, размер знакоместа  которого  постоянен
        для  каждого  символа.  Термин  "переменный  шаг"  относится  к
        шрифту,  знакоместо  которого  может  изменяться  в  размере  в
        зависимости от фактической ширины символов.

             Средняя ширина символа

             Шрифты   с  переменным  шагом  используют  среднюю  ширину
        символа для спецификации средней ширины знакомест  шрифта.  Так
        как для шрифта с фиксированным шагом ширина знакоместа остается
        неизменной,  средняя ширина символа специфицирует ширину любого
        символа шрифта с постоянным шагом.

             Максимальная ширина символа

             Шрифты с переменным шагом используют  максимальную  ширину
        символа  для спецификации максимальной ширины любого знакоместа
        шрифта. Так  как  для  шрифта  с  фиксированным  шагом   ширина
        знакоместа  остается  неизменной,  максимальная  ширина символа
        эквивалентна средней ширине символа шрифта с постоянным шагом.

             Оцифрованные значения сжатия

             Растровые шрифты проектируются в расчете  на  определенный
        коэффициент сжатия. Коэффициент сжатия - это отношение ширины к
        высоте  пикселя устройства. GDI получает для каждого отдельного
        шрифта оптимальное х-сжатие и у-сжатие. Оптимальное х-сжатие  -
        это   значение   ширины   из  коэффициента  сжатия  устройства;
        оптимальное у-сжатие - значение высоты. Эти значения называются
        оцифрованными  значениями   сжатия   для   х   и   у.   Функция
        GetAspectRatioFilter  возвращает установку для текущего фильтра
        коэффициента сжатия. Windows имеет специальный  фильтр - фильтр
        коэффициена  сжатия - для  выбора шрифтов, спроектированных для
        определенного коэффициента сжатия, из всех  доступных  шрифтов.
        Этот  фильтр  использует  коэффициент сжатия, специфицированный
        при помощи функции SetMapperFlags.

             Выступ

             Если на устройстве нет доступного шрифта,  GDI  может  его

       Windows 3.0/Ref/1#7                                      = 132 =

        синтезировать.  При  этом может увеличиваться ширина или высота
        существующего шрифта. Каждый раз, когда GDI синтезирует  курсив
        или  жирный  шрифт  из  нормального  шрифта, к знакоместу этого
        шрифта добавляются дополнительные  столбцы.  Разница  в  ширине
        (дополнительные  столбцы)  между  строкой,  созданной с помощью
        нормального шрифта,  и  строкой  для  синтезированного  шрифта,
        называется выступом.
                            2.13.7 Выбор шрифта при помощи GDI                 

             GDI работает с набором шрифтов различных начертаний. Кроме
        этого   набора  некоторые  устройства  имеют  набор  аппаратных
        шрифтов в ROM. GDI позволяет  описать  шрифт  и  затем  выбрать
        наиболее подходящий этому описанию доступный шрифт.
             GDI  требует,  чтобы пользователь описал шрифт, который он
        хочет использовать для создания текста. Пользователь  описывает
        логический  шрифт  (он  может существовать, а может и нет). GDI
        сравнивает этот логический шрифт  с  доступными  физическими  и
        выбирает наиболее подходящий.
             Процесс  выбора  физического шрифта, имеющего максимальное
        сходство с заданным логическим шрифтом, называется отображением
        шрифта. Также в GDI существует таблица шрифтов. Каждый  элемент
        таблицы  описывает  физический  шрифт  и его атрибуты. В каждый
        элемент таблицы включен  указатель  на  соответствующий  ресурс
        шрифта.  На  рисунке  2.19  показана таблица шрифта, содержащая
        шрифты X, Y и Z:


       Windows 3.0/Ref/1#7                                      = 133 =


                                  Таблица шрифтов

        ┌─────────────────────────────────────────────────────────────┐
        │                     Информация о шрифте X                   │
        ├────────────────┬────────────────┬─────────────┬─────────────┤
        │ разрыв         │курсив          │подчеркивание│жирность     │
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ набор символов │ширина          │высота       │первый символ│
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ шаг и семейство│последний символ│     ...     │             │
        ├────────────────┴────────────────┴─────────────┴─────────────┤
        │                     Информация о шрифте Y                   │
        ├────────────────┬────────────────┬─────────────┬─────────────┤
        │ разрыв         │курсив          │подчеркивание│жирность     │
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ набор символов │ширина          │высота       │первый символ│
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ шаг и семейство│последний символ│     ...     │             │
        ├────────────────┴────────────────┴─────────────┴─────────────┤
        │                     Информация о шрифте Z                   │
        ├────────────────┬────────────────┬─────────────┬─────────────┤
        │ разрыв         │курсив          │подчеркивание│жирность     │
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ набор символов │ширина          │высота       │первый символ│
        ├────────────────┼────────────────┼─────────────┼─────────────┤
        │ шаг и семейство│последний символ│     ...     │             │
        └────────────────┴────────────────┴─────────────┴─────────────┘

        Указатель на ресурс шрифта X
        Указатель на ресурс шрифта Y
        Указатель на ресурс шрифта Z

             Рисунок 2.19 Таблица шрифтов GDI

             Схема отображения шрифта

             GDI  не  может  гарантировать,  что  существует физический
        шрифт,  который  наиболее  подходит  к  требуемому  логическому
        шрифту,  поэтому  GDI  пытается выбрать шрифт, который наименее
        отличается от требуемого логического шрифта. Т.к. шрифты  имеют
        множество  различных атрибутов, разметчик шрифтов GDI назначает
        физическим шрифтам штрафы в том случае, если их  характеристики
        не соответствуют характеристикам специфицированного логического
        шрифта.  Физический  шрифт  с  наименьшим  значением  штрафа  и
        выбирается GDI.
             Перед  тем,  как  начать  отображение,   GDI   преобразует
        требуемую   высоту   и  ширину  логического  шрифта  в  единицы
        устройства.  Это  преобразование  зависит  от  текущего  режима
        отображения  и  размеров  окна  и  области просмотра. Затем GDI
        требует от устройства реализовать физический шрифт.  Устройство
        может реализовать шрифт, если оно может создать или точно такой
        же или наиболее приближенный к нему шрифт.

       Windows 3.0/Ref/1#7                                      = 134 =

             Если устройство не может реализовать физический шрифт, GDI
        сравнивает  его  со своим собственным набором шрифтов. Если GDI
        имеет шрифт, наиболее точно подходящий логическому  шрифту,  то
        он  и используется. Но если устройство оповещает, что оно может
        работать только  со  шрифтами,  реализуемыми  устройством,  GDI
        использует реализованный шрифт.
             Если  устройство  не может реализовать шрифт, GDI выбирает
        подходящий из своих собственных.
             Для того, чтобы определить, насколько хорошо соответствует
        данный  физический   шрифт   требуемому   логическому   шрифту,
        разметчик  берет  логический  шрифт и сравнивает его атрибуты с
        атрибутами каждого физического шрифта в сисмеме.
             В  таблице  2.5  перечисляются  характеристики, на которые
        накладываются штрафы разметчиком  шрифтов  GDI.  Характеристики
        группируются в соответствии с весами штрафов, причем наибольший
        штраф налагается на характеристику Набор символов, а наименьший
        -   на   характеристики   Жирность,   Наклон,  Подчеркивание  и
        Зачеркивание.


       Windows 3.0/Ref/1#7                                      = 135 =


            Таблица 2.5  Характеристики отображения шрифта

        ----------------------------------------------------------------
         Характеристика        Схема назначения штрафа         Вес
                                                               штрафа
        ----------------------------------------------------------------
         Набор символов     Если наборы символов не сопоста-      4
                            вимы, шрифт-кандидат штрафуется
                            тяжело. Шрифты с неподходящим
                            набором символов очень редко
                            выбираются в качестве физического
                            шрифта. Не существует набора
                            символов по умолчанию. Это означает,
                            что логический шрифт должен в
                            любом случае специфицировать
                            разработанный набор.

         Шаг                Неподходящий шаг штрафуется           3
                            тяжело. Если требуется шрифт с
                            постоянным шагом, переменный шаг
                            штрафуется наиболее тяжело, т.к.
                            прикладная программа, которая
                            управляет шрифтом с фиксированным
                            шагом, может быть не в состоянии
                            управлять шрифтом с переменным
                            шагом.

         Семейство          Если   семейства  несопоставимы,      3
                            шрифт-кандидат штрафуется тяжело.
                            Если запрошено семейство шрифтов по
                            умолчанию, штраф не назначается.

         Имя начертания     Если имена начертания шрифтов         3
                            несопоставимы, шрифт-кандидат
                            штрафуется тяжело. Если запрошено
                            начертание шрифта по умолчанию,
                            штраф не налагается.

         Высота             Неверная высота штрафуется.           2
                            GDI всегда выбирает или синтезирует
                            более низкий шрифт, если не
                            доступна точная высота. GDI
                            синтезирует шрифт, увеличивая
                            растровые карты символов шрифта
                            при помощи умножения на целое число.
                            GDI может увеличить шрифт не более,
                            чем в восемь раз. Если запрошена
                            высота по умолчанию, GDI выбирает
                            20-ти точечный шрифт.

        Ширина              Неверная ширина штрафуется. GDI       2
                            всегда выбирает или синтезирует

       Windows 3.0/Ref/1#7                                      = 136 =

                            более узкий шрифт, если точная
                            ширина не доступна. Если запрошена
                            ширина по умолчанию, GDI назначает
                            штраф за любое отличие между
                            коэффициентом сжатия устройства и
                            коэффициентом сжатия шрифта.
                            Разметчик может выдать
                            неожиданный результат, если нет
                            шрифтов с данным коэффициентом
                            сжатия.

        Жирность            Хотя GDI может синтезировать          1
                            жирный шрифт, предпочтительнее
                            настоящий жирный шрифт. Разметчик
                            штрафует за синтезирование.

        Наклон              Хотя GDI может синтезировать          1
                            курсив, предпочтительнее настоящий
                            курсив. Разметчик штрафует за
                            синтезирование.

        Подчеркивание       Хотя GDI может синтезировать          1
                            подчеркивание, предпочтительнее
                            настоящий шрифт с подчеркиванием.
                            Разметчик штрафует за синтезирование.

        Зачеркивание        Хотя GDI может синтезировать          1
                            зачеркивание, предпочтительнее
                            настоящий шрифт с зачеркиванием.
                            Разметчик штрафует за синтезирование.

             Если GDI синтезирует  шрифт,  разметчик  назначает  штраф,
        который  зависит  от  числа  запросов шрифта. Более того, штраф
        увеличивается, если шрифт синтезируется в обоих направлениях, и
        синтезирование  нечетное,   т.е.  шрифт   сжимается   в   одном
        направлении больше, чем в другом.
             Когда  разметчик сравнил все шрифты в системе, он выбирает
        один с наименьшей величиной штрафа. Прикладная программа должна
        получить характеристики этого шрифта для  того,  чтобы  понять,
        какой шрифт ей предоставлен.
             Веса   штрафов,  перечисленные  в  таблице  2.5.  являются
        штрафами по умолчанию, используемыми GDI.

             Пример выбора шрифта

             Предположим, что в таблице  системных  шрифтов  содержатся
        только  три  физических  шрифта, представленные на рисунке 2.19
        "Таблица шрифтов GDI", шрифты X, Y и Z. Предположим также,  что
        надо  использовать  специальный  шрифт,  шрифт  Q, для создания
        текста на устройстве вывода.  Пользователю  необходимо  описать
        шрифт  Q  так, чтобы GDI мог выбрать физический шрифт (X, Y или
        Z), наиболее соответствующий шрифту Q.
             Для описания шрифта Q необходимо использовать функцию  GDI

       Windows 3.0/Ref/1#7                                      = 137 =

        CreateFont   или   CreateFontIndirect.   Эти   функции  создают
        логический шрифт,  который  является  описанием  запрашиваемого
        физического шрифта.
             Используйте функцию SelectObject  для  выбора  физического
        шрифта,  который  ближе всего соответствует шрифту Q. (При этом
        необходимо функции SelectObject передать дескриптор шрифта  Q).
        Как  только  произведен  вызов функции SelectObject, GDI начнет
        процесс выбора.
             В  таблице  2.6  представлены физические шрифты из таблицы
        шрифтов и штрафы, которые GDI назначает каждому шрифту, пытаясь
        найти шрифт, наиболее полно соответствующий шрифту Q.  В  левом
        столбце  приведены атрибуты шрифтов, которые GDI использует для
        сравнения; во  втором  столбце  приведены  атрибуты  шрифта  Q,
        описывающие  шрифт.  За  атрибутами шрифтов X, Y и Z - шрифтов,
        которые действительно находятся в системной таблице  шрифтов  -
        следуют   значения   штрафов,  которые  GDI  назначает  каждому
        атрибуту.  Нижняя  строка  таблицы  содержит  общий  штраф  для
        каждого шрифта:


       Windows 3.0/Ref/1#7                                      = 138 =


           Таблица 2.6  Пример оценки шрифтов при выборе

        ----------------------------------------------------------------
                      Проектируемый        Имеющиеся шрифты/ их штрафы

           Атрибуты         Q             A            B           C
        ----------------------------------------------------------------
        Набор символов  ANSI        OEM      4    OEM     4   ANSI     0

        Шаг            фиксирован-  перемен- 3   фиксиро- 0   перемен- 3
                       ный          ный          вынный       ный

        Семейство      Roman        Modern   3   Roman   0    Modern   3

        Имя начертания Tms          Pica     3   Tms     0    Elite    3
                       Rmn                       Rmn

        Высота         8            10       2   10      2    8        0

        Ширина         4            6        2   6       2    4        0

        Наклон         Нет          Нет      0   Нет     0    Нет      0

        Подчеркивание  Нет          Нет      0   Нет    0     Нет      0

        Зачеркивание   Нет          Нет      0   Нет    0   Нет        0
        ----------------------------------------------------------------
        Общий штраф                         17          8              9
        ----------------------------------------------------------------

             Величина   общего   штрафа   показывает,   что  наименьшее
        количество штрафных очков получил шрифт Y,  и,  соответственно,
        он наиболее точно соответствует шрифту Q. В  этом  примере  GDI
        выбирает  шрифт  Y  в качестве физического шрифта на устройстве
        вывода.
                                                                               
            2.13.8 Файлы шрифтов и ресурсы шрифтов

             GDI  запоминает  информацию  о  физическом  шрифте в файле
        шрифта. Файл шрифта состоит из  заголовка  и  растровой  карты.
        Заголовок  файла шрифта содержит подробную информацию о шрифте.
        Если файл шрифта является  растровым,  растровая  карта  в  нем
        содержит  фактическое  представление символов шрифта. Если файл
        шрифта  является  векторным,  его  растровая   карта   содержит
        элементы  символов  для  символов  шрифта.  Ресурс шрифта - это
        набор из одного или нескольких файлов физических шрифтов.



       Windows 3.0/Ref/1#7                                      = 139 =

                                  2.14 Функции метафайла                       
       ----------------------------------------------------------------

             Функции  метафайла  служат  для   создания,   копирования,
        закрытия,   удаления,   получения,   выполнения  и  возвращения
        информации о метафайлах.  Метафайл  -  это  набор  команд  GDI,
        служащих для создания текста или изображения.
             Метафайлы  предоставляют  удобный   метод   для   хранения
        графических команд и создания текста или изображений. Метафайлы
        особенно  полезны в прикладных программах, которые неоднократно
        используют специальный текст или особое изображение.  Метафайлы
        также  являются  независимыми  от  устройств;  создав текст или
        изображение с помощью команд GDI и  затем  поместив  команды  в
        метафайл, прикладная программа может неоднократно  воссоздавать
        этот  текст  или изображение на ряде устройств. Метафайлы также
        полезны в прикладных программах, которым необходимо  передавать
        графическую    информацию    другим    прикладным   программам.
        Нижеприведенный  список   кратко   описывает   каждую   функцию
        метафайла:

            Функция                                Описание
        ---------------------------------------------------------------
         CloseMetaFile           Закрывает метафайл и создает
                                 дескриптор метафайла.

         CopyMetaFile            Копирует исходный метафайл в файл.

         CreateMetaFile          Создает контекст отображения метафайла.

         DeleteMetaFile          Удаляет метафайл из памяти.

         EnumMetaFile            Перечисляет вызовы GDI внутри
                                 метафайла.

         GetMetaFile             Создает дескриптор метафайла.

         GetMetaFileBits         Хранит метафайл в виде набора битов в
                                 блоке глобальной памяти.

         PlayMetaFile            Выполняет содержимое специфицированного
                                 метафайла.

         PlayMetaFileRecord      Выполняет запись метафайла.

         SetMetaFileBits         Создает метафайл памяти.
                                 2.14.1 Создание метафайла                     

             Прикладная  программа  в  среде  Windows  должна   создать
        метафайл  в  специальном  контексте устройства. При этом она не
        может использовать  контексты  устройства,  которые  возвращают
        функции  CreateDC  или  GetDC,  а  должна использовать контекст
        устройства, возвращаемый функцией CreateMetaFile.

       Windows 3.0/Ref/1#7                                      = 140 =

             Windows  позволяет   прикладной   программе   использовать
        подмножество   функций   GDI   для   создания   метафайла.  Это
        подмножество является  множеством  всех  функций  GDI,  которые
        служат  для  создания вывода (нет необходимости использовать те
        функции, которые служат для получения информации  о  состоянии,
        таких, например, как функции GetDeviceCaps или GetEnvironment).
             В  метафайле  прикладная  программа   может   использовать
        следующие функции GDI:

        AnimatePalette          OffsetViewportOrg  SetDIBitsToDevice
        Arc                     OffsetWindowOrg    SetMapMode
        BitBlt                  PatBlt             SetMapperFlag
        Chord                   Pie                SetPixel
        CreateBrushInderect     Polygon            SetPolyFillMode
        CreateDIPPatternBrush   Polyline           SetROP2
        CreateFontInderect      PolyPolygon        SetStretchBltMode
        CreatePatternBrush      RealizePalette     SetTextAlign
        CreatePenInderect       Rectangle          SetTextCharExtra
        CreateRgn               ResizePalette      SetTextColor
        DrawText                RestoreDC          SetTextJustification
        Ellipse                 RoundRect          SetViewportExtt
        Escape                  SaveDC             SetWindowExt
        ExcludeClipRect         ScaleViewportExt   SetWindowOrg
        ExtTextOut              ScaleWindowExt     StretchBlt
        FloodFill               SelectClipRgn      StretchDIBits
        IntersectClipRect       SelectObject       TextOut
        LineTo                  SelectPalette
        MoveTo                  SetBkColor
        OffsetClipRgn           SetBkMode

             Для  создания  выводимой   информации   с   использованием
        метафайла прикладная программа должна выполнить четыре шага:

             1.  Создать  специальный  контекст  устройства  с  помощью
        функции CreateMetaFile.

             2. Послать команды GDI в метафайл,  используя  специальный
        контекст устройства.

             3.  Закрыть метафайл, используя функцию CloseMetaFile. Эта
        функция возвращает дескриптор метафайла.

             4. Индицировать изображение  или  текст  на  устройстве  с
        помощью  функции PlayMetaFile, передав ей дескриптор метафайла,
        полученный  функцией  CloseMetaFile  и   дескриптор   контекста
        устройства, на котором метафайл будет выполняться.

             Контекст     устройства,     который    создает    функция
        CreateMetaFile,  не  имеет  атрибутов  по  умолчанию.  Любые из
        атрибутов  контекста  устройства,  действующие  для  устройства
        вывода при выполнении метафайла  прикладной  программой,  будут
        для метафайла атрибутами по умолчанию. Метафайл может  изменять
        эти  атрибуты  в процессе выполнения. Если прикладная программа

       Windows 3.0/Ref/1#7                                      = 141 =

        нуждается  в  сохранении  первоначальных  атрибутов   контекста
        устройства  после  выполнения  метафайла,  она должна сохранить
        контекст устройства вывода, вызвав функцию SaveDc перед вызовом
        функции  PlayMetaFile.   Затем,   после   возвращения   функции
        PlayMetaFile,   прикладная  программа  должна  вызвать  функцию
        RestoreDC (с параметром nSavedDC, равным -1) для восстановления
        первоначальных атрибутов контекста устройства.
             Хотя  максимальный  размер  метафайла равен 2 в степени 32
        байтов  или  записей,  реальный  размер   метафайла   ограничен
        количеством памяти или доступного дискового пространства.
                                                                               
            2.14.2 Хранение метафайла в памяти или на диске

             Прикладная  программа  может  хранить метафайл в системной
        памяти или в файле на диске.
             Для  хранения  метафайла  в  памяти  прикладная  программа
        должна   вызвать  вункцию  CreateMetaFile  и  передать  NULL  в
        качестве параметра функции.
             Существует два способа хранения метафайла в файле на диске:

             Когда прикладная программа вызывает функцию CreateMetaFile
        для  того,  чтобы  открыть  метафайл,  она  посылает в качестве
        параметра функции имя файла, и метафайл будет  записан  в  этот
        файл на диске.

             После  того,  как  прикладная программа создала метафайл в
        памяти,  она  вызывает  функцию   CopyMetaFile.   Эта   функция
        принимает  дескриптор  метафайла памяти и имя файла на диске, в
        котором будет храниться метафайл.

             Функция GetMetaFile открывает метафайл, хранящийся в файле
        на диске и делает его доступным для повторного  выполнения  или
        модификации.  Эта  функция  принимает  имя  файла  на  диске, в
        котором хранится метафайл, и возвращает дескриптор метафайла.
                                                                               
            2.14.3 Удаление метафайла

             Прикладная программа освобождает память,  которую  Windows
        использует  для  хранения  метафайла, при помощи вызова функции
        DeleteMetaFile. Эта функция удаляет метафайл из памяти и делает
        недействительным дескриптор. На файлы на диске эта  функция  не
        оказывает никакого влияния.
                  2.14.4 Изменение порядка выполнения метафайла в Windows      

             Метафайл  не  может  быть  выполнен  со  всей  полнотой  и
        точностью в той форме, в которой  он  был  записан.  Прикладная
        программа   может   использовать   функцию   EnumMetaFile   для
        обнаружения определенной записи метафайла. Функция EnumMetaFile
        вызывает задаваемую прикладной программой функцию многократного
        вызова и передает ей следующее:

             Контекст устройства метафайла

       Windows 3.0/Ref/1#7                                      = 142 =

             Указатель на таблицу дескрипторов метафайла
             Указатель на запись метафайла
             Число  связанных  объектов  с  дескрпторами   из   таблицы
        дескрипторов
             Указатель на данные, задаваемые прикладной программой

             Функция   многократного   вызова  может  использовать  эту
        информацию  для  выполнения,  запрашивания,   копирования   или
        модифицирования  отдельной  записи.  Функция PlayMetaFileRecord
        выполняет отдельную запись метафайла.
             В главе 9 "Форматы файлов" Справочного руководства, том 2,
        представлены форматы различных записей метафайла и  описано  их
        содержимое.
             Когда  Windows  выполняет  или  пронумеровывает  записи  в
        метафайле, она идентифицирует каждый объект при помощи  индекса
        в таблице дескрипторов. Функции, которые выбирают объект (такие
        как  SelectObject  и  SelectPalette) идентифицирует этот объект
        при помощи дескриптора объекта,  который  прикладная  программа
        передает в функцию.
             Объекты   заносятся  в  таблицу  в  порядке  их  создания.
        Например, если кисть  является  первым  объектом,  созданным  в
        метафайле,  то  ей присваивается индекс 0. Если вторым объектом
        является перо, то  ему  присваивается  индекс  1,  и  т.д.  Для
        получения  информации  о  формате таблицы дескрипторов смотрите
        описание структуры  данных  HANDLETABLE,  которое  находится  в
        главе 7 "Типы данных и структуры" в Справочном руководстве, том
        2.



       Windows 3.0/Ref/1#7                                      = 143 =

                             2.15 Функции управления принтером                 
       ----------------------------------------------------------------

             Функции  управления  принтером   получают   информацию   о
        принтере   и  модифицируют  его  состояние  инициализации.  Эти
        функции  обеспечивает  скорее  драйвер  принтера,  а  не   GDI.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        управления принтером:

            Функция                                Описание
        ---------------------------------------------------------------
         DeviceCapabilites          Получает возможности драйвера
                                    устройства печати.

         DeviceMode                 Устанавливает текущие режимы печати
                                    для устройства, выводя соответству-
                                    ющую панель диалога для подсказки
                                    пользователю.

         ExtDeviceMode              Получает или изменяет информацию
                                    инициализации устройства для
                                    данного драйвера принтера и инди-
                                    цирует панель диалога для конфигу-
                                    рации драйвера.



       Windows 3.0/Ref/1#7                                      = 144 =

                                                                               
            2.16 Управляющие функции печати
       ----------------------------------------------------------------

             Функция Escape позволяет прикладной программе иметь доступ
        к  тем  возможностям  отдельного устройства, которые недоступны
        непосредственно  через  GDI.  Параметр  nEscape  этой   функции
        специфицирует    ту    управляющую   функцию,   которая   будет
        выполняться. Когда прикладная программа вызывает функцию Escape
        для контекста устройства  печати,  то  эта  функция  регулирует
        поток выводимых на печать данных из прикладных программ в среде
        Windows, получает информацию о принтере  и  изменяет  установки
        принтера.
                           2.16.1 Формирование данных для вывода               

             Прикладные  программы,   работающие   в   среде   Windows,
        используют  только  стандартные  функции  среды  для  доступа к
        системной  памяти,  устройству  вывода,  клавиатуре  и  "мыши".
        Каждая  прикладная  программа  взаимодействует  с пользователем
        через  одно   или   несколько   окон,   которые   создаются   и
        обслуживаются  пользователем. GDI помогает прикладной программе
        в формировании данных  для  вывода,  передавая  независимые  от
        устройства   функции   от   прикладной   программы  к  драйверу
        устройства. Драйвер устройства сначала преобразует эти  функции
        в  зависимые  от  устройства операции, создающие изображения на
        экране  дисплея,  а  затем  посылает  их  программе  управления
        печатью  (другими  словами,  программе  буферизации). Программа
        управления   печатью   служит   двум   целям:   она    собирает
        преобразованные команды от прикладной программы и запоминает их
        в  соответствующем  задании, а также передает полное задание на
        устройство для вывода.  На  рисунке  2.20  представлен  маршрут
        вывода  данных  из  прикладной  программы  в  среде  Windows на
        устройство:

             Рисунок 2.20 Маршрут вывода

             Прикладная программа 1
             Прикладная программа 2
             GDI
             Драйвер
             Программа управления печатью
             Задание 1
             Задание 2

             Если бы  в  любое  заданное  время  работала  только  одна
        прикладная  программа,  то не было бы необходимости в программе
        управления печатью  и  множестве  управляющих  функций.  Однако
        Windows  разрешает работать нескольким программам одновременно.
        Если несколько прикладных программ одновременно посылают данные
        для вывода, то информация от разных прикладных программ  должна
        быть  разделена  и  оставаться  разделенной  в  течение  работы
        принтера  или  плоттра.  Это  разделение осуществляет программа
        управления печатью. Escape - функции печати указывают программе

       Windows 3.0/Ref/1#7                                      = 145 =

        управления печатью способ выполнения задачи разделения.
                           2.16.2 Вывод с разделением на  порции               

             Модель, используемая GDI, состоит в том, что  любая  точка
        может  быть  напечатана на устройстве вывода в любое время. Эта
        модель достаточно легко выполнима на векторных устройствах,  но
        для  матричных принтеров, не позволяющих вернуться назад (к уже
        отпечатанному), это составляет большую  проблему.  Для  решения
        этой проблемы используется разбиение на порции.
             Разбиение на порции включает несколько шагов:

             1.  Прикладная программа создает метафайл и использует его
        как промежуточное запоминающее устройство для вывода.

             2.  Начиная   с   вершины   метафайла,   GDI   преобразует
        прямоугольную  область  (порцию)  выводимых  данных  в команды,
        определяемые устройством, и затем передает их  соответствующему
        заданию.

             3. Прикладная программа повторяет этот процесс до тех пор,
        пока  весь  метафайл  не  будет  поделен на порции, а порции не
        будут преобразованы  в  команды,  определяемые  устройством,  и
        запомнены в задании.

             4.  Прикладная  программа  посылает  задание на устройство
        вывода.

             При создании контекста устройства GDI проверяет, имеет  ли
        устройство  возможность  обработки  порций.  Если  это так, GDI
        создает метафайл, который будет  использован  при  разбивке  на
        порции.  Для  выполения  разбиения на порции необходимо вызвать
        соответствующие  функции  вывода  и  escape-функцию   NEXTBAND.
        Escape-функция  NEXTBAND требует длинный указатель на структуру
        данных RECT в  качестве  своего  выходного  параметра.  Драйвер
        устройства   копирует   координаты   следующей   порции  в  эту
        структуру.  Когда  весь  метафайл  будет преобразован в команды
        устройства,  драйвер  возвращает  четыре   нуля   (0,0,0,0)   в
        структуре RECT.
             GDI   формирует   порции,   если  устройство  имеет  такую
        возможность, и  пользователь  вызвал  escape-функцию  NEWFRAME.
        Хотя   эта   функция  медленна  и  требует  много  памяти,  она
        значительно упрощает процесс вывода. После того, как прикладная
        программа  сформировала  очередную  страницу  для  вывода,  она
        вызывает escape-функцию NEWFRAME. GDI копирует выводимые данные
        в  метафайл  и  сам  вызывает  NEXTBAND. Как обсуждалось ранее,
        escape-функция преобразует содержимое метафайла в  определяемые
        устройством  команды  и  копирует их в соответствующее задание.
        Если возникнет проблема с памятью,  или  пользователь  завершил
        задание,    escape-функция   NEWFRAME   возвращает   сообщение,
        определяющее ошибку, или сообщение о прерывании.


       Windows 3.0/Ref/1#7                                      = 146 =

                                                                               
            2.16.3 Запуск и завершение задания печати

             Escape-функция STARTDOC  информирует  драйвер  устройства,
        что  прикладная  программа  начала  новое задание печати. После
        вызова STARTDOC  программа  управления  печатью  собирает  весь
        вывод  от  отдельной  прикладной  программы  в  соответствующее
        задание до  тех  пор,  пока  не  будет  вызвана  escape-функция
        ENDDOC.  (Заметим,  что  ENDDOC  не может быть использована для
        завершения задания).
                                                                               
            2.16.4 Завершение задания печати

             Если выводимые данные посылаются на устройство при  помощи
        escape-функции    NEWFRAME,   необходимо   написать   процедуру
        завершения  и  задать  ее  вместе  с   прикладной   программой.
        Escape-функция   SETABORTDOC  устанавливает  указатель  на  эту
        процедуру; она должна быть  вызвана  до  вызова  escape-функции
        STARTDOC.  Escape-функция  ABORTDOC  завершает  задание печати,
        если она была вызвана до  первого  вызова  NEWFRAME.  Ее  также
        следует   использовать  для  завершения  заданий,  использующих
        escape-функцию NEXTBAND.
                                                                               
            2.16.5 Информационные escape-функции

             Четыре    escape-функции    используются   для   получения
        информации   о   выбранном   устройстве   и   его    настройке.
        Escape-функция  GETPHYSPAGESIZE  возвращает  физический  размер
        страницы устройства вывода в единицах устройства),  наименьших
        адресуемых   единиц  устройства.  Например,  1/15  мм  является
        наименьшей   адресуемой   единицей   на   некоторых   векторных
        устройствах.  Пиксель  -  это  наименьшая адресуемая единица на
        матричном   устройстве.-    Escape-функция    GETPRINTINGOFFSET
        возвращает расстояние (в единицах устройства) от вернего левого
        угла   страницы   до   точки   начала   печати.  Escape-функция
        GETSCALINGFACTOR возвращает масштаб по осям х и  у  устройства.
        Масштаб  выражается  числом  логических единиц, отображаемых на
        единицу устройства. Escape-функция QUERYESCSUPPORT  определяет,
        реализована  ли  отдельная escape-функция драйвером устройства.
        Если    запрашиваемая    escape-функция     реализована,     то
        QUERYESCSUPPORT    возвращает    ненулевое    значение.    Если
        запрашиваемая escape-функция не реализована, то QUERYESCSUPPORT
        возвращает ноль.
                                                                               
            2.16.6 Добавочные escape-функции

             Существуют   две   добавочные  escape-функции,  изменяющие
        состояние устройства: FLUSHOUTPUT и  DRAFTMODE.  Escape-функция
        FLUSHOUTPUT   направляет   поток   выводимых   данных  в  буфер
        устройства (устройство хранит операции в буфере перед  посылкой
        его  программе  управления  печатью).  Escape-функция DRAFTMODE
        включает  на  устройстве  черновой  режим.  Это  означает,  что
        устройство   будет   использовать  один  из  своих  собственных
        шрифтов, а не шрифт GDI. Это также означает, что вызовы функций
        выравнивания  текста,  изменяющих  межсловные  и  межсимвольные

       Windows 3.0/Ref/1#7                                      = 147 =

        промежутки,   игнорируются.   Для   получения  более  подробной
        информации о функциях, изменяющих  межсловные  и  межсимвольные
        промежутки, смотрите раздел 2.12 "Функции текста" и раздел 2.13
        "Функции шрифта".



       Windows 3.0/Ref/1#7                                      = 148 =

                                                                               
            2.17 Функции окружения
       ----------------------------------------------------------------

             Функции  окружения  изменяют  и  получают  информацию   об
        окружении,  связанную  с  устройством  вывода.  Нижеприведенный
        список кратко описывает две функции окружения:

            Функция                                Описание
        ---------------------------------------------------------------
         GetEnvironment              Копирует информацию об окружении в
                                     буфер.

         SetEnvironment              Копирует данные об окружении,
                                     связанном с привязываемым устройст-
                                     вом.



       Windows 3.0/Ref/1#7                                      = 149 =

                                      2.18 Заключение                          
       ----------------------------------------------------------------

             Функции интерфейса графического устройства (GDI) выполняют
        независимые   от   устройства   графические   операции   внутри
        прикладной  программы  в  среде  Windows.  Для  получения более
        подробной информации  о  темах,  относящихся  к  функциям  GDI,
        смотри следующую литературу:

             Тема                              Ссылка
        --------------------------------------------------------------
         Описание функций          Справочное руководство, том 1:
                                   глава 4, "Список функций"

         Структуры и типы данных   Справочное руководство, том 2:
         Windows                   глава 7, "Типы данных и структуры"

         Форматы метафайла         Справочное руководство, том 2:
                                   глава 9, "Форматы файлов"

         Растровые операции        Справочное руководство, том 2:
                                   глава 11, "Двоичные и троичные
                                   коды растровых операций"

         Escape-функции печати     Справочное руководство, том 2:
                                   глава 12, "Управляющие функции
                                   печати"

         Вывод текста и графики    Руководство программиста: глава 3,
         в окно                    "Вывод в окно"

         Вывод растровых карт      Руководство программиста: глава 11,
                                   "Растровые карты"

         Вывод информации на       Руководство программиста: глава 12,
         принтер                   "Печать" и глава 17, "Установки для
                                   печати"

         Шрифты для вывода текста  Руководство программиста: глава 18,
                                   "Шрифты"

         Цветовые палитры          Руководство программиста: глава 19,
                                   "Цветовые палитры"



       Windows 3.0/Ref/1#7                                      = 150 =

                   Глава 3.       Функции интерфейса системного сервиса        
       ----------------------------------------------------------------

             Эта глава описывает функции интерфейса системного сервиса.
        Эти  функции осуществляют доступ к программным кодам и данным в
        модулях,  распределяют  и  управляют  локальной  и   глобальной
        памятью,   управляют  задачами,  загружают  ресурсы  программы,
        переводят строки из одной кодировки символов в другую, изменяют
        файл  инициализации  Windows,  помогают  в  отладке,  реализуют
        коммуникации  через  системные  порты  ввода/вывода,  создают и
        открывают файлы и выдают звуковые сигналы, испольэуя  системный
        звуковой генератор.

             В этой главе описаны следующие группы функций:

             - функции управления модулями;
             - функции управления памятью;
             - функции сегментов;
             - функции прерываний операционной системы;
             - функции задач;
             - функции управления ресурсами;
             - функции манипулирования строками;
             - функции управления атомами;
             - функции файла инициализации;
             - функции коммуникаций;
             - функции управления звуковым сигналом;
             - вспомогательные функции и макросы;
             - функции управления вводом/выводом;
             - функции отладки;
             - функции средств оптимизации;
             - функции выполнения прикладной программы.



       Windows 3.0/Ref/1#7                                      = 151 =

                              3.1 Функции управления модулем                   
       ----------------------------------------------------------------

             Функции  управления модулем изменяют и получают информацию
        о модулях  Windows,  которые  представляют  собой  загружаемые,
        выполняемые  единицы  кода  и  данных.  Нижеприведенный  список
        кратко описывает каждую функцию управления модулем:

             Функция                            Описание
        --------------------------------------------------------------
         FreeLibrary                Уменьшает счетчик ссылок на библи-
                                    отеку на 1 и удаляет ее из памяти,
                                    если счетчик ссылок равен 0.

         FreeModule                 Уменьшает счетчик ссылок на модуль
                                    на 1 и удаляет его из памяти, если
                                    счетчик ссылок равен 0.

         FreeProcInstance           Освобождает адрес экземпляра про-
                                    цедуры.

         GetCodeHandle              Определяет, какой кодовый сегмент
                                    содержит специфицированную функцию.

         GetInstanceData            Копирует данные из смещения одного
                                    экземпляра в смещение другого
                                    экземпляра.

         GetModuleFileName          Копирует имя файла модуля.

         GetModuleHandle            Возвращает дескриптор модуля.

         GetModuleUsage             Возвращает счетчик ссылок на
                                    модуль.

         GetProcAddress             Возвращает адрес функции в модуле.

         GetVersion                 Возвращает текущий номер версии
                                    Windows.

         LoadLibrary                Загружает библиотечный модуль.

         MakeProcInstance           Возвращает адрес экземпляра
                                    функции.



       Windows 3.0/Ref/1#7                                      = 152 =

                              3.2 Функции управления памятью                   
       ----------------------------------------------------------------

             Функции  управления  памятью  управляют системной памятью.
        Существует две  группы  функций:  группа  функций,  управляющих
        глобальной  памятью,  и  группа  функций, управляющих локальной
        памятью. Глобальная память - это вся память системы, которая не
        использована   прикладной   программой   или    зарезервирована
        системой.  Локальная память - это память внутри сегмента данных
        прикладной   программы,    работающей    в    среде    Windows.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        управления памятью:

             Функция                            Описание
        --------------------------------------------------------------
         DefineHandleTable       Создает частную таблицу дескрипторов
                                 в сегменте данных по умолчанию
                                 прикладной программы.

         GetFreeSpace            Получает число байтов, доступных в
                                 глобальной динамической области
                                 памяти.

         GetWinFlags             Получает информацию о конфигурации
                                 системной памяти.

         GlobalAlloc             Выделяет память из глобальной
                                 динамической области памяти.

         GlobalCompact           Сжимает глобальную память для полу-
                                 чения свободных байтов.

         GlobalDiscard           Сбрасывает блок глобальной памяти,
                                 если счетчик блокировок равен 0,
                                 но оставляет доступным дескриптор
                                 блока памяти.

         GlobalDosAlloc          Выделяет глобальную память, которая
                                 может быть доступна при работе DOS
                                 в реальном или защищенном режиме.

         GlobalDosFree           Освобождает глобальную память,
                                 первоначально выделенную функцией
                                 GlobalDosAlloc.

         GlobalFlags             Возвращает флаги и счетчик блокировок
                                 глобального блока памяти.

         GlobalFree              Удаляет блок глобальной памяти и
                                 делает недоступным дескриптор блока
                                 памяти.

         GlobalHandle            Получает дескриптор объекта глобальной

       Windows 3.0/Ref/1#7                                      = 153 =

                                 памяти.

         GlobalLock              Получает указатель на блок глобальной
                                 памяти, специфицированный дескрипто-
                                 ром. За исключением несбрасываемых
                                 объектов в защищенном (стандартном или
                                 расширенном 386) режиме, блок блокиру-
                                 ется в памяти по данному адресу, и его
                                 счетчик блокировок увеличивается на 1.

         GlobalLRUNewest         Делает объект глобальной памяти
                                 наименее вероятным для сброса.

         GlobalLRUOldest         Делает объект глобальной памяти
                                 наиболее вероятным для сброса.

         GlobalNotify            Инсталлирует процедуру уведомления для
                                 текущей задачи.

         GlobalReAlloc           Повторно выделяет блок глобальной
                                 памяти.

         GlobalSize              Возвращает размер (в байтах) блока
                                 глобальной памяти.

         GlobalUnlock            Делает недействительным указатель на
                                 блок глобальной памяти, первоначально
                                 полученный функцией GlobalLock. В
                                 реальной модели, или если блок
                                 является сбрасываемым, функция
                                 GlobalUnlock уменьшает счетчик
                                 блокировок на 1.

         GlobalUnwire            Уменьшает счетчик блокировок, установ-
                                 ленный функцией GlobalWire, и освобож-
                                 блок памяти, если счетчик равен 0.

         GlobalWire              Перемещает объект в младшие адреса
                                 памяти и увеличивает счетчик
                                 блокировок.

         LimitEMSPages           Ограничивает величину расширенной
                                 памяти, которую Windows будет выде-
                                 лять прикладной программе.

         LocalAlloc              Выделяет память из локальной
                                 динамической области памяти.

         LocalCompact            Сжимает локальную память для полу-
                                 чения свободных байтов.

         LocalDiscard            Сбрасывает блок локальной памяти,
                                 если счетчик блокировок равен 0,

       Windows 3.0/Ref/1#7                                      = 154 =

                                 но оставляет доступным дескриптор
                                 блока памяти.

         LocalFlags              Возвращает флаги и счетчик блокировок
                                 блока локальной памяти.

         LocalFree               Удаляет блок локальной памяти и
                                 делает недоступным дескриптор блока
                                 памяти.

         LocalHandle             Получает дескриптор объекта локальной
                                 памяти.

         LocalInit               Инициализирует локальную динамическую
                                 область памяти в специфицированном
                                 сегменте.

         LocalLock               Фиксирует блок локальной памяти,
                                 увеличивая его счетчик блокировок.

         LocalReAlloc            Повторно выделяет блок локальной
                                 памяти.

         LocalShrink             Сжимает локальную динамическую область
                                 памяти.

         LocalSize               Возвращает размер (в байтах) блока
                                 локальной памяти.

         LocalUnlock             Освобождает блок локальной памяти.

         LockData                Блокирует текущий сегмент данных в
                                 памяти.

         LockSegment             Блокирует специфицированный сегмент
                                 данных в памяти.

         SetSwapAreaSize         Увеличивает количество памяти, которое
                                 прикладная программа резервирует для
                                 кодовых сегментов.

         SwitchStackBack         Возвращает стэк текущей задачи в ее
                                 сегмент данных после того, как он был
                                 перенаправлен функцией
                                 SwitchTasksBack.

         SwitchStackTo           Изменяет стэк текущей задачи на
                                 специфицированный сегмент данных,
                                 такой как сегмент данных динамически
                                 подключаемых библиотек (DLL).

         UnlockData              Разблокировывает текущий сегмент
                                 данных.

       Windows 3.0/Ref/1#7                                      = 155 =


         UnLockSegment           Разблокировывает специфицированный
                                 сегмент данных.



       Windows 3.0/Ref/1#7                                      = 156 =

                                  3.3. Функции сегментов                       
       ----------------------------------------------------------------

             Функции сегментов размещают,  освобождают  и  конвертируют
        селекторы,   блокируют  и  разблокировывают  блоки  памяти,  на
        которые ссылаются селекторы, и получают информацию о сегментах.
        Нижеприведенный  список   кратко   описывает   каждую   функцию
        селекторов:

             Функция                            Описание
        --------------------------------------------------------------
         AllocDStoCSAlias          Принимает селектор сегмента данных
                                   м возвращает селектор кодового
                                   сегмента, который должен использова-
                                   ться для выполнения кода в сегменте
                                   данных.

         AllocSelector             Размещает новый селектор.

         ChangeSelector            Генерирует временный кодовый селек-
                                   тор, относящийся к заданному селек-
                                   тору данных, или временный селектор
                                   данных, относящийся к заданному
                                   кодовому селектору.

         DefineHandleTable         Создает частную таблицу дескрипторов,
                                   которую Windows корректирует
                                   автоматически.

         FreeSelector              Освобождает селектор, изначально
                                   размещенный функциями AllocSelector,
                                   AllocCStoDSAlias или
                                   AllocDStoCSAlias.

         GetCodeInfo               Получает информацию о кодовом
                                   сегменте.

         GlobalFix                 Защищает блок глобальной памяти от
                                   перемещения в линейной памяти.

         GlobalPageLock            Блокирует страничную память, связан-
                                   ную со специфицированным селектором,
                                   и увеличивает его счетчик
                                   блокировок. Заблокированная
                                   страничная память не может
                                   перемещаться и сбрасываться на диск.

         GlobalPageUnlock          Уменьшает счетчик блокировок блока
                                   памяти. Если этот счетчик равен 0,
                                   память может быть перемещена и
                                   сброшена на диск.

         GlobalUnfix               Освобождает блок глобальной памяти,

       Windows 3.0/Ref/1#7                                      = 157 =

                                   который был зафиксирован функцией
                                   GlobalFix.

         LockSegment               Блокирует сегмент в памяти.

         UlockSegment              Освобождает сегмент, который был
                                   заблокирован функцией LockSegment.

             Примечание.  Прикладная  программа  не должна использовать
        эти  функции  до  тех  пор,  пока  это  не   станет   абсолютно
        необходимым.   Использование  этих  функций  нарушает  практику
        программирования в Windows.



       Windows 3.0/Ref/1#7                                      = 158 =

                                                                               
            3.4 Функции прерываний операционной системы
       ----------------------------------------------------------------

             Функции   прерываний   операционной   системы    позволяют
        прикладной программе, написанной на языке ассемблера, выполнять
        определенные  прерывания  DOS и NETBIOS без прямого кодирования
        прерывания.   Это   обеспечивает   совместимость   с   будущими
        продуктами   фирмы  Microsoft.  Нижеприведенный  список  кратко
        описывает каждую из этих функций:

             Функция                            Описание
        --------------------------------------------------------------
         DOS3Call                  Выполняет прерывание DOS 21H (запрос
                                   функции).

         NetBIOSCall               Ваполняет прерывание NETBIOS 5CH.



       Windows 3.0/Ref/1#7                                      = 159 =

                                    3.5 Функции задачи                         
       ----------------------------------------------------------------

             Функции   задачи   изменяют  состояние  выполнения  задач,
        возвращают  информацию,  связанную   с   задачей,  и   получают
        информацию   об  окружении,  в  котором  происходит  выполнение
        задачи. Задача - это единичный  вызов  прикладной  программы  в
        среде  Windows.  Нижеприведенный список кратко описывает каждую
        функцию задачи:

             Функция                            Описание
        --------------------------------------------------------------
         Catch                  Копирует текущую среду выполнения в
                                буфер.

         ExitWindows            Инициализирует стандартную процедуру
                                закрытия Windows.

         GetCurrentPDB          Возвращает текущую базу данных
                                программы DOS (PDB), которая еще
                                известна как префикс программного
                                сегмента (PSP).

         GetCurrentTask         Возвращает дескриптор текущей задачи.

         GetDOSEnvironment      Получает строку, содержащую информацию
                                об окружении текущей выполняемой
                                задачи.

         GetNumTask             Возвращает число задач, выполняемых в
                                системе в текущее время.

         SetErrorMode           Контролирует, будет ли Windows
                                управлять функцией ошибок DOS 24H, или
                                позволяет вызывающей прикладной
                                программе управлять самой.

         Throw                  Восстанавливает среду выполнения в
                                соответствии с заданными значениями.

         Yield                  Останавливает выполнение текущей задачи
                                и запускает задачу, находящуюся в
                                состоянии ожидания.



       Windows 3.0/Ref/1#7                                      = 160 =

                             3.6 Функции управления ресурсами                  
       ----------------------------------------------------------------

             Функции  управления  ресурсами находят и загружают ресурсы
        прикладной программы из выполняемого  файла  Windows.  Ресурсом
        может  быть  курсор,  икона, растровая карта, строка или шрифт.
        Нижеприведенный  список   кратко   описывает   каждую   функцию
        управления ресурсами:

             Функция                            Описание
        --------------------------------------------------------------
         AccessResource             Открывает специфицированный ресурс.

         AllocResource              Выделяет и инициализирует память
                                    под ресурс.

         FindResource               Определяет местоположение ресурса.

         FreeResource               Удаляет загруженный ресурс из
                                    памяти.

         LoadAccelerators           Загружает таблицу ускорителей.

         LoadBitmap                 Загружает ресурс растровой карты.

         LoadCursor                 Загружает ресурс курсора.

         LoadIcon                   Загружает ресурс иконы.

         LoadMenu                   Загружает ресурс меню.

         LoadResource               Загружает ресурс.

         LoadString                 Загружает ресурс строки.

         LockResource               Получает абсолютный адрес памяти,
                                    по которому расположен ресурс.

         SetResourceHandler         Устанавливает функцию для загрузки
                                    ресурсов.

         SizeofResource             Устанавливает размер (в байтах)
                                    ресурса.

         UnlockResource             Освобождает ресурс.



       Windows 3.0/Ref/1#7                                      = 161 =

                           3.7 Функции манипулирования строками                
       ----------------------------------------------------------------

             Функции   манипулирования  строками  переводят  строки  из
        одного  набора  символов  в  другой,  распознают и конвертируют
        прописные и строчные символы, определяют,  является  ли  символ
        алфавитным  или  алфавитно-цифровым, находят соседние символы в
        строке   и   выполняют   другие    операции    над    строками.
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        конвертирования строк:

             Функция                            Описание
        --------------------------------------------------------------
         AnsiLower              Переводит символы в строке в строчные.

         AnsiLowerBuff          Переводит символы строки в буфере в
                                строчные.

         AnsiNext               Возвращает длинный указатель на
                                следующий символ строки.

         AnsiPrev               Возвращает длинный указатель на
                                предыдущий символ строки.

         AnsiToOem              Конвертирует строку в коде ANSI в
                                строку символов в коде OEM.

         AnsiToOemBuff          Конвертирует строку символов в коде
                                ANSI в буфере в строку символов в
                                коде OEM.

         AnsiUpper              Переводит символы в строке в прописные.

         AnsiUpperBuff          Переводит символы строки в буфере в
                                прописные.

         IsCharAlpha            Определяет, является ли символ
                                алфавитным.

         IsCharAlphaNumeric     Определяет, является ли символ
                                алфавитно-цифровым.

         IsCharLower            Определяет, является ли символ строчным.

         IsCharUpper            Определяет, является ли символ
                                прописным.

         istrcat                Объединяет две строки, заданные
                                длинными указателями.

         lstrcmp                Сравнивает две строки, заданные
                                длинными указателями, учитывая
                                прописные и строчные символы.

       Windows 3.0/Ref/1#7                                      = 162 =


         lstrcmpi               Сравнивает две строки, заданные
                                длинными указателями, не учитывая
                                прописные и строчные символы.

         lstrcpy                Копирует одну строку в другую, обе
                                строки задаются длинными указателями.

         lstrlen                Определяет длину строки, заданной
                                длинным указателем.

         OemToAnsi              Конвертирует строку символов в коде OEM
                                в строку символов в коде ANSI.

         OemToAnsiBuff          Конвертирует строку символов в коде OEM
                                в буфере в строку символов в коде ANSI.

         ToAscii                Транслирует код виртуальной клавиши в
                                соответствующий символ/символы в коде
                                ASCII.

         wsprintf               Форматирует и хранит группу символов
                                и значений в буфере. Аргументы форма-
                                тирования передаются в массиве.



       Windows 3.0/Ref/1#7                                      = 163 =

                              3.8 Функции управления атомами                   
       ----------------------------------------------------------------

             Функции управления атомами создают и манипулируют атомами.
        Атомы - это целые, которые  уникальным  образом  идентифицируют
        строки  символов.  Они полезны в прикладных программах, которые
        работают  с  большим  количеством   строк,   и   в   прикладных
        программах,  которые  нуждаются  в  сохранении  памяти. Windows
        хранит  атомы  в  таблице  атомов.  Локальная  таблица   атомов
        размещается в сегменте данных прикладной программы и недоступна
        другим  прикладным  программам. Глобальная таблица атомов может
        быть разделяемой; она полезна в прикладных программах,  которые
        используют  динамический  обмен  данными (DDE). Нижеприведенный
        список кратко описывает каждую функцию управления атомами:

             Функция                            Описание
        --------------------------------------------------------------
         AddAtom               Создает атом для строки символов.

         DeleteAtom            Удаляет атом, если его счетчик ссылок
                               равен 0.

         FindAtom              Получает атом, связанный со строкой
                               символов.

         GetAtomHandle         Получает дескриптор (относящийся к
                               локальной динамической области памяти)
                               строки, относящейся к специфицированному
                               атому.

         GetAtomName           Копирует строку символов, связанную с
                               атомом.

         GlobalAddAtom         Создает глобальный атом для строки
                               символов.

         GlobalDeleteAtom      Удаляет глобальный атом, если его
                               счетчик ссылок равен 0.

         GlobalFindAtom        Получает глобальный атом, связанный со
                               строкой символов.

         GlobalGetAtomName     Копирует строку символов, связанную с
                               глобальным атомом.

         InitAtomTable         Инициализирует таблицу атомов.

         MAKEINTATOM           Преобразует целое для использования в
                               качестве аргумента функции.



       Windows 3.0/Ref/1#7                                      = 164 =

                              3.9 Функции файла инициализации                  
       ----------------------------------------------------------------

             Функции  файла  инициализации получают/копируют информацию
        из/в файл инициализации  Windows  WIN.INI  и  в  частные  файлы
        инициализации.  Файл  инициализации  Windows  - это специальный
        ASCII файл,  который  содержит  пары  имя_клавиши  -  значение,
        которые   представляют   собой  ключи  времени  выполнения  для
        прикладной программы. Нижеприведенный список  кратко  описывает
        каждую функцию файла инициализации:

             Функция                            Описание
        --------------------------------------------------------------
         GetPrivateProfileInt       Возвращает целое значение из
                                    секции частного файла
                                    инициализации.

         GetPrivateProfileString    Возвращает строку символов из
                                    секции частного файла
                                    инициализации.

         GetProfileInt              Возвращает целое значение из
                                    секции файла WIN.INI.

         GetProfileString           Возвращает строку символов из
                                    секции файла WIN.INI.

         WritePrivateProfileString  Копирует строку символов в частный
                                    файл инициализации или удаляет из
                                    него одну или несколько строк.

         WriteProfileString         Копирует строку символов в файл
                                    WIN.INI или удаляет из него одну
                                    или несколько строк.

             Прикладная    программа    может    использовать   частный
        (специфицированный прикладной  программой)  файл  инициализации
        для  записи  информации,  которая  правомерна  только  для этой
        прикладной  программы.  Это  улучшает  как   выполнение   самой
        прикладной   программы,   так   и   Windows,  путем  уменьшения
        количества информации,  которую  Windows  должна  прочесть  при
        доступе  к  файлу  инициализации.  Прикладная  программа  может
        записать информацию в файл WIN.INI только в  том  случае,  если
        эта  информация  воздействует  на  среду  Windows или на другие
        прикладные программы; в этом случае прикладная программа должна
        послать сообщение WM_WININICHANGE всем окнам верхнего уровня.
             Файлы WININI.TXT и  SYSINI.TXT  поставляются  с  проданной
        версией Windows и содержат описание файлов WIN.INI и SYSTEM.INI
        соответственно.



       Windows 3.0/Ref/1#7                                      = 165 =

                                 3.10 Функции коммуникаций                     
       ----------------------------------------------------------------
             Функции   коммуникаций  выполняют  связь  через  системные
        последовательные  и  параллельные  порты  ввода/вывода   (I/O).
        Нижеприведенный   список   кратко   описывает   каждую  функцию
        коммуникаций:

             Функция                            Описание
        --------------------------------------------------------------
         BuildCommDCB            Заполняет управляющий блок устройства
                                 кодами управления.

         ClearCommBreak          Сбрасывает состояние прерывания на
                                 устройстве связи.

         CloseComm               Закрывает устройство связи после
                                 передачи текущего буфера.

         EscapeCommFunction      Настраивает устройство на выпонение
                                 расшитенной функции.

         FlushComm               Сбрасывает символы из устройства связи.

         GetCommError            Заполняет буфер состоянием
                                 коммуникации.

         GetCommEventMask        Получает и очищает маску события.

         GetCommState            Заполняет буфер содержимым блока
                                 управления устройства.

         OpenComm                Открывает устройство связи.

         ReadComm                Считывает байты из устройства связи
                                 в буфер.

         SetCommBreak            Устанавливает состояние прерывания на
                                 устройстве связи.

         SetCommEventMask        Получает и устанавливает маску события
                                 на устройстве связи.

         SetCommState            Устанавливает устройство связи в
                                 состояние, специфицированное блоком
                                 управления устройства.

         TransmitCommChar        Помещает символ в начало передаваемой
                                 очереди.

         UngetCommChar           Специфицирует, какой символ должен
                                 быть следующим считываемым символом.

         WriteComm               Переписывает байты из буфера в
                                 устройство связи.

       Windows 3.0/Ref/1#7                                      = 166 =

                                 3.11 Функции озвучивания                      
       ----------------------------------------------------------------

             Функции озвучивания создают звук и музыку  для  системного
        динамика.   Нижеприведенный   список  кратко  описывает  каждую
        функцию озвучивания:

             Функция                            Описание
        --------------------------------------------------------------
         CloseSound                 Закрывает громкоговоритель после
                                    сбрасывания звуковой очереди и
                                    освобождения буферов.

         CountVoiceNotes            Возвращает число нот в специфициро-
                                    ванной очереди.

         GetThresholdEvent          Возвращает длинный указатель на
                                    флаг порогового события.

         GetThresholdStatus         Возвращает состояние порогового
                                    события для каждого голоса.

         OpenSound                  Открывает громкоговоритель для
                                    использования.

         SetSoundNoise              Устанавливает источник и длитель-
                                    ность шума в громкоговорителе.

         SetVoiceAccent             Помещает акцент в звуковую очередь.

         SetVoiceEnvelope           Устанавливает оболочку звука в
                                    звуковую очередь.

         SetVoiceNote               Устанавливает ноту в специфицирован-
                                    ную звуковую очередь.

         SetVoiceQueueSize          Выделяет заданное число байтов под
                                    звуковую очередь.

         SetVoiceSound              Устанавливает специфицированную
                                    звуковую последовательность и ее
                                    длительность в звуковую очередь.

         SetVoiceThreshold          Устанавливает пороговый уровень для
                                    данного голоса.

         StartSound                 Начинает проигрывание каждой
                                    звуковой очереди.

         StopSound                  Прекращает проигрывания всех

       Windows 3.0/Ref/1#7                                      = 167 =

                                    звуковых очередей и сбрасывает их
                                    содержимое.

         SyncAllVoices              Помещает маркер синхронизации в
                                    каждую звуковую очередь.

         WaitSoundState             Ожидает до тех пор, пока драйвер
                                    громкоговорителя не установится в
                                    специфицированный режим.



       Windows 3.0/Ref/1#7                                      = 168 =

                          3.12 Вспомогательные функции и макросы               
       ----------------------------------------------------------------

             Вспомогательные макросы и  функции  возвращают  содержимое
        слов  и  байтов,  создают беззнаковые длинные целые и структуры
        данных  и  выполняют   специальные   арифметические   операции.
        Нижеприведенный  список кратко описывает каждую вспомогательную
        функцию и макрос:

             Функция                            Описание
        --------------------------------------------------------------
         HIBYTE                 Возвращает старший байт целого
                                значения.

         HIWORD                 Возвращает старшее слово длинного
                                целого значения.

         LOBYTE                 Возвращает младший байт целого
                                значения.

         LOWORD                 Возвращает младшее слово длинного
                                целого значения.

         MAKEINTATOM            Подготавливает целое значение для
                                использования в качестве аргумента
                                функции.

         MAKEINTRESOURCE        Преобразует целое значение в длинный
                                указатель на строку; старшее слово
                                этого указателя устанавливается в 0.

         MAKELONG               Создает беззнаковое длинное целое.

         MAKEPOINT              Преобразует длинное значение, которое
                                содержит координаты точки x и y, в
                                структуру данных POINT.

         MulDiv                 Умножает два значения длиной в слово, а
                                затем делит результат на третье
                                значение длиной в слово, возвращая
                                результат, округленный до целого.

         PALETTEINDEX           Преобразует целое в значение индекса
                                палитры COLORREF.

         PALETTERGB             Преобразует три значения для красного,
                                зеленого и синего цветов в зависимое от
                                палитры значение COLORREF.

         RGB                    Преобразует три значения для красного,
                                зеленого и синего цветов в точное
                                значение RGB COLORREF.


       Windows 3.0/Ref/1#7                                      = 169 =

                             3.13 Функции ввода/вывода файлов                  
       ----------------------------------------------------------------

             Функции  ввода/вывода  файлов  создают  и  закрывают файл,
        считывают из файла и записывают в файл. Нижеприведенный  список
        кратко описывает каждую функцию ввода/вывода файлов:

             Функция                            Описание
        --------------------------------------------------------------
         GetDriveType           Определяет, является ли драйвер диска
                                сменным, фиксированным или удаленным.

         GetSystemDirectory     Возвращает маршрут системной
                                поддериктории Windows.

         GetTempDrive           Возвращает имя необязательного драйвера
                                для хранения временных файлов.

         GetTempFileName        Создает имя для временного файла.

         GetWindowsDirectory    Получает имя директории, в которой
                                находится Windows.

         _lclose                Закрывает файл.

         _lcreate               Создает новый файл или открывает и
                                очищает существующий файл.

         _llseek                Позиционирует указатель на файл.

         _lopen                 Открывает существующий файл.

         _lread                 Считывает данные из файла.

         _lwrite                Записывает данные в файл.

         OpenFile               Создает, открывает, переоткрывает или
                                удаляет специфицированный файл.

         SetHandleCount         Изменяет число дескрипторов файла,
                                доступных задаче.



       Windows 3.0/Ref/1#7                                      = 170 =

                                   3.14 Функции отладки                        
       ----------------------------------------------------------------

             Функции отладки помогают обнаружить  ошибки  в  прикладной
        программе   или   библиотеке.   Нижеприведенный  список  кратко
        описывает каждую функцию отладки:

             Функция                            Описание
        --------------------------------------------------------------
         DebugBreak              Устанавливает прерывание для отлад-
                                 чика.

         FatalAppExit            Отображает на экране панель сообщения
                                 и затем прерывает прикладную программу.

         FatalExit               Отображает на экране текущее состояние
                                 Windows для получения инструкций для
                                 дальнейшей работы.

         OutputDebugString       Посылает отладочное сообщение в
                                 отладчик, если он представлен, или в
                                 устройство AUX, если отладчика нет.

         ValidateCodeSegment     Определяет, был ли какой-либо кодовый
                                 сегмент изменен посредством прямой
                                 перезаписи памяти.

         ValidateFreeSpaces      Проверяет свободные сегменты в памяти
                                 на корректное содержание.



       Windows 3.0/Ref/1#7                                      = 171 =

                             3.15 Функции средств оптимизации                  
       ----------------------------------------------------------------

             Функции средств оптимизации  контролируют,  как  служебные
        программы   Windows   Profiler   и   Swap   взаимодействуют   с
        разрабатываемой  прикладной  программой. Нижеприведенный список
        кратко описывает каждую из этих функций:

             Функция                            Описание
        --------------------------------------------------------------
         ProfClear                Сбрасывает все примеры в буфер
                                  моделирования Profile.

         ProfFinish               Останавливает моделирование,
                                  осуществляемое Profile, и сбрасывает
                                  содержимое всех буферов на диск.

         ProfFlush                Сбрасывает буфер моделирования
                                  Profile на диск.

         ProfInsChk               Определяет, инсталлирован ли Profile.

         ProfSampRate             Устанавливает класс программы,
                                  моделируемой при помощи Profile.

         ProfSetup                Устанавливает буфер моделирования
                                  Profile и класс записи.

         ProfStart                Начинает моделирование, осуществляемое
                                  Profile.

         ProfStop                 Завершает моделирование, осуществляемое
                                  Profile.

         SwapRecording            Начинает и заканчивает анализирование
                                  служебной программой Swap процесса
                                  подкачки прикладной программы.



       Windows 3.0/Ref/1#7                                      = 172 =

                       3.16 Функции выполнения прикладной программы            
       ----------------------------------------------------------------

            Функции  выполнения  прикладной  программы позволяют одной
        прикладной    программе     выполнить     другую     программу.
        Нижеприведенный список кратко описывает эти функции:

             Функция                            Описание
        --------------------------------------------------------------
         LoadModule              Выполняет отдельную прикладную
                                 программу.

         WinExec                 Выполняет отдельную прикладную
                                 программу.

         WinHelp                 Запускает прикладную программу Windows
                                 Help и передает ей контект или
                                 информацию о теме.

             Функция  WinExec  обеспечивает  метод  верхнего уровня для
        выполнения  любой  прикладной  программы  среды   Windows   или
        стандартной  прикладной  программы  DOS.  Вызывающая прикладная
        программа  формирует  строку,   содержащую   имя   запускаемого
        выполняемого   файла   и   некоторые   командные  параметры,  и
        специфицирует начальное состояние окна прикладной программы.
             Функция  LoadModule  выполняет  ту  же  самую  задачу,  но
        обеспечивает  больший  контроль над окружением, в котором будет
        ваполняться   прикладная   программа.   Вызывающая   прикладная
        программа   предоставляет   имя   выполняемого   файла  и  блок
        параметров для фукци  DOS 4BH, Code 00H.
             Функция  WinHelp  выполняет  прикладную  программу   среды
        Windows  Help и передает данные (необязательно) для определения
        природы помощи, требуемой вызывающей прикладной программе.  Эти
        данные  представляют  собой  или  целое,  которое специфицирует
        идентификатор контекста в файле помощи, или строку,  содержащую
        ключевое слово в файле помощи.



       Windows 3.0/Ref/1#7                                      = 173 =

                                      3.17 Заключение                          
       ----------------------------------------------------------------

             Функции интерфейса системного сервиса  получают  доступ  к
        кодам  и  данным  в  модулях, размещают и управляют локальной и
        глобальной памятью, управляют задачами,  загружают  программные
        ресурсы, преобразуют строки из одного набора символов в другой,
        изменяют  файл  инициализации  Windows,  помогают  в  системной
        отладке, выполняют передачу через системные порты ввода/вывода,
        создают и открывают файлы и создают звуки, используя  системный
        динамик.  Для  получения  более  подробной информации по темам,
        относящимся к функциям интерфейса  системного  сервиса,  смотри
        следующее:

            Тема                                 Ссылка
        ---------------------------------------------------------------
         Описание функций          Справочное руководство, Том 1: Глава
                                   4, "Описание функций"

         Типы данных и структуры   Справочное руководство, Том 2: Глава
         Windows                   7, "Типы данных и структуры"

         Форматы файла инициали-   Справочное руководство, Том 2: Глава
         зации                     9, "Форматы файлов"

         Диагностические сообщения Справочное руководство, Том 2:
         для отладки               Приложение C, "Отладочные сообщения
                                   Windows"

         Запись и чтение из файлов Руководство программиста: Глава 10,
                                   "Ввод и вывод файла"

         Управление памятью        Руководство программиста: Глава 15,
                                   "Управление памятью" и Глава 16,
                                   "Дополнительные возможности
                                   управления памятью"

         Библиотеки                Руководство программиста: Глава 20,
                                   "Библиотеки динамического связывания"

         Использование служебной   Инструментарий: Глава 13,
         программы Profiler        "Анализирование времени CPU:
                                   Profiler"

         Использование служебной   Инструментарий: Глава 14,
         программы Swap            "Анализирование подкачки: Swap"

