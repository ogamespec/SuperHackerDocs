                                   Оглавление                                  
       Windows 3.0/Ref/4#7                                        = 1 =

       OemKeyScan  [3.0]..............................................6
       OemToAnsi......................................................6
       OemToAnsiBuff..................................................7
       OffsetClipRgn..................................................8
       OffsetRect.....................................................8
       OffsetRgn......................................................9
       OffsetViewportOrg.............................................10
       OffsetWindowOrg...............................................10
       OpenClipboard.................................................11
       OpenComm......................................................12
       OpenFile......................................................13
       OpenIcon......................................................16
       OpenSound.....................................................16
       OutputDebugString  [3.0]......................................16
       PaintRgn......................................................18
       PALETTEINDEX  [3.0]...........................................18
       PALETTERGB  [3.0].............................................19
       PatBlt........................................................19
       PeekMessage...................................................21
       Pie...........................................................23
       PlayMetaFile..................................................24
       PlayMetaFileRecord............................................24
       Polygon.......................................................25
       Polyline......................................................26
       PolyPoligon [3.0].............................................27
       PostAppMessage................................................28
       PostMessage...................................................28
       PostQuitMessage...............................................29
       ProfClear [3.0]...............................................30
       ProfFinish [3.0]..............................................30
       ProfFlush [3.0]...............................................31
       ProfInsChk [3.0]..............................................31
       ProfSampRate [3.0]............................................32
       ProfSetup [3.0]...............................................33
       ProfStart [3.0]...............................................33
       ProfStop [3.0]................................................34
       PtInRect......................................................34
       PtInRegion....................................................35
       PtVisible.....................................................35
       ReadComm......................................................37
       RealizePalette [3.0]..........................................37
       Rectangle.....................................................38
       RectInRegion [3.0]............................................39
       RectVisible...................................................39
       RegisterClass.................................................40
       RegisterWindowMessage.........................................42
       ReleaseCapture................................................43
       ReleaseDC.....................................................43
       RemoveFontResource............................................44
       RemuveMenu  [3.0].............................................45
       RemoveProp....................................................46
       ReplyMessage..................................................46
       ResizePalette [3.0]...........................................47

       Windows 3.0/Ref/4#7                                        = 2 =

       RestoreDC.....................................................48
       RGB...........................................................49
       RoundRect.....................................................49
       SaveDC........................................................51
       ScaleViewportExt..............................................51
       ScaleWindowExt................................................52
       ScreenToClient................................................53
       ScrollDC......................................................53
       ScrollWindow..................................................55
       SelectClipRgn.................................................56
       SelectObject..................................................57
       SelectPalette [3.0]...........................................59
       SendDlgItemMessage............................................60
       SendMessage...................................................61
       SetActiveWindow...............................................62
       SetBitmapBits.................................................62
       SetBitmapDimension............................................63
       SetBkColor....................................................64
       SetBkMode.....................................................64
       SetBrushOrg...................................................65
       SetCapture....................................................66
       SetCaretBlinkTime.............................................66
       SetCaretPos...................................................67
       SetClassLong..................................................67
       SetClassWord..................................................69
       SetClipboardData..............................................70
       SetClipboardViewer............................................73
       SetCommBreak..................................................74
       SetCommEventMask..............................................74
       SetCommState..................................................75
       SetCursor.....................................................76
       SetCursorPos..................................................77
       SetDIBits [3.0]...............................................78
       SetDIBitsToDevice [3.0].......................................79
       SetDlgItemInt.................................................81
       SetDlgItemText................................................82
       SetDoubleClickTime............................................82
       SetEnvironment................................................83
       SetErrorMode..................................................84
       SetFocus......................................................84
       SetHandleCount [3.0]..........................................85
       SetKeyboardState..............................................86
       SetMapMode....................................................86
       SetMapperFlags................................................88
       SetMenu.......................................................89
       SetMenuItemBitmaps [3.0]......................................90
       SetMessageQueue...............................................91
       SetMetaFileBits...............................................92
       SetPaletteEntries [3.0].......................................92
       SetParent.....................................................93
       SetPixel......................................................93
       SetPolyFillMode...............................................94
       SetProp.......................................................95

       Windows 3.0/Ref/4#7                                        = 3 =

       SetRect.......................................................96
       SetRectEmpty..................................................97
       SetRectRgn....................................................97
       SetResourceHandler............................................98
       SetROP2......................................................100
       SetScrollPos.................................................102
       SetScrollRange...............................................103
       SetSoundNoise................................................104
       SetStretchBltMode............................................105
       SetSwapAreaSize..............................................106
       SetSysColors.................................................107
       SetSysModalWindow............................................109
       SetSystemPaletteUse [3.0]....................................110
       SetTextAlign.................................................111
       SetTextCharacterExtra........................................113
       SetTextColor.................................................113
       SetTextJustification.........................................114
       SetTimer.....................................................115
       SetViewportExt...............................................117
       SetViewportOrg...............................................118
       SetVoiceAccent...............................................119
       SetVoiceEnvelope.............................................121
       SetVoiceNote.................................................122
       SetVoiceQueueSize............................................122
       SetVoiceSound................................................123
       SetVoiceThreshold............................................124
       SetWindowExt.................................................124
       SetWindowLong................................................126
       SetWindowOrg.................................................127
       SetWindowPos.................................................128
       SetWindowsHook...............................................130
       SetWindowText................................................139
       SetWindowWord................................................139
       ShowCaret....................................................140
       ShowCursor...................................................141
       ShowOwnedPopups..............................................141
       ShowScrollBar................................................142
       ShowWindow...................................................143
       SizeofResource...............................................145
       StartSound...................................................145
       StopSound....................................................146
       StretchBlt...................................................146
       StretchDIBits  [3.0].........................................149
       SwapMouseButton..............................................151
       SwapRecording [3.0]..........................................152
       SwitchStackBack  [3.0].......................................152
       SwitchStackTo [3.0]..........................................153
       SyncAllVoices................................................154
       TabbedTextOut [3.0]..........................................155
       TextOut......................................................156
       Throw........................................................157
       ToAscii [3.0]................................................157
       TrackPopupMenu [3.0].........................................159

       Windows 3.0/Ref/4#7                                        = 4 =

       TranslateAccelerator.........................................160
       TranslateMDISysAccel  [3.0]..................................161
       TranslateMessage.............................................162
       TransmitCommChar.............................................163
       UngetCommChar................................................164
       UnhookWindowsHook............................................164
       UnionRect....................................................165
       UnlockData...................................................166
       UnlockResource...............................................166
       UnlockSegment................................................167
       UnrealizeObject..............................................167
       UnregisterClass  [3.0].......................................168
       UpdateColors [3.0]...........................................169
       UpdateWindow.................................................169
       ValidateCodeSegments [3.0]...................................171
       ValidateFreeSpaces...........................................171
       ValidateRect.................................................172
       ValidateRgn..................................................172
       VkKeyScan [3.0]..............................................173
       WaitMessage..................................................175
       WaitSoundState...............................................175
       WindowFromPoint..............................................176
       WinExec [3.0]................................................176
       WinHelp  [3.0]...............................................178
       WriteComm....................................................181
       WritePrivateProfileString [3.0]..............................182
       WriteProfileString...........................................183
       wsprinf [3.0]................................................184
       wvsprinf [3.0]...............................................187
       Yield........................................................189

       Windows 3.0/Ref/4#7                                        = 5 =


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                        = 6 =

                                  OemKeyScan  [3.0]                            

        Синтаксис

             DWORD OemKeyScan(wOemChar)

             Эта функция отображает коды ASCII OEM c 0 до 0x0FF на скан
             коды и состояние  регистров  OEM.  Она  предоставляет  вам
             возможность посылать текст OEM другой программе,  эмулируя
             ввод с клавиатуры и используется специально для этой  цели
             в Windows, работающей в расширенном режиме процессора 386.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wOemChar          WORD  Определяет значение в коде ASCII
                               символа OEM.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  содержит  в  младшем слове скан код
             символа OEM,  определяемого параметром  wOemChar.  Старшее
             слово содержит  флаги,  определяющие  состояние регистров.
             Следующий список показывает эти флаги:

             Бит      Описание
             ─────────────────────────────────────
             2        Нажата клавиша Ctrl
             1        Нажата клавиша Shift
             ─────────────────────────────────────

             Если данного символа нет в  таблице  символов  OEM,  то  и
             старшее и младшее слово содержат -1.

        Примечание

             Эта функция  не  выполняет  преобразования  для  символов,
             которые требуют  комбинаций,  таких   как   CTRL+ALT.   Не
             преобразуемые таким  образом символы должны копироваться с
             эмулированием механизма "ALT+клавиша". NUMLOCK должен быть
             OFF (выключен).

             Данная функция  вызывает  в последних драйверах клавиатуры
             функцию VkKeyScan.

        ───────────────────────────────────────────────────────────────
                                      OemToAnsi                                

        Синтаксис

             int OemToAnsi(lpOemStr,lpAnsiStr)

             Эта функция   преобразует  строку,  на  которую  указывает

       Windows 3.0/Ref/4#7                                        = 7 =

             параметр lpOemStr,  из набора символов кода  OEM  в  набор
             символов кода ANSI. Строка может быть больше 64К.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpOemStr          LPSTR  Указывает  на  оканчивающуюся
                               нулем строку символов из набора символов
                               кода OEM.

             lpAnsiStr         LPSTR  Указывает на ячейки, в которые
                               преобразованная строка будет скопирована.
                               Для  преобразования строки на то же место
                               параметр lpAnsiStr должен быть  таким же,
                               как параметр lpOemStr.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Всегда -1.

        ───────────────────────────────────────────────────────────────
                                    OemToAnsiBuff                              

        Синтаксис

             void OemToAnsiBuff(lpOemStr,lpAnsiStr,nLength)

             Эта функция   преобразует  строку,  на  которую  указывает
             параметр lpOemStr,  из набора символов кода  OEM  в  набор
             символов кода ANSI.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpOemStr          LPSTR  Указывает  на  оканчивающуюся
                               нулем строку символов из набора символов
                               кода OEM.

             lpAnsiStr         LPSTR  Указывает на ячейки, в которые
                               преобразованная строка будет скопирована.
                               Для  преобразования строки на то же место
                               параметр lpAnsiStr должен быть  таким же,
                               как параметр lpOemStr.

             nLength           WORD  Определяет число символов в буфере,
                               определяемом параметром lpOemStr. Если
                               nLength равно 0, то длина считается рав-
                               ной 64K (65536).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                        = 8 =

                                    OffsetClipRgn                              

        Синтаксис

             int OffsetClipRgn(hDC,X,Y)

             Эта функция сдвигает область отсечения данного  устройства
             на  указанное  смещение.  Функция  сдвигает  область  на X
             единиц вдоль оси x и на Y единиц вдоль оси y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет величину сдвига влево
                               или вправо в логических единицах.

             Y                 int  Определяет величину сдвига вверх
                               или вниз в логических единицах.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет тип  новой  области отсечения.  Может принимать
             одно из следующих значений:

             Значение        Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION   Область отсечения имеет перекрываемые
                             границы.

             ERROR           Некорректный контекст устройства.

             NULLREGION      Область отсечения пуста.

             SIMPLEREGION    Область отсечения не имеет перекрываемых
                             границ.

        ───────────────────────────────────────────────────────────────
                                      OffsetRect                               

        Синтаксис

             void OffsetRect(lpRect,X,Y)

             Эта функция  сдвигает  специфицированный  прямоугольник на
             указанное   смещение.   Функция   OffsetRect    перемещает
             прямоугольник на X единиц по оси x и на Y единиц по оси y.
             Параметры  X  и  Y  имеют   знаковые   значения,   поэтому
             прямоугольник  может перемещаться влево или вправо и вверх
             или вниз.


       Windows 3.0/Ref/4#7                                        = 9 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает  на  структуру  данных
                               типа RECT, содержащую перемещаемый
                               прямоугольник.

             X                 int  Задает число единиц, на которое надо
                               сдвинуть влево или вправо. Этот параметр
                               должен быть отрицателен для перемещения
                               влево.

             Y                 int  Задает  число  единиц,  на которое
                               надо сдвинуть вверх  или  вниз.  Этот
                               параметр должен быть отрицателен для
                               перемещения вверх.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Значения координат  прямоугольника  не  должны быть больше
             32767 и меньше -32767  единиц.  Параметры  X  и  Y  должны
             выбираться    осторожно   для   предотвращения   получения
             некорректных прямоугольников.

        ───────────────────────────────────────────────────────────────
                                      OffsetRgn                                

        Синтаксис

             int OffsetRgn(hRgn,X,Y)

             Эта функция сдвигает данную область на указанное смещение.
             Функция сдвигает область на X единиц вдоль оси x  и  на  Y
             единиц вдоль оси y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HRGN  Идентифицирует смещаемую область.

             X                 int  Определяет величину сдвига влево
                               или вправо в логических единицах.

             Y                 int  Определяет величину сдвига вверх
                               или вниз в логических единицах.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет тип полученной области. Может принимать одно из

       Windows 3.0/Ref/4#7                                       = 10 =

             следующих значений:

             Значение        Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION   Область имеет перекрываемые границы.

             ERROR           Некорректный дескриптор области.

             NULLREGION      Область пуста.

             SIMPLEREGION    Область не имеет перекрываемых границ.

        ───────────────────────────────────────────────────────────────
                                  OffsetViewportOrg                            

        Синтаксис

             DWORD OffsetViewportOrg(hDC,X,Y)

             Эта функция   модифицирует   координаты   начала   области
             просмотра   относительно   текущих   значений,   используя
             следующие формулы:

             xNewVO = xOldVO + X
             yNewVO = yOldVO + Y

             Новые координаты   начала  вычисляются  сложением  текущих
             координат начала со значениями X и Y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет  значение, которое
                               добавляется к текущей координате x начала
                               области просмотра.

             Y                 int  Определяет значение,  которое
                               добавляется  к текущей координате y начала
                               области просмотра.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  прежнему  значению координат
             начала  области  просмотра  (в  координатах   устройства).
             Предыдущая   координата  y  содержится  в  старшем  слове,
             координата x - в младшем.

        ───────────────────────────────────────────────────────────────
                                   OffsetWindowOrg                             

        Синтаксис

       Windows 3.0/Ref/4#7                                       = 11 =


             DWORD OffsetWindowOrg(hDC,X,Y)

             Эта функция   модифицирует  координаты  окна  относительно
             текущих значений, используя следующие формулы:

             xNewWO = xOldWO + X
             yNewWO = yOldWO + Y

             Новые координаты   начала  вычисляются  сложением  текущих
             координат начала со значениями X и Y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int Определяет число логических единиц,
                               которые добавляется к текущей координате
                               x окна.

             Y                 int Определяет число логических единиц,
                               которые добавляется к текущей координате
                               y окна.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  прежнему  значению координат
             окна (в логических координатах).  Предыдущая координата  y
             содержится в старшем слове, координата x - в младшем.

        ───────────────────────────────────────────────────────────────
                                    OpenClipboard                              

        Синтаксис

             BOOL OpenClipboard(hWnd)

             Эта функция открывает системный  буфер  для  проверки  или
             изменения и  не позволяет другим программам модифицировать
             его содержимое.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно, которое
                               должно быть связано с открытым системным
                               буфером.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   состояние  системного
             буфера. Не  равно  нулю,  если  системный  буфер   удалось

       Windows 3.0/Ref/4#7                                       = 12 =

             открыть. Если   системный  буфер  уже  был  открыт  другой
             прикладной программой, то функция OpenClipboard возвращает
             нуль.

        Примечание

             Для каждого   успешного  вызова  OpenClipboard  прикладная
             программа должна вызывать CloseClipboard.

        ───────────────────────────────────────────────────────────────
                                       OpenComm                                

        Синтаксис

             int OpenComm(lpComName,nInQueue,nOutQueue)

             Эта функция  открывает  устройство  связи  и назначает для
             него дескриптор nCid.  Устройство  связи  инициализируется
             параметрами по умолчанию. Функция SetCommState должна быть
             использована для инициализации устройства в альтернативные
             значения.  Функция  OpenComm  выделяет память для очередей
             приема  и  передачи.  Очереди   используются   программным
             обеспечением,      обрабатывающим      прерывания      при
             приеме/передаче.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpComName         LPSTR  Указывает на строку, которая
                               содержит "COMn"  или  "LPTn", где n может
                               быть от 1 до числа устройств связи,
                               доступных для  заданного  типа  порта
                               ввода/вывода.

             nInQueue         int  Определяет размер очереди приема.

             nOutQueue        int  Определяет размер очереди передачи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   открытое   устройство
             связи.  Если возникла  ошибка,  то  возвращаемое  значение
             определяет одно из следующих отрицательных кодов ошибок:

             Код             Описание
             ──────────────────────────────────────────────────────────
             IE_BADID        Некорректный или неподдерживаемый ID.

             IE_BAUDRATE     Неподдерживаемая скорость передачи ин-
                             формации  в бодах.

             IE_BYTESIZE     Неверный размер байта.


       Windows 3.0/Ref/4#7                                       = 13 =

             IE_DEFAULT      Ошибка в параметрах по умолчанию.

             IE_HARDWARE     Аппаратура отсутствует.

             IE_MEMORY       Недостаточно  памяти для размещения
                             очередей.

             IE_NOPEN        Устройство не открыто.

             IE_OPEN         Устройство уже открыто.
             ──────────────────────────────────────────────────────────

        Примечание

             Порты LPT не обслуживаются прерываниями.  Для этих  портов
             параметры nInQueue   и  nOutQueue  игнорируются  и  размер
             очереди устанавливается в 0.

        ───────────────────────────────────────────────────────────────
                                       OpenFile                                

        Синтаксис

             int OpenFile(lpFileName,lpReOpenBuff,wStyle)

             Эта функция создает,  открывает, переоткрывает или удаляет
             файл.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpFileName        LPSTR  Указывает  на оканчивающуюся нулем
                               символьную строку, определяющую имя
                               открываемого файла. Строка должна
                               содержать символы из набора символов
                               ANSI.

             lpReOpenBuff      LPOFSTRUCT  Указывает на структуру данных
                               OFSTRUCT,  получающую  информацию  о
                               первом открытии файла. Структура может
                               быть  использована  в  последующих
                               вызовах OpenFile для ссылки на открытый
                               файл.

                               Поле szPathName этой структуры содержит
                               символы из набора OEM.

             wStyle            WORD  Определяет действия, которые должны
                               быть выполнены. Действия могут комбини-
                               роваться с  помощью  поразрядной операции
                               OR:


       Windows 3.0/Ref/4#7                                       = 14 =

                 Значение      Описание
                 ───────────────────────────────────────────────────────
                 OF_CANCEL     Добавляет клавишу "Cancel" для  панели
                               дилога OF_PROMPT. Нажатие клавиши "Cancel"
                               заставляет OpenFile выполнить возврат с
                               сообщением об ошибке "Файл не найден".

                 OF_CREATE     Этот флаг всегда предписывает OpenFile
                               создать новый файл.  Если файл уже
                               существует, он  усекается   до   нулевой
                               длины.

                 OF_DELETE     Удаляет файл.

                 OF_EXIST      Открывает файл, затем закрывает его.
                               Используется для проверки существования
                               файла.

                 OF_PARSE      Заполняет структуру данных OFSTRUCT,
                               но не выполняет других действий.

                 OF_PROMPT     Отображает панель диалога, которая
                               запрашивает пользователя о разрешении на
                               создание файла, если требуемый файл не
                               существует. Эта панель диалога сообщает
                               пользователю, что Windows не может найти
                               файл и просит пользователя вставить дис-
                               кету с файлом в дисковод А.

                 OF_READ       Открывает файл только для чтения.

                 OF_READWRITE  Открывает файл для чтения и записи.

                 OF_REOPEN     Открывает файл, используя информацию из
                               буфера повторного открытия.

                 OF_SHARE_COMPAT  Открывает файл в совместимом режиме,
                               позволяя другим процессам данной машины
                               открывать файл сколько угодно раз. Если
                               файл уже был открыт в другом режиме, то
                               функция OpenFile завершается по ошибке.

                 OF_SHARE_DENY_NONE  Открывает файл не запрещая другим
                               процессам доступа к файлу для чтения и
                               записи. Если   файл  уже  был  открыт  в
                               совместимом режиме,  то функция OpenFile
                               завершается по ошибке.

                 OF_SHARE_DENY_READ  Открывает файл и запрещает другим
                               процессам доступ к файлу для чтения. Если
                               файл уже  был  открыт другим процессом в
                               режиме совместимости или для чтения,  то
                               функция OpenFile завершается по ошибке.

                 OF_SHARE_DENY_WRITE  Открывает файл и запрещает другим

       Windows 3.0/Ref/4#7                                       = 15 =

                               процессам доступ к файлу для записи. Если
                               файл уже  был  открыт другим процессом в
                               режиме совместимости или для записи,  то
                               функция OpenFile завершается по ошибке.

                 OF_SHARE_EXCLUSIVE  Открывает файл в исключительном
                               режиме, запрещая другим процессам доступ
                               к  файлу для чтения и записи.  Если файл
                               уже был  открыт  в  другом  режиме   для
                               чтения или  записи,  то функция OpenFile
                               завершается по ошибке.

                 OF_VERIFY     Проверяет, соответствуют ли дата и время
                               открываемого файла  дате  и  времени его
                               первоначального    создания.     Полезно
                               использовать  в качестве дополнительного
                               контроля за  файлами,  открытыми  только
                               для чтения.

                 OF_WRITE      Открывает файл только для записи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  дескриптор  файла  DOS,
             если функция завершена успешно.  В противном  случае,  оно
             равно -1.

        Примечания

             Если параметр lpFileName определяет  только  имя  файла  и
             расширение, то функция ищет файл в следующих директориях:

             1. В текущей директории.

             2. В директории Windows (директории,  содержащей WIN.COM).
                Маршрут этой  директории  можно  получить   с   помощью
                функции GetWindowsDirectory.

             3. В  системной  директории Windows (директории содержащей
                системны файлы,  такие  как  KERNEL.EXE).   Вы   можете
                получить маршрут  этой  директории  с  помощью  функции
                GetSystemDirectory.

             4. Во всех директориях, указанных в переменной среды PATH.

             5. Во всех директориях в списке отображенных на сеть.

             Windows просматривает директории в указанном выше порядке.

             Параметр lpFaleName  не  должен  содержать   универсальные
             символы (шаблоны).


       Windows 3.0/Ref/4#7                                       = 16 =

             Для закрытия  файла после использования применяйте функция
             _lclose.

        ───────────────────────────────────────────────────────────────
                                                                               
       OpenIcon

        Синтаксис

             BOOL OpenIcon(hWnd)

             Эта функция  открывает  указанное окно (минимизированное).
             Windows восстанавливает его исходные размеры и положение.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно нулю,  если функция завершена успешно. В
             противном случае равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       OpenSound

        Синтаксис

             int OpenSound()

             Эта функция открывает доступ программе к  громкоговорителю
             и   препятствует   последующему   открытию   его   другими
             программами.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение определяет число имеющихся  голосов.
             Оно  равно  S_SERDVNA,  если громкоговоритель не доступен.
             Оно равно S_SEROFM, если недостаточно памяти.

        ───────────────────────────────────────────────────────────────
                               OutputDebugString  [3.0]                        

        Синтаксис

             void  OutputDebugString(lpOutputString)

             Функция посылает  отладочное  сообщение отладчику (если он
             есть) или  на  дополнительное   устройство   (AUX),   если
             отладчика нет.

       Windows 3.0/Ref/4#7                                       = 17 =


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpOutputString    LPSTR  Указывает на завершаемую нулем
                               строку.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Эта функция   сохраняет   состояние  всех  регистров.  Она
             доступна только в отладочной версии Windows.


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 18 =

                                       PaintRgn                                

        Синтаксис

             BOOL PaintRgn(hDC,hRgn)

             Эта функция   заливает  область,  определяемую  параметром
             hRgn, выбранной кистью.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               который содержит область.

             hRgn              HRGN  Идентифицирует заливаемую область.
                               Координаты области задаются в единицах
                               устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно 0,  если функция выполнилась успешно.  В
             противном случае равно 0.

        ───────────────────────────────────────────────────────────────
                                 PALETTEINDEX  [3.0]                           

        Синтаксис

             COLORREF  PALETTEINDEX(nPaletteIndex)

             Эта макрокоманда   получает   индекс  элемента  логической
             палитры цветов и возвращает значение, содержащее в старшем
             байте 1  и  в  младшем байте индекс элемента палитры.  Она
             называется спецификатором  элементов  палитры.  Прикладная
             программа использует   палитру   цветов   и  посылает  это
             значение функции,  требующей указания цвета, вместо явного
             определения цвета  в  виде  RGB  значения.  Это  позволяет
             использовать в  функциях  значения  цветов,   определяемые
             элементами палитры.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nPaletteIndex     int  Определяет индекс элемента палитры,
                               содержащий цвет, который должен быть
                               использован в графической операции.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  является  спецификатором   элемента
             логической палитры.  При  использовании логической палитры

       Windows 3.0/Ref/4#7                                       = 19 =

             прикладная программа   может   использовать   спецификатор
             вместо задания   явного  RGB  значения  для  функций  GDI,
             которым требуется указание цвета.

        ───────────────────────────────────────────────────────────────
                                  PALETTERGB  [3.0]                            

        Синтаксис

             COLORREF PALETTERGB(cRed,cGreen,cBlue)

             Эта макрокоманда  получает  три  значения,  представляющие
             относительные интенсивности красного,  зеленого  и  сенего
             цветов и возвращающая значение, содержащее в старшем байте
             2 и значение RGB в трех следующих байтах.  Она  называется
             спецификатором RGB,   относительно   палитры.   Прикладные
             программы, использующие  палитры  могут   передавать   это
             значение функциям, требующим указания цвета.

             Для устройств   вывода,  которые  поддерживают  логические
             палитры, Windows отображает  RGB  значение,  зависимое  от
             палитры на  ближайший  цвет в логической палитре контекста
             устройства, как, если бы программа указала индекс элемента
             палитры. Если  устройство вывода не поддерживает системную
             палитру, Windows  использует  значение  RGB,  относительно
             палитры как    обычное    RGB    значение,    возвращаемое
             макрокомандой RGB.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             cRed              BYTE  Определяет интенсивность красного
                               цвета.

             cGreen            BYTE  Определяет интенсивность зеленого
                               цвета.

             cBlue             BYTE  Определяет интенсивность синего
                               цвета.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет RGB значение относительно палитры.

        ───────────────────────────────────────────────────────────────
                                        PatBlt                                 

        Синтаксис

             BOOL PatBlt(hDC,X,Y,nWidth,nHeight,dwRop)

             Эта функция   создает  битовое  изображение  на  указанном
             устройстве.  Изображение является  результатом  комбинации

       Windows 3.0/Ref/4#7                                       = 20 =

             выбранной   кисти   и   изображения,   уже  имеющегося  на
             устройстве.  Код растровой операции, задаваемый параметром
             dwRop, определяет правила комбинации.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет логическую координату х
                               верхнего левого угла прямоугольника,
                               принимающего изображение.

             Y                 int  Определяет логическую координату y
                               верхнего левого угла прямоугольника,
                               принимающего изображение.

             nWidth            int  Определяет ширину (в логических
                               единицах) прямоугольника, принимающего
                               изображение.

             nHeight           int  Определяет высоту (в логических
                               единицах) прямоугольника, принимающего
                               изображение.

             dwRop             DWORD  Определяет код растровой операции.
                               Коды растровых операций (ROP) определяют,
                               как GDI комбинирует цвета в  операциях
                               вывода,  которые  включают  текущую кисть,
                               возможно растр источника и растр приемника.
                               Список  кодов  растровых операций приведен
                               в табл. 4.11, "растровые операции".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно 0,  если битовое изображение выведено. В
             противном случае равно 0.

        Примечания

             Значения dwRop для этой функции ограничивается  поднабором
             полных  256  триад  кодов растровых операций;  в частности
             может  быть  использован  код  операции,  ссылающийся   на
             невозможность использования источника.

             Не все   устройства   поддерживают   функцию  PatBlt  (см.
             операцию RC_BITBLT в функции GetDeviceCaps).

             Таблица 4.11 содержит список растровых  операций,  которые
             могут быть выполнены BitBlt.

             Таблица 4.11, Растровые операции.

       Windows 3.0/Ref/4#7                                       = 21 =

             ──────────────────────────────────────────────────────────
             Код            Описание
             ──────────────────────────────────────────────────────────
             PATCOPY        Копирует изображение в растр приемника.

             PATINVERT      Комбинирует растр приемника с изображением,
                            используя булевскую операцию OR.

             DSTINVERT      Инвертирует растр приемника.

             BLACKNESS      Делает весь вывод черным.

             WHITENESS      Делает весь вывод белым.

        ───────────────────────────────────────────────────────────────
                                     PeekMessage                               

        Синтаксис

             BOOL PeekMessage(lpMsg,hWnd,wMsgFilterMin,wMsgFilterMax,
                                                         wRemoveMsg)

             Эта функция  проверяет  очередь  прикладной  программы  на
             наличие  сообщения  и помещает сообщение (если оно есть) в
             структуру данных, на которую указывает lpMsg. В отличие от
             функции   GetMessage,  PeekMessage  не  ожидает  помещения
             сообщения в очередь перед тем, как вернуть управление. Тем
             не  менее,  PeekMessage  возвращает  управление  (если  не
             установлен флаг PM_NOYIELD). Это означает, что PeekMessage
             не  может  возвратить  управление  до тех пор,  пока среда
             ПОЛИФЕЙС не вернет управление программе.

             PeekMessage ищет только те сообщения,  которые  связаны  с
             окном, определяемым  параметром  hWnd или для его дочерних
             окон, что  определяется  с  помощью  функции  IsChild,   и
             находятся   в   диапазоне   значений  сообщений,  заданном
             wMsgFilterMin и wMsgFilterMax.  Если значение  hWnd  равно
             NULL,  а  значения wMsgFilterMin и wMsgFilterMax оба равны
             нулю,  PeekMessage  проверяет  всю  очередь   на   наличие
             сообщений. (PeekMessage     не     проверяет    сообщений,
             относящимся к  окнам,  принадлежащим   другим   прикладным
             программам.) Если  hWnd  равно  -1,  то PeekMessage вернет
             только те сообщения,  параметр hWnd  которых  равен  NULL,
             т.е. те,  что  посылаются  функцией  PostAppMessage.

             Флаги WM_KEYFIRST и WM_KEYLAST могут быть использованы как
             значения фильтров для получения всех сообщений, вводимых с
             клавиатуры;  константы  WM_MOUSEFIRST и WM_MOUSELAST могут
             быть использованы для получения всех сообщений,  связанных
             с манипулятором мышь.


       Windows 3.0/Ref/4#7                                       = 22 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpMsg             LPMSG  Указывает на структуру данных типа
                               MSG, которая содержит информацию о
                               сообщении.

             hWnd              HWND  Идентифицирует дескриптор  окна,
                               сообщения которого должны быть проверены.

             wMsgFilterMin     WORD  Задает  наименьшее сообщение,
                               которое должно быть проверено.

             wMsgFilterMax     WORD  Задает  наибольшее сообщение,
                               которое должно быть проверено.

             wRemoveMsg        WORD  Задает комбинацию флагов, описанных
                               ниже. Флаг PM_NOYIELD может комбинироваться
                               или  с  флагом PM_NOREMOVE или с флагом
                               PM_REMOVE):

             Значение       Описание
             ──────────────────────────────────────────────────────────
             PM_NOREMOVE    Сообщения не удаляются из очереди после
                            обработки функцией PeekMessage.

             PM_NOYIELD     Предотвращает  остановку текущей задачи и
                            передачу  системных  ресурсов другой задаче.

             PM_REMOVE      Сообщение удаляется из очереди после обра-
                            ботки функцией PeekMessage.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет найдено ли сообщеие.  Не
             равно нулю,  если сообщение доступно.  В противном  случае
             равно нулю.

        Примечание

             Сообщения WM_PAINT  не  могут  быть  удалены  из очереди с
             помощью PeekMessage.  Они остаются в очереди до  тех  пор,
             пока не будут обработаны.  Функции GetMessage, PeekMessage
             и  WaitMessage  передают  управление   другим   прикладным
             программам.  Их  вызовы  -  это  единственная  возможность
             разрешить работу   других   программ.   Если    прикладная
             программа  не  вызывает  любую  из  этих функций в течение
             длительного времени,  то другая  прикладная  программа  не
             имеет никаких шансов начать работу.

             Когда GetMessage,   PeekMessage   и  WaitMessage  передают
             управление другой прикладной программе,  стек  и  сегменты
             данных программы, вызывающей функцию, могут перемещаться в
             памяти  для   того,   чтобы   удовлетворить   изменившимся
             требованиям к памяти другой прикладной программы.

       Windows 3.0/Ref/4#7                                       = 23 =


             Если прикладная  программа  запомнила дальние указатели на
             объекты в сегментах данных или стека (например, глобальные
             или локальные переменные),  эти указатели могут измениться
             после   вызова   функций   GetMessage,    PeekMessage    и
             WaitMessage.   Однако  параметр  lpMsg  вызванной  функции
             сохраняет прежнее значение в любом случае.

        ───────────────────────────────────────────────────────────────
                                         Pie                                   

        Синтаксис

             BOOL Pie(hDC,X1,Y1,X2,Y2,X3,Y3,X4,Y4)

             Эта функция   рисует  сектор,  образованный  эллиптической
             дугой,  центр  которой  и  две  крайние  точки   соединены
             линиями.   Центром  дуги  является  центр  ограничивающего
             прямоугольника, определяемого параметрами X1, Y1, X2 и Y2.
             Дуга  начинается в точке X3,Y3,  а заканчивается в X4,Y4 и
             рисуется,  используя  выбранное   перо,   против   часовой
             стрелки.  Две  дополнительные  линии соединяют две крайние
             точки дуги с центром. Сектор заливается выбранной кистью.

             Если X3 равно X4 и Y3 равно Y4,  то  результатом  является
             эллипс с одной линией,  соединяющей центр эллипса с точкой
             X3,Y3 (или X4,Y4).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X1                int  Определяет логическую х-координату
                               левого верхнего угла ограничивающего
                               прямоугольника.

             Y1                int  Определяет логическую y-координату
                               левого верхнего угла ограничивающего
                               прямоугольника.

             X2                int  Определяет логическую х-координату
                               правого нижнего угла ограничивающего
                               прямоугольника.

             Y2                int  Определяет логическую y-координату
                               правого нижнего угла ограничивающего
                               прямоугольника.

             X3                int  Определяет логическую x-координату
                               начальной точки   дуги.   Это  точка  не
                               обязана принадлежать дуге.

             Y3                int  Определяет логическую y-координату

       Windows 3.0/Ref/4#7                                       = 24 =

                               начальной точки   дуги.   Это  точка  не
                               обязана принадлежать дуге.

             X4                int  Определяет логическую x-координату
                               конечной точки   дуги.   Это  точка  не
                               обязана принадлежать дуге.

             Y4                int  Определяет логическую y-координату
                               конечной точки   дуги.   Это  точка  не
                               обязана принадлежать дуге.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  показывает был ли сектор нарисован.
             Не равно 0,  если функция выполнилась успешно. В противном
             случае равно 0.

        Примечание

             Ширина прямоугольника,  определяемая  абсолютным значением
             (X2 - X1),  не должна превышать  32767  единиц.  Такое  же
             ограничение справедливо и для высоты прямоугольника.

             Функция не использует текущую позицию и не изменяет ее.

        ───────────────────────────────────────────────────────────────
                                     PlayMetaFile                              

        Синтаксис

             BOOL PlayMetaFile(hDC,hMF)

             Эта функция выводит  содержимое  указанного  метафайла  на
             заданное устройство. Метафайл может выводиться любое число
             раз.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства
                               вывода.

             hMF               HANDLE  Идентифицирует метафайл.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно 0,  если функция выполнилась успешно.  В
             противном случае равно 0.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 25 =

                                  PlayMetaFileRecord                           

        Синтаксис

             void PlayMetaFileRecord(hDC,lpHandletable,lpMetaRecord,
                                                                nHndl)

             Эта функция выводит запись метафайла  посредством  вызовов
             функций  GDI,  содержащихся  в  записи  метафайла.  Запись
             метафайла является набором вызовов GDI.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства
                               вывода.

             lpHandletable     LPHANDLETABLE  Указывает на таблицу
                               дескриптора объекта, используемую для
                               выполнения метафайла.

             lpMetaRecord      LPMETARECORD  Указывает на метафайл,
                               который будет использоваться.

             nHndl             WORD  Определяет  число дескрипторов в
                               таблице дескрипторов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Прикладные программы  обычно  использует  эту  функцию   в
             сочетании с функцией EnumMetafile для модификации и вывода
             метафайла.

        ───────────────────────────────────────────────────────────────
                                       Polygon                                 

        Синтаксис

             BOOL Polygon(hDC,lpPoints,nCount)

             Эта функция рисует многоугольник, содержащий две или более
             точки (вершины), соединенные линиями. Эти линии рисуются в
             соответствии с  текущим  режимом  заливки  многоугольника.
             Многоугольник автоматически  заливается  с  использованием
             текущего режима заливки многоугольников. (Описание режимов
             заливки  многоугольников  смотрите  в   описании   функции
             SetPolyFillMode). Многоугольник автоматически закрывается,
             т.е.  последняя вершина соединяется  с  первой,  если  это
             необходимо.


       Windows 3.0/Ref/4#7                                       = 26 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpPoints          LPPOINT  Указывает на массив точек,
                               определяющих вершины многоугольника.
                               Каждая точка в массиве должна содержаться
                               в структуре типа POINT.

             nCount            int  Определяет число вершин, заданных
                               в массиве.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно 0,  если функция выполнилась успешно.  В
             противном случае равно 0.

        Примечания

             Функция не использует текущую позицию и не изменяет ее.

             Текущий режим заливки многоугольника может быть установлен
             или   получен   с   помощью   функций   SetPolyFillMode  и
             GetPolyFillMode соответственно.

        ───────────────────────────────────────────────────────────────
                                       Polyline                                

        Синтаксис

             BOOL Polyline(hDC,lpPoints,nCount)

             Эта функция  рисует  набор  линейных  сегментов,  соединяя
             точки,  определяемые параметром lpPoints. Линии проводятся
             от первой точки через последовательность точек, также, как
             если  бы  использовались  функции  MoveTo  и  LineTo,  где
             одновременно  с  перемещением  от  точки к точке выводится
             линия, их соединяющая.  Однако функция не использует и  не
             изменяет текущую позицию.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpPoints          LPPOINT  Указывает на массив точек,
                               определяющих связываемые точки. Каждая
                               точка в массиве должна содержаться в
                               структуре типа POINT.

             nCount            int  Определяет число точек, заданных
                               в массиве. Должен быть по крайней мере 2.

       Windows 3.0/Ref/4#7                                       = 27 =

             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   были   или   не   были
             нарисованы линии.  Не  равно  0,  Если функция выполнилась
             успешно. В противном случае равно 0.

        Примечание

             Эта функция рисует линии  с  помощью  текущего  выбранного
             пера.

        ───────────────────────────────────────────────────────────────
                                  PolyPoligon [3.0]                            

        Синтаксис

             BOOL PolyPoligon(hDC,lpPoints,lpPolyCounts,nCount);

             Эта функция  создает  набор   замкнутых   многоугольников.
             Многоугольники заполняются   с   использованием   текущего
             режима заполнения   многоугольников.   Описание    режимов
             заполнения многоугольников  вы  найдете в описании функции
             SetPolyFillMode. Многоугольники  могут  перекрываться,  но
             лучше этого не делать.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpPoints          LPPOINT  Указывает на массив структур
                               данных типа POINT, которые содержат вер-
                               шины многоугольников. Каждый многоугольник
                               должен быть замкнут, поскольку многоуголь-
                               ники, создаваемые функцией PolyPolygon,
                               не замыкаются автоматически, как это
                               делает функция Polygon.

             lpPolyCounts      LPINT  Указатель на массив целых чисел,
                               которые определяют число точек из массива
                               lpPoints, принадлежащие каждому многоу-
                               гольнику.

             mCount            int  Определяет число элементов в массиве
                               lpPolyCounts.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Если многоугольники нарисованы, он не равен нулю.
             В противном случае он равен нулю.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 28 =

                                    PostAppMessage                             

        Синтаксис

             BOOL PostAppMessage(hTask,wMsg,wParam,lParam)

             Эта функция   передает   сообщение  прикладной  программе,
             идентифицированной  дескриптором  задачи,   и   возвращает
             управление, не    ожидая,    пока   прикладная   программа
             обработает  сообщение.   Прикладная   программа   получает
             сообщение    за   сообщением,   вызывая   GetMessage   или
             PeekMessage.  Поле hWnd возвращаемой  структуры  типа  MSG
             равно NULL.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hTask             HANDLE  Идентифицирует дескриптор задачи,
                               которая получает сообщение. Этот дескрип-
                               тор можно получить с помощью функции
                               GetCurrentTask.

             wMsg              WORD  Задает тип передаваемого сообщения.

             wParam            WORD  Содержит дополнительную информацию
                               о сообщении.

             lParam            DWORD  Содержит дополнительную информацию
                               о  сообщении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет передано  ли  сообщение.  Не  равно нулю,  если
             происходит передача сообщения.  В противном  случае  равно
             нулю.

        ───────────────────────────────────────────────────────────────
                                     PostMessage                               

        Синтаксис

             BOOL PostMessage(hWnd,wMsg,wParam,lParam)

             Эта функция помещает сообщение в очередь  окна  прикладной
             программы и   возвращает   управление,   не  ожидая,  пока
             соответствующее  окно  обработает  сообщение.   Переданное
             сообщение может быть получено с помощью вызовов GetMessage
             или PeekMessage.


       Windows 3.0/Ref/4#7                                       = 29 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует дескриптор окна,
                               которое должно получить сообщение. Если
                               параметр hWnd имеет шестнадцатиричное
                               значение  FFFF, то сообщение посылается
                               всем перекрывающимся  или  накладываемым
                               окнам в системе. Сообщение не посылается
                               дочерним окнам.

             wMsg              WORD  Задает тип передаваемого сообщения.

             wParam            WORD  Содержит дополнительную информацию
                               о сообщении.

             lParam            DWORD  Содержит дополнительную информацию
                               о  сообщении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет передано  ли  сообщение.  Не  равно нулю,  если
             происходит передача сообщения.  В противном  случае  равно
             нулю.

        Примечания

             Прикладная программа   никогда   не   должна  использовать
             функцию  PostMessage  для   посылки   сообщения   в   блок
             управления. Если   система   работающая   под  управлением
             Windows,  сконфигурирована,  как  система  с   расширенной
             памятью (EMS) и прикладная программа посылает сообщение (с
             помощью функции PostMessage) с зависимыми данными (которые
             указываются с  помощью параметра lParam) второй прикладной
             программе, первая программа должна  поместить  данные  (на
             которые  указывает  параметр  lParam) в глобальную памать,
             выделенную  посредством  функции  GlobalAlloc   с   флагом
             GMEM_LOWER.   Необходимо  отметить,  что  такое  выделение
             памяти необходимо лишь  в  случае,  если  lParam  содержит
             указатель.

             В отличие   от   остальных   функций  Windows,  прикладная
             программа может вызывать  функцию  PostMessage  на  уровне
             обработки прерываний оборудования.

        ───────────────────────────────────────────────────────────────
                                   PostQuitMessage                             

        Синтаксис

             void PostQuitMessage(nExitCode)

             Эта функция  информирует  среду  Windows,  что  прикладная
             программа   будет   заканчивать   выполнение.  Обычно  она
             используется в ответ на сообщение WM_DESTROY.

       Windows 3.0/Ref/4#7                                       = 30 =


             PostQuitMessage посылает  сообщение   WM_QUIT   прикладной
             программе и сразу же возвращает управление; функция только
             информирует систему, что программа желает выйти из Windows
             в ближайшем будущем.

             Когда прикладная программа получает сообщение WM_QUIT, она
             должна выйти  из  цикла  обработки  сообщений  в  основной
             функции и  возвратить  управление  среде  Windows.  В коде
             выхода, возвращаемом Windows должен быть передан  параметр
             wParam сообщения WM_QUIT.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nExitCode         int  Задает код завершения работы прик-
                               ладной программы. Это параметр wParam
                               сообщения WM_QUIT.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       ProfClear [3.0]

        Синтаксис

             void ProfClear()

             При работе   Microsoft   Windows   Profiler   эта  функция
             сбрасывает все образцы,  находящиеся  в  буфере.  Смотрите
             описание Profiler в "Tools".

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       ProfFinish [3.0]

        Синтаксис

             void ProfFinish()

             При работе  Microsoft   Windows   Profiler   эта   функция
             завершает отбор проб и сбрасывает буфер на диск.

             При работе  Windows  в  расширенном режиме процессора 386,
             эта функция   также   очищает   буфер    для    системного
             использования. Смотрите описание Profiler в "Tools".

       Windows 3.0/Ref/4#7                                       = 31 =


             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                   ProfFlush [3.0]                             

        Синтаксис

             void ProfFlush()

             При работе  Microsoft   Windows   Profiler   эта   функция
             сбрасывает буфер  проб  на  диск,  давая уверенность,  что
             пробы не превысили установленного предела.

             При работе Windows  в  любом  режиме,  кроме  расширенного
             режима процессора   386,   вы  должны  определить  размеры
             выходного буфера  и  число  проб,  которые   должны   быть
             сброшены на диск.

             При работе  Windows  в  расширенном режиме процессора 386,
             для определения размеров выходного буфера  и  числа  проб,
             которые должны быть сброшены на диск, прикладная программа
             использует функцию ProfSetup.

             Смотрите описание Profiler в "Tools".

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечание

             Не вызывайте функцию ProfFlush часто,  так как это  сильно
             ухудшает характеристики системы. Кроме этого, не вызывайте
             эту функцию  когда  возможна  работа  DOS,  например   при
             обработки прерываний.

        ───────────────────────────────────────────────────────────────
                                                                               
       ProfInsChk [3.0]

        Синтаксис

             int ProfInsChk()

             Эта функция проверяет,  установлен  ли  Microsoft  Windows
             Profiler. Смотрите описание Profiler в "Tools".


       Windows 3.0/Ref/4#7                                       = 32 =

             Эта функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение  определяет установлен ли Profiler и
             если установлен его версию.  Если Profiler не  установлен,
             то функция  возвращает ноль.  Если Profiler установлен для
             работы в режиме Windows,  отличном от расширенного  режима
             процессора  386,  то  функция  возвращает  1,  и  2,  если
             Profiler установлен  для  работы  Windows  в   расширенном
             режиме процессора 386.

        ───────────────────────────────────────────────────────────────
                                  ProfSampRate [3.0]                           

        Синтаксис

             void ProfSampRate(nRate286,nRate386)

             При работе  Microsoft   Windows   Profiler   эта   функция
             устанавливает   частоту  отбора  проб.  Смотрите  описание
             Profiler в "Tools".

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nRate286          int  Определяет частоту отбора проб
                               Profiler, работающем в Windows в любом
                               режиме, отличном от расширенного режима
                               процессора 386. Значение nRate286 может
                               быть в диапазоне от 1 до 13, и определяет
                               следующие частоты:

                               Значение  Описание
                               ────────────────────────────────────────
                               1         122.070 микросекунды
                               2         244.141 микросекунды
                               3         488.281 микросекунды
                               4         976.562 микросекунды
                               5         1.953125 миллисекунды
                               6         3.90625 миллисекунды
                               7         7.8125 миллисекунды
                               8         15.625 миллисекунды
                               9         31.25 миллисекунды
                               10        62.5 миллисекунды
                               11        125 миллисекунд
                               12        250 миллисекунд
                               13        500 миллисекунд
                               ────────────────────────────────────────

             nRate386          int  Определяет частоту отбора проб
                               Profiler'ом, работающем в Windows в рас-
                               ширенном режиме процессора 386. Значение
                               nRate386 может быть в диапазоне от 1 до

       Windows 3.0/Ref/4#7                                       = 33 =

                               1000 определяя частоту в миллисекундах.
             ──────────────────────────────────────────────────────────


        Возвращаемое значение

             Нет.

        Примечания

             Для Windows работающем  в  расширенном  режиме  процессора
             386, по умолчанию используется частота 2 миллисекунды. Ели
             Windows работает в любом другом  режиме,  то  используется
             частота 5 (3.953125 миллисекунды).

             Profiler использует    только    то    значение,   которое
             соответствует используемой версии Windows.

        ───────────────────────────────────────────────────────────────
                                   ProfSetup [3.0]                             

        Синтаксис

             void ProfSetup (nBufferSize,nSamples);

             При работе   Microsoft   Windows   Profiler   с   Windows,
             работающей в  расширенном  режиме  процессора   386,   эта
             функция определяет  размер  выходного буфера и число проб,
             записываемых на диск. Если Windows работает в любом другом
             режиме эта   функция   игнорируется.   Смотрите   описание
             Profiler в "Tools".

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nBufSize          int Определяет размер выходного буфера в
                               килобайтах. Параметр nBufSize должен быть
                               в диапазоне от 1 до 1064. По умолчанию
                               используется 64.

             nSamples          int  Определяет сколько проб должен за-
                               писать на диск Profiler. Нулевое значе-
                               ние определяет неограничиваемое число.
                               По умолчанию используется ноль.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       ProfStart [3.0]

        Синтаксис

       Windows 3.0/Ref/4#7                                       = 34 =


             void ProfStart()

             При работе  Microsoft   Windows   Profiler   эта   функция
             запускает  отбор  образцов.  Смотрите  описание Profiler в
             "Tools".

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       ProfStop [3.0]

        Синтаксис

             void ProfStop()

             При работе   Microsoft   Windows   Profiler   эта  функция
             останавливает отбор образцов. Смотрите описание Profiler в
             "Tools".

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                       PtInRect                                

        Синтаксис

             BOOL PtInRect(lpRect,Point)

             Эта функция указывает, лежит ли указанная точка в заданном
             прямоугольнике.    Точка    считается    расположенной   в
             прямоугольнике,  если она лежит на левой левой или верхней
             границе,  или внутри прямоугольника. Точка, находящаяся на
             правой  или  нижней  стороне   прямоугольника,   считается
             расположенной вне прямоугольника.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT   Указывает  на  структуру данных
                               типа RECT, которая содержит координаты
                               задаваемого  прямоугольника.

             Point             POINT  Определяет структуру данных  типа
                               POINT, которая содержит координаты
                               задаваемой точки.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 35 =


        Возвращаемое значение

             Возвращаемое значение определяет,  лежит ли  точка  внутри
             данного прямоугольника.  Не  равно нулю,  если точка лежит
             внутри заданного прямоугольника.  В противном случае равно
             нулю.

        ───────────────────────────────────────────────────────────────
                                      PtInRegion                               

        Синтаксис

             BOOL PtInRegion(hRgn,X,Y)

             Эта функция определяет,  находится ли точка с  логическими
             координатами X,Y в данной области.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hRgn              HRGN  Идентифицирует контролируемую
                               область.

             Х                 int  Определяет логическую координату x
                               точки.

             У                 int  Определяет логическую координату y
                               точки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет,  лежит  ли точка внутри
             указанной области.  Не равно нулю, если точка лежит внутри
             области. В противном случае равно нулю.

        ───────────────────────────────────────────────────────────────
                                      PtVisible                                

        Синтаксис

             BOOL PtVisible(hDC,X,Y)

             Эта функция определяет,  находится ли данная точка  внутри
             области отсечения заданного контекста устройства.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             Х                 int  Определяет логическую координату x

       Windows 3.0/Ref/4#7                                       = 36 =

                               точки.

             У                 int  Определяет логическую координату y
                               точки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет,  лежит  ли точка внутри
             области отсечения данного контекста устройства.  Не  равно
             нулю, если   точка   лежит  внутри  области  отсечения.  В
             противном случае равно нулю.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 37 =

                                       ReadComm                                

        Синтаксис

             int ReadComm(nCid,lpBuf,nSize)

             Эта функция   осуществляет   чтение   nSize   символов  из
             устройства  связи,  определенного   параметром   nCid,   и
             копирует их в буфер, на который указывает параметр lpBuf.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи для
                               чтения (приема). Это значение возвращает
                               функция OpenComm.

             lpBuf             LPSTR  Указывает на буфер для размещения
                               считываемых символов.

             nSize             int  Определяет число считываемых
                               символов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    число    фактически
             считанных  символов.  Оно  меньше  чем   число,   заданное
             параметром nSize только в том случае,  если число символов
             в очереди приема меньше,  чем nSize. Если оно равно nSize,
             дополнительные  символы могут быть установлены в очередь к
             устройству.  Если возвращаемое значение равно  0,  то  нет
             символов в наличии.

             При ошибке   возвращаемое  значение  отрицательно,  причем
             абсолютное значение определяет число фактически  считанных
             символов.  Причина  ошибки может быть определена с помощью
             функции GetCommError,  которая  возвращает  код  ошибки  и
             состояние.  Поскольку  ошибки  могут  иметь место и тогда,
             когда байты не передавались,  если  возвращаемое  значение
             равно  нулю,  то в этом случае функция GetCommError должна
             быть использована для гарантии, что ошибки отсутствуют.

             Для параллельных   портов    ввода/вывода,    возвращаемое
             значение будет всегда равно нулю.

        ───────────────────────────────────────────────────────────────
                                 RealizePalette [3.0]                          

        Синтаксис

             int RealizePalette(hDC)


       Windows 3.0/Ref/4#7                                       = 38 =

             Эта функция  отображает   элементы   логической   палитры,
             выбранной в контексте устройства на системную палитру.

             Логическая палитры   выступает  в  качестве  буфера  между
             интенсивно использующей  цвета  программой   и   системой,
             позволяющей прикладной   программе   использовать  столько
             цветов, сколько ей необходимо,  причем на это не оказывает
             влияние ни   собственные   отображемые   цвета,  ни  цвета
             отображаемые в окнах  других  прикладных  программ.  Когда
             окно получает    захват    ввода    и   вызывает   функцию
             RealizePalette, Windows гарантирует,  что  будут  выведены
             все требуемые цвета, вплоть до максимального числа цветов,
             которые могут одновременно отображаться  дисплеем,  а  все
             дополнительные будут   отображаться  на  доступные  цвета.
             Кроме этого, Windows отображает все цвета неактивных окон,
             вызвавшых RealizePalette,  насколько  возможно  близко  на
             доступные цвета.  Этим  значительно  уменьшается  ненужные
             изменения цветов в неактивных окнах.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    число     элементов
             логической палитры,   отображенных   на   другие  элементы
             системной палитры. Оно представляет собой число элементов,
             которые система    переотобразила    для    приведения   в
             соответствие с изменениями в системной палитре, внесенными
             последним вызовом RealizePalette.

        ───────────────────────────────────────────────────────────────
                                      Rectangle                                

        Синтаксис

             BOOL Rectangle(hDC,X1,Y1,X2,Y2)

             Эта функция    рисует    прямоугольник.    При     заливке
             прямоугольника   используется   текущая   кисть;   граница
             прямоугольника рисуется текущим пером.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X1               int  Определяет логическую координату x
                              верхнего  левого угла прямоугольника.

             Y1               int  Определяет логическую координату y
                              верхнего  левого угла прямоугольника.

       Windows 3.0/Ref/4#7                                       = 39 =


             X2               int  Определяет логическую координату x
                              нижнего правого угла прямоугольника.

             Y2               int  Определяет логическую координату y
                              нижнего правого угла прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет   был   ли   нарисован
             прямоугольник. Не  равно  0,  если   функция   выполнилась
             успешно. В противном случае равно 0.

        Примечания

             Ширина прямоугольника,  определяемая  абсолютным значением
             (X2 - X1),  не должна превышать  32767  единиц.  Такое  же
             ограничение справедливо и для высоты прямоугольника.

             Функция не использует текущую позицию и не изменяет ее.

        ───────────────────────────────────────────────────────────────
                                                                               
       RectInRegion [3.0]

        Синтаксис

             BOOL  RectInRegion(hRegion,lpRect)

             Эта функция  определяет  лежит   ли   какая   либо   часть
             прямоугольника, определяемого   параметром  lpRect  внутри
             области, идентифицируемой hRegion.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hRegion           HRGN  Идентифицирует область.

             lpRect            LPRECT  Идентифицирует прямоугольник.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно   TRUE,   если  любая  часть
             прямоугольника лежит внутри области.  в  противном  случае
             оно равно FALSE.

        ───────────────────────────────────────────────────────────────
                                     RectVisible                               

        Синтаксис

             BOOL RectVisible(hDC,lpRect)


       Windows 3.0/Ref/4#7                                       = 40 =

             Эта функция  определяет,  находится  ли  какая-либо  часть
             данного  прямоугольника  внутри  области отсечения данного
             устройства (дисплея).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpRect            LPRECT  Указывает  на  структуру данных
                               типа RECT, которая содержит логические
                               координаты данного прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  лежит  ли прямоугольник
             внутри области отсечения.  Не равно 0,  если часть данного
             прямоугольника лежит внутри области отсечения. В противном
             случае равно 0.

        ───────────────────────────────────────────────────────────────
                                    RegisterClass                              

        Синтаксис

             BOOL RegisterClass(lpWndClass)

             Эта функция   регистрирует  класс  окна  для  последующего
             использования в вызовах функции CreateWindow.  Класс  окна
             имеет  атрибуты класса,  определяемые содержимым структуры
             данных,  на которую указывает  параметр  lpWndClass.  Если
             зарегистрированы  два  класса,  имеющие  одно и то же имя,
             распознается последний  зарегистрированный  класс;  другой
             класс игнорируется.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpWndClass        LPWNDCLASS  Указывает на структуру
                               данных WNDCLASS. Структура должна быть
                               заполнена соответствующими  атрибутами
                               класса  перед  тем,  как  быть переданной
                               функции. Смотрите раздел "Примечания".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет зарегистрирован ли  класс
             окна.   Не  равно  нулю,  если  класс  зарегистрирован.  В
             противном случае равно нулю.

        Примечания

             Функции многократного    вызова    должны     использовать

       Windows 3.0/Ref/4#7                                       = 41 =

             соглашение  по  вызову функций языка Паскаль и должны быть
             объявлены, как FAR. Функция должна иметь следующий вид:

             BOOL FAR PASCAL WndProc(hWnd,wMsg,wParam,lParam)
             HWND hWnd;
             unsigned wMsg;
             WORD wParam;
             DWORD lParam;

             WndProc это метка-заполнитель которая должна быть заменена
             на  соответствующее  имя функции.  Имя функции должно быть
             экспортировано,  поэтому  ее  имя  необходимо  включить  в
             оператор EXPORTS в файле определения модуля.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              Идентифицирует окно, которое получает
                               сообщения.

             wMsg              Определяет номер сообщения.

             wParam            Определяет  дополнительную  информацию,
                               которая зависит от сообщения.

             lParam            Определяет  дополнительную  информацию,
                               которая зависит от сообщения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция окна  возвращает  результат  обработки  сообщения.
             Возможное  возвращаемое  значение  зависит  от  посланного
             сообщения.

        ──────────────────────────────────────────────────────────────
        RegisterClipboardFormat

        Синтаксис

             WORD RegisterClipboardFormat(lpFormatName)

             Эта функция регистрирует новый формат  системного  буфера,
             на имя которого указывает lpFormatName. Зарегистрированный
             формат  может  быть  использован  в  последующих  функциях
             системного   буфера   как  допустимый  формат,  в  котором
             представляются данные,  и он  будет  появляться  в  списке
             форматов системного буфера.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpFormatName      LPSTR  Указывает на строку знаков, имену-
                               ющую новый   формат.    Строка    должна
                               оканчиваться нулем.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 42 =


        Возвращаемое значение

             Возвращаемое значение  определяет   вновь   регистрируемый
             формат.  Если  прежде было зарегистрировано идентичное имя
             формата даже другой прикладной программой,  счетчик ссылок
             на формат увеличивается и возвращается то же значение, как
             и при первоначальной  регистрации.  Возвращаемое  значение
             равно 0, если формат не может быть зарегистрирован.


        Примечание

             Значение формата,          возвращаемое           функцией
             RegisterClipboardFormat,  находится  в диапазоне от 0xC000
             до 0xFFFF.

        ───────────────────────────────────────────────────────────────
                                RegisterWindowMessage                          

        Синтаксис

             WORD RegisterWindowMessage(lpString)

             Эта функция   определяет   новое  сообщение  окна,  причем
             гарантируется,  что оно  является  уникальным  в  системе.
             Возвращаемое  значение  сообщения  может быть использовано
             при вызове SendMessage или PostMessage.

             RegisterWindowMessage обычно используется для  связи  двух
             взаимодействующих прикладных программ.

             Если одна  и  та  же строка сообщения регистрируется двумя
             различными программами, возвращается одно и то же значение
             сообщения.  Сообщение  остается  зарегистрированным до тех
             пор, пока пользователь не окончит сеанс работы с Windows.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpString          LPSTR  Указывает на строку сообщения,
                               которая должна быть зарегистрирована.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции.  Это  беззнаковое  целое  значение в диапазоне от
             C000  до  FFFF   (16-ричные),   если   сообщение   успешно
             зарегистрировано. В противном случае равно нулю.

        Примечания


       Windows 3.0/Ref/4#7                                       = 43 =

             RegisterWindowMessage необходимо использовать только в том
             случае,  когда  одно  и  то  же  сообщение   должно   быть
             распознано более,   чем   одной  программой.  Для  посылки
             частных  сообщений  внутри  прикладной   программы   можно
             использовать    любую    целую   константу   в   диапазоне
             шестнадцатиричных значений от WM_USER до 0xBFFF.

        ───────────────────────────────────────────────────────────────
                                                                               
       ReleaseCapture

        Синтаксис

             void ReleaseCapture( )

             Эта функция  служит для прекращения ввода с помощью мыши и
             восстанавливает нормальную обработку ввода.  Окно, имеющее
             захват ввода с помощью мыши, получает все собщения ввода с
             помощью мыши независимо от положения курсора мыши.

             Функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечание

             Прикладные программы вызывают  эту  функцию  после  вызова
             SetCapture.

        ───────────────────────────────────────────────────────────────
                                      ReleaseDC                                

        Синтаксис

             int ReleaseDC(hWnd,hDC)

             Эта функция   применяется   для   освобождения   контекста
             отображения, делая его доступным для использования другими
             прикладными  программами.  Результат   функции   ReleaseDC
             зависит  от  типа  контекста  устройства.  Она освобождает
             только  контексты  устройства  окна  и   общие.   Она   не
             действует на контексты устройства класса и частных.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно,  контекст
                               устройства которого освобождается.

             hDC               HDC  Идентифицирует освобождаемый контекст
                               устройства.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 44 =

        Возвращаемое значение

             Возвращаемое значение   определяет   был   ли   освобожден
             контекст устройства.  Равно  1,  если  контекст устройства
             освобождается. В противном случае равно 0.

        Примечание

             Для каждого вызова функции GetDC или GetWindowDC,  которая
             возвращает общий  контекст  устройства,  программа  должна
             вызвать функцию ReleaseDC.

        ───────────────────────────────────────────────────────────────
                                  RemoveFontResource                           

        Синтаксис

             BOOL RemoveFontResource(lpFileName)

             Эта функция  удаляет  добавленный  ресурс шрифта из файла,
             идентифицированного параметром lpFileName,  или из таблицы
             шрифтов Windows.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpFileName        LPSTR  Указывает на строку, идентифици-
                               рующую имя файла ресурса шрифта, или
                               содержит дескриптор загружаемого модуля.
                               Если lpFileName указывает на имя файла
                               ресурса шрифта, то строка должна
                               завершаться нулем, содержать имя файла
                               в формате DOS и включать расширение.
                               Если lpFileName содержит дескриптор, то
                               он должен  располагаться  в  младшем
                               слове и  старшее слово должно быть
                               обнулено.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции.  Не равно нулю, если функция завершена успешно. В
             противном случае оно равно нулю.

        Примечания

             Любая прикладная программа,  которая добавляет или удаляет
             шрифты из таблицы шрифтов Windows, должна известить другие
             окна  об  изменении,  послав  сообщение  WM_FONTCHANGE   с
             помощью функции  SendMessage (указать в качестве параметра
             hWnd -1).  Сообщение  должно  быть  послано  во  све  окна
             верхнего уровня системы.


       Windows 3.0/Ref/4#7                                       = 45 =

             Функция RemoveFontResource   может   в  данный  момент  не
             удалить ресурс шрифта.  Если имеются отложенные ссылки  на
             ресурс, то  ресурс шрифта остается загруженным до тех пор,
             пока не будет удалена последняя ссылка на логический шрифт
             с попощью функции DeleteObject.

        ───────────────────────────────────────────────────────────────
                                  RemuveMenu  [3.0]                            

        Синтаксис

             BOOL  RemoveMenu(hMenu,nPosition,wFlags)

             Эта функция удаляет элемент меню вместе со связанным с ним
             накладываемым меню  из меню определяемым параметром hMenu,
             но не  разрушает  дескриптор  накладываемого   меню,   что
             позволяет использовать  меню  в дальнейшем.  Перед вызовом
             этой функции прикладная программа должна  вызвать  функцию
             GetSubMenu для получения дескриптора накладываемого меню.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует изменяемое меню.

             nPosition         WORD  Определяет удаляемый элемент меню.
                               Интерпретация параметра nPosition зависит
                               от параметра wFlags.

                               wFalgs        nPosition
                               ────────────────────────────────────────
                               MF_BYCOMMAND  Определяет идентификатор
                                             элемента меню.

                               MF_BYPOSITION Определяет позицию элемента
                                             меню. Первый элемент нахо-
                                             дится в позиции 0.
                               ────────────────────────────────────────

             wFalgs            WORD  Определяет то, как будет интерпре-
                               тироваться параметр nPosition. Он может
                               быть или MF_BYPOSITION или MF_BYCOMMAND.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Если функция завершена успешно возвращается TRUE,
             или FALSE в противном случае.

        Примечание

             При изменении меню (независимо от того,  находится или нет
             меню в  отображаемом  окне)  прикладная  программа  должна

       Windows 3.0/Ref/4#7                                       = 46 =

             вызвать функцию DrawMenuBar.

        ───────────────────────────────────────────────────────────────
                                      RemoveProp                               

        Синтаксис

             HANDLE RemoveProp(hWnd,lpString)

             Эта функция  удаляет  указанную  строку из перечня свойств
             окна. Символьная    строка,     определяемая     lpString,
             идентифицирует удаляемый элемент.

             Функция RemoveProp     возвращает    дескриптор    данных,
             соответствующий этой строке.  Программа  может  освободить
             данные, связанные с дескриптором.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, перечень
                               свойств которого должен быть изменен.

             lpString          LPSTR  Указывает на заканчивающуюся нулем
                               символьную строку в коде ASCII или атом,
                               идентифицирующий строку. Если задан атом,
                               он должен быть предварительно создан с
                               помощью функции AddAtom. Атом,
                               шестнадцатиричное  значение, должен
                               помещаться в младшем слове параметра
                               lpString, старшее слово должно быть равно
                               0.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует заданную строку.  Оно
             равно NULL,  если строка не может быть найдена в  заданном
             перечне свойств.

        Примечание

             Прикладная программа должна освободить дескрипторы данных,
             связанные с  удаленными  из  перечня   свойств   строками.
             Необходимо удалять   только   те  свойства,  которые  были
             добавлены к списку свойств.

        ───────────────────────────────────────────────────────────────
                                     ReplyMessage                              

        Синтаксис

             void ReplyMessage(lReply)


       Windows 3.0/Ref/4#7                                       = 47 =

             Эта функция   используется   для   ответа   на  сообщение,
             посылаемое с помощью SendMessage без  возврата  управления
             функции,   вызывающей   SendMessage.

             Вызов этой  функции  позволяет  функции  окна,  получившей
             сообщение вернуть управление задаче, пославшей сообщение с
             помощью функции     SendMessage.     Задача     вызывавшая
             ReplyMessage также продолжает выполнение.

             Обычно, задача,  которая вызывает функцию SendMessage  для
             передачи сообщения  другой задаче не продолжает выполнения
             до тех  пор,  пока  не  вернет  управление  функция  окна,
             которую вызвала Windows для передаче ей сообщения. Однако,
             если задача,  которой было  послано  сообщение  собирается
             выполнять действия,   которые   могут  привести  к  потере
             управления (например  вызов  MessageBox  или   DialogBox),
             тогда Windows  может перейти сообщение в состояние,  когда
             пославшая сообщение задача должна продолжить выполнение  и
             обрабатывать сообщения,   но   не   может  этого  сделать,
             поскольку ожидает возврата из SendMessage. Чтобы исключить
             такую ситуацию,  прикладная  программа  может  сразу после
             приема сообщения  вызвать   функцию   ReplyMessage   перед
             выполнение остальной обработки.

             Функция ReplyMessage  не  выполняет  никакой работы,  если
             сообщение послано не с помощью SendMessage или послано  из
             той же самой задачи.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lReply            LONG  Определяет результат обработки
                               сообщения. Возможные его значения зависят
                               от фактически посылаемого сообщения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                 ResizePalette [3.0]                           

        Синтаксис

             BOOL ResizePalette(hPalette,nNumEntries)

             Эта функция    изменяет    размер    логической   палитры,
             определяемой параметром   hPalette,   в   соответствии   с
             размером, задаваемым    параметром    nNumEntries.    Если
             прикладная программа вызывает ResizePalette для уменьшения
             размера палитры,   оставшиеся   элементы   в   палитре  не
             изменяются. Если  программа  вызывает  ResizePalette   для
             увеличения размера  палитры,  то  дополнительные  элементы

       Windows 3.0/Ref/4#7                                       = 48 =

             устанавливаются в черный цвет (красный,  зеленый  и  синиц
             компоненты равны  0),  и флаг для дополнительных элементов
             также устанавливается в 0.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hPalette          HPALETTE  Идентифицирует изменяемую
                               палитру.

             nNumEntries       int  Определяет число элементов в полу-
                               ченной палитре.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Если палитра изменена,  то оно  равно  TRUE,  или
             FALSE в противном случае.

        ───────────────────────────────────────────────────────────────
                                      RestoreDC                                

        Синтаксис

             BOOL RestoreDC(hDC,nSavedDC)

             Эта функция    восстанавливает    контекст     устройства,
             определяемый   параметром  hDC,  в  предыдущее  состояние,
             идентифицируемое параметром  nSavedDC.  Функция  RestoreDC
             восстанавливает контекст устройства,  копируя информацию о
             состоянии,  сохраненную в стеке  контекста  более  ранними
             вызовами SaveDC.

             Стек контекста  может  содержать  информацию  о  состоянии
             нескольких   контекстов   устройства.    Если    контекст,
             определяемый  nSavedDC,  находится не в вершине стека,  то
             вызов  RestoreDC  удаляет  всю  информацию  о   состоянии,
             находящуюся  между  nSavedDC  и вершиной стека.  Удаляемая
             информация утрачивается.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nSavedDC          int  Определяет восстанавливаемый
                               контекст устройства.  Оно может быть
                               значением, возвращенным предыдущим
                               вызовом функции SaveDC. Если nSavedDC
                               равно -1, то восстанавливается последний
                               сохраненный контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                       = 49 =


             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно  TRUE,  если  функция  выполнилась успешно.
             Если произошла ошибка, то равно FALSE.

        ───────────────────────────────────────────────────────────────
                                         RGB                                   

        Синтаксис

             COLORREF RGB(cRed,cGreen,cBlue)

             Эта макрокоманда  выбирает  RGB цвет,  используя выбранные
             параметры и цветовые характеристики устройства вывода.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             cRed              BYTE  Определяет интенсивность поля
                               красного цвета.

             cGreen            BYTE  Определяет интенсивность поля
                               зеленого цвета.

             cBlue             BYTE  Определяет  интенсивность  поля
                               голубого цвета.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет выбранный  RGB цвет.

        Примечание

             Интенсивность для каждого  аргумента  может  изменяться  в
             диапазоне  от  0  до 255.  Если все три параметра содержат
             значение интенсивности,  равное 0,  то в результате  будет
             черный  цвет.  Если  все  три  параметра содержат значение
             интенсивности,  равное 255,  то в результате  будет  белый
             цвет.

             Описание использования   цвета  в  палитре  вы  найдете  в
             описании макрокоманд  PALETTEINDEX  и  PALETTERGB  выше  в
             данной главе.

        ───────────────────────────────────────────────────────────────
                                      RoundRect                                

        Синтаксис

             BOOL RoundRect(hDC,X1,Y1,X2,Y2,X3,Y3)

             Эта функция рисует прямоугольник с  закругленными  углами.
             При  заливке  прямоугольника  используется  текущая кисть.

       Windows 3.0/Ref/4#7                                       = 50 =

             Граница прямоугольника рисуется текущим пером.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X1                int  Определяет логическую координату x
                               верхнего левого угла прямоугольника.

             Y1                int  Определяет логическую координату y
                               верхнего левого угла прямоугольника.

             X2                int  Определяет логическую координату x
                               нижнего  правого  угла  прямоугольника.

             Y2                int  Определяет логическую координату y
                               нижнего  правого  угла  прямоугольника.

             X3                int  Определяют ширину эллипса,
                               использующегося  для закругления углов
                               прямоугольника.

             Y3                int  Определяют высоту эллипса,
                               использующегося  для закругления углов
                               прямоугольника.

             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение     определяет     нарисован      ли
             прямоугольник.   Не  равно  0,  если  функция  выполнилась
             успешно. В противном случае равно 0.

        Примечание

             Ширина прямоугольника,  определяемая абсолютным  значением
             (X2  -  X1),  не  должна превышать 32767 единиц.  Такое же
             ограничение справедливо и для высоты прямоугольника.

             Функция не использует текущую позицию и не изменяет ее.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 51 =

                                        SaveDC                                 

        Синтаксис

             int  SaveDC(hDC)

             Эта функция   запоминает   текущее   состояние   контекста
             устройства,   определяемого   параметром   hDC,    копируя
             информацию о  состоянии  (такую,  как  область  отсечения,
             выбранные объекты и режим отображения) в  стек  контекста.
             Сохраняемый   контекст   устройства   позже   может   быть
             восстановлен с помощью функции RestoreDC.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               который будет сохранен.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   сохраняемый   контекст
             устройства,  если  функция  выполнилась  успешно,  и равно
             нулю, если произошла ошибка.

        Примечание

             SaveDC может быть использована произвольное число раз  для
             запоминания  произвольного  количества состояний контекста
             устройства.

        ───────────────────────────────────────────────────────────────
                                   ScaleViewportExt                            

        Синтаксис

             DWORD ScaleViewportExt(hDC,Xnum,Xdenom,Ynum,Ydenom)

             Эта функция  модифицирует  протяженность области просмотра
             относительно   текущих   значений,   используя   следующие
             формулы:

                     xNewVE = (xOldVE * Xnum) / Xdenom
                     yNewVE = (yOldVE * Ynum) / Ydenom


             Новая протяженность    вычисляется    умножением   текущей
             протяженности на заданный числитель,  а затем делением  на
             заданный знаменатель.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

       Windows 3.0/Ref/4#7                                       = 52 =


             Xnum              int  Определяет значение, на которое
                               умножается текущая протяженность по оси
                               x.

             Xdenom            int  Определяет значение, на которое
                               делится текущая протяженность по оси x.

             Ynum              int  Определяет значение, на которое
                               умножается текущая протяженность по оси
                               y.

             Ydenom            int  Определяет значение, на которое
                               делится текущая протяженность по оси y.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение равно старому значению протяженности
             области просмотра   (в  единицах  устройства).  Предыдущая
             протяженность по оси  y  содержится  в  старшем  слове,  а
             протяженность по оси x - в младшем.

        ───────────────────────────────────────────────────────────────
                                    ScaleWindowExt                             

        Синтаксис

             DWORD ScaleWindowExt(hDC,Xnum,Xdenom,Ynum,Ydenom)

             Эта функция модифицирует протяженность  окна  относительно
             текущих значений, используя следующие формулы:

                     xNewWE = (xOldWE * Xnum) / Xdenom
                     yNewWE = (yOldWE * Ynum) / Ydenom

             Новая протяженность   вычисляется    умножением    текущей
             протяженности  на заданный числитель,  а затем делением на
             заданный знаменатель.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             Xnum              int  Определяет значение, на которое
                               умножается текущая протяженность по оси
                               x.

             Xdenom            int  Определяет значение, на которое
                               делится текущая протяженность по оси x.

             Ynum              int  Определяет значение, на которое
                               умножается текущая протяженность по оси

       Windows 3.0/Ref/4#7                                       = 53 =

                               y.

             Ydenom            int  Определяет значение, на которое
                               делится текущая протяженность по оси y.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение равно старому значению протяженности
             окна (в единицах устройства).  Предыдущая протяженность по
             оси y содержится в старшем слове, а протяженность по оси x
             - в младшем.

        ───────────────────────────────────────────────────────────────
                                    ScreenToClient                             

        Синтаксис

             void ScreenToClient(hWnd,lpPoint)

             Эта функция  преобразует координаты экрана для заданной на
             экране   точки,   в   координаты   пользователя.   Функция
             ScreenToClient использует окно,  заданное параметром hWnd,
             и координаты экрана,  заданные  в  структуре  данных  типа
             POINT,   на   которую   указывает  параметр  lpPoint,  для
             вычисления  координат  пользователя,  и   затем   замещает
             координаты   экрана   на  координаты  пользователя.  Новые
             координаты устанавливаются  относительно  верхнего  левого
             угла области пользователя данного окна.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, область
                               пользователя которого будет используется
                               для преобразования.

             lpPoint           LPPOINT  Указывает на  структуру  данных
                               типа POINT, содержащую координаты экрана,
                               которые необходимо пре образовать.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция ScreenToClient  предполагает,  что  данная   точка
             задана в координатах экрана.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 54 =

                                       ScrollDC                                

        Синтаксис

             BOOL ScrollDC(hDC,dx,dy,lprcScroll,lprcClip,hrgnUpdate,
                                                           lprcUpdate)

             Эта функция   осуществляет   прокрутку   по   вертикали  и
             горизонтали  прямоугольника  битов.  Параметр   lprcScroll
             указывает на прямоугольник,  который будет прокручиваться,
             а параметры dx и dy определяют  на  сколько  единиц  будет
             прокручен прямоугольник   по   горизонтали   и   вертикали
             соответственно.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               содержащий прокручиваемые биты.

             dx                int  Определяет  количество элементов,
                               на которое будет осуществляться
                               горизонтальная прокрутка.

             dy                int  Определяет количество  элементов,
                               на  которое будет осуществляться
                               вертикальная прокрутка.

             lprcScroll        LPRECT  Указывает на структуру данных
                               типа RECT,  которая  содержит
                               координаты прокручиваемого
                               прямоугольника.

             lprcClip          LPRECT  Указывает  на структуру данных
                               типа RECT, которая содержит координаты
                               прямоугольника  отсечения. Если этот
                               прямоугольник меньше первоначального,
                               задаваемого параметром lprcScroll,
                               выполняется прокрутка только меньшего
                               прямоугольника.

             hrgnUpdate        HRGN  Идентифицирует область, открываемую
                               в процессе  прокрутки.  Функция ScrollDC
                               определяет   эту   область;    это    не
                               обязательно прямоугольник.

             lprcUpdate        LPRECT  Указывает на структуру данных типа
                               RECT, которая после завершения функции
                               содержит  координаты прямоугольника,
                               ограничивающего модифицированную  область
                               прокрутки. Это - самая большая прямоугольная
                               область, которая требует перерисовки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/4#7                                       = 55 =

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно 0, если выполнена прокрутка. В противном
             случае равно 0.

        Примечание

             Если параметр  hrgnUpdate  или  lprcUpdate равен NULL,  то
             Windows не вычисляет модифицированный прямоугольник.  Если
             hrgnUpdate  не  равно NULL,  Windows предполагает,  что он
             содержит  корректный  дескриптор  области,  открываемой  в
             поцессе прокрутки.

             Прикладная программа     должна    использовать    функцию
             ScrollWindow, если  необходима  прокрутка   всей   области
             пользвателя в окне.  Иначе она должна использовать функцию
             ScrollDC.

        ───────────────────────────────────────────────────────────────
                                     ScrollWindow                              

        Синтаксис

             void ScrollWindow(hWnd,XAmount,YAmount,lpRect,
                                                         lpClipRect)

             Эта функция  позволяет  осуществлять  прокрутку  в   окне,
             перемещая содержимое области пользователя,  причем XAmount
             определяет число единиц, на которое необходимо переместить
             по   оси  X,  а  YAmount  -  по  оси  Y.  Содержимое  окна
             перемещается вправо,  если XAmount положительно,  и влево,
             если оно отрицательно.  Содержимое окна перемещается вниз,
             если YAmount положительно, и вверх, если оно отрицательно.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, область
                               пользователя которого подвергается
                               прокрутке.

             XAmount           int  Определяет смещение (в единицах
                               устройства) по оси X при прокрутке.

             YAmount           int  Определяет смещение (в единицах
                               устройства) по оси Y при прокрутке.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT.  Прямоугольник определяет,
                               какая часть области пользователя в окне
                               должна перемещаться. Если lpRect  равен
                               NULL, перемещается вся область
                               пользователя.

             lpClipRect        LPRECT  Указывает на структуру данных

       Windows 3.0/Ref/4#7                                       = 56 =

                               типа RECT,  определяющую  прямоугольник
                               отсечения. Прокрутке подвергаются только
                               биты  внутри  этого  прямоугольника.  Если
                               lpClipRect равен NULL, то прокрутке
                               подвергается все окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечания

             Если в  таком  окне  находится  псевдокурсор,  то  функция
             ScrollWindow  автоматически  делает  его   невидимым   для
             предотвращения  его  затирания,  а  затем  восстанавливает
             псевдокурсор   после    окончания    прокрутки.    Позиция
             псевдокурсора приводится в соответствие.

             Область, не      обрабатываемая      ScrollWindow,      не
             перерисовывается   ею,   но   объединяется    в    область
             корректировки  окна.  Прикладная  программа в конце концов
             получит сообщение WM_PAINT,  уведомляющее ее  в  том,  что
             область   нуждается  в  перерисовывании.  Для  перерисовки
             этой области одновременно с прокруткой необходимо  вызвать
             функцию UpdateWindow сразу после вызова ScrollWindow.


             Если параметр lpRect равен NULL, то позиции любых дочерних
             окон в окне смещаются на значения,  определяемые XAmount и
             YAmount,  и любые  требующие  корректировки  области  окна
             также  смещаются.  Функция ScrollWindow работает несколько
             быстрее, если lpRect равен NULL.

             Если параметр  lpRect  не  равен  NULL,  то   расположение
             дочерних  окон  не  изменяется и не перемещаются требующие
             корректировки области окна.  Для  предотвращения  проблемы
             корректировки   в  случае,  если  lpRect  не  равен  NULL,
             рекомендуется вызвать функцию UpdateWindow для перерисовки
             окна перед вызовом функции ScrollWindow.

        ───────────────────────────────────────────────────────────────
                                    SelectClipRgn                              

        Синтаксис

             int  SelectClipRgn(hDC,hRgn)

             Эта функция выбирает заданную область, как текущую область
             отсечения  для данного контекста устройства.  Используется
             только копия указанной области.  Сама область  может  быть
             выбрана  для  любого числа других контекстов устройств или
             может быть уничтожена.

       Windows 3.0/Ref/4#7                                       = 57 =


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hRgn              HRGN  Идентифицирует выбираемую область.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  тип  области.  Он может
             быть одним из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Новая область отсечения имеет перекры-
                               вающиеся границы.

             ERROR             Некорректный контекст устройства или
                               дескриптор области.

             NULLREGION        Новая область отсечения пуста.

             SIMPLEREGION      Новая область отсечения не имеет пере-
                               крывающихся границ.
             ──────────────────────────────────────────────────────────

        Примечание

             Функция SelectClipRgn  предполагает,  что  координаты  для
             данной области заданы в единицах устройства.

             Некоторые принтеры    поддерживают   графику   в   меньшем
             разрешение, чем  текст,  чтобы  увеличить  скорость.   Эти
             устройства вычисляют  координаты  для  графики  преобразуя
             одну точку графического устройства в две или четыре  точки
             устройства. Эти  вычисления  влияют  на область отсечения.
             Если на  этом  устройстве   используется   отсечение,   то
             координаты области  отсечения  должны  быть  разделены  на
             соответствующий коэффициент.  Если вырезание  используется
             для текста  то  этого  делать  не надо.  Коэффициент можно
             получить с помощью управляющей последовательности принтера
             GETSCALINGFACTOR.

        ───────────────────────────────────────────────────────────────
                                     SelectObject                              

        Синтаксис

             HANDLE SelectObject(hDC,hObject)

             Эта функция  выбирает  логический   объект,   определяемый
             параметром hObject,  в качестве текущего объекта заданного

       Windows 3.0/Ref/4#7                                       = 58 =

             контекста устройства.  Новый  объект  замещает  предыдущий
             объект того же типа.  Например,  если hObject - дескриптор
             логического пера,  SelectObject  заменяет  текущее,  ранее
             выбранное перо, на перо, определенное hObject.

             Выбранные объекты   являются   объектами   по   умолчанию,
             применяемыми функциями вывода GDI для вычерчивания  линий,
             заливки  замкнутых  областей,  вывода  текста  и отсечения
             вывода  в  заданных  областях  на  экране  дисплея.   Хотя
             контекст  устройства  может  иметь пять выбранных объектов
             (перо,  кисть,  шрифт, растровая карта и область), в любой
             текущий  момент  можно  выбрать  не  более  одного объекта
             данного типа.  Функция SelectObject не  позволяет  выбрать
             логическую палитру,  для  этого необходимо воспользоваться
             функцией SelectPalette.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hObject           HANDLE  Идентифицирует выбираемый объект.
                               Допустимые типы объектов и функции,
                               посредством которых они могут быть
                               созданы, приведены ниже:

                    Объект            Функция
                    ───────────────────────────────────────────────────
                    Растровая карта   CreateBitmap
                                      CreateBitmapIndirect
                                      CreateCompatibleBitmap
                                      CreateDIBitmap
                    Растровая карта   может  быть  выбрана  только  для
                    контекста устройства памяти,  и только  для  одного
                    контекста устройства одновременно

                    Кисть             CreateBrushIndirect,
                                      CreateHatchBrush,
                                      CreatePatternBrush,
                                      CreateSolidBrush

                    Область           CombineRgn,
                                      CreateEllipticRgn,
                                      CreateEllipticRgnIndirect,
                                      CreatePolygonRgn,
                                      CreateRectRgn,
                                      CreateRectRgnIndirect

                    Перо              СreatePen,
                                      CreatePenIndirect

                    Шрифт             CreateFont,
                                      CreateFontIndirect
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 59 =


        Возвращаемое значение

             Возвращаемое значение  идентифицирует  объект,  заменяемый
             объектом hObject. При ошибке равно нулю.

             Если параметр   hDC   определяет   метафайл,  возвращаемое
             значение не равно нулю,  если функция выполнилась успешно.
             В противном случае равно нулю.

             Если область  выбрана,  возвращаемое  значение соападает с
             возвращаемым значением функции SelectClipRgn.

        Примечания

             При выборе шрифта,  пера или кисти функцией  SelectObject,
             GDI  выделяет  пространство  для  этого  объекта  в  своем
             сегменте данных.  Пространство сегмента данных ограничено,
             поэтому нужно удалять каждый графический объект, в котором
             больше нет необходимости, с помощью функции DeleteObject.

             После удаления   последнего   из   ненужных    графических
             объектов,   необходимо   обратно   выбрать  начальный  (по
             умолчанию) объект для контекста устройства.

             В любое время нельзя выбрать растровую карту в  более  чем
             одном контексте устройства.

        ───────────────────────────────────────────────────────────────
                                 SelectPalette [3.0]                           

        Синтаксис

             HPALETTE SelectPalette(hDC,hPalette,bForceBackGround)

             Эта функция  выбирает  логическую  палитру,   определяемую
             параметром  hPalette,  как  текущий  объект типа палитра в
             контексте устройства,  определяемом параметром hDC.  Новая
             палитра   становится   объектом   типа   палитра,  который
             используется GDI для управления цветами,  отображаемыми  в
             данном контексте устройства, и который заменяет предыдущую
             палитру.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hPalette          HPALETTE  Идентифицирует выбираемую
                               логическую палитру. Функция CreatePalette
                               создает логическую палитру.

             bForceBackground  BOOL  Определяет должна ли данная палитра
                               быть фоновой палитрой. Если этот параметр

       Windows 3.0/Ref/4#7                                       = 60 =

                               не равен 0, то выбранная палитра всегда
                               используется как фоновая палитра, незави-
                               симо от того, имеет или не имеет окно
                               захват ввода. Если bForceBackground
                               равен 0, то данная палитра используется
                               только когда окно имеет захват ввода.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует   палитру,   которая
             заменяется на  палитру,  определяемую параметром hPalette.
             Если произошла ошибка, возвращается 0.

        Примечание

             Прикладная программа  может  выбрать  логическую   палитру
             более чем в одном контексте устройства. Однако изменения в
             логической палитре  будут  влиять  на  все  контексты,   в
             которых она   была   выбрана.  Если  прикладная  программа
             выбирает логическую палитру более чем  в  обном  контексте
             устройства, все  эти контексты должны относится к одному и
             тому же физическому устройтсву,  например  к  дисплею  или
             принтеру.

        ───────────────────────────────────────────────────────────────
                                  SendDlgItemMessage                           

        Синтаксис

             DWORD SendDlgItemMessage(hDlg,nIDDlgItem,wMsg,wParam,
                                                            lParam)

             Эта функция    посылает    сообщение   блоку   управления,
             идентифицированному   nIDDlgItem,   в   панели    диалога,
             определяемой параметром   hDlg.   Функция   не  возвращает
             управление до тех пор, пока сообщение не будет обработано.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифифицирует панель диалога,
                               содержащую блок управления.

             nIDDlgItem        int  Определяет целый ID элемента
                               диалога, получающего сообщение.

             wMsg              WORD  Задает значение, представляющее
                               сообщение.

             wParam            WORD  Содержит дополнительную информацию
                               о  сообщении.

             lParam            DWORD  Содержит дополнительную информацию

       Windows 3.0/Ref/4#7                                       = 61 =

                               о сообщении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет результат функции.  Равно
             значению,  возвращаемому  функцией  окна блока управления,
             или  равно  нулю,  если  идентификатор  блока   управления
             некорректен.

        Примечание

             Использование функции     SendDlgItemMessage     идентично
             получению дескриптора заданного блока управления и  вызову
             функции SendMessage.

        ───────────────────────────────────────────────────────────────
                                     SendMessage                               

        Синтаксис

             DWORD SendMessage(hWnd,wMsg,wParam,lParam)

             Эта функция посылает сообщение  окну  или  окнам.  Функция
             SendMessage  не  возвращает  управление  до тех пор,  пока
             сообщение  не  будет  обработано.  Если  окно,  получающее
             сообщение, является   частью   той   же  самой  прикладной
             программы, функция окна вызывается сразу как подпрограмма.
             Если окно  является  частью  другой задачи,  среда Windows
             переключается  на  соответствующую   задачу   и   вызывает
             соответствующую  функцию окна,  и затем передает сообщение
             функции окна. Сообщение не помещается в очередь прикладной
             программы.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует дескриптор окна,
                               которое получает  сообщение. Если
                               значение параметра hWnd в шестнадцатирич-
                               ном виде равно 0xFFFF, то сообщение
                               посылается всем  накладываемым окнам в
                               системе. Сообщение не посылается дочерним
                               окнам.

             wMsg              WORD  Задает значение, представляющее
                               сообщение.

             wParam            WORD  Содержит дополнительную информацию
                               о  сообщении.

             lParam            DWORD  Содержит дополнительную информацию
                               о сообщении.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 62 =


        Возвращаемое значение

             Возвращаемое значение  определяет  результат функции.  Это
             значение  возвращается  функцией  окна,   получающей   это
             сообщение и зависит от посланного сообщения.

        Примечание

             Если Windows  работает  в  системе  с  расширенной памятью
             (EMS), и   прикладная   программа    посылает    сообщение
             (используя  функцию  SendMessage)  с  относящимися  к нему
             данными (указанными посредством параметра  lParam)  другой
             программе, то первая прикладная программа должна поместить
             данные (на которые указывает lParam) в глобальную  память,
             выделенную   посредством   функции  GlobalAlloc  с  флагом
             GMEM_LOWER. Заметим, что такое выделение памяти необходимо
             только тогда, когда lParam содержит указатель.

        ───────────────────────────────────────────────────────────────
                                   SetActiveWindow                             

        Синтаксис

             HWND SetActiveWindow(hWnd)

             Эта функция делает окно накладываемого типа активным.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует дескриптор
                               накладываемого окна, которое делается
                               активным.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует  окно,  которое  было
             ранее    активным.    Функция    SetActiveWindow    должна
             использоваться  осмотрительно,   т.   к.   она   позволяет
             прикладной  программе  произвольно  оперировать с активным
             окном и вводом данных.  Обычно Windows полностью берет  на
             себя заботу по активизации окна.

        ───────────────────────────────────────────────────────────────
                                    SetBitmapBits                              

        Синтаксис

             LONG SetBitmapBits(hBitmap,dwCount,lpBits)

             Эта функция   устанавливает   биты   растровой   карты   в

       Windows 3.0/Ref/4#7                                       = 63 =

             соответствии  со  значениями  битов,  заданных  параметром
             lpBits.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hBitmap           HBITMAP  Идентифицирует растровую карту,
                               в которой устанавливаются биты.

             dwCount           DWORD  Определяет число байтов, на которые
                               указывает lpBits.

             lpBits            LPSTR  Указывает биты растровой карты,
                               которая храниться как длинный указатель
                               на массив байтов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно   фактическому  числу  байт,
             используемых при  установке  битов  растровой  карты.  При
             наличии ошибки равно 0.

        ───────────────────────────────────────────────────────────────
                                  SetBitmapDimension                           

        Синтаксис

             DWORD SetBitmapDimension(hBitmap,X,Y)

             Эта функция определяет ширину и высоту растровой  карты  в
             единицах,  кратных  0,1  мм.  Эти значения не используются
             внутри GDI;  для  их  получения  может  быть  использована
             функция GetBitmapDimension.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hBitmap           HANDLE  Идентифицирует растровую карту.

             X                 int  Определяеn ширину растровой карты
                               в единицах, кратных 0,1 мм.

             Y                 int  Определяеn высоту растровой карты
                               в единицах, кратных 0,1 мм.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    содержит    предыдущие    размеры
             растровой карты.  Высота находится в старшем слове, ширина
             - в младшем.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 64 =

                                      SetBkColor                               

        Синтаксис

             DWORD SetBkColor(hDC,crColor)

             Эта функция  устанавливает  текущий  цвет  фона,  в   цвет
             определенный параметром  crColor  или ближайший логический
             цвет,  если устройство не может представить цвет, заданный
             crColor.

             Если фоновый режим - OPAQUE,  GDI использует цвет фона для
             заливки промежутков между типовыми линиями,  между линиями
             штриховки  и  знакоместами символов.  GDI также использует
             цвет фона при преобразовании растровой карты из цветной  в
             монохромную и наоборот.

             Фоновый режим    устанавливается    посредством    функции
             SetBkMode. Преобразование цвета растровой карты смотрите в
             функциях BitBlt и StretchBlt.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             crColor           COLORREF  Определяет новый цвет фона.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно   цветовому   значению   RGB
             предыдущего цвета фона.  Если произошла ошибка,  оно равно
             0x80000000.

        ───────────────────────────────────────────────────────────────
                                      SetBkMode                                

        Синтаксис

             int SetBkMode(hDC,nBkMode)

             Эта функция  устанавливает фоновый режим,  применяемый при
             работе с текстом,  штриховой кистью, типами линий. Фоновый
             режим  определяет,  должен ли GDI удалять фоновые цвета на
             экране  дисплея  перед  тем,  как  работать   с   текстом,
             штриховой  кистью,  или  с любым типом пера,  не рисующего
             сплошную линию.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nBkMode           int  Определяет фоновый режим. Он может
                               быть одним из следующих:

       Windows 3.0/Ref/4#7                                       = 65 =


                     Значение    Описание
                     ──────────────────────────────────────────────────
                     OPAQUE      Фон заливается текущим цветом фона
                                 перед выводом текста, штриховкой с
                                 помощью кисти или рисованием пером.

                     TRANSPARENT Фон остается нетронутым.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет предыдущий фоновый режим.
             Он может быть или TRANSPARENT или OPAQUE.

        ───────────────────────────────────────────────────────────────
                                     SetBrushOrg                               

        Синтаксис

             DWORD SetBrushOrg(hDC,X,Y)

             Эта функция  устанавливает  координаты  начальной  позиции
             всех кистей, выбранных в указанном контексте устройства.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет координату по оси x новой
                               начальной позиции кисти в единицах
                               устройства. Это значение должно быть в
                               диапазоне от 0 до 7.

             Y                 int  Определяет координату по оси y новой
                               начальной позиции кисти в единицах
                               устройства. Это значение должно быть в
                               диапазоне от 0 до 7.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно   старому   значению   начала
             координат   кисти  в  единицах  устройства.  Координата  y
             содержится в старшем слове, координата x - в младшем.

        Примечания

             Исходные координаты начала кисти (0,0).

             Функция SetBrushOrg   не   может   применяться    к    уже
             существующим объектам.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 66 =

                                      SetCapture                               

        Синтаксис

             HWND SetCapture(hWnd)

             Эта функция служит для передачи всего последующего ввода с
             помощью мыши  в  окно,  заданное hWnd,  вне зависимости от
             положения курсора мыши.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое будет
                               получать информацию, вводимую с помощью
                               мыши.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    идентифицирует    окно,   которое
             получало информацию,  вводимую с помощью мыши,  до  вызова
             SetCapture. Равно NULL, если такого окна не существует.

        Примечание

             Когда окну  больше  не  требуется  захват  ввода  от мыши,
             прикладная программа      должна      вызвать      функцию
             ReleaseCapture, чтобы другие программы могли получить ввод
             от мыши.

        ───────────────────────────────────────────────────────────────
                                  SetCaretBlinkTime                            

        Синтаксис

             void SetCaretBlinkTime(wMSeconds)

             Эта функция  устанавливает  частоту  мигания псевдокурсора
             (прошедшее время между  миганиями  псевдокурсора),  равной
             количеству миллисекунд, задаваемому параметром wMSeconds).
             Это означает,      что      одно      полное       мигание
             (мигание-нет-мигание)   определяется  как  2  *  wMSeconds
             миллисекунд.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nMSeconds         WORD  Задает новую частоту мигания в
                               миллисекундах.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                       = 67 =


             Нет.

        Примечание

             Системный псевдокурсор является разделяемым ресурсом. Окно
             должно  установить  частоту  мигания псевдокурсора только,
             если   оно   владеет   им.   Окно   должно    восстановить
             предшествующую   частоту   мигания   перед  тем  передачей
             монополии  на  ввод  или  перед  переходом  в   неактивное
             состояние.

        ───────────────────────────────────────────────────────────────
                                     SetCaretPos                               

        Синтаксис

             void SetCaretPos(X,Y)

             Эта функция перемещает псевдокурсор  в  позицию,  заданную
             логическими координатами, определяемыми параметрами X и Y.
             Логические координаты устанавливаются относительно области
             пользователя окна, которое владеет им, и зависят от режима
             отображения окна, следовательно, точная позиция в пикселях
             зависит от конкретного режима отображения.

             Функция SetCaretPos  перемещает псевдокурсор только,  если
             им    владеет    окно    текущей    задачи.    Перемещение
             распространяется  на псевдокурсор вне зависимости от того,
             видим он или нет.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             X                 int  Определяет новую координату х
                               псевдокурсора (в логических координатах).

             Y                 int  Определяет новую координату y
                               псевдокурсора (в логических координатах).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Системный псевдокурсор является разделяемым ресурсом. Окно
             не должно перемещать псевдокурсор, если оно не владеет им.

        ───────────────────────────────────────────────────────────────
                                     SetClassLong                              

        Синтаксис

       Windows 3.0/Ref/4#7                                       = 68 =


             LONG SetClassLong(hWnd,nIndex,dwNewLong)

             Эта функция   заменяет   длинное   значение,  определяемое
             параметром nIndex в структуре WNDCLASS окна, определяемого
             параметром hWnd.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет изменяемое слово. Он
                               должен быть одним из следующих значений:

                              Значение      Описание
                              ─────────────────────────────────────────
                              GCL_MENUNAME  Устанавливает новый длинный
                                            указатель на имя меню.

                              GCL_WNDPROC   Устанавливает новый длинный
                                            указатель на функцию окна.
                              ─────────────────────────────────────────

             lNewLong          DWORD  Содержит замещающее значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение равно  старому  значению  указанного
             длинного целого.

        Примечание

             Если используется    функция   SetClassLong   с   индексом
             GCL_WNDPROC,  то функция должна иметь форму функции окна и
             быть описана в файле определения модуля как экспортируемая
             (см. также функцию RegisterClass).

             Вызов функции  SetClassLong   с   параметром   GCL_WNDPROC
             создает подкласс класса окна,  который будет влиять на все
             создаваемые в дальнейшем окна данного класса. Информацию о
             подклассах окон вы найдете в главе 1,  "Функции интерфейса
             графических устройств".  Прикладная  программа  не  должна
             пытаться создавать     подклассов    стандартных    длоков
             управления Windows,  таких   как   комбинированные   блоки
             управления и клавиши.

             Для доступа   к   дополнительным  двухбайтовым  значениям,
             выделяемым при создании структуры класса окна, используйте
             положительные смещения   (байтовые)  в  параметре  nIndex,
             начиная с 0,  для первых двух байтов,  2 для  следующих  и
             т.д.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 69 =

                                     SetClassWord                              

        Синтаксис

             WORD SetClassWord(hWnd,nIndex,wNewWord)

             Эта функция  заменяет   слово,   определяемое   параметром
             nIndex, в    структуре    WNDCLASS   окна,   определяемого
             параметром hWnd.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет байтовое смещение
                               изменяемого  слова. Он должен быть одним
                               из следующих:

                              Значение       Описание
                              ─────────────────────────────────────────
                              GCW_CBCLSEXTRA Устанавливает два новых
                                             байта добавочной информации
                                             о классе окна.

                              GCW_CBWNDEXTRA Устанавливает два новых байта
                                             добавочной информации об окне.

                              GCW_HBRBACKGROUND Устанавливает новый
                                             дескриптор кисти фона.

                              GCW_HCURSOR    Устанавливает новый дескриптор
                                             курсора.

                              GCW_HICON      Устанавливает новый дескриптор
                                             иконы.

                              GCW_STYLE      Устанавливает новый бит типа
                                             для класса окна.
                              ─────────────────────────────────────────

             wNewWord          WORD  Содержит заменяющее значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   соответствует   старому   значению
             данного слова.

        Примечание

             Функция SetClassWord   должна    быть    использована    с
             осторожностью.  Например,  используя  эту  функцию,  можно

       Windows 3.0/Ref/4#7                                       = 70 =

             изменить цвет фона для всего класса,  но это изменение  не
             приводит    к    немедленной    перерисовке   всех   окон,
             принадлежащих классу.

             Для доступа к  дополнительным  четырехбайтовым  значениям,
             выделяемым при создании структуры класса окна, используйте
             положительные  смещения  (байтовые)  в  параметре  nIndex,
             начиная с 0,  для первых четырех байтов, 4 для следующих и
             т.д.

        ───────────────────────────────────────────────────────────────
                                   SetClipboardData                            

        Синтаксис

             HANDLE SetClipboardData(wFormat,hMem)

             Эта функция  устанавливает  дескриптор  данных в системном
             буфере для   данных,   определяемых    параметром    hMem.
             Предполагается, что    данные    имеют   формат,   который
             определяется параметром   wFormat.   После    того,    как
             дескриптор  данных  системного буфера установлен,  функция
             SetClipboardData  освобождает   блок,   идентифицированный
             hMem.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wFormat           WORD  Определяет формат данных. Он может
                               быть одним из  следующих  предварительно
                               определенных  форматов, приведенных в
                               табл. 4.13, "Предопределенные форматы
                               данных".

                               Если в добавление к заранее определенным
                               форматам      зарегистрирован      любой
                               добавочный  формат  (с  помощью  функции
                               RegisterClipboardFormat),  то  он  может
                               использоваться   в   качестве  параметра
                               wFormat.

             hMem              HANDLE  Идентифицирует  блок глобальной
                               памяти, содержащий данные заданного
                               формата. hMem может иметь значение NULL;
                               в этом случае прикладной программе не
                               следует форматировать данные и
                               обеспечивать их дескриптором до тех пор,
                               пока не будет запроса на это  с  помощью
                               сообщения WM_RENDERFORMAT.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует данные и  назначается

       Windows 3.0/Ref/4#7                                       = 71 =

             системным буфером.

        Примечание

             Как только hMem был передан функции SetClipboardData, блок
             данных становится неотъемлемой частью  системного  буфера.
             Прикладная  программа  может  читать данные,  но не должна
             освобождать блок или оставлять его заблокированным.

             В табл.  4.13 перечислены предопределенные форматы  данных
             для параметра wFormat:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             CF_BITMAP         Дескриптор растровой карты (HBITMAP).

             CF_DIB            Блок памяти, содержащий структуру данных
                               BITMAPINFO, за которой следуют сами биты
                               растровой карты.

             CF_DIF            Формат обмена данными.

             CF_DSPBITMAP      Формат отображения растра,  связанный  с
                               частным   форматом.   hMem  должен  быть
                               дескриптором данных,  которые могут быть
                               отображены  в  растровом  формате вместо
                               частным образом сформатированных данных.

             CF_DSPMETAFILEPICT   Формат отображения          метафайла
                               изображения,   связанный    с    частным
                               форматом.  hMem должен быть дескриптором
                               данных,  которые могут быть отображены в
                               формате   метафайла  изображения  вместо
                               частным образом сформатированных данных.

             CF_DSPTEXT        Формат отображения  текста,  связанный с
                               частным  форматом.  hMem   должен   быть
                               дескриптором данных,  которые могут быть
                               отображены в  текстовом  формате  вместо
                               частным образом сформатированных данных.

             CF_METAFILEPICT   Метафайл изображения,  как  он определен
                               структурой данных METAFILEPICT.

             CF_OEMTEXT        Текстовый формат, содержащий символы из
                               набора символов OEM. Каждая строка
                               должна завершаться  комбинацией возврат
                               строки/перевод каретки (CR/LF). Нулевой
                               символ определяет конец данных.

             CF_OWNERDISPLAY   Собственный формат отображения. Владелец
                               системного  буфера должен индицировать и
                               корректировать окна  системного   буфера

       Windows 3.0/Ref/4#7                                       = 72 =

                               прикладной программы  и  будет  получать
                               сообщения:

                                         WM_ASKCBFORMATNAME,
                                         WM_HSCROLLCLIPBOARD,
                                         WM_PAINTCLIPBOARD,
                                         WM_SIZECLIPBOARD и
                                         WM_VSCROLLCLIPBOARD.

                               Параметр hMem должен быть NULL.

             CF_PALETTE
                               Дескриптор палитры     цветов.     Когда
                               прикладная программа помещает данные в
                               системный буфер, которые подразумевают
                               или зависят от палитры цветов, она должна
                               поместить в системный буфер также и
                               палитру.

                               Если системный буфер содержит данные в
                               формате CF_PALETTE  (формат   логической
                               палитры), прикладная программа должна
                               подразумевать что палитры относится к
                               данным в системном буфера.

                               Программы просмотра системного буфера
                               (CLIPBRD.EXE) для отображения данных
                               обычно использует   в  качестве  текущей
                               палитры объект,  в  формате  CF_PALETTE,
                               находящийся в системном буфере.

             CF_PRIVATEFIRST до
             CF_PRIVATELAST
                               Диапазон целых  значений,  которые могут
                               быть использованы для частных  форматов.
                               Дескрипторы    данных,    связанные    с
                               форматами в  этом  диапазоне,  не  будут
                               освобождаться    автоматически;    любые
                               дескрипторы    данных    должны     быть
                               освобождены     прикладной    программой
                               прежде,  чем она закончит работу или при
                               получении сообщения WM_DESTROYCLIPBOARD.

             CF_SYLK           Формат символьной связи фирмы Microsoft.

             CF_TEXT           Текстовый формат.     Каждая      строка
                               оканчивается     комбинацией     возврат
                               каретки/перевод  строки  (CR-LF).   Знак
                               NULL сигнализирует о конце данных.

             CF_TIFF           Формат TIFF.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 73 =

             Windows для  текста  поддерживает  два  формата  CF_TEXT и
             CF_OEMTEXT. CF_TEXT это формат по умолчанию  для  программ
             Windows, тогда  как  CF_OEMTEXT используется для текста из
             программ, не  предназначенных   для   Windows.   Если   вы
             вызываете функцию  GetClipboardData для получения текста в
             одном формате,  а  доступен  только  другой,  то   Windows
             автоматически преобразует текст в формат,  требуемой вашей
             программой.

             Прикладная программа   регистрирует   другие   стандартные
             форматы, такие   как  RTF,  по  имени  с  помощью  функции
             RegisterClipboardFormat, вместо того,  чтобы  использовать
             символическую константу. Дополнительную информацию об этих
             дополнительных форматах вы найдете в файле README.TXT.

        ───────────────────────────────────────────────────────────────
                                  SetClipboardViewer                           

        Синтаксис

             HWND SetClipboardViewer(hWnd)

             Эта функция добавляет окно,  определяемое параметром hWnd,
             в цепочку окон,  которые уведомляются (с помощью сообщения
             WM_DRAWCLIPBOARD) каждый раз,  когда изменяется содержимое
             системного буфера.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое должно
                               получать сообщения в цепочке наблюдения
                               за системным буфером.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует  следующее  окно  в
             цепочке наблюдения за системным буфером.  Этот  дескриптор
             должен  быть  запомнен  в статической памяти и использован
             при ответе на сообщения в цепочке наблюдения за  системным
             буфером.

        Примечание

             Окна, которые   являются   частью  цепочки  наблюдения  за
             системным  буфером,  должны  реагировать   соответствующим
             образом   на   сообщения  WM_DESTROY,  WM_CHANGECBCHAIN  и
             WM_DRAWCLIPBOARD.

             Если прикладная программа желает удалить себя  из  цепочки
             наблюдения   за  системным  буфером,  она  должна  вызвать
             ChangeClipboardChain.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 74 =

                                     SetCommBreak                              

        Синтаксис

             int SetCommBreak(nCid)

             Эта функция  приостанавливает передачу символа и переводит
             линию передачи в режим брейка до тех пор,  пока  не  будет
             вызвана функция ClearCommBreak.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи, работа
                               которого будет приостановлена. Это
                               значение можно получить с помощью
                               функции OpenComm.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 0, если функция была завершена успешно. Оно
             отрицательно,   если   в   nCid   определено  некорректное
             устройство.

        ───────────────────────────────────────────────────────────────
                                   SetCommEventMask                            

        Синтаксис

             WORD FAR * SetCommEventMask(nCid,nEvtMask)

             Эта функция   устанавливает  и  возвращает  маску  события
             устройства  связи,  определяемого  параметром  nCid.  Биты
             параметра   nEvtMask   определяют,   какие   события  были
             возможны.  Возвращаемое  значение  указывает  на   текущее
             состояние маски события.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет контролируемое устройство
                               связи. Это  значение  можно  получить  с
                               помощью функции OpenComm.

             nEvtMask          int  Определяет, какие события были
                               возможны. Это  может  быть любая
                               комбинация из значений, приведенных в
                               таблице 4.14, "Значения событий".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/4#7                                       = 75 =

             Возвращаемое значение  указывает  на  маску  события  (тип
             int). Каждый бит в  маске  события  показывает,  имело  ли
             место  данное  событие.  Бит  равен 1,  если событие имело
             место.

             В таблице  4.14   перечисляются   значения   событий   для
             параметра nEvtMask.

             Таблица 4.14. Значения событий.
             ──────────────────────────────────────────────────────────
             Значение    Описание
             ──────────────────────────────────────────────────────────
             EV_BREAK    Устанавливается, когда при вводе обнаружен
                         брейк.

             EV_CTS      Устанавливается, когда изменяется состояние
                         сигнала "Готов к передаче" (CTS).

             EV_DSR      Устанавливается, когда изменяется состояние
                         сигнала "Готовность аппаратуры передачи данных"
                         (DSR).

             EV_ERR      Устанавливается, когда имеет место ошибка
                         состояния линии. Ошибки состояния линии - это
                         CE_FRAME, CE_OVERRUN и CE_RXPARITY.

             EV_PERR     Устанавливается, когда обнаружена ошибка печати
                         на параллельном устройстве. Ошибки печати - это
                         CE_DNS, CE_IOE,  CE_LOOP и CE_PTO.

             EV_RING     Устанавливается, когда обнаружен кольцевой
                         индикатор.

             EV_RLSD     Устанавливается, когда изменяется состояние
                         сигнала "Обнаружение принимаемого  линейного
                         сигнала" (RLSD).

             EV_RXCHAR   Устанавливается, когда символ получен и помещен
                         в очередь приема.

             EV_RXFLAG   Устанавливается, когда символ события  получен
                         и  помещен  в очередь  приема.  Символ  события
                         определяется   в  блоке управления устройством.

             EV_TXEMPTY  Устанавливается, когда послан последний символ
                         в очереди  передачи.

        ───────────────────────────────────────────────────────────────
                                     SetCommState                              

             int SetCommState(lpDCB)

             Эта функция   устанавливает   устройство  связи  в  режим,

       Windows 3.0/Ref/4#7                                       = 76 =

             определяемый блоком  управления  устройством,  на  который
             указывает   параметр   lpDCB.   Устройство   должно   быть
             идентифицировано полем Id в блоке управления.

             Эта функция инициализирует заново все аппаратные  средства
             и  блоки  управления  так,  как  определено  lpDCB,  но не
             освобождает очереди передачи и приема.

        Синтаксис

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpDCB             DCB FAR *  Указывает на структуру данных
                               DCB, которая содержит требуемые
                               установки связи для устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет  результат  выполнения.
             Равно нулю,  если функция  была  завершена  успешно.  Если
             имеется ошибка, оно отрицательно.

        ───────────────────────────────────────────────────────────────
                                      SetCursor                                

        Синтаксис

             HCURSOR SetCursor(hCursor)

             Назначение. Эта  функция  служит   для   установки   формы
             системного курсора,  определяемого параметром hCursor. Эта
             установка происходит только в том случае, если новая форма
             курсора  отличается  от  существующей.  В противном случае
             функция немедленно осуществляет возврат. Функция SetCursor
             завершается   быстро,   если  hCursor  определяет  курсор,
             аналогичный текущему.

             Если параметр hCursor равен NULL,  то курсор  удаляется  с
             экрана.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hCursor           HCURSOR  Идентифицирует ресурс курсора.
                               Этот ресурс должен быть предварительно
                               загружен с помощью функции LoadCursor.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   ресурс   курсора,
             определяющий прежнюю форму курсора,  и равен NULL, если не
             существует прежней формы.

       Windows 3.0/Ref/4#7                                       = 77 =


        Примечание

             Системный курсор  является  разделяемым  ресурсом.   Окно,
             которое использует курсор, должно установить форму только,
             когда курсор находится в ее области пользователя или когда
             она захватила весь ввод от мыши. В системах без мыши, окно
             должно восстанавливать предшествующую форму курсора  перед
             тем,  как  курсор  покинет  область пользователя или перед
             тем, как окно передаст управление другому окну.

             Любая прикладная программа,  которая нуждается в изменении
             формы системного курсора, пока он находится в окне, должна
             быть уверена в том, что курсор класса для заданного класса
             окна установлен в NULL.  Если курсор класса не NULL, среда
             Windows восстанавливает старую  форму  каждый  раз,  когда
             перемещается мышь.

             Курсор не  появляется  на  экране,  если счетчик индикации
             курсора меньше нуля (т.е.  функция HideCursor была вызвана
             большее число раз, чем ShowCursor).

        ───────────────────────────────────────────────────────────────
                                     SetCursorPos                              

        Синтаксис

             void SetCursorPos(X,Y)

             Эта функция служит для перемещения  системного  курсора  в
             позицию, заданную параметрами X и Y. Если новые координаты
             расположены вне прямоугольника экрана, которые установлены
             последней   функцией   ClipCursor,  Windows  автоматически
             корректирует координаты так,  что курсор  остается  внутри
             прямоугольника.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             X                 int  Определяет новую координату курсора
                               по оси x (в координатах экрана).

             Y                 int  Определяет новую координату курсора
                               по оси y (в координатах экрана).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Системный курсор является разделяемым ресурсом. Окно будет
             перемещать курсор   только  если  курсор  находится  в  ее

       Windows 3.0/Ref/4#7                                       = 78 =

             области пользователя.

        ───────────────────────────────────────────────────────────────
                                   SetDIBits [3.0]                             

        Синтаксис

             int SetDIBits(hDC,hBitmap,nStartScan,nNumScans,lpBits,
                                                     lpBitsInfo,wUsage)

             Эта функция   устанавливает   биты   растровой   карты   в
             соответствии со  специйфикациями,  данными  в  аппаратно -
             независимой растровой карте (DIB).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hBitmap           HBITMAP  Идентифицирует растровую карту.

             nStartScan        WORD  Определяет номер первой строки, в
                               буфере lpBits.

             nNumScans         WORD  Определяет число скан строк в
                               буфере lpBits и число строк, устанавли-
                               ваемых в растровой карте, определяемой
                               параметром hBitmap.

             lpBits            LPSTR  Указывает на массив байт, в
                               котором содержатся биты аппаратно неза-
                               висимой растровой карты. Формат значений
                               растровой карты зависит от поля
                               biBitCount структуры BITMAPINFO,
                               определяемой параметром lpBitsInfo.
                               Дополнительную информацию вы можете
                               найти в описании структуры BITMAPINFO
                               во втором томе справочного руководства,
                               в главе 7, "Типы и структуры данных".

             lpBitsInfo        LPBITMAPINFO  Указывает на структуру
                               данных BITMAPINFO, которая содержит
                               информацию об аппаратно независимой
                               растровой карте.

             wUsage            WORD  Определяет содержат ли поля
                               bmiColors[] явные значение RGB, или
                               индексы текущей реализованной палитры.
                               Параметр wUsage может содержать одно
                               из следующих значений:

                 Значение        Описание
                 ──────────────────────────────────────────────────────
                 DIB_PAL_COLORS  Таблица цветов состоит из массива

       Windows 3.0/Ref/4#7                                       = 79 =

                                 16-битовых индексов текущей
                                 реализоавнной палитры.

                 DIB_RGB_COLORS  Таблица цветов содержит явные RGB
                                 значения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение     определяет     число     успешно
             скопированных скан строк.  Если произошла ошибка оно равно
             нулю.

        Примечание

             При вызове этой  функции,  растровая  карта,  определяемая
             параметром hBitmap  не  должна  быть  выбрана  в контексте
             устройства.

             За начало аппаратно независимой растровой карты  принимают
             нижний левый  угол,  который  является  началом  в  режиме
             отображения MM_TEXT.

             Эта функция  также  получает  описания   растровых   карт,
             сформатированные для  Microsoft  OS/2 Presentation Manager
             версии 1.1 и 1.2,  если параметром lpBitsInfo указывает на
             структуру BITMAPCOREINFO.

        ───────────────────────────────────────────────────────────────
                               SetDIBitsToDevice [3.0]                         

        Синтаксис

             WORD  SetDIBitsToDevice(hDC,DestX,DestY,nWidth,nHeight,
               SrcX,SrcY,nStartScan,nNumScans,lpBits,lpBitsInfo,wUsage)

             Эта функция  посылает биты аппаратно независимой растровой
             карты (DIB) прямо на  устройство.  Параметры  SrcX,  SrcY,
             nWidth, nHeight определяют прямоугольник внутри самой DIB.
             SetDIBitsToDevice посылает биты  из  этого  прямоугольника
             непосредственно на  устройство  отображения,  определяемое
             параметром hDC в точку,  определяемую параметрами DestX  и
             DestY.

             Для уменьшения   требований  к  памяти,  при  посылки  бит
             большой DIB на  устройство  отображения,  можно  применить
             технику разбивки  на  части,  когда  при  последовательном
             вызыве функции   SetDIBitsToDevice,   в    буфер    lpBits
             помещаются различные    порции    одной   DIB.   Параметры
             nStartScan и nNumScans определяют часть  растровой  карты,
             которая содержится в буфере lpBits.


       Windows 3.0/Ref/4#7                                       = 80 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             DestX             WORD  Определяет координату по оси х
                               начала прямоугольника, в который
                               выводится растровая карта.

             DestY             WORD  Определяет координату по оси y
                               начала прямоугольника, в который
                               выводится растровая карта.

             nWidth            WORD  Определяет размер по оси х
                               прямоугольника в DIB.

             nHeight           WORD  Определяет размер по оси y
                               прямоугольника в DIB.

             SrcX              WORD  Определяет координату по оси х
                               начала исходного прямоугольника в DIB.

             SrcY              WORD  Определяет координату по оси y
                               начала исходного прямоугольника в DIB.

             nStartScan        WORD  Определяет номер строки DIB,
                               первой в буфере lpBits.

             nNumScans         WORD  Определяет число скан строк DIB в
                               буфере lpBits.

             lpBits            LPSTR  Указывает на массив байт, в
                               котором содержатся биты DIB.

             lpBitsInfo        LPBITMAPINFO  Указывает на структуру
                               данных BITMAPINFO, которая содержит
                               информацию DIB.

             wUsage            WORD  Определяет содержат ли поля
                               bmiColors[] явные значение RGB, или
                               индексы текущей реализованной палитры.
                               Параметр wUsage может содержать одно
                               из следующих значений:

                 Значение        Описание
                 ──────────────────────────────────────────────────────
                 DIB_PAL_COLORS  Таблица цветов состоит из массива
                                 16-битовых индексов текущей
                                 реализоавнной палитры.

                 DIB_RGB_COLORS  Таблица цветов содержит явные RGB
                                 значения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                       = 81 =


             Возвращаемое значение содержит число установленных строк.

        Примечание

             Все координаты (за  исключением  DestX  и  DestY,  которые
             являютсчя логическими  координатами) являются координатами
             устройства (координаты в DIB).

             За начало аппаратно независимой растровой карты  принимают
             нижний левый  угол,  который  является  началом  в  режиме
             отображения MM_TEXT.

             Эта функция  также  получает  описания   растровых   карт,
             сформатированные для  Microsoft  OS/2 Presentation Manager
             версии 1.1 и 1.2,  если параметром lpBitsInfo указывает на
             структуру BITMAPCOREINFO.

        ───────────────────────────────────────────────────────────────
                                    SetDlgItemInt                              

        Синтаксис

             void SetDlgItemInt(hDlg,nIDDlgItem,wValue,bSigned)

             Эта функция устанавливает  текст  элемента  диалога  (блок
             управления)  в  строковое  представление  целого значения,
             заданного   параметром   wValue.   Функция   SetDlgItemInt
             преобразует   параметр   wValue  в  строку,  состоящую  из
             десятичных цифр,  и затем копирует ее в  блок  управления.
             Если  параметр  bSigned не равен нулю,  то wValue является
             целым со знаком.  Если wValue имеет знак,  и значение  его
             меньше нуля, функция помещает знак "-" перед первой цифрой
             строки.

             Функция SetDlgItemInt посылает в заданный блок  управления
             сообщение WM_SETTEXT.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель  диалога,
                               содержащую блок управления.

             nIDDlgItem        int  Идентифицирует элемент диалога,
                               который должен быть модифицирован.

             wValue            WORD  Определяет устанавливаемое
                               значение.

             bSigned           BOOL  Определяет, имеет ли целое значение
                               знак.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                       = 82 =

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                    SetDlgItemText                             

        Синтаксис

             void SetDlgItemText(hDlg,nIDDlgItem,lpString)

             Эта функция   устанавливает   заголовок  или  текст  блока
             управления в панели диалога, определяемой параметром hDlg.
             SetDlgItemtext   посылает   в   заданный  блок  управления
             сообщение WM_SETTEXT.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель  диалога,
                               содержащую блок управления.

             nIDDlgItem        int  Идентифицирует элемент диалога,
                               который должен быть модифицирован.

             lpString          LPSTR  Указывает на оканчивающуюся нулем
                               строку, которая копируется в блок
                               управления.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                  SetDoubleClickTime                           

        Синтаксис

             void SetDoubleClickTime(wCount)

             Эта функция устанавливает время двойного нажатия для мыши.
             Двойное  нажатие  -  это  серия  двух нажатий кнопки мыши,
             причем второе возникает в заданном интервале времени после
             первого.  Время  двойного нажатия - это максимальное число
             миллисекунд,  которое  допустимо  между  первым  и  вторым
             нажатием.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wCount            WORD  Определяет число миллисекунд,
                               которое допускается между двумя
                               нажатиями.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 83 =


        Возвращаемое значение

             Нет.

        Примечание

             Если параметр  wCount  установлен  в  0,   Windows   будет
             использовать  по умолчанию время двойного нажатия,  равное
             500 миллисекундам.

             Функция SetDoubleClickTime изменяет время двойного нажатия
             для всех окон в системе.

        ───────────────────────────────────────────────────────────────
                                    SetEnvironment                             

        Синтаксис

             int SetEnvironment(lpPortName,lpEnviron,nCount)

             Эта функция   копирует   содержимое   буфера,    заданного
             параметром  lpEnviron,  в среду,  связанную с устройством,
             присоединенным   к   системному    порту,    определяемому
             параметром   lpPortName.   SetEnvironment   удаляет  любую
             существующую среду.  Если для данного порта не  существует
             среды, SetEnvironment создает ее.  Если nCount равен 0, то
             существующая среда удаляется, но новая не создается.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpPortName        LPSTR  Указывает на оканчивающуюся нулем
                               строку, определяющую имя желаемого порта.

             lpEnviron         LPSTR  Указывает на буфер, содержащий
                               новую среду.

             nCount            WORD  Определяет число копируемых байт.
                               Если nCount равно 0, существующая среда
                               удаляется и не  заменяется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    равно    действительному    числу
             скопированных в среду  байтов.  Равно  0,  если  произошла
             ошибка; равно -1, если среда удалена.

        Примечание

             Первое поле   в  буфере,  на  который  указывает  параметр
             lpEnviron,  должно быть тем же самым, что и передаваемое в
             параметре  lpDeviceName функции CreateDC.  Если lpPortName

       Windows 3.0/Ref/4#7                                       = 84 =

             определяет нулевой порт (как определено в файле  WIN.INI),
             то   имя   устройства,  указанного  с  помощью  lpEnviron,
             используется для размещения желаемой среды.

        ───────────────────────────────────────────────────────────────
                                     SetErrorMode                              

        Синтаксис

             WORD  SetErrorMode(wMode)

             Эта функция  определяет  должна  ли  Windows  обрабатывать
             ошибки функции  DOS  24H,  или   позволить   это   сделать
             прикладной программе.

             Windows перехватывает  все  ошибки  прерывания  24H.  Если
             прикладная программа  вызвала   функцию   SetErrorMode   с
             параметром wMode  равным 0,  то при появлении впоследствии
             ошибки прерывания 24Н, Windows выводит панель с сообщением
             об ошибке.   Если  прикладная  программа  вызвала  функцию
             SetErrorMode с параметром  wMode  равным  1,  и  произошла
             ошибка в    прерывании    24H,   Windows   не   отображает
             стандартного сообщения об ошибке прерывания 24Н,  а вместо
             этого завершает  по  ошибке исходный вызов прерывания 21Н.
             Это позволяет прикладной программе соответствующим образом
             обработать  ошибку  диска с помощью функции 59Н прерывания
             21Н (Получить расширенную информацию об ошибке).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wMode             WORD  Определяет флаг режима обработки
                               ошибок. Если бит 0 установлен в 0, то
                               Windows выводит панель с сообщением об
                               ошибке при возникновении ошибки в преры-
                               вании 24Н. Если бит 0 установлен в 1,
                               Windows завершает по ошибке прерывание
                               21Н и не выводит сообщение об ошибке.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет предшествующее состояние
             флага.

        ───────────────────────────────────────────────────────────────
                                       SetFocus                                

        Синтаксис

             HWND SetFocus(hWnd)

             Эта функция    осуществляет   захват   ввода   для   окна,
             определяемого параметром hWnd.  При этом весь  последующий

       Windows 3.0/Ref/4#7                                       = 85 =

             ввод   с  клавиатуры  направляется  в  данное  окно.  Если
             существовало окно,  которое ранее захватило ввод,  то  оно
             утрачивает  контроль  над  вводом.  Если  hWnd равно NULL,
             нажатия клавиш будут игнорироваться.

             Функция SetFocus  посылает  сообщение  WM_KILLFOCUS  окну,
             теряющему управление вводом, и сообщение WM_SETFOCUS окну,
             захватывающему  ввод.   Она   также   активизирует   окно,
             осуществляющее  захват,  или  родительское окно того окна,
             которое захватывает ввод.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое будет
                               получать информацию, вводимую с
                               клавиатуры.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   окно,  которое  перед
             выполнением этой функции владело вводом  с  клавиатуры,  и
             равно NULL, если не существует такого окна.

        Примечание

             Если окно - активное, но не захватило ввод (т.е. нет окна,
             захватившего ввод),  любое нажатие клавиши будет порождать
             сообщение WM_SYSKEYUP,  WM_SYSKEYDOWN или WM_SYSCHAR. Если
             также нажата клавиша VK_MENU,  параметр  lParam  сообщения
             будет иметь  1  в бите 30.  В противном случае формируемые
             сообщения не имееют указанную установку.

        ───────────────────────────────────────────────────────────────
                                                                               
       SetHandleCount [3.0]

        Синтаксис

             WORD  SetHandleCount(wNumber)

             Эта функция  изменяет  число доступных задаче дескрипторов
             файлов. По умолчанию максимально доступно 20 дескрипторов.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wNumber           WORD  Определяет требуемое число деск-
                               рипторов. Максимально возможно 255 деск-
                               рипторов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   действительное  число

       Windows 3.0/Ref/4#7                                       = 86 =

             доступных прикладной программе  дескрипторов  файлов.  Это
             число может быть меньше указанного в параметре wNumber.

        ───────────────────────────────────────────────────────────────
                                   SetKeyboardState                            

        Синтаксис

             void SetKeyboardState(lpKeyState)

             Функция копирует 256 байт,  на которые указывает  параметр
             lpKeyState, в таблицу состояния клавиатуры Windows.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpKeyState        BYTE FAR *  Указывает на массив из 256
                               байт, который содержит состояния клавиш.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечания

             Во многих  случаях  прикладная  программа  должна в начале
             вызвать функцию GetKeyboardState для инициализации массива
             из 256   байт.   После   этого  программа  может  изменить
             необходимые байты.

             Функция SetKeyboardState    устанавливает     светодиодные
             индикаторы и  флаги  BIOS  для клавиш NUMLOCK,  CAPSLOCK и
             SCROLL LOCK   в   соответствии   с   элементами    массива
             VK_NUMLOCK, VK_CAPITAL и VK_OEM_SCROLL.

             Для более     полной     информации    смотрите    функцию
             GetKeyboardState.

        ───────────────────────────────────────────────────────────────
                                      SetMapMode                               

        Синтаксис

             int  SetMapMode(hDC,nMapMode)

             Эта функция  устанавливает  режим  отображения  указанного
             контекста устройства. Режим отображения определяет единицы
             измерения,   применяемые   для  преобразования  логических
             единиц в единицы устройства, а также определяет ориентацию
             осей  x  и y устройства.  GDI использует режим отображения
             для преобразования логических координат в  соответствующие
             координаты устройства.


       Windows 3.0/Ref/4#7                                       = 87 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nMapMode          int  Определяет режим отображения. Это
                               может быть одно из значений, приведенных
                               в таблице 4.15, "режимы отображения".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    предыдущий    режим
             отображения.

        Примечания

             Режим MM_TEXT  позволяет  прикладной  программе работать в
             пикселях устройства,  размеры которых  будут  меняться  от
             устройства к устройству.

             Режимы MM_LOMETRIC,       MM_HIMETRIC,       MM_LOENGLISH,
             MM_HIENGLISH   и    MM_TWIPS    применяются    прикладными
             программами,  нуждающимися в выводе в значениях физических
             единиц измерения (дюймах и миллиметрах).

             Режим MM_ISOTROPIC обеспечивает  коэффициент  сжатия  1:1,
             который    используется   при   необходимости   сохранения
             существующих пропорций изображения.

             Режим MM_ANISOTROPIC позволяет регулировать координаты  по
             разным осям независимо.

             Таблица 4.15  Содержит  значения  и  определения различных
             режимов отображения.

             Таблица 4.15  Режимы отображения.
             ──────────────────────────────────────────────────────────
             Значение         Описание
             ──────────────────────────────────────────────────────────
             MM_ANISOTROPIC   Логические единицы     отображаются     в
                              произвольные  единицы   с   произвольными
                              масштабами по осям.  Функции SetWindowExt
                              и    SetViewportExt    применяются    для
                              определения желаемых единиц, ориентации и
                              масштабирования осей.

             MM_HIENGLISH
                              Каждая логическая единица отображается  в
                              одну    тысячную   дюйма.   Положительное
                              направление   по   оси   x   -    вправо,
                              положительное  направление  по  оси  y  -
                              вверх.


       Windows 3.0/Ref/4#7                                       = 88 =

             MM_HIMETRIC      Каждая логическая  единица отображается в
                              одну  сотую   миллиметра.   Положительное
                              направление    по   оси   x   -   вправо,
                              положительное  направление  по  оси  y  -
                              вверх.

             MM_ISOTROPIC     Логические единицы     отображаются     в
                              произвольные единицы с равными масштабами
                              по осям,  т.е.  одна единица измерения по
                              оси x равна единице измерения по  оси  y.
                              Функции   SetWindowExt  и  SetViewportExt
                              применяются  для   определения   желаемых
                              единиц    и    ориентации    осей.    GDI
                              осуществляет   необходимые   регулировки,
                              которые      обеспечивают     возможность
                              сохранения  по  осям   x   и   y   единиц
                              одинакового размера.

             MM_LOENGLISH     Каждая логическая  единица отображается в
                              одну   десятую    дюйма.    Положительное
                              направление    по   оси   x   -   вправо,
                              положительное  направление  по  оси  y  -
                              вверх.

             MM_LOMETRIC      Каждая логическая  единица отображается в
                              одну  десятую  миллиметра.  Положительное
                              направление    по   оси   x   -   вправо,
                              положительное  направление  по  оси  y  -
                              вверх.

             MM_TEXT          Каждая логическая  единица отображается в
                              один  пиксель  устройства.  Положительное
                              направление    по   оси   x   -   вправо,
                              положительное  направление  по  оси  y  -
                              вниз.

             MM_TWIPS         Каждая логическая  единица отображается в
                              одну   двенадцатую   точки    печатающего
                              устройства    (1/1440").    Положительное
                              направление   по   оси   x   -    вправо,
                              положительное  направление  по  оси  y  -
                              вверх.

        ───────────────────────────────────────────────────────────────
                                    SetMapperFlags                             

        Синтаксис

             DWORD SetMapperFlags(hDC,wFlag)

             Эта функция изменяет  алгоритм,  используемый  разметчиком
             шрифтов  при  отображении логических шрифтов на физические
             шрифты.  Если первый бит в параметре wFlag установлен в 1,

       Windows 3.0/Ref/4#7                                       = 89 =

             разметчик   шрифтов   будет  выбирать  только  те  шрифты,
             коэффициент  сжатия  которых  соответствует  коэффициентам
             сжатия  данного  устройства.  Если  отсутствуют  шрифты  с
             соответствующим   коэффициентом   сжатия,   GDI   выбирает
             коэффициент  сжатия  и ищет шрифты с коэффициентом сжатия,
             которые соответствуют выбранному GDI.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               который содержит флаг разметчика шрифта.

             wFlag             DWORD  Определяет должен ли разметчик
                               шрифта подобрать коэффициент сжатия
                               по высоте и ширине для данного устройства.
                               Если первый бит (бит 0)  этого  значения
                               установлен   в   1,   разметчик   шрифта
                               пытается подобрать  шрифты, чьи коэффи-
                               циенты сжатия по оси х и у точно
                               совпадают с коэффициентами указанного
                               устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    соответствует     предшествующему
             значению флага разметчика шрифта.

        Примечание

             Остальные биты  параметра  wFlag должны быть установлены в
             0.

        ───────────────────────────────────────────────────────────────
                                       SetMenu                                 

        Синтаксис

             BOOL SetMenu(hWnd,hMenu)

             Эта функция устанавливает меню, заданное параметром hMenu,
             в окно,  определяемое параметром hWnd.  Если  hMenu  равно
             NULL,  текущее меню окна удаляется. Функция SetMenu служит
             для того,  чтобы перерисовать окно с  учетом  изменения  в
             меню.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, меню которого
                               должно быть изменено.

             hMenu             HMENU  Идентифицирует новое меню.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 90 =


        Возвращаемое значение

             Возвращаемое значение определяет было ли меню изменено. Не
             равно нулю, если меню изменяется. В противном случае равно
             нулю.

        Примечание

             Функция SetMenu  не разрушает предыдущее меню.  Прикладная
             программа   должна   вызвать   функцию   DestroyMenu   для
             выполнения этой задачи.

        ───────────────────────────────────────────────────────────────
                               SetMenuItemBitmaps [3.0]                        

        Синтаксис

             BOOL SetMenuItemBitmaps(hMenu,nPosition,wFlags,
                                      hBitmapUnchecked,hBitmapChecked)

             Эта функция   связывает   указанные   растровые   карты  с
             элементом меню.  Когда  элемент   помечается   или   когда
             снимается контрольная   отметка   Windows   отображает  за
             элементом соответствующую растровую карту.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует изменяемое меню.

             nPosition         WORD  Определяет изменяемый элемент. Если
                               поле wFlags установлено в MF_BYPOSITION,
                               nPosition определяет позицию элемента
                               меню (первый элемент находится в позиции
                               0). Если wFlags установлен в MF_BYCOMMAND,
                               то параметр nPosition определяет ID
                               изменяемого элемента.

             wFlags            WORD  Определяет как интерпретируется
                               параметр nPosition. Он может быть уста-
                               новлен в MF_BYCOMMAND (по умолчанию) или
                               в MF_BYPOSITION.

             hBitmapUnchecked  HBITMAP  Идентифицирует растровую карту,
                               которая отображается, когда элемент не
                               помечен.

             hBitmapChecked    HBITMAP  Идентифицирует растровую карту,
                               которая отображается, когда элемент
                               помечен.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                       = 91 =


             Возвращаемое значение  определяет   результат   выполнения
             функции. Если оно равно TRUE,  то значит функция завершена
             успешно. В противном случае оно равно FALSE.

        Примечания

             Если один    из    параметров     hBitmapUnchecked     или
             hBitmapChecked равен   NULL,   то   для   соответствующего
             атрибута Windows ничего не отображает.  Если оба параметра
             равны NULL,  Windows  для  помеченного элемента использует
             стандартную растровую карту  контрольной  отметки,  а  для
             непоченного элемента удаляет эту карту.

             При разрушении меню данные растровые карты не разрушаются.
             За их разрушение отвечает прикладная программа.

             Функция GetMenuCheckMarkDimensions   возвращает    размеры
             растровой карты   контрольной   отметки,  используемой  по
             умолчанию. Прикладная    программа     для     определения
             собственных контрольных  отметок  должна  использовать эти
             значения.

        ───────────────────────────────────────────────────────────────
                                   SetMessageQueue                             

        Синтаксис

             BOOL SetMessageQueue(cMsg)

             Эта функция   создает   новую  очередь  сообщений.  Она  в
             частности  полезна  для   прикладных   программ,   которым
             требуется   очередь,   содержащая  больше  8-ми  сообщений
             (максимальный размер очереди по умолчанию).  Параметр cMsg
             определяет   размер  новой  очереди;  эта  функция  должна
             вызываться из функции WinMain прикладной  программы  перед
             созданием  любых  окон.  Функция SetMessageQueue разрушает
             старую очередь вместе с  сообщениями,  которые  она  могла
             содержать.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             cMsg              int  Определяет максимальное число
                               сообщений, которые может содержать новая
                               очередь.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет создана ли новая очередь.
             Не   равно  0,  если  функция  создает  новую  очередь.  В
             противном случае равно 0.


       Windows 3.0/Ref/4#7                                       = 92 =

        Примечание

             Если возвращаемое  значение   равно   0,   то   прикладная
             программа не имеет очереди,  т.к.  функция SetMessageQueue
             удалила исходную очередь перед созданием новой. Прикладная
             программа должна      продолжать      вызывать     функцию
             SetMessageQueue с именьшим значением  размера  очереди  до
             тех пор, пока функция не возвратит ненулевое значение.

        ───────────────────────────────────────────────────────────────
                                   SetMetaFileBits                             

        Синтаксис

             HANDLE  SetMetaFileBits(hMem)

             Эта функция cоздает метафайл  памяти  из  данных  в  блоке
             глобальной памяти, определяемом параметром hMem.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок глобальной
                               памяти, содержащий данные метафайла.
                               Предполагается, что данные были заранее
                               созданы функцией GetMetaFileBits.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует метафайл памяти, если
             функция выполнилась  успешно.  В  противном  случае  равно
             NULL.

        Примечание

             После выполнения SetMetaFileBits,  вместо hMem для доступа
             к  метафайлу   должен   использоваться   hMF   (дескриптор
             метафайла).

        ───────────────────────────────────────────────────────────────
                               SetPaletteEntries [3.0]                         

        Синтаксис

             WORD SetPaletteEntries(hPalette,wStartIndex,wNumEntries,
                                                      lpPaletteEntries)

             Эта функция   устанавливает  цвета  и  флаги  в  указанных
             элементах логической палитры.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hPalette          HPALETTE  Идентифицирует логическую

       Windows 3.0/Ref/4#7                                       = 93 =

                               палитру.

             wStartIndex       WORD  Определяет первый устанавливаемый
                               элемент палитры.

             wNumEntries       WORD  Определяет число устанавливаемых
                               элементов палитры.

             lpPaletteEntries  LPPALETTEENTRY  Указывает на первый
                               элемент массива структур PALETTEENTRY,
                               содержащих значения RGB и флаги элементов
                               палитры.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    содержит    число   установленных
             элементов. При ошибке возвращается 0.

        Примечание

             Если при вызове SetPaletteEntries логическая палитра  была
             выбрана в  контексте устройства,  изменения не будут иметь
             эффекта, до  тех  пор,  пока  не  будет  вызвана   функция
             RealizePalette.

        ───────────────────────────────────────────────────────────────
                                      SetParent                                

        Синтаксис

             HWND SetParent(hWndChild,hWndNewParent)

             Эта функция  изменяет  родительское   окно   для   данного
             дочернего окна.  Если  окно,  идентифицируемое  параметром
             hWndChild,  видимо,  Windows   выполняет   соответствующую
             перерисовку.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWndChild         HWND  Идентифицирует дочернее окно.

             hWndNewParent     HWND  Идентифицирует новое родительское
                               окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  предыдущее родительское
             окно.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                       = 94 =

                                       SetPixel                                

        Синтаксис

             DWORD SetPixel(hDC,X,Y,crColor)

             Эта функция устанавливает цвет для точки растра,  заданной
             параметрами X и  Y,  в  цвет  наиболее  близкий  к  цвету,
             определяемому  параметром  crColor.  Точка  растра  должна
             принадлежать области отсечения; в противном случае функция
             игнорируется.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет логическую координату х
                               точки растра, для которой устанавливается
                               цвет.

             Y                 int  Определяет логическую координату y
                               точки растра, для которой устанавливается
                               цвет.

             crColor           COLORREF  Определяет значение цвет,
                               используемый для вывода точки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет значению RGB,  которым в
             действительности выводится  точка.  Это   значение   может
             отличаться  от  crColor,  если  используется аппроксимация
             цвета.  Если  функция  невыполнена  (например,  точка  вне
             области отсечения), возвращаемое значение равно -1.

        Примечание

             Не все   устройства  поддерживают  эту  функцию  (смотрите
             описание RC_BITBLT  в  функции  GetDeviceCaps).

        ───────────────────────────────────────────────────────────────
                                   SetPolyFillMode                             

        Синтаксис

             int SetPolyFillMode(hDC,nPolyFillMode)

             Эта функция устанавливает режим заливки многоугольника для
             функций   GDI,   использующих   соответствующий   алгоритм
             многоугольника для вычисления внутренних точек.


       Windows 3.0/Ref/4#7                                       = 95 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nPolyFillMode     int  Определяет режим заливки. Он может
                               быть одним из следующих:

                               Значение     Описание
                               ────────────────────────────────────────
                               ALTERNATE    Переменный режим.

                               WINDING      Сплошной режим.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  предыдущему  значению режима
             заливки или нулю, если произошла ошибка.

        Примечание

             В основном режимы отличаются только в случае, когда должен
             быть залит сложный перекрывающийся многоугольник (например
             пятисторонний  многоугольник,   формирующий   пятиугольную
             звезду с пятиугольником в центре). В таком случае в режиме
             ALTERNATE  попеременно  заливают  все  замкнутые   области
             внутри  многоугольника  (т.е.  углы  звезды),  а  в режиме
             WINDING  заливают  все  области  (т.е.   углы   звезды   и
             пятиугольник).  Для того чтобы залить все области в режиме
             WINDING,  GDI вычисляет и вычерчивает границу, заключающую
             многоугольник,  но  не перекрывающую.  Например,  в режиме
             WINDING  пятисторонний  многоугольник,  который  формирует
             звезду,  рисуется  как  десятисторонний многоугольник с не
             перекрываемыми сторонами; полученная звезда заливается.

        ───────────────────────────────────────────────────────────────
                                       SetProp                                 

        Синтаксис

             BOOL SetProp(hWnd,lpString,hData)

             Эта функция добавляет новую символьную строку или изменяет
             существующую в перечне  свойств  заданного  окна.  Функция
             SetProp добавляет новую строку в перечень, если символьная
             строка,  задаваемая  параметром  lpString,  отсутствует  в
             перечне.  Новая  запись  содержит  строку и дескриптор.  В
             противном  случае  функция  замещает  дескриптор   текущей
             строки на заданный параметром hData.

             hData может  содержать любое 16-битовое значение,  имеющее
             некоторый смысл для прикладной программы.



       Windows 3.0/Ref/4#7                                       = 96 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, перечень
                               свойств которого получает новую строку.

             lpString          LPSTR  Указывает на заканчивающуюся нулем
                               символьную  строку  в  коде ASCII или
                               атом, идентифицирующий строку.  Если
                               задан атом, он должен быть предварительно
                               создан с помощью функции AddAtom. Атом,
                               шестнадцатиричное  значение, должен
                               помещаться в младшем слове параметра
                               lpString, старшее слово должно быть
                               равно 0.

             hData             HANDLE  Идентифицирует дескриптор данных,
                               который копируется в перечень свойств.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не  равно  нулю,  если дескриптор данных и строка
             добавлены в перечень свойств.  В  противном  случае  равно
             нулю.

        Примечание

             Перед разрушением окна прикладная программа должна удалить
             все  записи  из  перечня  свойств  (т.е.  перед  тем,  как
             прикладная  программа  обработает  сообщение  WM_DESTROY).
             Функция RemoveProp должна быть использована  для  удаления
             записей из перечня свойств.

        ───────────────────────────────────────────────────────────────
                                       SetRect                                 

        Синтаксис

             void SetRect(lpRect,X1,Y1,X2,Y2)

             Эта функция   создает   новый   прямоугольник,    заполняя
             структуру данных типа RECT,  на которую указывает параметр
             lpRect, с координатами, задаваемыми параметрами X1, Y1, X2
             и Y2.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, в которую передаются
                               координаты созданного прямоугольника.

             X1                int  Задает координату х левого верхнего
                               угла прямоугольника.

       Windows 3.0/Ref/4#7                                       = 97 =


             Y1                int  Задает координату y левого верхнего
                               угла прямоугольника.

             X2                int  Задает координату х нижнего правого
                               угла прямоугольника.

             Y2                int  Задает координату y нижнего правого
                               угла прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Ширина прямоугольника,   определяемая    как    абсолютное
             значение  X2 - X1,  не должна превышать 32767 единиц.  Это
             ограничение   распространяется   также   и    на    высоту
             прямоугольника.

        ───────────────────────────────────────────────────────────────
                                                                               
       SetRectEmpty

        Синтаксис

             void SetRectEmpty(lpRect)

             Эта функция создает  пустой  прямоугольник  (устанавливает
             все координаты в нуль).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, которая получает  пустой
                               прямоугольник.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                      SetRectRgn                               

        Синтаксис

             void SetRectRgn(hRgn,X1,Y1,X2,Y2)

             Эта функция  создает  прямоугольную  область.  Она подобна
             функции  CreateRectRegion  за  исключением  того,  что  не
             обращается к распределителю локальной памяти; вместо этого

       Windows 3.0/Ref/4#7                                       = 98 =

             она  использует  пространство,  выделенное  под   область,
             заданную параметром hRgn.  Точки, заданные параметрами X1,
             Y1,  X2 и Y2,  определяют минимальный  размер  выделенного
             пространства.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hRgn              HANDLE  Идентифицирует область.

             X1                int  Определяет координату по оси x
                               верхнего левого угла прямоугольной
                               области.

             Y1                int  Определяет координату по оси y
                               верхнего левого угла прямоугольной
                               области.

             X2                int  Определяет координату по оси x
                               нижнего правого угла прямоугольной
                               области.

             Y2                int  Определяет координату по оси y
                               нижнего правого угла прямоугольной
                               области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Эта функция  используется  вместо   CreateRectRegion   для
             избежания обращения к распределителю локальной памяти.

        ───────────────────────────────────────────────────────────────
                                  SetResourceHandler                           

        Синтаксис

             FARPROC SetResourceHandler(hInstance,lpType,lpLoadFunc)

             Эта функция вызывает функцию для  загрузки  ресурсов.  Она
        используется  внутри  среды  Windows  для  получения информации
        (загружен ресурс или сброшен  и  т.д.)  об  указанном  ресурсе.
        Прикладные  программы  могут  найти  эту  функцию  полезной для
        управления  своими  собственными   типами   ресурсов,   но   ее
        использование не обязательно.  Параметр lpLoadFunc указывает на
        функцию  многократного   вызова,   предоставляемую   прикладной
        программой.   Функция,   указывающая  на  параметр  lpLoadFunc,
        получает информацию о блокированном ресурсе и может  обработать
        эту информацию,  как требуется.  После возврата из функции,  на
        которую указывает параметр  lpLoadFunc,  LockResource  пытается

       Windows 3.0/Ref/4#7                                       = 99 =

        блокировать ресурс еще раз.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               ресурс.

             lpType            LPSTR  Указывает на короткое целое
                               значение, определяющее тип ресурса.

             lpLoadFunc        FARPROC  Определяет адрес экземпляра
                               процедуры функции многократного вызова,
                               предоставляемой  прикладной программой.
                               Дополнительную информацию об этой
                               функции вы найдете в разделе примечания
                               для данной функции.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение      указывает      на      функцию,
             предоставляемую прикладной программой.

        Примечание

             Функция многократного     вызова    должна    использовать
             соглашения по вызову системы Паскаль и быть объявлена  как
             FAR.  Функция  многократного вызова должна иметь следующий
             вид:

             FARPROC FAR PASCAL LoadFunc(hMem,hInstance,hResInfo)
             HANDLE hMem;
             HANDLE hInstance;
             HANDLE hResInfo;

             LoadFunc -   это   метка-заполнитель  для  имени  функции,
             предоставляемой  прикладной  программой.  Фактическое  имя
             должно  быть экспортировано путем включения его в оператор
             EXPORTS в файле определения модуля прикладной программы.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMem              Идентифицирует сохраняемый ресурс.

             hInstance         Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               ресурс.

             hResInfo          Идентифицирует ресурс. Предполагается,
                               что ресурс был предварительно создан с
                               помощью функции FindResource.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 100 =


        Примечание

             Параметр hMem равен нулю, если ресурс еще не был загружен.
             Если попытка блокировать блок,  заданный параметром  hMem,
             завершилась  неудачно,  то  это  означает,  что ресурс был
             сброшен и должен быть загружен снова.

             Адрес функции диалога,  посылаемый  в  качестве  параметра
             lpLoadFunc должен    быть   создан   с   помощью   функции
             MakeProcInstance.

        ───────────────────────────────────────────────────────────────
                                       SetROP2                                 

        Синтаксис

             int SetROP2(hDC,nDrawMode)

             Эта функция    устанавливает   текущий   режим   рисования
             (вывода).  GDI использует режим рисования  для  комбинации
             перьев  и  цвета внутренних областей заливаемых объектов с
             уже  существующими  на  экране  дисплея   цветами.   Режим
             определяет,  как  комбинируется  цвет  пера или внутренней
             части объекта и цвет уже существующий  на  экране  дисплея
             для получения нового цвета.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nDrawMode         int  Определяет новый режим вывода. Он
                               может быть одним из значений,
                               приведенных в табл. 4.16, "Режимы
                               вывода".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  предыдущему  значению режима
             вывода. Он может быть любым из  значений,  приведенных  во
             втором томе  справочного  руководства,  в главе 11,  "Коды
             двоичных растровых операций".

        Примечание

             Режимы рисования  определяют,  как   комбинируются   цвета
             источника и приемника при рисовании текущей кистью. Режимы
             рисования - это обычно двоичные коды  растровых  операций,
             отображающие   все   возможные   булевские   функции  двух
             переменных при использовании двоичных операций AND,  OR  и
             XOR (исключающее OR) и унарная операция NOT.  Режим вывода
             характерен только для растровых устройств,  он не возможен

       Windows 3.0/Ref/4#7                                      = 101 =

             для   векторного  устройства  (см.  операцию  RC_BITBLT  в
             функции GetDeviceCaps).

             Таблица 4.16   содержит   значения    различных    режимов
             отображения для параметра nDrawMode.

             Таблица 4.16.  Режимы отображения.
             ──────────────────────────────────────────────────────────
             Значение          Описание
             ──────────────────────────────────────────────────────────
             R2_BLACK          Пиксель всегда черный.

             R2_WHITE          Пиксель всегда белый.

             R2_NOP            Пиксель остается  без изменений.

             R2_NOT            Пиксель является инверсией цвета дисплея.

             R2_COPYPEN        Пиксель отражает цвет пера.

             R2_NOTCOPYPEN     Пиксель является инверсией пера.

             R2_MERGЕPENNOT    Пиксель является комбинацией пера и
                               инверсии цвета дисплея.

             R2_MASKPENNOT     Пиксель является комбинацией цветов,
                               общих как для пера, так и инверсии цвета
                               дисплея.

             R2_MERGENOTPEN    Пиксель является комбинацией цвета
                               дисплея и инверсии цвета пера.

             R2_MASKNOTPEN     Пиксель является комбинацией цветов,
                               общих как для дисплея, так и инверсии
                               пера.

             R2_MERGЕPEN       Пиксель является комбинацией пера и
                               цвета дисплея.

             R2_NOTMERGEPEN    Пиксель является инверсией цвета
                               R2_MERGEPEN.

             R2_MASKPEN        Пиксель является комбинацией цветов
                               общих как для пера, так и дисплея.

             R2_NOTMASKPEN     Пиксель  является инверсией цвета
                               R2_MASKPEN.

             R2_XORPEN         Пиксель является комбинацией цветов
                               пера или дисплея, но не обоих.

             R2_NOTXORPEN      Пиксель является инверсией цвета
                               R2_XORPEN
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 102 =


             Для получения более полной информации о режимах  рисования
             смотрите главу 11,  "Коды двоичных растровых операций", во
             втором томе справочного руководства.

        ───────────────────────────────────────────────────────────────
                                     SetScrollPos                              

        Синтаксис

             int SetScrollPos(hWnd,nBar,nPos,bRedraw)

             Эта функция  устанавливает  текущую  позицию  лифта строки
             прокрутки  в  соответствии  со   значением,   определяемым
             параметром  nPos,  и  если  задано,  перерисовывает строку
             прокрутки, чтобы отразить ее новое положение.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nWnd              HWND  Идентифицирует окно, строка
                               прокрутки которого должна быть
                               установлена.

             nBar              int  Определяет, какую установить
                               прокрутку. Может быть установлен в
                               одно из следующих значений:

                               Значение  Описание
                               ────────────────────────────────────────
                               SB_CTL    Установить позицию блока
                                         управления строкой прокрутки;
                                         в этом случае параметр hWnd
                                         содержит дескриптор блока
                                         управления строки прокрутки.

                               SB_HORZ   Установить позицию
                                         горизонтальной строки прокрутки.

                               SB_VERT   Установить позицию вертикальной
                                         строки прокрутки.
                               ────────────────────────────────────────

             nPos              int  Определяет новую позицию. Она должна
                               располагаться внутри диапазона прокрутки.

             bRedraw           BOOL  Определяет, должна ли строка
                               прокрутки перерисовываться для того,
                               чтобы отразить произошедшие изменения.
                               Если параметр bRedraw не равен нулю, то
                               строка  прокрутки  перерисовывается. Если
                               bRedraw равен нулю, она не
                               перерисовывается.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 103 =


        Возвращаемое значение

             Возвращаемое значение  определяет предыдущую позицию лифта
             строки прокрутки.

        Примечание

             Установка параметра bRedraw в  нуль  полезна  каждый  раз,
             когда  строка прокрутки будет перерисовываться последующим
             вызовом другой функции.

        ───────────────────────────────────────────────────────────────
                                    SetScrollRange                             

        Синтаксис

             void SetScrollRange(hWnd,nBar,nMinPos,nMaxPos,bRedraw)

             Эта функция   устанавливает   минимальное  и  максимальное
             значения позиций для заданной строки прокрутки.  Она также
             может быть использована для того, чтобы сделать невидимыми
             или отобразить стандартные строки прокрутки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nWnd              HWND  Идентифицирует окно, или блок
                               управления в зависимости от параметра
                               nBar.


             nBar              int  Определяет, какую установить
                               прокрутку. Может быть установлен в
                               одно из следующих значений:

                               Значение  Описание
                               ────────────────────────────────────────
                               SB_CTL    Установить диапазон блока
                                         управления строкой прокрутки;
                                         в этом случае параметр hWnd
                                         содержит дескриптор блока
                                         управления строки прокрутки.

                               SB_HORZ   Установить дапазон
                                         горизонтальной строки прокрутки.

                               SB_VERT   Установить диапазон вертикальной
                                         строки прокрутки.
                               ────────────────────────────────────────

             nMinPos           int  Определяет минимальное значение.


       Windows 3.0/Ref/4#7                                      = 104 =

             nMaxPos           int  Определяет максимальное значение.

             bRedraw           BOOL  Определяет, должна ли строка
                               прокрутки перерисовываться для того,
                               чтобы отразить произошедшие изменения.
                               Если параметр bRedraw не равен нулю, то
                               строка  прокрутки  перерисовывается. Если
                               bRedraw равен нулю, она не
                               перерисовывается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Прикладная программа  не  может  вызвать  эту  функция для
             скрытия строки прокрутки в процессе обработки уведомляющих
             сообщений строки прокрутки.

             Если функция  SetScrollRange  непосредственно  следует  за
             SetScrollPos,  то параметр bRedraw в функции  SetScrollPos
             должен быть установлен в нуль для предотвращения повторной
             перерисовки строки прокрутки.

             Разница между nMinPos и nMaxPos не должна быть больше  чем
             32767.

        ───────────────────────────────────────────────────────────────
                                    SetSoundNoise                              

        Синтаксис

             int SetSoundNoise(nSource,nDuration)

             Эта функция устанавливает источник и длительность звука  в
             аппаратуре громкоговорителя.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nSource           int  Определяет источник звука. Он может
                               быть любым из значений, приведенных ниже,
                               где N - это значение, используемое для
                               задания  частоты.

                               Значение      Описание
                               ────────────────────────────────────────
                               S_PERIOD512   Частота источника равна
                                             N/512 (высокий тон), звук
                                             менее грубый.

                               S_PERIOD1024  Частота источника равна

       Windows 3.0/Ref/4#7                                      = 105 =

                                             N/1024.

                               S_PERIOD2048  Частота источника равна
                                             N/2048 (низкий тон), шум
                                             более грубый.

                               S_PERIODVOICE Частота источника из
                                             голосового канала 3.

                               S_WHITE512    Частота источника равна
                                             N/512 (высокий тон), шум
                                             менее грубый.

                               S_WHITE1024   Частота источника равна
                                             N/1024.

                               S_WHITE2048   Частота источника равна
                                             N/2048 (низкий тон), шум
                                             более грубый.

                               S_WHITEVOICE  Частота источника из
                                             голосового канала 3.
                               ────────────────────────────────────────

             nDuration         int  Определяет длительность звука в
                               тиках.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Равно нулю,  если функция завершена успешно. Если источник
             некорректен, оно равно S_SERDSR.

        ───────────────────────────────────────────────────────────────
                                  SetStretchBltMode                            

        Синтаксис

             int SetStretchBltMode(hDC,nStretchMode)

             Эта функция   устанавливает  режим  растяжения/сжатия  для
             функции StretchBlt.  Режим  растяжения/сжатия  определяет,
             какие  из просматриваемых строк и/или столбцов исключаются
             функцией StretchBlt при сжатии растровой карты.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nStretchMode      int  Определяет новый режим сжатия.
                               Он может быть одним из следующих:


       Windows 3.0/Ref/4#7                                      = 106 =

                               Значение      Описание
                               ────────────────────────────────────────
                               BLACKONWHITE  AND в "исключаемых" строках.
                                             Этот режим сохраняет черные
                                             пиксели за счет белых,
                                             применяя операцию AND над
                                             исключаемыми и остающимися
                                             строками.

                               COLORONCOLOR  Удаление "исключаемых" строк.
                                             Этот режим удаляет все
                                             исключаемые строки без попытки
                                             сохранения содержащейся в них
                                             информации.

                               WHITEONBLACK  OR в "исключаемых" строках.
                                             Этот режим сохраняет белые
                                             пиксели за счет черных,
                                             применяя операцию OR над
                                             исключаемыми и остающимися
                                             строками.
                               ────────────────────────────────────────
                               Режимы BLACKONWHITE    и    WHITEONBLACK
                               обычно   используются   для   сохранения
                               основных    пикселей    в    монохромных
                               растровых  картах.  Режим   COLORONCOLOR
                               обычно используется для сохранения цвета
                               в цветных растровых картах
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    предыдущий    режим
             растяжения/сжатия.   Это    может    быть    BLACKONWHITE,
             WHITEONBLACK или COLORONCOLOR.

        ───────────────────────────────────────────────────────────────
                                   SetSwapAreaSize                             

        Синтаксис

             LONG SetSwapAreaSize(rsSize)

             Эта функция увеличивает размер памяти,  которую прикладная
             программа   использует   для   своего  кодового  сегмента.
             Максимальный  размер  доступной  памяти  -  это   половина
             памяти, оставшейся после загрузки Windows.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             rsSize            WORD  Определяет число параграфов,
                               требуемых прикладной программе для
                               использования под кодовый сегмент.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 107 =


        Возвращаемое значение

             Младшее слово  возвращаемого  значения  определяет   число
             параграфов, полученных   для   использования  под  кодовый
             сегмент (или текущее число, если параметр rsSize равен 0).
             Старшее слово определяет максимально доступное число.

        Примечание

             Если параметр rcSize требует размер больше,  чем доступно,
             то размер кодового сегмента устанавливается в  максимально
             возможное значение.

             Если память выделена под кодовый сегмент,  то она не может
             использоваться программой как сегмент  данных  посредством
             вызова функции GloballAlloc.

             Вызов этой функции улучшает характеристики программы, т.к.
             помогает предотвратить частую загрузку и сброс. Однако при
             этом уменьшается   объем  памяти  доступной  для  объектов
             данных и  может  уменьшиться  скорость  выполнения  других
             программ. Перед  вызовом  SetSwapAreaSize программа должна
             проверить как много выполняется задач  с  помощью  функции
             GetNumTasks.

        ───────────────────────────────────────────────────────────────
                                     SetSysColors                              

        Синтаксис

             void SetSysColors(nChanges,lpSysColor,lpColorValues)

             Эта функция устанавливает системные цвета для  одного  или
             более  элементов  отображения.  Элементы отображения - это
             различные части   окна   отображения   Windows,    которые
             отображаются   на   экране   системного  дисплея.  Функция
             SetSysColor изменяет nChanges элементов,  используя цвет и
             индекс  системного  цвета,  содержащихся  в  массивах,  на
             которые указывают параметры lpSysColor и lpColorValues.

             Функция SetSysColor посылает  сообщение  WM_SYSCOLORCHANGE
             всем  окнам для информирования их об изменении цвета.  Она
             также передает   Windows   информацию   о    необходимости
             перерисовать  некорректные  части  всех  в  данный  момент
             видимых окон.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nChanges          int  Задает число системных цветов,
                               подлежащих изменению.

             lpSysColor        LPINT  Указывает на массив целых индексов,

       Windows 3.0/Ref/4#7                                      = 108 =

                               изменяемые элементы. Значения  индексов,
                               которые  могут быть использованы,
                               приведены в табл. 4.17.

             lpColorValues     DWORD FAR *  Указывает на массив длинных
                               беззнаковых целых, которые содержат
                               новые значения RGB цветов для каждого
                               элемента.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция SetSysColors  изменяет  только  внутренний  список
             системы.   Она   не   изменяет   секцию  [color]  в  файле
             инициализации Windows (WIN.INI).  Изменения  действительны
             только на  время текущего сеанса Windows.  Системные цвета
             являются разделяемыми ресурсом.  Прикладная  программа  не
             должна изменять цвет, если она не желает изменить цвета во
             всех окнах всех в данный  момент  загруженных  программах.
             Системные    цвета   для   монохромных   дисплеев   обычно
             интерпретируются как различные оттенки серого.

             В таблице  4.17  приведены  возможные  значения  параметра
             lpSysColor:

             Таблица 4.17.  Индексы системных цветов.
             ──────────────────────────────────────────────────────────
             Значение               Описание
             ──────────────────────────────────────────────────────────
             COLOR_ACTIVEBORDER     Границы активного окна.

             COLOR_ACTIVECAPTION    Заголовок активного окна.

             COLOR_APPWORKSPACE     Фоновый цвет для прикладных программ
                                    использующим интерфейс множества
                                    документов.

             COLOR_BACKGROUND       Фон экрана.

             COLOR_BTNFACE          Лицевая сторона клавиш.

             COLOR_BTNSHADOW        Кромка клавиш.

             COLOR_BTNTEXT          Текст на клавише.

             COLOR_CAPTIONTEXT      Текст в заголовке, панель размера,
                                    панель стрелки в строке прокрутки.

             COLOR_GRAYEDTEXT       Серый (запрещенный) текст. Этот

       Windows 3.0/Ref/4#7                                      = 109 =

                                    цвет устанавливается в 0, если
                                    дисплей не поддерживает серый цвет.

             COLOR_HIGHLIGHT        Элементы выбранного блока
                                    управления.

             COLOR_HIGHLIGHTTEXT    Текст выбранного блока управления.

             COLOR_INACTIVEBORDER   Границы неактивного окна.

             COLOR_INACTIVECAPTION  Заголовок неактивного окна.

             COLOR_MENU             Фон меню.

             COLOR_MENUTEXT         Текст в меню.

             COLOR_SCROLLBAR        Серая область в строке прокрутки.

             COLOR_WINDOW           Фон окна.

             COLOR_WINDOWFRAME      Границы окна.

             COLOR_WINDOWTEXT       Текст в окнах.

        ───────────────────────────────────────────────────────────────
                                  SetSysModalWindow                            

        Синтаксис

             HWND SetSysModalWindow(hWnd)

             Эта функция  делает  указанное  окно  системным  модальным
             окном.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое
                               делается системным модальным окном.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  окно,  которое было
             раньше системным модальным окном.

        Примечание

             Если другое  окно  делается  активным   окном   (например,
             системное  модальное окно создает панель диалога,  которая
             становится  активным  окном),  активное  окно   становится
             системным   модальным  окном.  Когда  первоначальное  окно
             становится  активным   вновь,   оно   делается   системным
             модальным.  Для  отмены  системного  модального  состояния

       Windows 3.0/Ref/4#7                                      = 110 =

             необходимо  разрушить  окно,  которое  является  системным
             модальным окном.
        ───────────────────────────────────────────────────────────────
                              SetSystemPaletteUse [3.0]                        

        Синтаксис

             SetSystemPaletteUse(hDC,wUsage)

             Эта функция  позволяет  прикладной  программе использовать
             полную системную палитру.  По умолчанию системная  палитра
             содержит 20  статических  цветов,  которые  при реализации
             логической палитры не изменяются.

             Параметр hDC  должен   определять   контекст   устройства,
             которое поддерживает цветовые палитры.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             wUsage            WORD  Определяет новое использование
                               системной палитры. Оно может быть одним
                               из следующих значений:

                               Значение        Описание
                               ────────────────────────────────────────
                               SYSPAL_NOSTATIC Системная палитра кроме
                                               черного и белого не
                                               содержит статических
                                               цветов.

                               SYSPAL_STATIC   Системная палитра содер-
                                               жит статические цвета,
                                               которые не изменяются при
                                               реализации логической
                                               палитры.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет предыдущее использование
             системной палитры.  Он  может  быть  SYSPAL_NOSTATIC   или
             SYSPAL_STATIC.

        Примечание

             Прикладная программа  может  вызывать  эту  функцию только
             когда ее окно имеет захват ввода.

             Если прикладная программа вызывает  SetSystemPaletteUse  c
             параметром wUsage равным SYSPAL_NOSTATIC Windows оставляет
             два элемента системной палитры с точными  черным  и  белым

       Windows 3.0/Ref/4#7                                      = 111 =

             цветами.

             После вызова  этой  функции  с  параметром  wUsage  равным
             SYSPAL_NOSTATIC, прикладная  программа  должна   выполнить
             следующие шаги.

             1. Вызовите UnreliazeObject, чтобы заставить GDI полностью
                переотобразить логическую палитру, при ее реализации.

             2. Реализуйте логическую палитру.

             3. С  помощью  функции  GetSysColors   сохраните   текущие
                системные цвета.

             4. Вызовите   функцию   SetSysColors   для   установки   с
                использованием черного и белого цветов системных цветов
                в подходящие  значения.  Например,  перекрывающиеся или
                соседние элементы  (такие  как  фрейм  окна  и  границы
                окна),   должны  быть  установлены  в  черный  и  белый
                соответственно.

             5. Пошлите  всем  окнам  сообщение WM_SYSCOLORCHANGE чтобы
                они могли выполнить перерисовку с использованием  новых
                системных цветов.

             Когда прикладная  программа  теряет захват ввода или когда
             она закрывается, она должна выполнить следующие шаги:

             1. Вызвать функцию SetSystemPaletteUse с параметром wUsage
                установленным в SYSPAL_STATIC.

             2. Вызвать UnreliazeObject,  чтобы заставить GDI полностью
                переотобразить логическую палитру, при ее реализации.

             3. Реализовать логическую палитру.

             4. Восстановить системные цвета.

             5. Послать широковещательное сообщение WM_SYSCOLORCHANGE.

        ───────────────────────────────────────────────────────────────
                                     SetTextAlign                              

        Синтаксис

             WORD SetTextAlign(hDC,wFlags)

             Эта функция  устанавливает  флаг  выравнивания  текста для
             данного контекста   устройства.    Функции    TextOut    и
             ExtTextOut используют   этот   флаг,  когда  позиционируют
             строку текста на экране или  устройстве.  Флаг  определяет
             связь  между  заданной  точкой и прямоугольником,  который
             ограничивает текст.  Координаты этой точки передаются  как

       Windows 3.0/Ref/4#7                                      = 112 =

             параметр   в   функцию   TextOut.  Прямоугольник,  который
             ограничивает  текст,  формируется  соседними  знакоместами
             символов в текстовой строке.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует устройство или
                               дисплей,  выбранные для вывода текста.

             wFlags            WORD  Определяет маску значений из
                               приведенного ниже  списка. Только один
                               флаг может быть выбран из тех, которые
                               устанавливают горизонтальное или
                               вертикальное выравнивание. Кроме того,
                               может быть выбран только один из двух
                               флагов, которые изменяют текущую позицию:

                   Значение    Описание
                   ────────────────────────────────────────────────────
                   TA_BASELINE Определяет выравнивание точки и базовой
                               линии выбранного шрифта по левой стороне
                               не ограничивающего прямоугольника.

                   TA_BOTTOM   Определяет выравнивание точки и нижней
                               границы ограничивающего прямоугольника.

                   TA_CENTER   Определяет выравнивание точки и центра
                               по горизонтали ограничивающего
                               прямоугольника.

                   TA_LEFT     Определяет выравнивание точки и левой
                               стороны ограничивающего прямоугольника.

                   TA_NOUPDATECP   Определяет, что текущая позиция не
                               корректируется после  каждого  вызова
                               функций TextOut или ExtTextOut.

                   TA_RIGHT    Определяет выравнивание точки и правой
                               стороны ограничивающего прямоугольника.

                   TA_TOP      Определяет выравнивание точки и верхней
                               границы ограничивающего прямоугольника.

                   TA_UPDATECP Определяет, что текущая позиция
                               корректируется после каждого вызова
                               функций TextOut и ExtTextOut.

             По умолчанию используются TA_LEFT, TA_TOP и TA_NOAPDATECP.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   предыдущие   параметры

       Windows 3.0/Ref/4#7                                      = 113 =

             выравнивания: младшее    слово   содержит   горизонтальное
             выравнивание,  а  старшее  слово   содержит   вертикальное
             выравнивание.

        ───────────────────────────────────────────────────────────────
                                SetTextCharacterExtra                          

        Синтаксис

             int SetTextCharacterExtra(hDC,nCharExtra)

             Эта функция    устанавливает     размер     межсимвольного
             промежутка.  GDI  прибавляет  этот  промежуток  к  каждому
             символу, включая разделительные символы, при выводе текста
             на экран дисплея.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nCharExtra        int  Определяет размер дополнительного
                               промежутка (в логических единицах),
                               добавляемого к каждому символу. Если
                               текущий режим отображения не MM_TEXT,
                               параметр nCharExtra преобразуется и
                               округляется до ближайшего пикселя.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    предыдущий   размер
             межсимвольного промежутка.

        ───────────────────────────────────────────────────────────────
                                     SetTextColor                              

        Синтаксис

             DWORD SetTextColor(hDC,crColor)

             Эта функция  устанавливает  цвет  текста  в соответствии с
             параметром crColor или в ближайший логический  цвет,  если
             устройство не  может  представить crColor.  GDI использует
             цвет  текста  для  каждого  символа,  выводимого  функцией
             TextOut.    GDI   также   использует   цвет   текста   для
             преобразования растровых карт из цветных в  монохромные  и
             наоборот.

             Фоновый цвет    для    символов   определяется   функциями
             SetBkColor и SetBkMode. Для преобразования цвета растровой
             карты смотрите функции BitBlt и StrechBlt.


       Windows 3.0/Ref/4#7                                      = 114 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             crColor           COLORREF  Определяет цвет текста.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   предыдущее   цветовое
             значение RGB цвета текста.

        ───────────────────────────────────────────────────────────────
                                 SetTextJustification                          

        Синтаксис

             int SetTextJustification(hDC,nBreakExtra,nBreakCount)

             Эта функция подготавливает  GDI  для  выравнивания  строки
             текста,   применяя  параметры  выравнивания,  определяемые
             nBreakExtra  и  nBreakCount.  Для  того,  чтобы  выровнять
             текст,   GDI   расставляет  дополнительные  пиксели  между
             разделяющими  символами  в  строке  текста,  выводимого  с
             помощью функции TextOut.  Разделяющий символ,  применяемый
             для определения  границ  слов,  является  обычно  символом
             пробела (в коде ASCII равен 32),  но может быть заменен на
             любой  другой  символ  шрифта   (для   получения   символа
             разделителя   шрифта   может   быть  использована  функция
             GetTextMetrics).

             Функция SetTextJustification подготавливает  выравнивание,
             определяя  количество  пробелов,  которые будут добавлены.
             Параметр nBreakExtra определяет общее количество  пробелов
             (в  логических единицах),  добавляемых к строке.  Параметр
             nBreakCount   определяет   число   разделяющих   символов,
             существующих   в   строке.   Следующая   функция   TextOut
             расставляет дополнительные пробелы равномерно между каждым
             разделяющим символом в строке.

             Функция GetTextExtent       всегда      применяется      с
             SetTextJustification.   GetTextExtent   вычисляет   ширину
             данной строки перед выравниванием.  Эта ширина должна быть
             известна,  перед тем как будет  вычислено  соответствующее
             значение nBreakExtra.

             SetTextJustification может быть применена для выравнивания
             строки,  содержащей многочисленные фрагменты из  различных
             шрифтов. В этом случае строка должна создаваться по частям
             с выравниванием и выводом каждого фрагмента отдельно.

             Так как  при   выравнивании   могут   происходить   ошибки
             округления,   GDI  сохраняет  допустимое  значение  ошибки
             фрагмента,  которое   определяет   текущую   ошибку.   При

       Windows 3.0/Ref/4#7                                      = 115 =

             выравнивании строки,  содержащей многочисленные фрагменты,
             GetTextExtent  автоматически  использует  это   допустимое
             значение ошибки при вычислении длины следующего фрагмента.
             После каждой выравненной строки  это  допустимое  значение
             ошибки  должно  обнуляться,  чтобы  не  переносить  его на
             следующую  строку.  Это  делается   при   помощи   функции
             SetTextJustification   с  параметром  nBreakExtra,  равным
             нулю.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nBreakExtra       int Определяет общее число дополнительных
                               пробелов (в логических единицах),
                               добавляемое к строке текста. Если текущий
                               режим отображения не MM_TEXT, nBreakExtra
                               преобразуется и округляется до ближайшего
                               пикселя.

             nBreakCount       int  Определяет количество разделяющих
                               символов в строке.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 1,  если  функция  выполнилась  успешно.  В
             противном случае равно 0.

        ───────────────────────────────────────────────────────────────
                                       SetTimer                                

        Синтаксис

             WORD SetTimer(hWnd,nIDEvent,wElapse,lpTimerFunc)

             Эта функция  служит  для   создания   события   системного
        таймера,  идентифицированного  nIDEvent.  Когда событие таймера
        происходит,  система  Windows   передает   сообщение   WM_TIMER
        предоставляемой    пользователем   функции,   специфицированной
        lpTimerFunc.  Функция может затем обработать событие.  Значение
        NULL  параметра  lpTimerFunc  приводит  к  тому,  что сообщения
        WM_TIMER будут помещаться в очередь прикладной программы.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, связанное с
                               таймером. Если такого окна не существует,
                               то hWnd равен NULL.

             nIDEvent          int  Определяет идентификатор события
                               таймера, если параметр hWnd не равен

       Windows 3.0/Ref/4#7                                      = 116 =

                               NULL.

             wElapse           unsigned  Определяет время в
                               миллисекундах, прошедшее между событиями
                               таймера.

             lpTimerFunc       FARPROC  Адрес экземпляра процедуры
                               функции, которая должна быть уведомлена,
                               когда имеет место событие таймера. Если
                               значение lpTimerFunc равно NULL, то
                               сообщение WM_TIMER передается в очередь
                               прикладной  программы; элемент  hWnd
                               структуры MSG содержит параметр hWnd,
                               заданный в вызове функции SetTimer.
                               Смотрите раздел "Примечания".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение       определяет       целочисленный
             идентификатор нового  события  таймера,  если  hWnd  равен
             NULL.  Возвращаемое  значение  не равно нулю,  если таймер
             создан. В противном случае оно равно нулю.

        Примечание

             Таймеры - лимитированный глобальный ресурс, поэтому важно,
             чтобы   прикладная   программа   контролировала  значение,
             возвращаемое функцией SetTimer, для того, чтобы проверить,
             что таймер действительно доступен.

             Для того,  чтобы инсталлировать функцию таймера,  SetTimer
             должна получить адрес  экземпляра  этой  функции,  которая
             должна  быть  объявлена экспортируемой в файле определения
             модуля прикладной программы.  Адрес экземпляра должен быть
             создан с помощью функции MakeProcInstance.

             Функция многоратного вызова должна использовать соглашения
             по вызову системы Pascal и быть  объявлена  как  FAR.  Она
             имеет следующий вид:

             WORD FAR PASCAL TimerFunc(hWnd,wMsg,nIDEvent,dwTime)
             HWND hWnd;
             WORD wMsg;
             int nIDEvent;
             DWORD dwTime;

             Здесь TimerFunc   используется   вместо   имени   функции,
             предоставляемой прикладной программой. Реальное имя должно
             быть экспортировано  посредством  включения его в оператор
             EXPORTS файла определения модуля прикладной программы.


       Windows 3.0/Ref/4#7                                      = 117 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              Идентифицирует окно, связанное с событием
                               таймера.

             wMsg              Определяет сообщение WM_TIMER.

             nIDEvent          Определяет ID таймера.

             dwTime            Определяет текущее системное время.

        ───────────────────────────────────────────────────────────────
                                    SetViewportExt                             

        Синтаксис

             DWORD SetViewportExt(hDC,X,Y)

             Эта функция устанавливает протяженность области  просмотра
             по  осям  х  и у указанного контекста устройства.  Область
             просмотра вместе с окном контекста устройства  определяют,
             как  GDI  отображает  точки логической системы координат в
             соответствующие  точки   системы   координат   устройства.
             Другими  словами,  они  определяют,  как  GDI  преобразует
             логические координаты в координаты устройства.

             Протяженность области просмотра по осям x и y  определяет,
             каким  образом  функции GDI должны сжимать или растягивать
             единицы в логической системе  координат  для  того,  чтобы
             подогнать  их  к  системе координат устройства.  Например,
             если протяженность окна по  x  равна  2,  а  протяженность
             области   просмотра   по  x  равна  4,  GDI  отображает  2
             логические единицы (отмеренные  по  оси  x)  в  4  единицы
             устройства. Аналогично, если по y протяженность окна равна
             2,  а  протяженность  области  просмотра  равна  -1,   GDI
             отображает  2  логические  единицы отмеренные по оси y в 1
             единицу устройства.

             Протяженности определяют  также  относительную  ориентацию
             осей  x  и  y  в  обеих  системах  координат.  Если  знаки
             протяженностей  окна  и  области  просмотра   по   оси   у
             совпадают,  то также совпадает ориентация осей. Если знаки
             различны,  то  и  ориентации   обратны.   Например,   если
             протяженность  окна  по  оси  у  равна 2,  а протяженность
             области просмотра равна -1, GDI отражает положительную ось
             y  в  логической  системе координат на отрицательную ось y
             системы координат устройства. Если протяженности равны 2 и
             4,  то  GDI  отображает  положительную  ось x в логической
             системе  координат  на  положительную  ось  x  в   системе
             координат устройства.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

       Windows 3.0/Ref/4#7                                      = 118 =


             X                 int  Определяет протяженность области
                               просмотра по оси x (в единицах
                               устройства).

             Y                 int  Определяет протяженность области
                               просмотра по оси y (в единицах
                               устройства).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    прежнее    значение
             протяженности  области  просмотра  в  единицах устройства.
             Предыдущая протяженность по оси  y  содержится  в  старшем
             слове,  по  оси  x  -  в младшем.  При ошибке возвращаемое
             значение равно 0.

        Примечания

             Когда установлены  приведенные  ниже  режимы  отображения,
             вызовы функций SetWindowExt и SetViewportExt игнорируются:

             - MM_HIENGLISH

             - MM_HIMETRIC

             - MM_LOENGLISH

             - MM_LOMETRIC

             - MM_TEXT

             - MM_TWIPS

             Когда установлен режим MM_ISOTROPIC,  прикладная программа
             должна  выполнить  функцию  SetWindowExt   перед   вызовом
             функции SetViewportExt.

        ───────────────────────────────────────────────────────────────
                                    SetViewportOrg                             

        Синтаксис

             DWORD SetViewportOrg(hDC,X,Y)

             Эта функция  устанавливает   координаты   начала   области
             просмотра   указанного   контекста   устройства.   Область
             просмотра вместе с окном контекста устройства  определяют,
             как  GDI  отображает  точки логической системы координат в
             соответствующие   точки   системы   координат    реального
             устройства.  Другими  словами,  они  определяют,  как  GDI
             преобразует логические координаты в координаты устройства.

       Windows 3.0/Ref/4#7                                      = 119 =


             Координаты начала  области  просмотра  отмечают  точку   в
             системе   координат  устройства,  начиная  с  которой  GDI
             отображает  координаты  начала  окна,   причем   точка   в
             логической   системе  координат  определяется  посредством
             функции SetWindowOrg.  GDI  отображает  все  другие  точки
             посредством   некоторого  процесса,  требующего  отражения
             начала окна в  начало  области  просмотра.  Например,  все
             точки,  расположенные  в  круге  около  точки начала окна,
             будут  в  круге  около  точки  начала  области  просмотра.
             Аналогично  все  точки,  принадлежащие  линии,  проходящей
             через координаты начала окна,  будут  принадлежать  линии,
             проходящей через координаты начала области просмотра.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет координату x (единицах
                               устройства) начала области просмотра.
                               Значение должно быть внутри диапазона
                               системы координат устройства.

             Y                 int  Определяет координату y (единицах
                               устройства) начала области просмотра.
                               Значение должно быть внутри диапазона
                               системы координат устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет предыдущее начало окна (в
             координатах  устройства).  Координата  y  располагается  в
             старшем слове; координата x - в младшем.

        ───────────────────────────────────────────────────────────────
                                    SetVoiceAccent                             

        Синтаксис

             int SetVoiceAccent(nVoice,nTempo,nVolume,nMode,nPitch)

             Эта функция   помещает  акцент  (голос,  темп,  громкость,
             исполнение,   высота   звука)   в    голосовую    очередь,
             определяемую  параметром  nVoice.  Новый  акцент  заменяет
             предшествующий и действителен  до  тех  пор,  пока  другой
             акцент  не будет поставлен в очередь.  Акцент не считается
             нотой.

             Ошибка появляется,  если  недостаточно  места  в  очереди;
             функция  SetVoiceAccent  всегда оставляет место для одного
             символа  сихронизации  (sync)  в  очереди.  Если  значение
             параметра nVoice выходит за пределы диапазона,  то функция

       Windows 3.0/Ref/4#7                                      = 120 =

             SetVoiceAccent игнорируется.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь.

             nTempo            int  Определяет число нот длительностью
                               в одну четверть, проигрываемых в минуту.
                               Оно может иметь любое значение в
                               диапазоне от 32 до 255. По умолчанию
                               устанавливается 120.

             nVolume           int  Определяет уровень громкости (силу
                               звука). Он может быть любым значением в
                               диапазоне от 0 (тихий звук) до 255
                               (громкий звук).

             nMode             int Определяет, как будут играться ноты
                               (исполнение). Он может быть одним из
                               следующих значений:

                               Значение    Описание
                               ────────────────────────────────────────
                               S_LEGATO    Нота держится полную
                                           длительность и сливается с
                                           началом следующей.

                               S_NORMAL    Нота держится полную
                                           длительность, затем переход
                                           к полной паузе перед
                                           исполнением новой ноты.

                               S_STACCATO  Нота держится только часть
                                           длительности, создавая резко
                                           выраженную паузу между ней и
                                           следующей нотой.
                               ────────────────────────────────────────

             nPitch            int  Определяет тон (высоту звука) нот,
                               которые будут играть. Он может быть любым
                               значением в диапазоне от 0 до 83. Значение
                               тона добавляется к значению ноты
                               арифметическим сложением по модулю 84.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 0,  если  функция  завершена  успешно.  При
             ошибке оно равно одному из следующих значений:


       Windows 3.0/Ref/4#7                                      = 121 =

             Значение   Описание
             ──────────────────────────────────────────────────────────
             S_SERDMD   Некорректное исполнение.

             S_SERDTP   Некорректный темп.

             S_SERDVL   Некорректная сила звука (громкость).

             S_SERQFUL  Очередь заполнена.

        ───────────────────────────────────────────────────────────────
                                   SetVoiceEnvelope                            

        Синтаксис

             int SetVoiceEnvelope(nVoice,nShape,nRepeat)

             Эта функция  устанавливает  оболочку  (форма   сигнала   и
             счетчик  повторений)  в  голосовой  очереди,  определяемой
             параметром nVoice.  Новая оболочка заменяет предшествующую
             и  действительна  до  следующего  вызова SetVoiceEnvelope.
             Оболочка не считается нотой.

             Ошибка появляется,  если  недостаточно  места  в  очереди;
             функция SetVoiceEnvelope всегда оставляет место для одного
             символа  сихронизации  (sync)  в  очереди.   Если   nVoice
             находится вне диапазона, то SetVoiceEnvelope игнорируется.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь для
                               приема оболочки.

             nShape            int  Определяет индекс формы сигнала в
                               OEM-таблице.

             nRepeat           int  Определяет число повторений формы
                               сигнала во время звучания одной ноты.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 0,  если  функция  завершена  успешно.  При
             ошибке оно равно одному из следующих значений:

             Значение   Описание
             ──────────────────────────────────────────────────────────
             S_SERDRC   Некорректное число повторений.

             S_SERDSH   Некорректная форма.

             S_SERQFUL  Очередь заполнена.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 122 =

                                     SetVoiceNote                              

        Синтаксис

             int SetVoiceNote(nVoice,nValue,nLength,nCdots)

             Эта функция устанавливает ноту  с  параметрами,  заданными
             nValue,   nLength   и   nCdots,   в   голосовую   очередь,
             определяемую параметром nVoice.  Ошибка  появляется,  если
             недостаточно  места  в  очереди.  Функция всегда оставляет
             пространство в очереди для  одного  символа  синхронизации
             (sync).

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь для
                               посылки ноты. Если nVoice - вне
                               диапазона, то  функция  SetVoiceNote
                               игнорируется.

             nValue            int  Определяет одну из 84 возможных
                               нот (7 октав). Если nValue равен нулю,
                               предполагается пауза.

             nLength           int  Определяет различные длительности
                               ноты. Например, 1 определяет целую ноту,
                               2 - половинную ноту,  4 - одну  четверую
                               ноты и т.д.

             nCdots            int  Определяет длительность ноты в
                               точках. Длительность равна
                               nLength * (nCdots * 3 / 2).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             фукнции. Равно  0,  если  функция  завершена успешно.  При
             ошибке оно равно одному из следующих значений:

             Значение   Описание
             ──────────────────────────────────────────────────────────
             S_SERDCC   Некорректное число точек.

             S_SERDLN   Некорректная длина ноты.

             S_SERDNT   Некорректная нота.

             S_SERQFUL  Очередь заполнена.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 123 =

                                  SetVoiceQueueSize                            

        Синтаксис

             int SetVoiceQueueSize(nVoice,nBytes)

             Эта функция   выделяет  число  байт,  заданное  параметром
             nBytes,  для голосовой  очереди,  определяемой  параметром
             nVoice. Если размер очереди не установлен, то по умолчанию
             он равен 192 байтам,  в которых размещается около 32  нот.
             Все  голосовые  очереди  блокируются в памяти.  Очереди не
             могут устанавливаться, пока играет музыка.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь.

             nBytes            int  Определяет число байт в голосовой
                               очереди.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции Равно  0,  если  функция  завершена  успешно.  При
             ошибке оно равно одному из следующих значений:

             Значение   Описание
             ──────────────────────────────────────────────────────────
             S_SERMACT  Исполняется музыка.

             S_SEROFM   Недостаточно памяти.

        ───────────────────────────────────────────────────────────────
                                    SetVoiceSound                              

        Синтаксис

             int SetVoiceSound(nVoice,nFrequency,nDuration)

             Эта функция  устанавливает  частоту звука и длительность в
             голосовой очереди, определяемой параметром nVoice.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь.
                               Первая голосовая очередь имеет номер 1.

             lFrequency        int  Определяет частоту. Старшее слово
                               содержит частоту в килогерцах, а младшее
                               слово содержит  дробную часть значения
                               частоты.

             nDuration         int  Определяет длительность звука в
                               тиках.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 124 =


        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно  0,  если  функция  завершена успешно.  При
             наличии ошибки оно может быть одним из следующих:

             Значение   Описание
             ──────────────────────────────────────────────────────────
             S_SERDDR   Некорректная длительность ноты.

             S_SERDFQ   Некорректная частота звука.

             S_SERDVL   Некорректная сила звука.

             S_SERQFUL  Очередь заполнена.

        ───────────────────────────────────────────────────────────────
                                  SetVoiceThreshold                            

        Синтаксис

             int SetVoiceThreshold(nVoice,nNotes)

             Эта функция  устанавливает  пороговый  уровень для данного
             голоса.  Когда число нот,  оставшихся в голосовой очереди,
             становится   меньше,   чем   задано  в  параметре  nNotes,
             устанавливается флаг порогового события.  Если при  вызове
             функции   SetVoiceThreshold   уровень  в  очереди  меньше,
             определенного в nNotes,  то флаг не  устанавливается.  Для
             проверки  текущего  состояния  порога  должна быть вызвана
             функция GetThresholdStatus.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nVoice            int  Определяет голосовую очередь,
                               которую необходимо установить.

             nNotes            int  Определяет число нот для порогового
                               уровня.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 0,  если  функция  завершена  успешно.  Оно
             равно  1,  если  число  нот,  определенное  nNotes  -  вне
             диапазона.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 125 =

                                     SetWindowExt                              

        Синтаксис

             DWORD SetWindowExt(hDC,X,Y)

             Эта функция устанавливает протяженность окна по осям х и у
             указанного контекста устройства.  Окно вместе  с  областью
             просмотра   контекста   устройства   определяют,  как  GDI
             отображает   точки   логической   системы   координат    в
             соответствующие точки системы координат устройства.

             Протяженность окна по осям х и у определяет, каким образом
             функции GDI  должны  сжимать  или  растягивать  единицы  в
             логической системе координат для того,  чтобы подогнать их
             к   системе   координат   устройства.    Например,    если
             протяженность  окна  по  оси  x  равна 2,  а протяженность
             области просмотра по оси  x  равна  4,  GDI  отображает  2
             логические  единицы  (отмеренные  по  оси  x)  в 4 единицы
             устройства.  Аналогично,  если по оси y протяженность окна
             равна 2,  а протяженность области просмотра равна -1,  GDI
             отражает 2 логические единицы, отмеренные по оси y, в одну
             единицу устройства.

             Протяженность определяет  также  относительную  ориентацию
             осей  x  и  y  в  обеих  системах  координат.  Если  знаки
             протяженности окна и области просмотра по оси у совпадают,
             то также совпадает ориентация осей.  Если знаки  различны,
             то и ориентации обратны. Например, если протяженность окна
             по оси y равна 2,  а протяженность области просмотра равна
             -1,  GDI отражает положительную ось y в логической системе
             координат на  отрицательную  ось  y  в  системе  координат
             устройства.  Если  протяженности по оси x равны 2 и 4,  то
             GDI отображает положительную ось x  в  логической  системе
             координат  на  положительную  ось  x  в  системе координат
             устройства.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет протяженность окна по
                               оси x (в  логических единицах).

             Y                 int  Определяет протяженность окна по
                               оси y (в  логических единицах).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   предыдущее   значение
             протяженности окна  (в  логических  единицах).  Предыдущая
             протяженность   по  оси  y  содержится  в  старшем  слове,
             протяженность  по  оси  x  -   в   младшем.   При   ошибке
             возвращаемое значение равно 0.

       Windows 3.0/Ref/4#7                                      = 126 =


        Примечания

             Когда установлены  приведенные  ниже  режимы  отображения,
             вызовы SetWindowExt и SetViewportExt игнорируются:

             - MM_HIENGLISH

             - MM_HIMETRIC

             - MM_LOENGLISH

             - MM_LOMETRIC

             - MM_TEXT

             - MM_TWIPS

             Когда установлен режим MM_ISOTROPIC,  прикладная программа
             должна перед   вызовом   функции   SetViewportExt  вызвать
             функцию SetWindowExt.

        ───────────────────────────────────────────────────────────────
                                    SetWindowLong                              

        Синтаксис

             LONG SetWindowLong(hWnd,nIndex,lNewLong)

             Эта функция изменяет атрибуты окна, определяемого hWnd.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет изменяемый атрибут. Это
                               может быть одно из следующих значений:

                               Значение      Описание
                               ────────────────────────────────────────
                               GWL_EXSTYLE   Устанавливает новый расши-
                                             ренный тип окна.

                               GWL_STYLE     Тип окна.

                               GWL_WNDPROC   Длинный указатель на
                                             функцию окна.
                               ────────────────────────────────────────

             lNewLong          DWORD  Содержит заменяющее значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                      = 127 =


             Возвращаемое значение   определяет   предыдущее   значение
             указанного длинного целого.

        Примечания

             Если функция    SetWindowLong    и    индекс   GWL_WNDPROC
             используются для установки  новой  функции  окна,  то  эта
             новая   функция   должна   иметь   форму  функции  окна  и
             описываться  в   файле   определения   модуля   прикладной
             программы    как   экспортируемая   (см.   также   функцию
             RegisterClass).

             Вызов функции  SetWindowLong  с   параметром   GCL_WNDPROC
             создает подкласс  класса  окна,  который  используется для
             создания окон.  Смотрите  главу  1,  "Функции   интерфейса
             графических устройств"   которая  содержит  дополнительную
             информацию о  подклассах  окон.  Прикладные  программы  не
             должны пытаться  создать  подклассы для стандартных блоков
             управления Windows,  таких как комбинированные  блоки  или
             клавиши.

             Для установки  любых  дополнительных  4-байтовых значений,
             которые были зарезервированы при создании структуры класса
             окна,   используйте   положительные  смещения  в  качестве
             индексов,  начиная с нуля для первого 4-байтового значения
             дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                     SetWindowOrg                              

        Синтаксис

             DWORD SetWindowOrg(hDC,X,Y)

             Эта функция устанавливает начало окна указанного контекста
             устройства.  Окно  вместе  с  областью просмотра контекста
             устройства определяют, как GDI отображает точки логической
             системы   координат   в   соответствующие   точки  системы
             координат устройства.

             Координаты начала  окна  определяют  точку  в   логической
             системе   координат,  начиная  с  которой  GDI  отображает
             координаты  начала  области  просмотра,  причем  точка   в
             системе   координат  устройства  определяется  посредством
             функции SetWindowOrg.  GDI  отображает  все  другие  точки
             посредством   того  же  процесса,  требующего  отображения
             начала окна в  начало  области  просмотра.  Например,  все
             точки,  расположенные  в  круге  около  точки начала окна,
             будут  в  круге  около  точки  начала  области  просмотра.
             Аналогично  все  точки,  принадлежащие  линии,  проходящей
             через начало окна,  будут принадлежать  линии,  проходящей
             через начало области просмотра.

       Windows 3.0/Ref/4#7                                      = 128 =


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет координату х нового
                               начала окна (в логических единицах).

             Y                 int  Определяет координату y нового
                               начала окна (в логических единицах).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет предыдущее начало окна  в
             логических   координатах.  Координата  y  располагается  в
             старшем слове; координата x в младшем.

        ───────────────────────────────────────────────────────────────
                                     SetWindowPos                              

        Синтаксис

             void SetWindowPos(hWnd,hWndInsertAfter,x,y,cx,cy,wFlags)

             Эта функция изменяет размер,  позицию и последовательность
             дочерних окон,  окон накладываемого типа и  окон  верхнего
             уровня.  Дочерние  окна,  окна  накладываемого типа и окна
             верхнего уровня ранжируются в соответствии с их появлением
             на  экране;  самое  верхнее окно получает наивысший ранг и
             оно является первым окном в списке.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое будет
                               позиционироваться.

             hWndInsertAfter   HWND  Идентифицирует окно в списке
                               управления окнами, которое будет
                               предшествовать позиционируемому окну.

             x                 int  Определяет координату х верхнего
                               левого угла.

             y                 int  Определяет координату y верхнего
                               левого угла.

             cx                int  Определяет новую ширину окна.

             cy                int  Определяет новую высоту окна.

             wFlags            WORD  Определяет одно из 8-ми возможных
                               16-битовых значений, которые влияют на

       Windows 3.0/Ref/4#7                                      = 129 =

                               размер и позиционирование окна. Оно может
                               принимать одно из следующих значений:

                               Значение      Описание
                               ────────────────────────────────────────
                               SWP_DRAWFRAME Рисует вокруг окна границы
                                             (определяемые в  описании
                                             класса окна).

                               SWP_HIDEWINDOW  Делает окно невидимым.

                               SWP_NOACTIVATE  Не активизирует окно.

                               SWP_NOMOVE    Сохраняет текущую позицию
                                             (игнорирует параметры x и
                                             y).

                               SWP_NOSIZE    Сохраняет текущий  размер
                                             (игнорирует параметры cx
                                             и cy).

                               SWP_NOREDRAW  Не перерисовывает окно при
                                             изменениях.

                               SWP_NOZORDER  Сохраняет текущий ранг
                                             (игнорирует параметр
                                             hWndInsertAfter).

                               SWP_SHOWWINDOW Отображает окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечания

             Если флаг SWP_NOZORDER  не  определен,  Windows  размещает
             окно,   идентифицируемое   параметром  hWnd,  после  окна,
             идентифицируемого параметром     hWndInsertAfter.     Если
             hWndInsertAfter   равно   NULL,  Windows  размещает  окно,
             идентифицируемое параметром hWnd,  в начале  списка.  Если
             параметр hWndInsertAfter установлен в 1, Windows размещает
             окно, идентифицируемое параметром hWnd, в конце списка.

             Если установлены флаги SWP_SHOWWINDOW или  SWP_HIDEWINDOW,
             то  не  могут  быть  выполнены  одновременно  прокрутка  и
             перемещение.

             Все координаты для  дочерних  окон  задаются  относительно
             верхнего  левого  угла  области пользователя родительского
             окна.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 130 =

                                    SetWindowsHook                             

        Синтаксис

             FARPROC SetWindowsHook(nFilterType,lpFilterFunc)

             Эта функция  используется  для установки функции фильтра в
             цепочку.  Функция  фильтра  обрабатывает  события,   перед
             посылкой  их  в  цикл  сообщений  прикладной  программы  в
             функции WinMain.  Цепочка - это связанный  список  функций
             фильтров одного типа.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nFilterType       int  Определяет одно из следующих
                               значений, указывающих, какая устанавли-
                               вается ловушка:

                  Значение           Описание
                  ─────────────────────────────────────────────────────
                  WH_CALLWNDPROC     Устанавливает фильтр функции окна.

                  WH_GETMESSAGE      Устананавливается фильтр сообщений.

                  WH_JOURNALPLAYBACK Устанавливается фильтр получения
                                     предварительно записанного
                                     сообщения.

                  WH_JOURNALRECORD   Установить фильтр для сохранения
                                     сообщений о событиях.

                  WH_KEYBOARD        Установить фильтр клавиатуры.

                  WH_MSGFILTER       Установить фильтр сообщений.

                  WH_SYSMSGFILTER    Установить фильтр сообщений,
                                     включая системные.
                  ─────────────────────────────────────────────────────

             pFilterFunc       FARPROC  Определяет адрес экземпляра
                               процедуры функцию фильтра, которая должна
                               быть  установлена. Смотрите раздел
                               "Примечания".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  указывает   на   адрес   экземпляра
             процедуры   ранее  установленного  фильтра,  если  таковой
             имеется.  Оно равно NULL,  если отсутствует предшествующий
             фильтр. Программа,   вызывающая   функцию  SetWindowsHook,
             должна сохранять  это  возвращаемое  значение  в  сегменте

       Windows 3.0/Ref/4#7                                      = 131 =

             данных библиотеки.  Четвертый аргумент функции DefHookProc
             указывает на ячейку в памяти,  где библиотека  хранит  это
             возвращаемое значение.

        Примечания

             Ловушки WH_CALLWNDPROC    и    WH_GETMESSAGE   влияют   на
             характеристики системы.  Они   используются   только   для
             отладочных целей.

             Системные ловушки являются разделяемым ресурсом. Установка
             ловушки воздействует на все  прикладные  программы.  Из-за
             соглашений  LIM  версия  4.0  большиство  функций  ловушек
             должны располагаться в  библиотеках.  Исключение  делается
             только  для  WM_MSGFILTER,  которая  является  специальной
             задачей.  Использование  системных  ловушек  должно   быть
             ограничено прикладными программами специального назначения
             или  применением  только  во  время   отладки   прикладной
             программы.  Библиотеки,  которым  не нужна больше ловушка,
             должны удалять функцию фильтра.

             Для установки  функции   фильтра,   SetWindowHook   должна
             получить  адрес  экземпляра  процедуры  функции  и функция
             должна  быть  объявлена   как   экспортируемая   в   файле
             определения модуля библиотеки. Библиотека может передавать
             непосредственно    адрес    процедуры.    Задачи    должны
             использовать   MakeProcInstance   для   получения   адреса
             экземпляра процедуры.

             Ниже описывается,  как осуществлять  поддержку  конкретных
             функций ловушек.

        WH_CALLWNDPROC

             Windows вызывает     функцию     фильтра    WH_CALLWNDPROC
             непосредственно перед посылкой любого сообщения в  функцию
             окна.  Функция  фильтра  должна использовать соглашения по
             вызову системы Паскаль и должна быть  объявлена  как  FAR.
             Функция фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc - это поле шаблона для  имени  функции,
             поддерживаемой библиотекой. Действительное имя должно быть
             объявлено как экспортируемое,  включением его  в  оператор
             EXPORTS в файле определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет должна ли функция  фильтра

       Windows 3.0/Ref/4#7                                      = 132 =

                               обрабатывать сообщение или вызывать
                               функцию  DefHookProc. Если параметр
                               nCode меньше нуля, функция фильтра должна
                               передать сообщение в DefHookProc, не
                               обрабатывая его.

             wParam            Определяет послано ли сообщение текущей
                               задачей. Он не равен нулю, если сообщение
                               послано, в  противном  случае, равен нулю.

             lParam            Указывает на структуру сообщения.
                               Ниже приведены порядок, тип и описание
                               всех полей этой структуры:

                               Поле    Тип/Описание
                               ────────────────────────────────────────
                               hlParam WORD  Содержит старшее слово
                                             параметра lParam сообщения
                                             полученного фильтром.

                               llParam WORD  Содержит младшее слово
                                             параметра lParam сообщения
                                             полученного фильтром.

                               wParam        WORD  Содержит параметр
                                             wParam сообщения, получен-
                                             ного фильтром.

                               wMsg          WORD  Содержит полученное
                                             фильтром сообщение.

                               hWnd          WORD  Содержит дескриптор
                                             окна, которому направлено
                                             сообщение.
                               ────────────────────────────────────────

        Примечание

             Функция фильтра  WH_CALLWNDPROC  может  контролировать или
             модифицировать сообщение,  если необходимо. Как только она
             возвращает  управление   Windows,   сообщение   с   любыми
             модификациями  передается в функцию окна.  Функция фильтра
             не требует возвращаемое значение.

        WH_GETMESSAGE

             Windows вызывает функцию фильтра WH_GETMESSAGE каждый раз,
             когда  вызывается  функция  GetMessage.  Windows  вызывает
             функцию фильтра непосредственно после  того,  как  функция
             GetMessage   получает   сообщение  из  очереди  прикладной
             программы.  Функция фильтра должна использовать соглашения
             по вызову системы Паскаль и должна быть объявлена как FAR.
             Функция фильтра должна иметь вид:

       Windows 3.0/Ref/4#7                                      = 133 =


             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc  -  это поле шаблона для имени функции,
             поддерживаемой библиотекой. Действительное имя должно быть
             объявлено  как  экспортируемое,  включением его в оператор
             EXPORTS в файле определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет должна ли функция фильтра
                               обрабатать сообщение или вызвать функцию
                               DefHookProc. Если параметр nCode меньше
                               нуля, функция фильтра должна передать
                               сообщение в DefHookProc, не обрабатывая
                               его.

             wParam            Равно NULL.

             lParam            Указывает на структуру сообщения.
             ──────────────────────────────────────────────────────────

        Примечания

             Функция фильтра  WH_GETMESSAGE  может  контролировать  или
             модифицировать сообщение,  если необходимо. Как только она
             возвращает  управление   Windows'у,   функция   GetMessage
             передает  сообщение  с  любыми  модификациями в прикладную
             программу, которая первоначально ее вызвала.

        WH_JOURNALPLAYBACK

             Windows вызывает функцию фильтра WH_JOURNALPLAYBACK каждый
             раз,  когда  делается запрос сообщения о событии.  Функция
             используется   для   выдачи   предварительно   записанного
             сообщения о событии.

             Функция фильтра  должна  использовать соглашения по вызову
             системы Паскаль и должна быть объявлена как  FAR.  Функция
             фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc -  это  поле  шаблона  для  задаваемого
             прикладной   программой   имени   функции,  поддерживаемой
             библиотекой.  Фактическое  имя   должно   экспортироваться
             включением  его  в  оператор  EXPORTS  в файле определения

       Windows 3.0/Ref/4#7                                      = 134 =

             модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет должна ли функция фильтра
                               обработать сообщение или вызвать функцию
                               DefHookProc. Если параметр nCode меньше
                               нуля, функция фильтра должна передать
                               сообщение в DefHookProc, не обрабатывая
                               его.

             wParam            Равно NULL.

             lParam            Указывает на сообщение, обрабатываемое
                               функцией.
             ──────────────────────────────────────────────────────────

        Примечания

             Функция фильтра   WH_JOURNALPLAYBACK   должна   копировать
             сообщение  о  событии в параметр lParam.  Сообщение должно
             быть предварительно записано  с  помощью  функции  фильтра
             WH_JOURNALRECORD.  Она не должна модифицировать сообщение.
             Возвращаемое значение должно содержать количество  времени
             (в тиках), которое Windows должен ожидать перед обработкой
             сообщения.  Это  время  может  быть  получено  вычислением
             разницы между временными полями в текущем и предшествующем
             сообщениях  о  событии.  Если  функция  возвращает   нуль,
             сообщение   обрабатывается   немедленно.  Как  только  она
             возвратит управление   Windows,   продолжится    обработка
             сообщения.  Если  параметр  nCode  равен HC_SKIP,  функция
             фильтра  должна  подготовить  для  возвращения   следующее
             записанное сообщение о событии при следующем ее вызове.

             Пока действует функция фильтра WH_JOURNALPLAYBACK, Windows
             игнорирует весь ввод от мыши и клавиатуры.

        WH_JOURNALRECORD

             Среда Windows вызывает  функцию  фильтра  WH_JOURNALRECORD
             каждый  раз,  когда  она обрабатывает сообщение из очереди
             событий.  Фильтр может использоваться для записи  события,
             которое позднее будет воспроизведено.

             Функция фильтра  должна  использовать соглашения по вызову
             системы Паскаль и должна быть объявлена как  FAR.  Функция
             фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;


       Windows 3.0/Ref/4#7                                      = 135 =

             Функция FilterFunc - это поле шаблона для  имени  функции,
             задаваемого   библиотекой.  Фактическое  имя  должно  быть
             экспортировано включением его в оператор EXPORTS  в  файле
             определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет должна ли функция фильтра
                               обработать сообщение или вызвать функцию
                               DefHookProc. Если параметр nCode меньше
                               нуля, функция фильтра должна передать
                               сообщение в DefHookProc, не обрабатывая
                               его.

             wParam            Равен NULL.

             lParam            Указывает на структуру сообщения.
             ──────────────────────────────────────────────────────────

        Примечание

             Функция WH_JOURNALRECORD  должна сохранить копию сообщения
             о событии для последующего воспроизведения.  Она не должна
             модифицировать  сообщение.  Как   только   она   возвратит
             управление   Windows,   продолжится  обработка  сообщения.
             Функция фильтра не требует возвращаемого значения.

        WH_KEYBOARD

             Среда Windows вызывает функцию фильтра WH_KEYBOARD  каждый
             раз,   когда   прикладная   программа   вызывает   функцию
             GetMessage и PeekMessage и имеются события  для  обработки
             (WM_KEYUP и WM_KEYDOWN), связанные клавиатуры.

             Функция фильтра  должна  использовать соглашения по вызову
             системы Паскаль и должна быть объявлена как  FAR.  Функция
             фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc - это поле шаблона для  имени  функции,
             поддерживаемой библиотекой. Действительное имя должно быть
             объявлено как экспортируемое,  включением его  в  оператор
             EXPORTS в файле определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет должна ли функция фильтра
                               обрабатать сообщение или вызвать функцию
                               DefHookProc. Если этот параметр имеет

       Windows 3.0/Ref/4#7                                      = 136 =

                               значение, соответствущее HC_NOREMOVE, то
                               прикладная программа использует функцию
                               PeekMessage с параметром PM_NOREMOVE и
                               сообщение не будет удаляется из очереди
                               прикладной программы. Если это значение
                               меньше чем нуль, то функция фильтра
                               должна передать сообщение в DefHookProc,
                               не обрабатывая его.

             wParam            Определяет код виртуальной клавиши, для
                               данной клавиши.

             lParam            Определяет счетчик повторений, код
                               поиска, код преобразования клавиши,
                               предшествующее состояние клавиши и
                               контекстный код. Структура расположения
                               информации в параметре имеет следующий
                               вид:

             Биты         Значение
             ──────────────────────────────────────────────────────────
             0-15         Счетчик повторений (длительное нажатие
             (Младшее     пользователем на клавишу рассматривается как
              слово)      несколько  повторных  нажатий на клавишу).

             16-23        Код поиска (значение зависит от OEM-кодировки).
             (Младший байт
              старшего слова)

             24           Дополнительная клавиша (если единица).

             25-26        Не используются.

             27-28 контекстный код       Используется Windows.
             (1, если клавиша  ALT
             нажата в то время как
             интересующая клавиша была нажата.
             0 - в противном случае).

             30           Предшествующее состояние клавиши (1, если
                          клавиша была нажата перед  тем, как  было
                          послано сообщение; 0, если не была нажата).

             31           Статус преобразования (1, если клавиша была
                          отпущена; 0, если нажата).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение.

             Равно нулю, если сообщение должно быть обработано Windows;
             оно равно 0, если сообщение должно быть сброшено.

        WH_MSGFILTER

       Windows 3.0/Ref/4#7                                      = 137 =


             Среда Windows вызывает функцию фильтра WH_MSGFILTER каждый
             раз,  когда  панель  диалога,  панель  сообщений  или меню
             возвращает сообщение,  и перед тем, как она обработает это
             сообщение.    Фильтр    позволяет   прикладной   программе
             обработать или модифицировать сообщения.

             Примечание: Этот фильтр относится к конкретной задаче. Его
             может инсталлировать задача.

             Функция фильтра должна использовать соглашения  по  вызову
             системы  Паскаль и должна быть объявлена как FAR.  Функция
             фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc - это поле шаблона для  имени  функции,
             поддерживаемой библиотекой. Действительное имя должно быть
             объявлено как экспортируемое,  включением его  в  оператор
             EXPORTS в файле определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет тип обрабатываемого сообщения.
                               Он может быть одним их следующих
                               значений:

                               Поле            Описание
                               ────────────────────────────────────────
                               MSGF_DIALOGBOX  Обработка сообщений внутри
                                               DialogBox или MessageBox.

                               MSGF_MENU       Обработка сообщения от
                                               клавиатуры и мыши в меню.
                               ────────────────────────────────────────

                               Если это значение меньше чем нуль, то
                               функция фильтра должна передать сообщение
                               в DefHookProc, не обрабатывая его.

             wParam            Равен NULL.

             lParam            Указывает на структуру сообщения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Не равно  нулю,  если  сообщение  должно  быть  обработано
             функцией ловушки; в противном случае оно равно 0.


       Windows 3.0/Ref/4#7                                      = 138 =

        WH_SYSMSGFILTER

             Среда Windows  вызывает  функцию  фильтра  WH_SYSMSGFILTER
             каждый  раз,  когда  панель диалога,  панель сообщений или
             меню возвращает сообщение, и перед тем, как она обработает
             это   сообщение.  Фильтр  позволяет  прикладной  программе
             обработать или модифицировать сообщения.

             Функция фильтра должна использовать соглашения  по  вызову
             системы  Паскаль и должна быть объявлена как FAR.  Функция
             фильтра должна иметь вид:

             void FAR PASCAL FilterFunc(nCode,wParam,lParam)
             int nCode;
             WORD wParam;
             DWORD lParam;

             Функция FilterFunc  -  это поле шаблона для имени функции,
             поддерживаемой библиотекой. Действительное имя должно быть
             объявлено  как  экспортируемое,  включением его в оператор
             EXPORTS в файле определения модуля библиотеки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCode             Определяет тип обрабатываемого сообщения.
                               Он может быть одним их следующих
                               значений:

                               Поле            Описание
                               ────────────────────────────────────────
                               MSGF_DIALOGBOX  Обработка сообщений внутри
                                               DialogBox.

                               MSGF_MENU       Обработка сообщения от
                                               клавиатуры и мыши в меню.

                               MSGF_MESSAGEBOX Обработка сообщений внутри
                                               MessageBox.
                               ────────────────────────────────────────

                               Если это значение меньше чем нуль, то
                               функция фильтра должна передать сообщение
                               в DefHookProc, не обрабатывая его.

             wParam            Равен NULL.

             lParam            Указывает на структуру сообщения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не  равно  нулю,  если  сообщение   должно   быть

       Windows 3.0/Ref/4#7                                      = 139 =

             обработано функцией ловушки;  в противном случае оно равно
             0.

        ───────────────────────────────────────────────────────────────
                                    SetWindowText                              

        Синтаксис

             void SetWindowText(hWnd,lpString)

             Эта функция  устанавливает  текст в заголовок данного окна
             (если окно  его  вообще  имеет),  заданный  в  строке,  на
             которую    указывает    параметр   lpString.   Если   hWnd
             идентифицирует блок управления,  то функция  SetWindowText
             устанавливает   текст   внутри   блока  управления  вместо
             заголовка окна.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно или блок
                               управления, текст которого должен быть
                               изменен.

             lpString          LPSTR  Указывает на заканчивающуюся
                               нулем строку.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                    SetWindowWord                              

        Синтаксис

             WORD SetWindowWord(hWnd,nIndex,wNewWord)

             Эта функция   изменяет  атрибуты  окна,  идентифицируемого
             hWnd.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет атрибут, который должен
                               быть изменен. Это может быть одно из
                               следующих значений:

                               Значение      Описание
                               ────────────────────────────────────────
                               GWW_HINSTANCE Дескриптор экземпляра
                                             модуля, владеющего окном.

       Windows 3.0/Ref/4#7                                      = 140 =


                               GWW_ID        ID блока управления
                                             дочернего окна.
                               ────────────────────────────────────────

             wNewWord          WORD  Содержит заменяющее значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   предыдущее   значение
             указанного атрибута.

        Примечание

             Для доступа  к  любым дополнительным 2-байтовым значениям,
             которые были зарезервированы при создании структуры класса
             окна,   используйте   положительные  смещения  в  качестве
             индексов,  начиная с нуля для первого 2-байтового значения
             дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                      ShowCaret                                

        Синтаксис

             void ShowCaret(hWnd)

             Эта функция индицирует системный псевдокурсор на экране  в
             текущей   позиции   псевдокурсора.   С  момента  появления
             псевдокурсор автоматически начинает мигать.

             Функция ShowCaret  индицирует  псевдокурсор  только,  если
             задана его текущая форма и он не делался невидимым два или
             более число  раз  подряд.  Если  данное  окно  не  владеет
             псевдокурсором,  он не будет индицироваться. Если параметр
             hWnd равен NULL, функция ShowCaret индицирует псевдокурсор
             только, если им владеет окно текущей задачи.

             Если функция  HideCaret  была вызвана пять раз подряд,  то
             для индицирования  псевдокурсора  необходимо  пять  подряд
             выполнить вызов функции ShowCaret.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое
                               владеет псевдокурсором. Параметр hWnd,
                               равный NULL, используется для определения
                               окна-владельца псевдокурсора в текущей
                               задаче.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                      = 141 =


             Нет.

        Примечание

             Системный псевдокурсор является разделяемым ресурсом. Окно
             должно  индицировать псевдокурсор только тогда,  когда оно
             получило монополию на ввод или стало активным.

        ───────────────────────────────────────────────────────────────
                                      ShowCursor                               

        Синтаксис

                            int ShowCursor(bShow)

             Эта функция   индицирует   или  делает  невидимым  курсор.
             Функция  ShowCursor  фактически  устанавливает  внутренний
             счетчик индикации, который определяет должен ли быть виден
             курсор.  Если параметр bShow не  равен  нулю,  то  функция
             увеличивает на единицу счетчик индикации. Если bShow равен
             нулю,  счетчик индикации уменьшается  на  единицу.  Курсор
             индицируется  только в том случае,  если счетчик индикации
             больше или равен  нулю.  Первоначально  счетчик  индикации
             устанавливается   в   нуль,   если  мышь  предусмотрена  в
             конфигурации, и в -1 в противном случае.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             bShow             BOOL  Управляет счетчиком индикации:
                               увеличивает его, если bShow не равен
                               нулю и уменьшает в противном случае.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  новое значение счетчика
             индикации.

        Примечание

             Системный курсор  является  разделяемым  ресурсом.   Окно,
             сделавшее  курсор  невидимым,  должно  восстановить его на
             экране  перед  тем,  как   курсор   покинет   ее   область
             пользователя,  или  когда окно передаст управление другому
             окну.

        ───────────────────────────────────────────────────────────────
                                   ShowOwnedPopups                             

        Синтаксис

             void ShowOwnedPopups(hWnd,fShow)

       Windows 3.0/Ref/4#7                                      = 142 =


             Эта функция  отображает  или  делает  невидимыми  все окна
             накладываемого   типа,   принадлежащие   окну,   заданному
             параметром  hWnd.  Если  параметр  fShow  не  равен 0,  то
             отображаются все невидимые окна накладываемого типа;  если
             параметр fShow равен 0, то все видимые окна накладываемого
             типа становятся невидимыми.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, для которого
                               должны быть отображены или сделаны
                               невидимыми принадлежащие ему окна
                               накладываемого типа.

             fShow             BOOL  Определяет, сделать ли невидимыми
                               окна накладываемого типа. Он не равен 0,
                               если все окна накладываемого типа
                               должны быть индицированы; равен 0, если
                               все видимые окна накладываемого типа
                               должны стать невидимыми.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                    ShowScrollBar                              

        Синтаксис

             void ShowScrollBar(hWnd,wBar,fShow)

             Эта функция  отображает  или   делает   невидимым   строку
             прокрутки, в зависимости от значения параметра fShow. Если
             параметр   fShow   не   равен   нулю,   строка   прокрутки
             отображается;  если  fShow  равен  0,  то строка прокрутки
             становится невидимой.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое
                               содержит строку прокрутки в
                               непользовательской  области, если
                               параметр wBar равен SB_HORZ, SB_VERT или
                               SB_BOTH. Если wBar равен SB_CTL, hWnd
                               идентифицирует блок управления строкой
                               прокрутки.

             wBar              WORD  Определяет, является ли строка
                               прокрутки блоком управления или частью
                               непользовательской области. Если она

       Windows 3.0/Ref/4#7                                      = 143 =

                               является частью непользовательской
                               области, wBar также показывает,
                               позиционируется ли строка прокрутки
                               горизонтально, вертикально или и
                               вертикально и горизонтально. Он может
                               принимать одно из следующих значений:

                               Значение  Описание
                               ────────────────────────────────────────
                               SB_BOTH   Определяет горизонтальную  и
                                         вертикальную строки прокрутки
                                         окна.

                               SB_CTL    Определяет, что строка
                                         прокрутки является блоком
                                         управления.

                               SB_HORZ   Определяет горизонтальную
                                         строку прокрутки окна.

                               SB_VERT   Определяет вертикальную строку
                                         прокрутки окна.
                               ────────────────────────────────────────

             fShow             BOOL  Информирует Windows, видима или
                               нет строка прокрутки. Если fShow равен 0,
                               то строка прокрутки становится невидимой.
                               В противном случае строка прокрутки
                               отображается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Прикладная программа не должна  вызывать  эту  функцию  во
             время обработки    уведомляющих    сообщений   от   строки
             прокрутки.

        ───────────────────────────────────────────────────────────────
                                      ShowWindow                               

        Синтаксис

             BOOL ShowWindow(hWnd,nCmdShow)

             Эта функция  индицирует или делает невидимым заданное окно
             в соответствии с параметром nCmdShow.


       Windows 3.0/Ref/4#7                                      = 144 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nCmdShow          int  Определяет как должно отображаться
                               окно. Он должен быть одним из значений,
                               приведенных в таблице 4.18, "Состояния
                               окон".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет предшествующее  состояние
             окна.  Не равно нулю,  если окно было ранее видимым. Равно
             нулю, если окно было ранее невидимо.

        Примечание

             Функция ShowWindow должна быть вызвана из  WinMain  только
             один  раз  за  время  выполнения  программы  с  параметром
             nCmdShow.  Последующие вызовы ShowWindow вместо  параметра
             nCmdShow  должны  использовать  одно из перечисленных ниже
             значений. Таблица   4.18   содержит   значения   параметра
             nCmdShow.

             Таблица 4.18.  Состояния окон.
             ──────────────────────────────────────────────────────────
             Значение              Описание
             ──────────────────────────────────────────────────────────
             SW_HIDE               Делает окно невидимым и посылает
                                   вызов другому окну.

             SW_MINIMIZE           Минимизирует указанное окно (делает
                                   его иконой) и активизирует окно
                                   верхнего уровня в списке управления
                                   окнами.

             SW_RESTORE            То же, что и SW_SHOWNORMAL.

             SW_SHOW               Активизирует окно и индицирует его
                                   в соответствии с текущим размером и
                                   с текущей позицией.

             SW_SHOWMAXIMIZED      Активизирует  окно и индицирует его
                                   на весь экран (максимизирует).

             SW_SHOWMINIMIZED      Активизирует окно и индицирует его
                                   в виде иконы (минимизирует).

             SW_SHOWMINNOACTIVATE  Индицирует окно в виде иконы. Окно,
                                   которое  было активным в данный
                                   момент, остается активным.

             SW_SHOWNA             Индицирует окно в соответствии с его
                                   текущим состоянием. Окно, которое

       Windows 3.0/Ref/4#7                                      = 145 =

                                   было активным в данный момент,
                                   остается активным.

             SW_SHOWNOACTIVATE     Индицирует окно в соответствии с его
                                   предыдущим размером и с предыдущей
                                   позицией. Окно, которое было активным
                                   в данный момент, остается активным.

             SW_SHOWNORMAL         Активизирует и индицирует окно. Если
                                   окно - икона или увеличено до
                                   размеров экрана, Windows
                                   восстанавливает его первоначальные
                                   размеры и положение.

        ───────────────────────────────────────────────────────────────
                                    SizeofResource                             

        Синтаксис

             WORD SizeofResource(hInstance,hResInfo)

             Эта функция  определяет  размер  (в   байтах)   указанного
             ресурса.    Она    обычно    используется    с    функцией
             AccessResource,  чтобы подготовить  локальную  память  для
             получения ресурса из файла.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               ресурс.

             hResInfo          HANDLE  Идентифицирует требуемый ресурс.
                               Предполагается, что этот дескриптор был
                               создан с помощью функции FindResource.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет число байт в ресурсе. Оно
             равно нулю, если ресурс не был найден.

        Примечание

             Возвращаемое значение     может     быть    больше,    чем
             действительный размер ресурса,  из-за того, что включается
             выравнивание. Прикладная  программа не должна использовать
             это значение в качестве действительного размера ресурса.

        ───────────────────────────────────────────────────────────────
                                                                               
       StartSound

        Синтаксис

       Windows 3.0/Ref/4#7                                      = 146 =


             int StartSound()

             Эта функция    запускает   проигрывание   всех   голосовых
             очередей.  Функция  StartSound  не   разрушает   голосовую
             очередь,  поэтому  может  быть вызвана любое число раз для
             повторного проигрывания текущих очередей.

             Функция не имеет параметров.

        Возвращаемое значение

             Хотя возвращается   целое   значение   но    оно    должно
             игнорироваться.


        ───────────────────────────────────────────────────────────────
                                                                               
       StopSound

        Синтаксис

             int StopSound()

             Эта функция   останавливает  проигрывание  всех  голосовых
             очередей,  затем сбрасывает содержимое  очередей.  Драйвер
             генератора звука для каждого голоса выключается.

             Функция не имеет параметров.

        Возвращаемое значение

             Хотя возвращается   целое   значение   но    оно    должно
             игнорироваться.
                          **************
        ───────────────────────────────────────────────────────────────
                                      StretchBlt                               

        Синтаксис

             BOOL StretchBlt(hDestDC,X,Y,nWidth,nHeight,hSrcDC,
                              XSrc,YSrc,nSrcWidth,nSrcHeight,dwRop)

             Эта функция перемещает растровую карту  из  прямоугольника
             источника в прямоугольник приемника, растягивая или сжимая
             растровую карту,  если необходимо  согласовать  размеры  с
             прямоугольником  приемника.  StretchBlt  использует  режим
             растяжения/сжатия    контекста    устройства     приемника
             (устанавливается    функцией    SetStretchBltMode),    для
             определения, как растягивать или сжимать растровую карту.

             StretchBlt перемещает  растровую  карту  из  устройства  -
             источника, определяемого параметром hSrcDC, в устройство -
             приемник, определяемый параметром hDestDC. Параметры XSrc,

       Windows 3.0/Ref/4#7                                      = 147 =

             YSrc, nSrcWidth, nSrcHeight определяют положение и размеры
             прямоугольника источника.  Параметры X, Y, nWidth, nHeight
             определяют положение  и  размеры прямоугольника приемника.
             Растровая операция dwRop определяет,  как  взаимодействует
             растр прямоугольника источника с битами, уже существующими
             на устройстве-приемнике.

             StretchBlt создает  зеркальное  изображение  растра,  если
             знаки   nSrcWidth   и  nWidth  или  nSrcHeight  и  nHeight
             различны.  Если nSrcWidth и nWidth имеют различные  знаки,
             то  функция создает зеркальное изображение растровой карты
             вдоль оси x,  а если знаки nSrcHeight и nHeight  различны,
             то зеркальное изображение растровой карты образуется вдоль
             оси y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDestDC           HDC  Определяет контекст устройства,
                               получающего растровую карту.

             X                 int  Определяет логическую координату х
                               верхнего левого угла прямоугольника
                               приемника.

             Y                 int  Определяет логическую координату y
                               верхнего левого угла прямоугольника
                               приемника.

             nWidth            int  Определяют ширину прямоугольника
                               приемника (в логических единицах).

             nHeight           int  Определяют высоту прямоугольника
                               приемника (в логических единицах).

             hSrcDC            HDC  Определяет контекст устройства,
                               содержащего растровую карту источника.

             XSrc              int  Определяет логическую координату х
                               верхнего левого угла прямоугольника
                               источника.

             YSrc              int  Определяет логическую координату y
                               верхнего левого угла прямоугольника
                               источника.

             nSrcWidth         int  Определяет ширину прямоугольника
                               источника в логических  единицах.

             nSrcHeight        int  Определяет высоту прямоугольника
                               источника в логических единицах.

             dwRop             DWORD  Определяет выполняемую растровую
                               операцию. Коды растровой операции

       Windows 3.0/Ref/4#7                                      = 148 =

                               определяют,  как  комбинируются цвета  в
                               операциях вывода, включающих текущую
                               кисть, растровую карту источника и
                               растровую карту приемника.  Список кодов
                               растровых операций вы найдете в описании
                               функции BitBlt. Полный список кодов
                               растровых операций приведен в главе 11,
                               "Коды растровых операций", первого тома
                               справочного руководства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   была   ли  нарисована
             растровая карта.  Не равно  0,  если  функция  выполнилась
             успешно. В противном случае равно 0.

        Примечание

             StretchBlt растягивает   или   сжимает   растровую   карту
             источника в памяти,  затем копирует результат в  приемник.
             Если  шаблон  должен  объединяться  с результатом,  то эта
             операция    производится    только     при     копировании
             растягиваемой/сжимаемой    растровой    карты    источника
             (результата) в приемник.

             Если используется кисть,  то она является  текущей  кистью
             контекста устройства-приемника.

             Координаты приемника   преобразуются   в   соответствии  с
             контекстом устройства -  приемника,  координаты  источника
             преобразуются  в  соответствии  с  контекстом устройства -
             источника.

             Если растровые карты приемника,  источника  и  шаблона  не
             имеют    одинаковый   цветовой   формат,   то   StretchBlt
             преобразует  растровые  карты  источника   и   шаблона   в
             соответствии   с   растровыми   картами   приемника.   При
             преобразовании  используются  фоновые  и  основные   цвета
             приемника.

             Если StretchBlt  преобразует монохромную растровую карту в
             цветную, то белые биты (1) устанавливаются в цвета фона, а
             черные  (0) в основной цвет,  и наоборот,  если происходит
             перевод из цветного в монохромный  режим,  то  цвета  фона
             становятся  белым  цветом,  а  все остальные черными.  При
             работе с цветом  используются  фоновый  и  основной  цвета
             контекста устройства.

             Не все    устройства   поддерживают   функцию   StretchBlt
             (растровая операция RC_BITBLT в функции GetDeviceCaps).

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 149 =

                                 StretchDIBits  [3.0]                          

        Синтаксис

             BOOL StretchDIBits(hDestDC,DestX,DestY,wDestWidth,
                  wDestHeight,,SrcX,SrcY,wSrcWidth,wSrcHeight,lpBits,
                  lpBitsInfo,wUsage,dwRop)

             Эта функция  перемещает  аппаратно  независимую  растровую
             карту (DIB) из прямоугольника  источника  в  прямоугольник
             приемника,  растягивая  или  сжимая растровую карту,  если
             необходимо   согласовать   размеры    с    прямоугольником
             приемника.       StretchDIBits       использует      режим
             растяжения/сжатия    контекста    устройства     приемника
             (устанавливается    функцией    SetStretchBltMode),    для
             определения, как растягивать или сжимать растровую карту.

             StretchDIBits перемещает  растровую  карту  из   аппаратно
             независимой растровой   карты,   определяемой  параметрами
             lpBits, lpBitsInfo и  wUsage,  в  устройство  -  приемник,
             определяемый параметром  hDestDC.  Параметры  SrcX,  SrcY,
             wSrcWidth,  wSrcHeight  определяют  положение  и   размеры
             прямоугольника источника.    Параметры    DestX,    DestY,
             wDestWidth, wDestHeight  определяют  положение  и  размеры
             прямоугольника приемника.   Положение   начала   координат
             приемника определяется   текущим    режимом    отображения
             контекста устройства.      Дополнительную      информацию,
             касающуюся режимов  отображения  вы  найдете  в   описании
             функции SetMapMode.

             Растровая операция  dwRop определяет,  как взаимодействует
             биты исходной растровой карты с битами,  уже существующими
             на устройстве - приемнике.

             StretchBlt создает  зеркальное  изображение  растра,  если
             знаки wSrcWidth и wDestWidth или wSrcHeight и  wDestHeight
             различны. Если  wSrcWidth  и  wDestWidth  имеют  различные
             знаки, то функция создает зеркальное изображение растровой
             карты вдоль  оси x,  а если знаки wSrcHeight и wDestHeight
             различны,  то  зеркальное  изображение   растровой   карты
             образуется вдоль оси y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDestDC           HDC  Определяет контекст устройства,
                               получающего растровую карту.

             DestX             int  Определяет логическую координату х
                               верхнего левого угла прямоугольника
                               приемника.

             DestY             int  Определяет логическую координату y
                               верхнего левого угла прямоугольника

       Windows 3.0/Ref/4#7                                      = 150 =

                               приемника.

             nDestWidth        int  Определяют ширину прямоугольника
                               приемника (в логических единицах).

             nDestHeight       int  Определяют высоту прямоугольника
                               приемника (в логических единицах).

             SrcX              int  Определяет координату х (в пикселях)
                               источника в DIB

             SrcY              int  Определяет координату y (в пикселях)
                               источника в DIB

             wSrcWidth         int  Определяет ширину прямоугольника
                               источника в DIB.

             wSrcHeight        int  Определяет высоту прямоугольника
                               источника в DIB.

             lpBits            LPSTR  Указывает на биты DIB, которые
                               хранятся в массиве байт.

             lpBitsInfo        LPBITMAPINFO  Указывает на структуру
                               BITMAPINFO которая содержит информацию
                               о DIB.

             wUsage            WORD  Определяет содержат ли поля
                               bmiColors[] параметра lpBitsInfo явные
                               значения цветов в виде RGB или они
                               содержат индексы в текущей реализованной
                               логической палитре. wUsage должен быть
                               одним из следующих значений:

                               Значение        Описание
                               ────────────────────────────────────────
                               DIB_PAL_PALETTE Таблица цветов содержит
                                               16-битовые индексы в
                                               текущей реализованной
                                               логической палитре.

                               DIB_RGB_COLORS  Таблица цветов содержит
                                               значения цветов в виде
                                               RGB значений.
                               ────────────────────────────────────────

             dwRop             DWORD  Определяет выполняемую растровую
                               операцию. Коды растровой операции
                               определяют,  как  комбинируются цвета  в
                               операциях вывода, включающих текущую
                               кисть, растровую карту источника и
                               растровую карту приемника.  Список кодов
                               растровых операций вы найдете в описании

       Windows 3.0/Ref/4#7                                      = 151 =

                               функции BitBlt. Полный список кодов
                               растровых операций приведен в главе 11,
                               "Коды растровых операций", первого тома
                               справочного руководства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет число скопированных скан
             строк.

        Примечание

             Если параметр   lpBitsInfo    указывает    на    структуру
             BITMAPCORELEFT эта    функция    позволяет    использовать
             аппаратно независимые растровые карты в формате  Microsoft
             OS/2 Presentation Manager версий 1.1 и 1.2.

        ───────────────────────────────────────────────────────────────
                                   SwapMouseButton                             

        Синтаксис

             BOOL SwapMouseButton(bSwap)

             Эта функция изменяет  назначение  левой  и  правой  кнопок
             мыши.  Если  bSwap  равно  TRUE,  левая  кнопка генерирует
             сообщение правой кнопки мыши,  а  правая,  соответственно,
             левой  кнопки.  Если bSwap равно FALSE,  восстанавливается
             прежнее назначение кнопок.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             bSwap             BOOL  Определяет, является ли назначение
                               кнопок инверсным или стандартным.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Он   равен   TRUE   если   функция  инверсировала
             назначение кнопок или FALSE в противном случае.

        Примечание

             Изменение назначения  кнопок  используется  для   удобства
             пользователей, которые   работают  с  мышью  левой  рукой.
             Функция SwapMouseButton обычно вызывается  только  панелью
             управления.   Хотя  прикладные  программы  свободно  могут
             вызывать эту функцию,  мышь является разделяемым ресурсом,
             и инверсирование  назначения  кнопок  мыши  влияет  на все
             прикладные программы.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 152 =

                                 SwapRecording [3.0]                           

        Синтаксис

             void SwapRecording(wFlag)

             При работе  Microsoft Windows Swap,  эта функция запускает
             или завершает  анализ  характеристик  своппинга.  Описание
             Swap вы найдете в "Tools".

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wFlag             WORD  Определяет должна ли программа
                               Swap начать или завершить анализ. Допус-
                               тимы следующие значения:

                               Значение   Описание
                               ────────────────────────────────────────
                               0          Завершить анализ.

                               1          Записывать вызовы обмена с
                                          с диском, сбрасывать при
                                          возврате.

                               2          Аналогично 1, только плюс еще
                                          вызовы через thunks. Это
                                          позволяет записывать большие
                                          объемы данных.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       SwitchStackBack  [3.0]

        Синтаксис

             void SwitchStackBack()

             Эта функция  возвращает  стек  текущей  задачи  в  сегмент
             данных текущей задачи после того, как он был перенаправлен
             с помощью функции SwitchTaskBack.

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечание

       Windows 3.0/Ref/4#7                                      = 153 =


             Эта функция при возврате предохраняет содержимое регистров
             AX:DX.

        ───────────────────────────────────────────────────────────────
                                 SwitchStackTo [3.0]                           

        Синтаксис

             void SwitchStackTo(wStackSegment,wStackPointer,wStackTop)

             Эта функция  изменяет  стек  текущей  задачи  на  сегмент,
             определяемый параметром wStackSegment.

             Динамически подключаемые  библиотеки (DLL) не имеют стека,
             вместо этого они пользуются стеком  вызывающей  задачи.  В
             результате при обращении к функциям DLL,  подразумевающим,
             что содержимое сегментных регистров  CS  и  SS  одинаково,
             вызывают ошибку. Функция SwitchStackTo перенаправляет стек
             задачи в  сегмент  данных  DLL,  позволяя  вызывать  такие
             функции DLL. SwitchStackTo копирует аргументы стека задачи
             в новое его положение.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wStackSegment     WORD  Определяет сегмент данных, который
                               должен содержать стек.

             wStackPointer     WORD  Определяет смещение начала стека
                               в сенменте данных.

             wSteckTop         WORD  Определяет смещение вершины стека
                               от начала стека.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Задача может вызвать функцию SwitchStackTo  перед  вызовом
             функций DLL,  которые подразумевают равенство регистров SS
             и CS.  После  возврата  управления  функцией  DLL,  задача
             должна вызвать  функцию SwitchStackBack для возврата стека
             в ее собственный сегмент данных.

             Функцию SwitchStackTo  может  также  вызывать  DLL,  перед
             вызовом процедуры,  подразумевающей равенство регистров SS
             и CS.  В  этом   случае   она   должна   вызвать   функцию
             SwitchStackBack после  возврата управления этой процедурой
             перед возвратом управления задаче, вызвавшей DLL.


       Windows 3.0/Ref/4#7                                      = 154 =

             Вызовы SwitchStackTo  и  SwitchStackBack  не  могут   быть
             вложенными. Т.е.  после  вызова  SwitchStackTo  необходимо
             вызвать SwitchStackBack    перед     повторным     вызовом
             SwitchStackTo.

        ───────────────────────────────────────────────────────────────
                                    SyncAllVoices                              

        Синтаксис

             int SyncAllVoices()

             Эта функция устанавливает  символ  синхронизации  sync  во
             всех   голосовых   очередях.   Если  в  голосовой  очереди
             встречается символ синхронизации sync,  голос  выключается
             до  тех  пор,  пока символы синхронизации не встретятся во
             всех других очередях.  Это приводит к синхронизации  между
             всеми голосами.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение определяет результат фукнции.  Равно
             0, если функция завершена успешно. Если очередь заполнена,
             то оно равно S_SERQFUL.


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                      = 155 =

                                 TabbedTextOut [3.0]                           

        Синтаксис

             long TabbedTextOut(hDC,X,Y,lpString,nCount,nTabPosition,
                                         lpnTabStopPosition,nTabOrigin)

             Эта функция  выводит  символьную   строку   на   указанный
             дисплей, используя  текущий  выбранный  шрифт  и расширяет
             символы табуляции     до     соответствующих     столбцов,
             определяемых параметром lpnTabPositions.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет координату x началоной
                               точки строки (в логических единицах.

             Y                 int  Определяет координату y началоной
                               точки строки (в логических единицах.

             lpString          LPSTR  Указывает на выводимую символь-
                               ную строку.

             nCount            int  Определяет число символов в строке.

             nTabPositions     int  Определяет число позиций табуляции,
                               определяемых массивом
                               lpnTabStopPositions.

             lpnTabStopPosiitons  LPINT  Указывает на массив целых,
                               содержащих позиции табуляции в пикселях.
                               Позиции должны быть отсортированы в воз-
                               растающем порядке, обратная  табуляция
                               не допускается.

             nTabOrigin        int  Определяет логическую координату
                               по оси x начальной точки, от которой
                               отсчитываются позиции табуляции.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  размеры прямоугольника,
             содержащего строку.  Высота содержится  в  старшем  слове,
             ширина в младшем.

        Примечание

             Если параметр    nTabPsitions   равен   0,   то   параметр
             lpnTabStopPositions равен  NULL,  то   позиции   табуляции
             устанавливаются через  восемь средних размеров символов по

       Windows 3.0/Ref/4#7                                      = 156 =

             горизонтали.

             Если nTabPositions   равен   1,   то   позиции   табуляции
             определяются по       первому       элементу       массива
             lpnTabStopPositions.

             Если параметр lpnTabStopPositions указывает больше чем  на
             одно значение,   то   позиции  табуляции  расставляются  в
             соответствии с этими значениями.

             Параметр nTabOrigin   позволяет    прикладной    программе
             вызывать функцию  TabbedTextOut  несколько  раз  для одной
             строки. Если   прикладная   программа   вызывает   функцию
             TabbedTextOut с  одинаковым значением nTabOrigin несколько
             раз, функция  расширяет  позиции  табуляции   относительно
             позиции, определяемой параметром nTabOrigin.

        ───────────────────────────────────────────────────────────────
                                       TextOut                                 

        Синтаксис

             BOOL TextOut(hDC,X,Y,lpString,nCount)

             Эта функция выводит символьную строку на заданный дисплей,
             используя   текущий  выбранный  шрифт.  Начальная  позиция
             строки определяется параметрами X и Y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет координату x началоной
                               точки строки (в логических единицах.

             Y                 int  Определяет координату y началоной
                               точки строки (в логических единицах.

             lpString          LPSTR  Указывает на выводимую символь-
                               ную строку.

             nCount            int  Определяет число символов в строке.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет вывелась  ли  строка.  Не
             равно нулю,  если функция выполнилась успешно. В противном
             случае равно нулю.

        Примечание

             Координаты символа  определяются   верхним   левым   углом

       Windows 3.0/Ref/4#7                                      = 157 =

             знакоместа.

             По умолчанию  функция  не использует и не изменяет текущую
             позицию. Однако прикладная программа может вызвать функцию
             SetTextAlign с    параметром    wFlags   установленным   в
             TA_UPDATECP, для разрешения Windows, чтобы функции TextOut
             в данном  контексте  устройства  изменяли текущую позицию.
             Когда флаг установлен Windows игнорирует параметры X  и  Y
             последующих вызовов TextOut.

        ───────────────────────────────────────────────────────────────
                                        Throw                                  

        Синтаксис

             void Throw(lpCatchBuf,nThrowBack)

             Эта функция восстанавливает  среду  выполнения,  используя
             значения,  сохраненные  в буфере,  определяемом параметром
             lpCatchBuf.  Среда выполнения информирует о состоянии всех
             системных  регистров  и  счетчика  инструкций.  Выполнение
             затем продолжает функция Catch, которая копирует среду, на
             которую    указывает    lpCatchBuf.   Параметр   ThrowBack
             передается как возвращаемое значение в функцию  Catch.  Он
             может иметь любое ненулевое целое значение.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpCatchBuf        LPCATCHBUF  Указывает на массив,
                               содержащий информацию о среде выполнения.

             nThrowBack        int  Определяет значение, возвращаемое в
                               функцию Catch.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция Throw    подобна    функции    LongJmp    (которая
             несовместима со средой Windows).

        ───────────────────────────────────────────────────────────────
                                    ToAscii [3.0]                              

        Синтаксис

             int ToAscii(wVirtKey,wScanCode,lpKeyState,lpChar,wFlags)

             Эта функция   транслирует    коды    виртуальных    клавиш
             определяемые параметром   wVirtCode  и  текущее  состояние

       Windows 3.0/Ref/4#7                                      = 158 =

             клавиатуры, определяемое параметром lpKeyState в код ASCII
             соответствующего символа или символов.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wVirtKey          WORD  Определяет транслируемый код
                               виртуальной клавиши.

             wScanCode         WORD  Определяет скан код (аппаратуры),
                               транслируемой клавиши. Если клавиша
                               отпускается старший бит этого кода равен
                               1.

             lpKeyState        LPSTR  Указывает на массив из 256 байт,
                               каждый из которых содержит состояние
                               одной клавиши. Если клавиша отпускается
                               старший бит этого байта равен 1.

             lpChar            LPVOID Указывает на 32-битовый буфер,
                               в который записываются преобразованные
                               в код ASCII символы или символ.

             wFlag             WORD  Бит 0 отобразить меню флагов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  число  скопированных  в
             буфер символов.  Возвращаемое значение отрицательно,  если
             клавиша - мертвая. В противном случае оно может быть одним
             из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             2                 В буфер скопировано два символа. Это
                               обычно акцент и мертвая клавиша, когда
                               другим способом мертвая клавиша не
                               может быть транслирована.

             1                 В буфер скопирован один символ ANSI.

             0                 Для текущего состояния клавиатуры не
                               существует преобразования данной
                               виртуальной клавиши.
             ──────────────────────────────────────────────────────────

        Примечание

             Параметров, передаваемых  функции   ToAscii   может   быть
             недостаточно для  преобразования кода виртуальной клавиши,
             поскольку в  буфере  драйвера  клавиатуры   хранится   код
             предыдущей мертвой клавиши.


       Windows 3.0/Ref/4#7                                      = 159 =

             Обычно, функция   ToAscii  выполняет  преобразование  кода
             виртуальной клавиши.  Однако  в  некоторых  случаях  можно
             использовать параметр wScanCode для определения того,  что
             клавиши нажата или отпущена.  Скан  код  используется  для
             преобразования комбинаций типа ALT+Число.

        ───────────────────────────────────────────────────────────────
                                 TrackPopupMenu [3.0]                          

        Синтаксис

             BOOL TrackPopupMenu(hMenu,wFlags,x,y,nReserved,hWnd,
                                                           lpReserved)

             Эта функция  выводит  плавающее  меню  в указанной точке и
             отслеживает выборку в  этом  меню.  Плавающее  меню  может
             располагаться в  любой  точке  программы.  Параметр  hMenu
             определяет дескриптор   отображаемого   меню.   Прикладная
             программа получает   этот  дескриптор  с  помощью  функции
             CreatePopupMenu (для создания нового накладываемого меню),
             или с помощью функции GetSubMenu для получения дескриптора
             накладываемого меню,  связанного с существующим  элементом
             меню.

             Windows посылает   сообщение,   генерируемое   меню  окну,
             определяемому параметром hWnd.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует накладываемое меню.

             wFlags            WORD  Не используется. Должен быть равен
                               нулю.

             x                 int  Определяет горизонтальную позицию в
                               координатах экрана левой границы меню.

             y                 int  Определяет вертикальную позицию в
                               координатах экрана верхней границы меню.

             nReserved         int  Зарезервировано и должно быть равно
                               нулю.

             hWnd              HWND  Идентифицирует окно, которое
                               владеет меню. Это окно получает сообщения
                               меню WM_COMMAND.

             lpReserved        LPVOID  Зарезервировано и должно быть
                               ноль.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/4#7                                      = 160 =

             Возвращаемое значение  определяет   результат   выполнения
             функции. Оно  равно  TRUE,  если функция выполнена успешно
             или FALSE  в противном случае.

        ───────────────────────────────────────────────────────────────
                                 TranslateAccelerator                          

        Синтаксис

             int TranslateAccelerator(hWnd,hAccTable,lpMsg)

             Эта функция  обрабатывает  клавиши  ускорения  для  команд
             меню.  Она транслирует сообщения WM_KEYUP и  WM_KEYDOWN  в
             сообщения WM_COMMAND или WM_SYSCOMMAND, если для клавиши в
             таблице   ускорителей   прикладной    программы    имеется
             соответствующий  элемент.  Старшее  слово параметра lParam
             сообщения WM_SYSCOMMAND или WM_COMMAND  содержит  значение
             1,  что  позволяет  отличить  это  сообщение от сообщений,
             посылаемых меню или блоками управления.

             Сообщения WM_COMMAND    или    WM_SYSCOMMAND    посылаются
             непосредственно окну, а не передаются в очередь прикладной
             программы. Функция  TranslateAccelerator   не   возвращает
             управление до тех пор, пока сообщение не будет обработано.

             Клавиши ускорения, которые определены для выбора элементов
             из   системного   меню,    транслируются    в    сообщения
             WM_SYSCOMMAND;  все другие клавиши ускорения транслируются
             в сообщения WM_COMMAND.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует дескриптор окна,
                               сообщения которого должны быть
                               транслированы.

             hAccTable         HANDLE  Идентифицирует таблицу
                               ускорителей (загружается с помощью
                               LoadAccelerators).

             lpMsg             LPMSG  Указывает на сообщение, получаемое
                               с помощью GetMessage или PeekMessage.
                               Сообщение должно быть структурой данных
                               типа MSG и содержать информацию сообщения
                               из очереди прикладной программы Windows.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  результат  функции.  Не
             равно нулю,  если трансляция имела место,  и равно нулю  в
             противном случае.


       Windows 3.0/Ref/4#7                                      = 161 =

        Примечание

             Если функция   TranslateAccelerator  возвращает  ненулевое
             значение (означающее,  что сообщение было  транслировано),
             прикладная  программа  не  должна  обрабатывать сообщение,
             вновь используя TranslateMessage.

             Команды в  таблицах  ускорителей  не  обязательно   должны
             соответствовать элементам меню.

             Если команда  ускорителя  соответствует элементу меню,  то
             прикладной программе посылаются  сообщения  WM_INITMENU  и
             WM_INITMENUPOPUP,    как    будто   пользователь   пытался
             индицировать меню.  Однако,  эти сообщения не  посылаются,
             если имеет место одно из следующих условий:

             - Окно недоступно.

             - Элемент меню недоступен.

             - Команда  находится  не  в системном меню и окно - в виде
               иконы.

             - Используется манипулятор типа мышь (см. SetCapture).

             Если окно является активным и не работают с клавиатурой (в
             основном это бывает тогда, когда окно имеет вид иконы), то
             вместо  сообщений  WM_KEYUP  и  WM_KEYDOWN   транслируются
             сообщения WM_SYSKEYUP и WM_SYSKEYDOWN.

             Если клавиша  ускорения,  соответствующая  элементу  меню,
             встречается при использовании окна в  виде  иконы,  то  не
             посылается сообщения WM_COMMAND.  Однако, если встречается
             клавиша ускорения,  которая не соответствует любому из эле
             ментов   меню  окна  или  системного  меню,  то  сообщение
             WM_COMMAND посылается, даже если окно имеет вид иконы.

        ───────────────────────────────────────────────────────────────
                             TranslateMDISysAccel  [3.0]                       

        Синтаксис

             BOOL TranslateMDISysAccel(hWndClient,lpMsg)

             Эта функция   обрабатывает   ускорители   Системного  меню
             дочерних окон, использующих интерфейс множества документов
             (MDI). Функция  TranslateMDISysAccel преобразует сообщения
             WM_KEYUP и WM_KEYDOWN в сообщения  WM_SYSCOMMAND.  Старшее
             слово параметра  lParam  сообщения  WM_SYSCOMMAND содержит
             значение 1,  чтобы их можно было  отличить  от  сообщений,
             посылаемых меню и блоками управления.


       Windows 3.0/Ref/4#7                                      = 162 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWndClient        HWND  Идентифицирует родительское окно,
                               использующее MDI.

             lpMsg             LPMSG  Указывает на сообщение, полученное
                               с помощью функций GetMessage или
                               PeekMessage. Сообщение должно быть
                               структурой данных MSG и содержать
                               информацию о сообщении, полученном из
                               очереди сообщений прикладной программы.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение равно TRUE если  функция  обработала
             сообщение и  преобразовала  его  в  системную  команду.  В
             противном случае оно равно FALSE.

        ───────────────────────────────────────────────────────────────
                                   TranslateMessage                            

        Синтаксис

             BOOL TranslateMessage(lpMsg)

             Эта функция  транслирует виртуальные клавишные сообщения в
             символьные сообщения:

             - Сообщения  WM_KEYDOWN   и   WM_KEYUP   транслируются   в
               сообщения WM_CHAR и WM_DEADCHAR.

             - Сообщения  WM_SYSKEYDOWN  и  WM_SYSKEYUP транслируются в
               сообщения WM_SYSCHAR и WM_SYSDEADCHAR.

             Символьные сообщения  пересылаются  в  очередь  прикладной
             программы для того, чтобы быть считанными в следующий раз,
             когда  прикладная  программа   вызывает   GetMessage   или
             PeekMessage.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpMsg             LPMSG  Указывает на структуру данных
                               типа MSG, которая получается с помощью
                               функций GetMessage или PeekMessage. В
                               этой структуре содержится информация из
                               очереди прикладной программы Windows.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции.  Не равно нулю, если сообщение было транслировано
             (т.е. символьное   сообщение   было    передано    очереди

       Windows 3.0/Ref/4#7                                      = 163 =

             прикладной программы). В противном случае равно нулю.

        Примечание

             TranslateMessage не   модифицирует   сообщение,   заданное
             параметром lpMsg.

             TranslateMessage генерирует сообщение WM_CHAR  только  для
             клавиш, которые   отображаются   драйвером  клавиатуры  на
             символы ASCII.

             Прикладной программе   не   следует    вызывать    функцию
             TranslateMessage,   если   она   обрабатывает  виртуальные
             клавишные сообщения для некоторых других целей.  Например,
             прикладная  программа не должна вызывать TranslateMessage,
             если  функция  TranslateAccelerator  возвращает  ненулевое
             значение.

        ───────────────────────────────────────────────────────────────
                                   TransmitCommChar                            

        Синтаксис

             int TransmitCommChar(nCid,cChar)

             Эта функция  маркирует  символ,  определяемый   параметром
             cChar,  для  немедленной  передачи,  поместив его в начало
             очереди передачи.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи для
                               приема символа. Это значение можно
                               получить с помощью функции OpenComm.

             cChar             char  Определяет символ для передачи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно 0, если функция была завершена успешно. Оно
             отрицательно, если символ не может быть передан. Символ не
             может   быть   передан,    если    символ,    определенный
             предшествующим  вызовом  функции TransmitCommChar,  не был
             еще передан.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                      = 164 =

                                    UngetCommChar                              

        Синтаксис

             int UngetCommChar(nCid,cChar)

             Эта функция   помещает   символ,  определяемый  параметром
             cChar,  обратно в очередь приема,  делая  его  первым  при
             последующем чтении из очереди.

             Последовательные вызовы UngetCommChar недопустимы. Символ,
             помещенный обратно в очередь,  должен  быть  считан  перед
             попыткой поместить в нее другой.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи для
                               приема символа.

             cChar             char  Символ, который будет помещен в
                               очередь приема.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно нулю,  если функция была завершена успешно.
             Если имеется ошибка, оно отрицательно.

        ───────────────────────────────────────────────────────────────
                                  UnhookWindowsHook                            

        Синтаксис

             BOOL UnhookWindowsHook(nHook,lpfnHook)

             Эта функция  удаляет  функцию ловушки Windows,  задаваемую
             параметром lpfnHook,  из цепочки функций ловушек.  Функция
             ловушки Windows  обрабатывает  события перед тем,  как они
             посылаются в цикл сообщений прикладной  программы  функции
             WinMain.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nHook             int  Определяет тип удаляемой функции
                               ловушки. Может быть одним из следующих
                               значений:

                               Значение           Описание
                               ────────────────────────────────────────
                               WH_CALLWNDPROC     Устанавливает фильтр
                                                  функции окна.


       Windows 3.0/Ref/4#7                                      = 165 =

                               WH_GETMESSAGE      Устанавливает фильтр
                                                  сообщений.

                               WH_JOURNALPLAYBACK Устанавливает
                                                  протоколируемый фильтр
                                                  считывания.

                               WH_JOURNALRECORD   Устанавливает
                                                  протоколируемый фильтр
                                                  записей.

                               WH_KEYBOARD        Устанавливает фильтр
                                                  клавиатуры.

                               WH_MSGFILTER       Устанавливает фильтр
                                                  сообщений.
                               ────────────────────────────────────────

             lpfnHook          FARPROC  Адрес экземпляра процедуры
                               функции ловушки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет результат функции.  Он не
             равен  нулю,  если  функция  ловушки  успешно  удалена.  В
             противном случае он равен нулю.

        ───────────────────────────────────────────────────────────────
                                      UnionRect                                

        Синтаксис

             int UnionRect(lpDestRect,lpSrc1Rect,lpSrc2Rect)

             Эта функция   создает  объединение  двух  прямоугольников.
             Объединение - это наименьший прямоугольник, содержащий оба
             исходных прямоугольника.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpDestRect        LPRECT  Указывает на структуру данных
                               типа RECT, в которую будут записаны
                               координаты нового объединения.

             lpSrc1Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую координаты
                               исходного прямоугольника.

             lpSrc2Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую координаты другого
                               исходного  прямоугольника.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 166 =


        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не  равно  нулю,  если объединение не пусто.  Оно
             равно нулю, если объединение пусто.

        Примечание

             Windows игнорирует размеры любых  пустых  прямоугольников,
             т.е. таких, которые не имеют высоты или ширины.

        ───────────────────────────────────────────────────────────────
                                                                               
       UnlockData

        Синтаксис

             HANDLE UnlockData(Dummy)

             Эта макрокоманда разблокирует текущий сегмент данных.  Она
             предназначена  для  использования модулями,  которые имеют
             перемещаемые сегменты данных.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             Dummy             int  Не используется и может быть
                               установлен в нуль.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                                                               
       UnlockResource

        Синтаксис

             BOOL UnlockResource(hResData)

             Эта функция  разблокирует ресурс,  определяемый параметром
             hResData и уменьшает на 1 счетчик ссылок на ресурс.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hResData          HANDLE  Идентифицирует глобальный блок
                               памяти, который должен быть
                               разблокирован.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет результат функции.  Если

       Windows 3.0/Ref/4#7                                      = 167 =

             счетчик ссылок равен 0,  то возвращается  0.  В  противном
             случае возвращается ненулевое значение.

        ───────────────────────────────────────────────────────────────
                                    UnlockSegment                              

        Синтаксис

             BOOL UnlockSegment(wSegment)

             Эта функция разблокирует  сегмент,  адрес  которого  задан
             параметром  wSegment.  Если wSegment равен -1,  то функция
             UnLockSegment разблокирует текущий сегмент данных.

             В реальном   режиме,   или   в   случае,   если    сегмент
             сбрасываемый, функция   UnlickSegment   уменьшает  счетчик
             блокировок сегмента на  1.  В  защищенном  режиме  функция
             UnlickSegment уменьшает   счетчик  только  сбрасываемых  и
             автоматических сегментов. Сегмент полностью разблокируется
             и может  перемещаться  или  сбрасываться  только когда его
             счетчик блокировок равен 0.  На счетчик  блокировок  могут
             также влиять другие функции.  Список этих функций приведен
             в описании функции GlobalFlags.

             Во всех случаях, когда программа вызывает LockSegment, она
             должна вызвать для данного сегмента функцию UnlickSegment.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wSegment          WORD  Определяет адрес сегмента, который
                               будет разблокирован.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Оно равно 0,  если  счетчик  блокировок  сегмента
             уменьшился до 0.  В противном случае возвращаемое значение
             не равно 0.  Прикладная программа не  должна  использовать
             возвращаемое значение как число,  определяющее сколько раз
             надо вызвать  функцию   UnlockSegment,   чтобы   уменьшить
             счетчик блокировок до 0.

        ───────────────────────────────────────────────────────────────
                                   UnrealizeObject                             

        Синтаксис

             BOOL UnrealizeObject(hObject)

             Если hObject определяет кисть,  то эта функция ориентирует
             GDI  на  сброс  начальной  позиции указанной кисти,  когда
             кисть выбирается в дальнейшем как текущая.

       Windows 3.0/Ref/4#7                                      = 168 =


             Если hObject определяет логическую  палитру,  эта  функция
             заставляет GDI  реализовать  ее,  как  будто  она  не была
             прежде реализована. Когда прикладная программа в следующих
             раз вызовет    функцию   RealizePalette,   GDI   полностью
             отобразит логическую палитру на системную.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hObject           HANDLE  Идентифицирует сбрасываемый
                               объект.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не  равно  0,  если  функция закончилась успешно.
             Иначе равно нулю.

        Примечание

             Функция UnrealizeObject не  должна  использоваться  с  уже
             существующими объектами.

             Эта функция  должна  вызываться  каждый  раз,  когда новое
             начало   кисти   устанавливается   с    помощью    функции
             SetBrushOrg.

             Кисть, определяемая  параметром hObject,  не должна быть в
             текущий момент выбранной любым из контекстов устройства.

             Палитра, определяемая параметром hObject  не  должна  быть
             выбрана в контексте устройства.

        ───────────────────────────────────────────────────────────────
                                UnregisterClass  [3.0]                         

        Синтаксис

             BOOL UnregisterClass(lpClassName,hInstance)

             Эта функция удаляет класс, определяемый именем lpClassName
             из таблицы классов и освобождает всю занимаемую им память.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpClassName       LPSTR  Указывает на завершаемую нулем
                               строку, которая содержит имя класса. Это
                               имя класса должно быть предварительно
                               зарегистрировано с помощью функции
                               RegisterClass, и с корректным
                               дескриптором экземпляра hInstance в
                               структуре WNDCLASS. Предопределенные

       Windows 3.0/Ref/4#7                                      = 169 =

                               классы, такие как классы блоков
                               управления не могут быть удалены.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  TRUE  если  функция  успешно
             удалила класс из таблицы классов. Функция возвращает FALSE
             если не может найти такого  класса,  или  если  существуют
             окна такого класса.

        Примечание

             Перед использованием   этой   функции  удалите  все  окна,
             созданные с данным классом.

        ───────────────────────────────────────────────────────────────
                                  UpdateColors [3.0]                           

        Синтаксис

             int UpdateColors(hDC)

             Эта функция  модифицирует область пользователя в контексте
             устройства, определяемого  параметром   hDC,   попиксельно
             отображая цвета области пользователя на системную палитру.
             Неактивные окна,   с   реализованной    палитрой,    могут
             использовать функцию  UpdateColors как альтернативу полной
             перерисовки области пользователя при  изменении  системной
             палитры. Дополнительную информацию об использовании палитр
             цветов вы найдете в Руководстве программиста.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Не используется.

        Примечание

             UpdateColors модифицирует  область  пользователя  быстрее,
             чем это можно было бы  сделать  при  перерисовке.  Однако,
             поскольку эта  функция  выполняет преобразование на основе
             цвета каждого пикселя,  то каждое выполнение этой  функции
             приводит к ухудшению точности цветов.

        ───────────────────────────────────────────────────────────────
                                     UpdateWindow                              

        Синтаксис

       Windows 3.0/Ref/4#7                                      = 170 =


             void UpdateWindow(hWnd)

             Эта функция  корректирует  область  пользователя   данного
             окна, посылая в окно сообщение WM_PAINT, если не пуста его
             модифицируемая  область.  Функция  UpdateWindow   посылает
             сообщение  WM_PAINT непосредственно в функцию окна,  минуя
             очередь прикладной программы.  Если модифицируемая область
             пуста, то сообщение не посылается.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует корректируемое окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                      = 171 =

                                                                               
       ValidateCodeSegments [3.0]

        Синтаксис

             void ValidateCodeSegments()

             Эта функция  выводит на терминал отладочную информацию,  в
             случае, если  кодовый  сегмент  был   изменен   операциями
             прямой записи  в  память.  Эта  функция  доступна только в
             отладночной версии Windows и по умолчанию  разрешена.  Для
             запрещения функции установите флаг EnableSegmentChacksum в
             разделе [kernel] файла WIN.INI в 0.  Windows не  проверяет
             кодовые сегменты    в    защищенном    (стандартном    или
             расширенном) режиме.

             Функция не имеет параметров.

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                  ValidateFreeSpaces                           

        Синтаксис

             LPSTR ValidateFreeSpaces()

             Эта функция (доступная только в отладочной версии Windows)
             проверяет  свободные  сегменты  в  памяти  на   корректное
             содержание. В отладочной версии Windows ядро заполняет все
             байты свободных сегментов 16-ричными  значениями  CC.  Эта
             функция начинает     поверять    свободную    память    на
             корректность, начиная  с  младших  адресов,  и  продолжает
             проверку  до тех пор,  пока не обнаружит некорректный байт
             или не определит,  что  вся  свободная  память  корректна.
             Перед вызовом  этой  функции  поместите следующие строки в
             файл WIN.INI:

             [kernel]
             EnableFreeChacking=1
             EnableHeapChecking=1

             Эта функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечания

             При появлении   некорректного   байта   Windows   посылает
             отладочную информацию на отладочный терминал,  и выполняет

       Windows 3.0/Ref/4#7                                      = 172 =

             выход по ошибке.

             Елементы секции   [kernel]    файла    WIN.INI    вызывают
             автоматическую проверку   памяти.  Перед  возвратом  блока
             памяти прикладной программе,  в  ответ  на  вызов  функции
             GlobalAlloc, Windows  проверяет  память  на  наличие в ней
             кода 0CCH.   Перед    вызовом    функции    GlobalCompact,
             проверяется вся свободная память. Необходимо отметить, что
             использование этой   функции   уменьшает    быстродействие
             Windows примерно на 20%.

        ───────────────────────────────────────────────────────────────
                                     ValidateRect                              

        Синтаксис

             void ValidateRect(hWnd,lpRect)

             Назначение. Эта функция освобождает от перерисовывания  ту
             часть  области пользователя,  которая расположена в данном
             прямоугольнике,  удаляя  прямоугольник  из  модифицируемой
             области   данного   окна.   Если  lpRect  равен  NULL,  то
             освобождается все окно.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, модифицируемая
                               область которого должна корректироваться.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, определяющую прямоугольник (в
                               координатах пользователя), удаляемый из
                               модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция BeginPaint  автоматически  делает  корректной  всю
             область  пользователя.   Ни   функции   ValidateRect,   ни
             ValidateRgn    не    должны    вызываться,    если   часть
             модифицируемой области необходимо сделать корректной перед
             посылкой следующего сообщения WM_PAINT.

             Windows продолжает посылать сообщения WM_PAINT до тех пор,
             пока   текущая    модифицируемая    область    не    будет
             скорректирована.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/4#7                                      = 173 =

                                     ValidateRgn                               

        Синтаксис

             void ValidateRgn(hWnd,hRgn)

             Эта функция  освобождает  от  перерисовывания   ту   часть
             области пользователя в заданной области, удаляя область из
             текущей модифицируемой области  данного  окна.  Если  hRgn
             равен NULL, то освобождается от перерисовывания все окно.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, модифицируемая
                               область которого должна быть
                               скорректирована.

             hRgn              HRGN  Идентифицирует область, удаляемую
                               из  модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Данная область   должна   быть  предварительно  создана  с
             помощью функции  области  (Смотрите  главу   1,   "Функции
             интерфейса графических   устройств").  Координаты  области
             задаются в координатах пользователя.

        ───────────────────────────────────────────────────────────────
                                   VkKeyScan [3.0]                             

        Синтаксис

             int VkKeyScan(cChar)

             Эта функция  преобразует  символы  ANSI  в соответствующие
             коды виртуальных клавиш и состояния регистров для  текущей
             клавиатуры. Прикладные   программы,  посылающие  сообщения
             вида WM_KEYDOWN и WM_KEYUP используют эту функцию.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет символ, который должен
                               быть преобразован в код виртуальной
                               клавиши.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             В младшем  байте возвращаемого значения содержится VK_код,

       Windows 3.0/Ref/4#7                                      = 174 =

             а состояние регистров в старшем байте. Состояние регистров
             это:

             Значение      Описание
             ──────────────────────────────────────────────────────────
             0             Не используются регистры.

             1             Символ в верхнем регистре.

             2             Управляющий символ.

             6             Символ CONTROL+ALT.

             7             Символ SHIFT+CONTROL+ALT.

             3,4,5         Комбинация регистров, не используемая для
                           символов.
             ──────────────────────────────────────────────────────────

             Если для  данного  символа ANSI не найдена соответствующая
             комбинация, то и в старшем и в младшем байте  возвращается
             код -1.

        Примечание

             Игнорируется преобразование    для   числовой   клавиатуры
             (VK_NUMPAD0 до VK_DIVIDE).  Эта функция  используется  для
             преобразовния только основной клавиатуры.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                      = 175 =

                                     WaitMessage                               

        Синтаксис

             void WaitMessage()

             Эта функция  используется  для  передачи управления другим
             прикладным программам, когда прикладная программа не имеет
             других задач для выполнения.  WaitMessage приостанавливает
             выполнение прикладной программы и не возвращает управление
             до  тех  пор,  пока  новое сообщение не поступит в очередь
             прикладной программы.

             Функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечание

             Функции GetMessage,  PeekMessage  и  WaitMessage  передают
             управление  другим прикладным программам.  Их вызовы - это
             единственная возможность    разрешить    работу     другим
             прикладным программам.   Если   прикладная   программа  не
             вызывает любую  из  этих  функций  в  течение  длительного
             времени, то  другая  программа  не  имеет  никаких  шансов
             начать работу.

             Когда GetMessage,  PeekMessage  и   WaitMessage   передают
             управление другой  прикладной  программе,  стек и сегменты
             данных прикладной  программы,  вызывающей  функцию,  могут
             перемещаться   в  памяти  для  того,  чтобы  удовлетворить
             изменившимся требованиям к памяти другой  программы.  Если
             прикладная   программа   запомнила  дальние  указатели  на
             объекты в сегментах данных или стека (например, глобальные
             или локальные переменные),  эти указатели могут измениться
             после вызова этих функций.

        ───────────────────────────────────────────────────────────────
                                    WaitSoundState                             

        Синтаксис

             int WaitSoundState(nState)

             Эта функция    ожидает    до   тех   пор,   пока   драйвер
             громкоговорителя  не  установится  в  специально  заданный
             режим.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nState            int  Определяет задаваемый режим

       Windows 3.0/Ref/4#7                                      = 176 =

                               голосовых очередей. Он может быть одним
                               из следующих:

                               Значение        Описание
                               ───────────────────────────────────────
                               S_ALLTHRESHOLD  Все голоса достигают
                                               порога.

                               S_QUEUEEMPTY    Все голосовые очереди
                                               пусты и звуковые
                                               драйверы выключены.

                               S_THRESHOLD     Голосовая очередь
                                               достигает порога и
                                               голос возвращается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет результат фукнции.  Равно
             0, если функция завершена успешно. Если режим некорректен,
             оно равно S_SERDST.

        ───────────────────────────────────────────────────────────────
                                                                               
       WindowFromPoint

        Синтаксис

             HWND WindowFromPoint(Point)

             Эта функция идентифицирует окно, которое содержит заданную
             точку.  Параметр Point должен определять координаты экрана
             для точки.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             Point             POINT  Определяет структуру данных типа
                               POINT, содержащую контролируемую точку.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  окно,   в   котором
             расположена точка,  и равно NULL,  если для заданной точки
             не существует окна.

        ───────────────────────────────────────────────────────────────
                                    WinExec [3.0]                              

        Синтаксис

             WORD WinExec(lpCmdLine,nCmdShow)


       Windows 3.0/Ref/4#7                                      = 177 =

             Эта функция  запускает  прикладную  программу  Windows или
             DOS, определяемую параметром lpCmdLine.  Параметр nCmdShow
             определяет исходное  состояние  основного  окна прикладной
             программы при его создании.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpCmdLine         LPSTR  Указывает на завершаемую нулем
                               строку, которая содержит командную
                               строку (имя файла и дополнительные
                               параметры) запускаемой прикладной
                               программы. Если lpCmdLine не содержит
                               полный маршрут, то Windows ищет
                               выполняемый файл в следующем порядке:

                               1. В текущей директории.

                               2. В директории Windows (Директория,
                                  содержащая файл WIN.COM). Функция
                                  GetWindowsDirectory возвращает эту
                                  директорию.

                               3. В системной директории Windows.
                                  (Директория содержащая файл
                                  KERNEL.EXE.) Маршрут этой директории
                                  возвращает функция GetSystemDirectory.

                               4. В директориях, перечисленных в
                                  переменной среды PATH.

                               5. В сетевых директориях.

                               Если командная строка не содержит
                               расширение, то подразумевается .EXE.

             nCmdShow          int  Определяет как будет показана
                               прикладная программа. Допустимые
                               значения параметра nCmdShow приведены в
                               описании функции ShowWindow. Для
                               программ DOS состояние окна определено в
                               PIF-файле, если он есть.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  успешно  ли   выполнена
             функция. Если   функция  завершена  успешно,  возвращается
             значение больше 32.  Если значение меньше 32, то произошла
             ошибка. Ниже приведен список возвращаемых функцией WinExec
             ошибок:


       Windows 3.0/Ref/4#7                                      = 178 =

             Значение          Описание
             ──────────────────────────────────────────────────────────
             0                 Не хватает памяти.

             2                 Файл не найден.

             3                 Маршрут не найден.

             5                 Попытка динамического подключения к
                               задаче.

             6                 Библиотека требует для каждой задачи
                               отдельного сегмента данных.

             10                Некорректная версия Windows.

             11                Некорректный EXE-файл. (Не в формате
                               Windows, или ошибка в файле.)

             12                Прикладная программа OS/2.

             13                Прикладная программа DOS 4.0

             14                Неизвестный тип EXE-файла.

             15                Попытка в защищенном режиме (стандартном
                               или расширенном) загрузить EXE-файл,
                               созданный для ранней версии Windows.

             16                Попытка загрузить второй экземпляр
                               EXE-файла, содержащего множественные,
                               записывыемые сегменты данных.

             17                Попытка в режиме с EMS c большим фреймом
                               отображения, загрузить прикладную
                               программу, которая подключает
                               определенную динамическую библиотеку,
                               используемую в данный момент.

             18                Попытка в реальном режиме загрузить
                               программу, предназначенную только для
                               защищенного режима.
             ──────────────────────────────────────────────────────────

        Примечание

             Для запуска   программ    можно    использовать    функцию
             LoadModule.

        ───────────────────────────────────────────────────────────────
                                    WinHelp  [3.0]                             

        Синтаксис

             BOOL WinHelp(hWnd,lpHelpFile,wCommand,dwData)

       Windows 3.0/Ref/4#7                                      = 179 =


             Эта функция запускает программу Windows  Help  и  передает
             дополнительные данные,  определяющие требуемую информацию.
             Прикладная программа  указывает  имя,  и  если   требуется
             маршрут файла со справочной информацией. Описание создания
             и использования Help-файлов вы найдете в "Tools".

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которому
                               требуется выдача справочной информации.

             lpHelpFile        LPSTR  Указывает на завершаемую нулем
                               строку, содержащую (при необходимости)
                               маршрут и имя Help-файла, который должна
                               отобразить программа HELP.

             wCommand          WORD  Определяет тип требуемой
                               информации. Этот параметр может быть
                               одним из следующих:

                               Значение        Описание
                               ────────────────────────────────────────
                               HELP_CONTEXT    Отображает справочную
                                               информацию определяемую
                                               32-битовым целым без
                                               знака, передаваемым
                                               через параметр dwData.

                               HELP_HELPONHELP Выводит справочную
                                               информацию по использо-
                                               ванию самой программы
                                               HELP. В этом случае
                                               параметры lpHelpFile и
                                               dwData игнорируются.

                               HELP_INDEX      Отображает индекс для
                                               данного Help-файла. Это
                                               значение можно использо-
                                               вать только для файлов с
                                               единственным индексом.
                                               Нельзя использовать это
                                               значение с HELP_SETINDEX.

                               HELP_KEY        Отображает справочную
                                               информацию для ключевого
                                               слова, определяемого
                                               указателем на строку  в
                                               dwData.

                               HELP_MULTIKEY   Отображает справочную
                                               информацию по ключевому
                                               слову из альтернативной

       Windows 3.0/Ref/4#7                                      = 180 =

                                               таблицы ключевых слов.

                               HELP_QUIT       Уведомляет программу HELP
                                               что данный файл больше не
                                               используется.

                               HELP_SETINDEX   Устанавливает контекст,
                                               определяемый параметром
                                               dwData, в качестве теку-
                                               щего индекса для файла со
                                               справочной информацией,
                                               определяемого параметром
                                               lpHelpFile. Этот индекс
                                               остается текущим до тех
                                               пор, пока пользователь не
                                               обратится к другому файлу.
                                               Чтобы быть уверенным, что
                                               корректный индекс остался
                                               неизменным, прикладная
                                               программа должна вызывать
                                               WinExec с wCommand равным
                                               HELP_SETINDEX (dwData
                                               должен определять
                                               соответствующий
                                               идентификатор контекста)
                                               вслед за каждым вызовом
                                               WinExec с wCommand равным
                                               HELP_CONTEXT. Программа
                                               должна использовать это
                                               значение только при
                                               использовании файлов со
                                               справочной информацией,
                                               имеющих несколько
                                               индексов. Нельзя
                                               использовать это значение
                                               с HELP_INDEX.

             dwData            DWORD  Определяет контекст или ключевое
                               слово для требуемой справочной
                               информации. Если      wCommand     равен
                               HELP_CONTEXT, dwData содержит 32-битовый
                               идентификатор контекста. Если
                               wCommand содержит HELP_KEY, то dwData
                               является дальним указателем на
                               завершаемую нулем строку, которая
                               содержит ключевое слово. Если wCommand
                               равен HELP_MULTIKEY, dwData является
                               дальним указателем на структуру данных
                               MYLTIKEYHELP. В противном случае dwData
                               игнорируется и должен быть равен NULL.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/4#7                                      = 181 =


             Возвращаемое значение  определяет   результат   выполнения
             функции. Он равен TRUE,  если функция выполнилась успешно.
             В противном случае он равен FALSE.

        Примечание

             Перед закрытием окна,  запросившего справочную  информацию
             прикладная программа  должна  вызвать  WinHelp  с wCommand
             равным HELP_QUIT.   При   этом   в   действительности   не
             происходит завершения   программы   HELP.  Программа  HELP
             завершается только тогда,  когда все программы, которые ее
             использовали, вызовут WinHelp c wCommand равным HELP_QUIT.

        ───────────────────────────────────────────────────────────────
                                      WriteComm                                

        Синтаксис

             int WriteComm(nCid,lpBuf,nSize)

             Эта функция записывает nSize байтов  в  устройство  связи,
             определенное nCid, из буфера, указанного в lpBuf.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи для
                               приема символов.

             lpBuf             LPSTR  Указывает на буфер, содержащий
                               символы для записи.

             nSize             int  Определяет число символов, которые
                               необходимо записать.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    число    фактически
             записанных  символов.  При  ошибке оно имеет отрицательное
             значение,  причем  его  абсолютное   значение   определяет
             текущее число  записанных  символов.  Причину ошибки можно
             определить  с  помощью   функции   GetCommError,   которая
             возвращает код ошибки и состояние.

        Примечание

             Функция будет  перезаписывать  данные  в очереди передачи,
             если нет достаточного места в очереди  для  дополнительных
             символов.   Прикладные   программы  должны  контролировать
             наличие  свободного  пространства  в  очереди  передачи  с
             помощью  функции  GetCommError  перед  вызовом  WriteComm.

       Windows 3.0/Ref/4#7                                      = 182 =

             Кроме  того,  прикладные  программы  должны   использовать
             функцию  OpenComm  для установки размера очереди передачи.
             Этот размер должен быть не меньше,  чем размер  наибольшей
             предполагаемой для передачи строки.

        ───────────────────────────────────────────────────────────────
                           WritePrivateProfileString [3.0]                     

        Синтаксис

             BOOL WritePrivateProfileString(lpAppName,lpKeyName,
                                                  lpString,lpFileName)

             Эта функция   копирует   символьную   строку,  на  которую
             указывает параметр    lpString,    в    указанный     файл
             инициализации. Эта  функция  осуществляет  поиск  в  файле
             ключа, определяемого параметром lpKeyName,  в соответствии
             с заголовком прикладной программы, определяемым параметром
             lpAppName.  Если нет  соответствия,  она  добавляет  новую
             запись  строки  в  параметры  пользователя.  Если  имеется
             соответствующий ключ,  функция заменяет  его  значение  на
             заданное параметром lpString.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую программу.

             lpKeyName         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую требуемый
                               ключ.

             lpValue           LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, содержащую новое
                               значение ключа.

             lpFileName        LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, которая содержит имя
                               файла инициализации. Если lpFileName не
                               содержит полного маршрута, функция
                               просматривает директории Windows. Если
                               файла не существует, и lpFileName не
                               содержит полного маршрута, эта функция
                               создает файл в директории Windows.
                               Функция WritePrivateProfileString не
                               создает файл, если lpFileName содержит
                               полный маршрут несуществующего файла.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения

       Windows 3.0/Ref/4#7                                      = 183 =

             функции. Не равно нулю,  если функция завершена успешно. В
             противном случае оно равно нулю.

        Примечание

             Прикладные программы должны использовать собственные файлы
             инициализации для  хранения данных,  которые влияют только
             на данную   прикладную    программу.    Это    увеличивает
             быстродействие прикладной   программы   и  самой  Windows,
             уменьшая объем     информации,     которую      необходимо
             просматривать при обращении к файлу инициализации.

             Если отсутствует  поле прикладной программы для lpAppName,
             эта функция создает  новое  поле  прикладной  программы  и
             помещает  соответствующую строку значения ключа в это поле
             файла инициализации.

             Запись строки в файле инициализации должна иметь следующий
             вид:

             [имя прикладной программы]
             ключевое_имя = значение
                     .
                     .
                     .

             Прикладная программа     может     использовать    функцию
             WritePrivateProfileString также и для  удаления  строк  из
             файла инициализации.  Если  параметр  lpString равен NULL,
             функция удаляет  всю   строку,   определяемую   параметром
             lpKeyName. Если  lpString указывает на нулевую строку,  то
             функция удаляет только значение,  ключевое слово остается.
             Если lpKeyName  равно  NULL,  функция удаляет весь раздел,
             определяемый параметром lpAppName.  Однако эта функция  не
             удаляет строки, начинающиеся с ";" (комментарии).

        ───────────────────────────────────────────────────────────────
                                  WriteProfileString                           

        Синтаксис

             BOOL WriteProfileString(lpAppName,lpKeyName,lpString)

             Эта функция  копирует  символьную   строку,   на   которую
             указывает параметр lpString, в файл инициализации Windows,
             WIN.INI. Эта функция осуществляет поиск  в  файле  WIN.INI
             ключа,  определяемого параметром lpKeyName, в соответствии
             с заголовком прикладной программы, определяемым параметром
             lpAppName.  Если  нет  соответствия,  она  добавляет новую
             запись  строки  в  параметры  пользователя.  Если  имеется
             соответствующий  ключ,  функция  заменяет  его значение на
             заданное параметром lpString.


       Windows 3.0/Ref/4#7                                      = 184 =


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую программу.

             lpKeyName         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую требуемый
                               ключ.

             lpValue           LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, содержащую новое
                               значение ключа.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно нулю,  если функция завершена успешно. В
             противном случае оно равно нулю.

        Примечание

             Если отсутствует  поле прикладной программы для lpAppName,
             эта функция создает  новое  поле  прикладной  программы  и
             помещает  соответствующую строку значения ключа в это поле
             файла инициализации.

             Запись строки в файле WIN.INI должна иметь следующий вид:

             [имя прикладной программы]
             ключевое_имя = значение
                     .
                     .
                     .

             Прикладная программа     может     использовать    функцию
             WriteProfileString также  и  для  удаления  строк из файла
             WIN.INI. Если  параметр  lpString  равен   NULL,   функция
             удаляет  всю  строку,  определяемую  параметром lpKeyName.
             Если lpString указывает  на  нулевую  строку,  то  функция
             удаляет  только  значение,  ключевое слово остается.  Если
             lpKeyName  равно  NULL,  функция  удаляет   весь   раздел,
             определяемый  параметром lpAppName.  Однако эта функция не
             удаляет строки, начинающиеся с ";" (комментарии).

        ───────────────────────────────────────────────────────────────
                                    wsprinf [3.0]                              

        Синтаксис

             int wsprinf(lpOutput,lpFormat[,argument]...)


       Windows 3.0/Ref/4#7                                      = 185 =

             Эта функция  форматирует  и  сохраняет  набор  символов  и
             значений в  буфере.  Каждый   аргумент   преобразуется   и
             выводится в  соответствии  с соответствующей спецификацией
             формата. Функция  добавляет  к  концу  выводимых  символов
             NULL, но возвращаемое значение его не включает.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpOutput          LPSTR  Указывает на завершаемую нулем
                               символьную строку, в которую помещается
                               отформатированный вывод.

             lpFormat          LPSTR  Указывает на завершаемую нулем
                               символьную строку, которая содержит
                               спецификаторы формата. Кроме обычных
                               символов ASCII, присутствуют специфика-
                               торы формата, по одному на каждый
                               аргумент. Описание спецификаторов
                               формата вы найдете в разделе
                               "Примечания".

             argument          Это один или больше необязательных
                               аргументов. Число и тип аргументов
                               зависит от спецификаций формата.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  содержит число сохраненных в буфере
             символов, не включая завершающей NULL.  При ошибке функция
             возвращает значение меньше длины lpFormat.

        Примечания

             Строка формата содержит спецификации формата, определяющие
             формат вывода  для  аргументов,  следующих  за  параметром
             lpFormat. Спецификации   формата,  описанные  ниже  всегда
             начинаются с  символа  процента  (%).  Если  за   символом
             процента следует     символ,     который    не    является
             спецификатором формата,  то он выводится  один  к  одному.
             Например если имеется такая строка :  %%,  то в результате
             будет выведен символ процента.

             Строка формата читается слева на право.  При  появлении  в
             ней первого   спецификатора   формата   первый   аргумент,
             следующий за  lpFormat   преобразуется   и   выводится   в
             соответствии со    спецификатором.   Второй   спецификатор
             приводит к обработке второго аргумента и т.д. Если имеется
             больше аргументов,  чем  спецификаций  формата,  то лишние
             аргументы игнорируются.  Если для спецификаций формата  не
             хватает аргументов, результат не определен.

             Спецификатор формата имеет следующую форму:

       Windows 3.0/Ref/4#7                                      = 186 =


             %[-][#][0][ширина][.точность]тип

             Каждое поле спецификатора формата содержит один символ или
             число, определяющее  некоторый  параметр.  Последнее  поле
             <тип>, определяет  как  будет интерпретироваться аргумент,
             как символ,  строка или как число. Простейший спецификатор
             формата содержит  только  символ  процента  и  символ типа
             (например %s).   Остальные   поля   управляют   различными
             аспектами форматирования.  Ниже приведены необязательные и
             обязательные поля и их описание:

             Поле        Описание
             ──────────────────────────────────────────────────────────
             -           Заполнение вывода  пробелами или нулями справа
                         до ширины поля,  сдвигая вывод влево. Если это
                         поле пропущено,  вывод заполняется влево,  вы-
                         равнивая вывод вправо.

             #           Шестнадцатеричные значения должны  иметь  пре-
                         фикс 0x или 0X.

             0           Расширить выводимое  значение нулями,  для за-
                         полнения ширины поля.  Если поле  пропускается
                         то заполнение выполняется пробелами.

             <ширина>    Выводит указанный  минимум символов.  <ширина>
                         должна быть неотрицательным  числом.  Параметр
                         <ширина> не приводит к обрезанию.  Если значе-
                         ние занимает больше символов,  чем  указано  в
                         <ширина>,  или если данный параметр не указан,
                         то выводится все значение,  в  соответствии  с
                         его точностью.

             <точность>  Выводит указанное минимальное число цифр. Если
                         выводимое число содержит меньше цифр, чем ука-
                         зано  в  <точность>,  то оно расширяется влево
                         нулями.  Если число выводимых  цифр  превышает
                         указанную  точность  значение  не  обрезается.
                         Если указана точность равная 0,  то  пропуска-
                         ется  все,  если  за  точкой не следует число,
                         точность ё устанавливается равной 1.

                         Для строк этот параметр определяет  максималь-
                         ное число выводимых символов.

             <тип>       Определяет, что  соответствующий аргумент дол-
                         жен выводиться как символ,  строка или  число.
                         Это  поле может быть одной из следующих после-
                         довательностей символов:


       Windows 3.0/Ref/4#7                                      = 187 =

                         Последовательность  Описание
                         ──────────────────────────────────────────────
                         s                   Вставляет строку, на
                                             которую указывает аргумент,
                                             являющийся дальним
                                             указателем.

                         с                   Вставляет аргумент,
                                             являющийся отдельным
                                             символом.

                         d,i                 Вставить целое со знаком.

                         ld,li               Вставить длинное целое
                                             со знаком.

                         u                   Вставить целое без знака.

                         lu                  Вставить длинное целое
                                             без знака.

                         x,X                 Вставить шестнадцатеричное
                                             целое без знака, соответст-
                                             венно в нижнем или верхнем
                                             регистре.

                         lx,lX               Вставить шестнадцатеричное
                                             длинное целое без знака,
                                             соответственно в нижнем
                                             или верхнем регистре.
                         ──────────────────────────────────────────────

             Примечание: В   отличие   от  остальных  функций  Windows,
             wsprinf использует соглашение по вызову языка С (cdecl)  а
             не Паскаль. В результате вызывающая программа ответственна
             за удаление из стека аргументов,  и аргументы помещаются в
             стек   в   обратном   порядке,  т.е.  lpOutput  помещается
             последним. В модулях C это выполняет компилятор.

        ───────────────────────────────────────────────────────────────
                                    wvsprinf [3.0]                             

        Синтаксис

             int wvsprinf(lpOutput,lpFormat,lpArglist)

             Эта функция  форматирует  и  сохраняет  набор  символов  и
             значений в буфере. Элементы, адресуемые списком аргументов
             преобразуются и     выводитяся     в    соответствии    со
             спецификациями  формата.   Функция   добавляет   к   концу
             выводимых  символов NULL,  но возвращаемое значение его не
             включает.


       Windows 3.0/Ref/4#7                                      = 188 =

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpOutput          LPSTR Указывает   на  завершаемую  нулем
                               символьную строку,  в которую помещается
                               отформатированный вывод.

             lpFormat          LPSTR Указывает   на  завершаемую  нулем
                               символьную строку, которая содержит спе-
                               цификаторы формата. Кроме обычных симво-
                               лов  ASCII,  присутствуют  спецификаторы
                               формата,  по  одному на каждый аргумент.
                               Описание спецификаторов формата вы  най-
                               дете в wsprintf.

             lpArglist         LPSTR Указывает  на массив слов,  каждое
                               из которых определяет аргумент для стро-
                               ки формата.  Число,  тип и интерпретация
                               аргумента зависит от спецификации форма-
                               та. Каждая спецификация, требующая одно-
                               го слова (%c,%d,%x,%i),  использует одно
                               слово в lpArglist. Длинные целые исполь-
                               зуют по два слова (%ld,%lx,%li), младшее
                               слово  длинного  целого следует ща стар-
                               шим. Строка (%s) требует двух слов, сме-
                               щение следует за сегментом (и вместе они
                               составляют дальний указатель).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  содержит число сохраненных в буфере
             символов, не включая завершающей NULL.  При ошибке функция
             возвращает значение меньше длины lpFormat.


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/4#7                                      = 189 =

                                                                               
       Yield

        Синтаксис

             void Yield()

             Эта функция останавливает текущую задачу и запускает любую
             ожидающую задачу.

             Функция не имеет параметров.

        Возвращаемое значение

             Нет.

        Примечание

             Прикладные программы,  которые   содержат   окна,   должны
             использовать   цикл   DispatchMessage,   PeekMessage   или
             TranslateMessage  непосредственно  перед  вызовом  функции
             Yield. Цикл PeekMessage управляет синхронизацией сообщений
             и выполняет это за приемлемое время.

