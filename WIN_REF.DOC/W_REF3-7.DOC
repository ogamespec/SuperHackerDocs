                                   Оглавление                                  
       Windows 3.0/Ref/3#7                                        = 1 =

       GetActiveWindow................................................7
       GetAspectRatioFilter...........................................7
       GetAsyncKeyState...............................................7
       GetAtomHandle..................................................8
       GetAtomName....................................................8
       GetBitmapBits..................................................9
       GetBitmapDimension............................................10
       GetBkColor....................................................10
       GetBkMode.....................................................11
       GetBrushOrg...................................................11
       GetBValue.....................................................11
       GetCapture....................................................12
       GetCaretBlinkTime.............................................12
       GetCaretPos...................................................13
       GetCharWidth..................................................13
       GetClassInfo [3.0]............................................14
       GetClassLong..................................................15
       GetClassName..................................................16
       GetClassWord..................................................16
       GetClipboardData..............................................18
       GetClipboardFormatName........................................19
       GetClipboardOwner.............................................19
       GetClipboardViewer............................................20
       GetClipBox....................................................20
       GetCodeHandle.................................................21
       GetCodeInfo [3.0].............................................21
       GetCommError..................................................23
       GetCommEventMask..............................................25
       GetCommState..................................................26
       GetCurrentPDB [3.0]...........................................26
       GetCurrentPosition............................................26
       GetCurrentTask................................................27
       GetCurrentTime................................................27
       GetCursorPos..................................................28
       GetDC.........................................................28
       GetDCOrg......................................................29
       GetDesktopWindow [3.0]........................................30
       GetDeviceCaps.................................................30
       GetDialogBaseUnits [3.0]......................................36
       GetDIBits [3.0]...............................................37
       GetDlgCtrlID [3.0]............................................38
       GetDlgItem....................................................38
       GetDlgItemInt.................................................39
       GetDlgItemText................................................40
       GetDOSEnvironment [3.0].......................................41
       GetDoubleClickTime............................................41
       GetDriveType [3.0]............................................42
       GetEnvironment................................................42
       GetFocus......................................................43
       GetFreeSpace [3.0]............................................44
       GetPaletteEntries [3.0].......................................44
       GetParent.....................................................45
       GetPixel......................................................45

       Windows 3.0/Ref/3#7                                        = 2 =

       GetPolyFillMode...............................................46
       GetPriorityClipboardFormat [3.0]..............................46
       GetPrivateProfileInt [3.0]....................................47
       GetPrivateProfileString [3.0].................................48
       GetProcAddress................................................50
       GetProfileInt.................................................51
       GetProfileString [3.0]........................................52
       GetProp.......................................................53
       GetRgnBox [3.0]...............................................54
       GetROP2.......................................................54
       GetRValue.....................................................55
       GetScrollPos..................................................55
       GetScrollRange................................................56
       GetStockObject................................................57
       GetStretchBltMode.............................................59
       GetSubMenu....................................................60
       GetSysColor...................................................60
       GetSysModalWindow.............................................61
       GetSystemDirectory [3.0]......................................61
       GetSystemMenu.................................................62
       GetSystemMetrics..............................................63
       GetSystemPaletteEntries [3.0].................................66
       GetSystemPaletteUse [3.0].....................................66
       GetTabbedTextExtent [3.0].....................................67
       GetTempDrive..................................................68
       GetTempFileName...............................................69
       GetTextAlign..................................................70
       GetTextCharacterExtra.........................................72
       GetTextColor..................................................73
       GetTextExtent.................................................73
       GetTextFace...................................................74
       GetTextMetrics................................................74
       GetThresholdEvent.............................................75
       GetThresholdStatus............................................75
       GetTickCount..................................................76
       GetTopWindow..................................................76
       GetUpdateRect.................................................76
       GetUpdateRgn..................................................77
       GetVersion....................................................78
       GetViewportOrg................................................79
       GetWindow.....................................................79
       GetWindowDC...................................................81
       GetWindowExt..................................................81
       GetWindowLong.................................................82
       GetWindowOrg..................................................83
       GetWindowRect.................................................83
       GetWindowsDirectory [3.0].....................................84
       GetWindowTask.................................................84
       GetWindowText.................................................85
       GetWindowTextLength...........................................85
       GetWindowLong.................................................86
       GetWinFlags [3.0].............................................87
       GlobalAddAtom.................................................88

       Windows 3.0/Ref/3#7                                        = 3 =

       GlobalAlloc...................................................89
       GlobalCompact.................................................91
       GlobalDeleteAtom..............................................91
       GlobalDiscard.................................................92
       GlobalDosAlloc [3.0]..........................................93
       GlobalDosFree [3.0]...........................................94
       GlobalFindAtom................................................94
       GlobalFix [3.0]...............................................94
       GlobalFlags...................................................95
       GlobalFree....................................................96
       GlobalGetAtomName.............................................97
       GlobalHandle..................................................97
       GlobalLock....................................................98
       GlobalLRUNewest...............................................99
       GlobalLRUOldest...............................................99
       GlobalNotify.................................................100
       GlobalPageLock [3.0].........................................101
       GlobalPageUnlock [3.0].......................................102
       GlobalReAlloc................................................103
       GlobalSize...................................................105
       GlobalUnfix [3.0]............................................105
       GlobalUnlock.................................................106
       GlobalUnWire.................................................107
       GlobalWire...................................................107
       GrayString...................................................108
       InflateRect..................................................112
       InitAtomTable................................................112
       InSendMessage................................................113
       InsertMenu  [3.0]............................................114
       IntersectClipRect............................................117
       IntersectRect................................................118
       InvalidateRect...............................................119
       InvalidateRgn................................................120
       InvertRect...................................................121
       InvertRgn....................................................121
       IsCharAlpha [3.0]............................................122
       IsCharAlphaNumeric [3.0].....................................122
       IsCharLower [3.0]............................................123
       IsCharUpper [3.0]............................................123
       IsChild......................................................124
       IsClipboardFormatAvailable...................................124
       IsDialogMessage..............................................125
       IsDlgButtonChecked...........................................126
       IsIconic.....................................................126
       IsRectEmpty..................................................127
       IsWindow.....................................................127
       IsWindowEnable...............................................128
       IsWindowVisible..............................................128
       IsZoomed.....................................................128
       InflateRect..................................................129
       InitAtomTable................................................130
       InSendMessage................................................130
       InsertMenu  [3.0]............................................131

       Windows 3.0/Ref/3#7                                        = 4 =

       IntersectClipRect............................................135
       IntersectRect................................................136
       InvalidateRect...............................................136
       InvalidateRgn................................................137
       InvertRect...................................................138
       InvertRgn....................................................139
       IsCharAlpha [3.0]............................................139
       IsCharAlphaNumeric [3.0].....................................140
       IsCharLower [3.0]............................................140
       IsCharUpper [3.0]............................................141
       IsChild......................................................141
       IsClipboardFormatAvailable...................................142
       IsDialogMessage..............................................142
       IsDlgButtonChecked...........................................143
       IsIconic.....................................................144
       IsRectEmpty..................................................144
       IsWindow.....................................................145
       IsWindowEnable...............................................145
       IsWindowVisible..............................................145
       IsZoomed.....................................................146
       KillTimer....................................................147
       _lclose......................................................148
       _lcreate.....................................................148
       LimitEmsPages................................................149
       LineDDA......................................................149
       LineTo.......................................................151
       _llseek......................................................152
       LoadAccelerators.............................................153
       LoadBitmap...................................................153
       LoadCursor...................................................155
       LoadIcon.....................................................157
       LoadLibrary..................................................158
       LoadMenu.....................................................159
       LoadMenuIndirect.............................................160
       LoadModule [3.0].............................................160
       LoadResource.................................................163
       LoadString...................................................164
       LOBYTE.......................................................164
       LocalAlloc...................................................165
       LocalCompact.................................................166
       LocalDiscard.................................................167
       LocalFlags...................................................167
       LocalFree....................................................168
       LocalHandle..................................................168
       LocalInit....................................................169
       LocalLock....................................................170
       LocalReAlloc.................................................170
       LocalShrink..................................................172
       LocalSize....................................................173
       LocalUnlock..................................................173
       LockData.....................................................174
       LockResource.................................................174
       LockSegment..................................................175

       Windows 3.0/Ref/3#7                                        = 5 =

       _lopen.......................................................176
       LOWORD.......................................................177
       LPtoDP.......................................................178
       _lread.......................................................178
       lstrcat......................................................179
       lstrcmp [3.0]................................................179
       lstrcmpi [3.0]...............................................180
       lstrcpy [3.0]................................................181
       lstrlen......................................................181
       _lwrite......................................................182
       MAKEINTATOM..................................................183
       MAKEINTRESOURCE..............................................183
       MAKELONG.....................................................183
       MAKEPOINT....................................................184
       MakeProcInstance.............................................184
       MapDialogRect................................................185
       MapVirtualKey [3.0]..........................................186
       max..........................................................187
       MessageBeep..................................................187
       MessageBox...................................................188
       min..........................................................191
       ModifyMenu  [3.0]............................................191
       MoveTo.......................................................195
       MoveWindow...................................................195
       MulDiv  [3.0]................................................196
       NetBIOSCall [3.0]............................................198


       Windows 3.0/Ref/3#7                                        = 6 =


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                        = 7 =

                                                                               
       GetActiveWindow

        Синтаксис

             HWND GetActiveWindow( )

             Эта функция возвращает дескриптор активного окна. Активным
             окном является или окно,  захватившее в  настоящий  момент
             ввод,  или окно, явно сделанное активным с помощью функции
             SetActiveWindow.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение идентифицирует активное окно.

        ───────────────────────────────────────────────────────────────
                                 GetAspectRatioFilter                          

        Синтаксис

             DWORD GetAspectRatioFilter(hDC)

             Эта функция    возвращает    текущее    значение   фильтра
             коэффициента  сжатия.  Коэффициент   сжатия   определяется
             отношением ширины к высоте пикселя устройства.  Информация
             о коэффициенте   сжатия   устройства   используется    при
             создании,    выборке   и   отображении   шрифта.   Windows
             обеспечивает  специальный  фильтр  -  фильтр  коэффициента
             сжатия  для  выбранных шрифтов,  создаваемых для некоторых
             коэффициентов сжатия из  всех  доступных  шрифтов.  Фильтр
             использует   коэффициент  сжатия,  установленный  функцией
             SetMapperFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               коэффициент сжатия которого требуется
                               определить.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  содержит  текущее  значение фильтра
             коэффициента  сжатия:  x-координата  коэффициента   сжатия
             содержится в старшем слове, а y-координата - в младшем.

        ───────────────────────────────────────────────────────────────
                                   GetAsyncKeyState                            

        Синтаксис


       Windows 3.0/Ref/3#7                                        = 8 =

             int GetAsyncKeyState(vKey)

             Эта функция определяет, нажата ли клавиша, а также была ли
             она    нажата   после   предшествующего   вызова   функции
             GetAsyncKeyState. Если самый  значащий  бит  возвращаемого
             значения равен 1,  в настоящий момент клавиша нажата. Если
             установлен наименее значащий бит,  это значит, что клавиша
             была нажата     после     последнего     вызова    функции
             GetAsuncKeyState.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nKey              int  Задает одно из 256 возможных
                               значений кода виртуальной клавиши.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет,  была ли нажата  клавиша
             после последнего вызова GetAsyncKeyState или нажата ли она
             в текущий момент.  Если старший значащий бит возвращаемого
             значения  установлен,  то клавиша в текущий момент нажата;
             если установлен младший  значащий  бит,  то  клавиша  была
             нажата после предшествующего вызова функции.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetAtomHandle

        Синтаксис

             HMEM GetAtomHandle(wAtom)

             Эта функция  возвращает  дескриптор  строки  (относительно
             локальной   динамической  памяти),  которая  соответствует
             атому, заданному параметром wAtom.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wAtom             WORD  Определяет беззнаковое целое,
                               идентифицирующее атом, дескриптор
                               которого необходим.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   заданную   строку
             атома. Оно равно нулю, если такого атома не существует.

        ───────────────────────────────────────────────────────────────
                                     GetAtomName                               

        Синтаксис


       Windows 3.0/Ref/3#7                                        = 9 =

             WORD GetAtomName(nAtom,lpBuffer,nSize)

             Эта функция    осуществляет   поиск   символьной   строки,
             соответствующей nAtom,  и копирует ее в буфер,  на который
             указывает параметр  lpBuffer.  Параметр  nSize  определяет
             максимальный размер буфера.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nAtom             ATOM  Идентифицирует символьную строку,
                               которая должна быть скопирована.

             lpBuffer          LPSTR  Указывает на буфер в который
                               должна быть записана строка.

             nSize             int  Определяет максимальный размер
                               буфера в байтах.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет фактическое число байтов,
             скопированных в буфер. Оно равно 0, если указанный атом не
             найден.

        ───────────────────────────────────────────────────────────────
                                    GetBitmapBits                              

        Синтаксис

             DWORD GetBitmapBits(hBitmap,dwCount,lpBits)

             Эта функция  копирует  биты  заданной  растровой  карты  в
             буфер,  на который  указывает  параметр  lpBits.  Параметр
             dwCount   определяет   число   байт,  предназначенных  для
             копирования в буфер.  Для определения корректного значения
             dwCount   для   данной   растровой   карты   должна   быть
             использована функция GetObject.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hBitmap           HBITMAP Идентифицирует растровую карту.

             dwCount           DWORD  Определяет число байтов,
                               предназначенных для копирования.

             lpBits            LPSTR  Длинный указатель на буфер для
                               приема растровой карты. Растровая карта
                               - это массив байт. Массив бит растровой
                               карты приводится в соответствие со
                               структурой, где горизонтальные линии
                               сканирования кратны 16 битам.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 10 =


        Возвращаемое значение

             Возвращаемое значение  равно  фактическому  числу  байт  в
             растровой карте. При ошибке равно 0.

        ───────────────────────────────────────────────────────────────
                                  GetBitmapDimension                           

        Синтаксис

             DWORD GetBitmapDimension(hBitmap)

             Эта функция  возвращает  ширину  и высоту растровой карты,
             определяемой  параметром  hBitmap.   Предполагается,   что
             ширина  и высота были предварительно установлены с помощью
             функции SetBitmapDimension.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hBitmap           HBITMAP Идентифицирует растровую карту.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  содержит  ширину и высоту растровой
             карты в единицах,  кратных  0,1  мм.  Высота  находится  в
             старшей части слова, ширина - в младшей. Если этой функции
             не предшествовала  установка  ширины  и  высоты  растровой
             карты   с   помощью  SetBitmapDimension,  то  возвращаемое
             значение равно 0.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetBkColor

        Синтаксис

             DWORD GetBkColor(hDC)

             Эта функция   возвращает   текущий  цвет  фона  указанного
             устройства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно   цветовому   значению   RGB
             текущего цвета фона.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 11 =

                                                                               
       GetBkMode

        Синтаксис

             int GetBkMode(hDC)

             Эта функция    возвращает    фоновый    режим   указанного
             устройства.  Фоновый  режим   используется   для   текста,
             штриховой кисти и типа пера, не выводящего сплошную линию.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет текущий фоновый режим. Он
             может быть OPAQUE или TRANSPARENT.

        ───────────────────────────────────────────────────────────────
                                     GetBrushOrg                               

        Синтаксис

             DWORD GetBrushOrg(hDC)

             Эта функция возвращает  координаты  начала  текущей  кисти
             указанного контекста устройства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   содержит   начальные    координаты
             текущей   кисти   в   единицах  устройства.  Координата  y
             содержится в старшем слове, координата x - в младшем.

        Примечание

             Начальные координаты кисти (0,0).

        ───────────────────────────────────────────────────────────────
                                      GetBValue                                

        Синтаксис

             BYTE GetBValue(rgbColor)

             Эта макрокоманда   извлекает   значение  синего  цвета  из

       Windows 3.0/Ref/3#7                                       = 12 =

             значения цвета RGB.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             rgbColor          DWORD Определяет поле красного, зеленого
                               и синего цветов RGB.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет байт, содержащий значение
             синего цвета, в параметре rgbColor.

        Примечание

             Значение 0FFH соответствует максимальной интенсивности для
             байта, значение     000H     соответствует     минимальной
             интенсивности.

        ───────────────────────────────────────────────────────────────
                                      GetCapture                               

        Синтаксис

             HWND GetCapture()

             Эта функция возвращает дескриптор окна,  которое захватило
             ввод от мыши. В любой данный момент только одно окно может
             захватить ввод от мыши;  это окно получает  ввод  от  мыши
             независимо от того,  расположен или нет курсор мыши внутри
             ее границ.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение   идентифицирует    окно,    которое
             захватило ввод  от мыши;  оно равно NULL,  если нет такого
             окна.

        Примечание

             Окно получает захват ввода от мыши,  когда  ее  дескриптор
             передается как параметр hWnd функции SetCapture.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetCaretBlinkTime

        Синтаксис

             WORD GetCaretBlinkTime( )

             Эта функция    возвращает    текущую    частоту    мигания

       Windows 3.0/Ref/3#7                                       = 13 =

             псевдокурсора.  Частота  мигания  соответствует  времени в
             миллисекундах, прошедшему между двумя миганиями системного
             псевдокурсора.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение    содержит    частоту   мигания   в
             миллисекундах.

        ───────────────────────────────────────────────────────────────
                                     GetCaretPos                               

        Синтаксис

             void GetCaretPos(lpPoint)

             Эта функция  получает  текущую позицию курсора на экране и
             копирует  ее  в  структуру  POINT,  на  которую  указывает
             параметр lpPoint.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpPoint           LPPOINT  Указывает на структуру POINT, в
                               которую передаются координаты
                               расположения курсора на экране.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Позиция местоположения курсора  в  окне  всегда  дается  в
             координатах пользователя.

        ───────────────────────────────────────────────────────────────
                                     GetCharWidth                              

        Синтаксис

             BOOL GetCharWidth(hDC,wFirstChar,wLastChar,lpBuffer)

             Эта функция  возвращает   ширину   заданных   символов   в
             последовательной    группе   символов   текущего   шрифта.
             Например,  если параметр wFirstChar  идентифицирует  букву
             "a"  и  параметр  wLastChar  идентифицирует букву "z",  то
             функция  GetCharWidth  возвращает  ширину  всех   строчных
             символов.


       Windows 3.0/Ref/3#7                                       = 14 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             wFirstChar        WORD  Определяет первый символ в
                               последовательной группе символов
                               текущего шрифта.

             wLastChar         WORD  Определяет последний символы в
                               последовательной группе символов
                               текущего шрифта.

             lpBuffer          LPINT  Указывает на буфер, в который
                               передается значение ширины для
                               последовательной группы символов
                               текущего шрифта.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно нулю,  если функция выполнилась успешно.
             В противном случае равно нулю.

        Примечание

             Если символ    из    последовательной    группы   символов
             отсутствует в выбранной шрифте,  то ему назначается ширина
             символа  по  умолчанию  (таким  символом  обычно  является
             символ пробела).

        ───────────────────────────────────────────────────────────────
                                  GetClassInfo [3.0]                           

        Синтаксис

             BOOL GetClassInfo(hInstance,lpClassName,lpWndClass)

             Эта функция возвращает информацию о классе окна.  Параметр
             hInstance идентифицирует экземпляр  прикладной  программы,
             который создал этот класс, а lpClassName определяет класс.
             Если функция  находит  указанный   класс,   она   копирует
             структуру данных WNDCLASS,  используемую при регистрации в
             структуру данных  WNDCLASS,  передаваемую  через  параметр
             lpWndClass.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE   Идентифицирует экземпляр
                               прикладной программы, создавший класс.
                               Чтобы получить информацию о классах,
                               создаваемых Windows, таких как панели
                               перечня или клавиши, этот параметр
                               должен быть равен NULL.

       Windows 3.0/Ref/3#7                                       = 15 =


             lpClassName       LPSTR  Указывает на строку, завершаемую
                               нулевым символом, которая содержит имя
                               искомого класса. Если старшее слово этого
                               параметра равен нулю, то подразумевается,
                               что младшее слово содержит значение,
                               возвращаемое макрокомандой MAKEINTRESORCE
                               которая используется при создании класса.

             lpWndClass        LPWNDCLASS  Указывает на структуру данных
                               WNDCLASS, в которую функция должна
                               скопировать информацию о классе.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  TRUE в случае,  если функция
             нашла соответствующий  класс  и  успешно  скопировала  его
             параметры. Если   функция   не  нашла  такого  класса,  то
             возвращаемое значение равно FALSE.

        Примечание

             Эта функция   не   возвращает   параметры   lpszClassName,
             lpszMenuName и   hInstance.   Имя   меню   не  хранится  в
             структуре, и  поэтому  не  возвращается.  Имя  класса  уже
             известно, поскольку  посылается функции.  Во все остальные
             поля копируются  данные,   которые   были   занесены   при
             регистрации класса.

        ───────────────────────────────────────────────────────────────
                                     GetClassLong                              

        Синтаксис

             LONG GetClassLong(hWnd,nIndex)

             Эта функция  возвращает   длинное   значение,   задаваемое
             параметром    nIndex,    из   структуры   WNDCLASS   окна,
             определяемого параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет смещение (в байтах)
                               необходимого значения. Оно может также
                               иметь следующее значение:

                               GCL_WNDPROC  Возвращает длинный
                                            указатель на функцию окна.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                       = 16 =

        Возвращаемое значение

             Возвращаемое значение определяет значение, возвращаемое из
             структуры WNDCLASS.

        Примечание

             Для доступа   к   любым   дополнительным   четырехбайтовым
             значениям,  которые  были  зарезервированы  при   создании
             структуры класса окна,  используйте положительные смещения
             в  качестве  индексов,  начиная   с   нуля   для   первого
             четырехбайтового значения в дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                     GetClassName                              

        Синтаксис

             int GetClassName(hWnd,lpClassName,nMaxCount)

             Эта функция  возвращает  имя  класса  окна,  определяемого
             параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, имя класса
                               которого должно быть возвращено.

             lpClassName       LPSTR  Указывает на буфер, в который
                               записывается имя класса.

             nMaxCount         int  Определяет максимальное число
                               байт, которое может быть скопировано в
                               буфер. Если действительное имя класса
                               длиннее, то в буфер копируется усеченный
                               вариант.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет число знаков,  фактически
             скопированных в  lpClassName,  и равно нулю,  если указано
             некорректное имя класса.

        ───────────────────────────────────────────────────────────────
                                     GetClassWord                              

        Синтаксис

             WORD GetClassWord(hWnd,nIndex)

             Эта функция   возвращает  слово,  определяемое  параметром
             nIndex, из   структуры   WNDCLASS   окна,    определяемого

       Windows 3.0/Ref/3#7                                       = 17 =

             параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             nIndex            int  Определяет смещение (в байтах)
                               необходимого значения. Оно может также
                               иметь следующее значение:

                               Значение        Описание
                               ────────────────────────────────────────
                               GCW_CBCLSEXTRA  Сообщает сколько байт
                                               дополнительной информации
                                               хранится в структуре
                                               класса. Информация о том
                                               как добраться до этой
                                               информации приведена  в
                                               разделе "Примечания"
                                               ниже.

                               GCW_CBWNDEXTRA  Сообщает сколько байт
                                               дополнительной информации
                                               хранится в структуре
                                               окна. Информация о том
                                               как добраться до этой
                                               информации приведена  в
                                               разделе "Примечания"
                                               ниже.


                               GCW_HBRBACKGROUND Возвращает дескриптор
                                               кисти фона.


                               GCW_HCURSOR     Возвращает дескриптор
                                               курсора.

                               GCW_HICON       Возвращает дескриптор
                                               иконы.

                               GCW_HMODULE     Возвращает дескриптор
                                               модуля.

                               GCW_STYLE       Возвращает биты типа
                                               класса окна.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет значение,  извлеченное из
             структуры WNDCLASS.


       Windows 3.0/Ref/3#7                                       = 18 =

        Примечание

             Для доступа к любым дополнительным двухбайтовым значениям,
             которые были зарезервированы при создании структуры класса
             окна,  используйте  положительные  смещения   в   качестве
             индексов,   начиная   с  нуля  для  первого  двухбайтового
             значения дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                   GetClipboardData                            

        Синтаксис

             HANDLE GetClipboardData(wFormat)

             Эта функция   извлекает  данные  из  системного  буфера  в
             формате,  заданном  параметром  wFormat.  Системный  буфер
             должен быть предварительно открыт.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFormat           WORD  Определяет формат данных. Описания
                               форматов данных даны в функции
                               SetClipboardFormat.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицируюет    блок    памяти,
             содержащий  данные  из системного буфера.  Тип дескриптора
             зависит от типа данных,  определяемого параметром wFormat.
             Равно NULL, если имеется ошибка.

        Примечание

             Имеющиеся форматы могут быть заранее перечислены с помощью
             EnumClipboardData.

             Дескрипторы данных,     возвращаемые     GetClipboardData,
             управляются системным буфером, а не прикладной программой.
             Таким  образом,  прикладная  программа  должна  немедленно
             скопировать  данные,  вместо  того,  чтобы  полагаться  на
             дескрипторы  данных  при  длительном   их   использовании.
             Прикладная  программа  не  должна  освобождать дескрипторы
             данных или оставлять их заблокированными.

             Для текста Windows поддерживает  две  формата,  CF_TEXT  и
             CF_OEMTEXT. CF_TEXT  используется по умолчанию,  тогда как
             CF_OEMTEXT используется  для   текста   из   программ   не
             предназначенных для  Windows.  Если  вы  с помощью функции
             GetClipboardData пытаетесь   получить   данные   в   одном
             текстовом формате, в то время, как доступен только другой,
             Windows автоматически преобразует текст в требуемый формат

       Windows 3.0/Ref/3#7                                       = 19 =

             перед передачей его вашей прикладной программе.

             Если в   системном   буфере   хранятся  данные  в  формате
             CF_PALETTE (логическая   палитра    цветов),    прикладная
             программа должна подразумевать,  что любые другие данные в
             системном буфере реализуются через логическую палитру.

        ───────────────────────────────────────────────────────────────
                                GetClipboardFormatName                         

        Синтаксис

             int GetClipboardFormatName(wFormat,lpFormatName,nMaxCount)

             Эта функция    возвращает   из   системного   буфера   имя
             зарегистрированного  формата,   определяемого   параметром
             wFormat.  Имя  копируется  в  буфер,  на который указывает
             lpFormatName.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFormat           WORD  Определяет формат данных. Не может
                               определять предопределенные форматы
                               данных.

             lpFormatName      LPSTR  Указывает на буфер в который
                               копируется имя формата.

             nMaxCount         int  Определяет максимальную длину (в
                               байтах) строки, которая может быть
                               скопирована в буфер. Если дейсвительная
                               длина строки больше она обрезается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно  фактической  длине  строки,
             скопированной в  буфер,  и  равно  0,  если  запрашиваемый
             формат   не   существует   или  является  предопределенным
             форматом.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetClipboardOwner

        Синтаксис

             HWND GetClipboardOwner( )

             Эта функция    осуществляет    поиск   дескриптора   окна,
             владеющего в настоящий момент системным буфером.

             Функция не имеет параметров.


       Windows 3.0/Ref/3#7                                       = 20 =

        Возвращаемое значение

             Возвращаемое значение  идентифицирует   дескриптор   окна,
             владеющего системным буфером.  Равно NULL,  если системный
             буфер не имеет владельца.

        Примечание

             Системный буфер может все еще содержать данные,  даже если
             он в настоящее время не имеет владельца.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetClipboardViewer

        Синтаксис

             HWND GetClipboardViewer( )

             Эта функция осуществляет поиск дескриптора первого окна  в
             цепочке наблюдения за системным буфером.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение идентифицирует окно, ответственное в
             настоящий момент за индикацию системного буфера. Оно равно
             NULL, если такого окна нет.

        ───────────────────────────────────────────────────────────────
                                      GetClipBox                               

        Синтаксис

             int GetClipBox(hDC,lpRect)

             Эта функция возвращает размеры наименьшего прямоугольника,
             охватывающего  область  отсечения.  Размеры  копируются  в
             буфер, заданный параметром lpRect.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Bдентифицирует контекст устройства.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT в которую копируются размеры
                               прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  тип  области отсечения.
             Может принимать одно из следующих значений:

       Windows 3.0/Ref/3#7                                       = 21 =


             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Область отсечения имеет перекрываемые
                               границы.

             ERROR             Некорректный контекст устройства.

             NULLREGION        Область отсечения пуста.

             SIMPLEREGION      Область отсечения не имеет перекрываемых
                               границ.

        ───────────────────────────────────────────────────────────────
                                    GetCodeHandle                              

        Синтаксис

             HANDLE GetCodeHandle(lpProc)

             Эта функция   возвращает   дескриптор  кодового  сегмента,
             содержащего функцию, указанную в параметре lpProc.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpProc            FARPROC  Адрес экземпляра процедуры.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   кодовый  сегмент,
             содержащий функцию.

        Примечание

             Если кодовый сегмент,  содержащий функцию,  уже  загружен,
             функция    GetCodeHandle   маркирует   сегмент   как   уже
             используемый.  Если  сегмент  кода  не  загружен,  функция
             GetCodeHandle   пытается  его  загрузить.  Таким  образом,
             прикладная программа может использовать  эту  функцию  для
             предварительной  загрузки одного или нескольких сегментов,
             необходимых для выполнения отдельной задачи.

        ───────────────────────────────────────────────────────────────
                                  GetCodeInfo [3.0]                            

        Синтаксис

             void GetCodeInfo(lpProc,lpSegInfo)

             Эта функция  возвращает  указатель  на  массив  16-битовых
             значений,  содержащий  информацию  о   кодовом   сегменте,
             который содержит функцию, определяемую параметром lpProc.

       Windows 3.0/Ref/3#7                                       = 22 =


             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpProc            FARPROC  Это адрес процедуры содержащейся
                               в сегменте, о котором требуется
                               информация. Это значение кроме
                               сегмент:смещение может    иметь    форму
                               дескриптора модуля и номера  сегмента.
                               Функция GetMNoduleHandle возвращает
                               дескриптор именованного модуля.

             lpSegInfo         LPVOID  Указывает на массив из 4
                               32-битовых значений, которые заполняются
                               информацией о кодовом сегменте. Смотрите
                               раздел "Примечание".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Параметр lpSegInfo  указывает  на  массив  из 4 32-битовых
             значений, которые содержат информацию о  сегменте,  такую,
             как его местоположение, размер и атрибуты.

             Смещение Описание
             ──────────────────────────────────────────────────────────
             0        Определяет смещение логического сектора (в
                      байтах), данных данного сегмента относительно
                      начала файла. Ноль означает, что данные не
                      доступны.

             2        Определяет длину сегмента в байтах. Ноль означает
                      64К.

             4        Содержат флаги, определяющие атрибуты сегмента.
                      Ниже приведено их описание:

                      Бит      Описание
                      ─────────────────────────────────────────────────
                      0-2      Определяет тип сегмента. Если бит 0
                               равен 1, сегмент является сегментом
                               данных. В противном случае это кодовый
                               сегмент.

                      3        Определяет является ли сегмент данных
                               повторяемым. Если он равен 1, то сегмент
                               данных повторяемый.

                      4        Определяет является ли сегмент
                               перемещаемым или фиксированным. Когда

       Windows 3.0/Ref/3#7                                       = 23 =

                               этот бит установлен в 1, сегмент
                               является перемещаемым. Иначе он
                               фиксированный.

                      5        Не возвращается.

                      6        Не возвращается.

                      7        Определяет является ли этот сегмент
                               сегментом данных только для чтения, или
                               только выполняемым сегментом. Если этот
                               бит равен 1, и сегмент является кодовым,
                               то сегмент предназначен только для
                               выполнения. Если этот бит равен 0, и
                               сегмент является сегментом данных, то
                               он предназначен только для чтения.

                      8        Определяет имеет ли сегмент связанную
                               с ним информацию о размещении. Если этот
                               бит равен 1, сегмент имеет информацию о
                               размещении. Иначе он не имеет такой
                               информации.

                      9        Определяет содержит ли сегмент отладочную
                               информацию. Если он установлен в 1, то
                               сегмент содержит информацию для
                               отладчика. В противном случае такой
                               информации нет.

                      10-11    Не возвращается.

                      12-15    Не возвращается.
                      ─────────────────────────────────────────────────

             6        Определяет общий объем памяти, выделенной для
                      сегмента. Этот объем может превышать размеры
                      сегмента. Ноль означает 65536.

        ───────────────────────────────────────────────────────────────
                                     GetCommError                              

        Синтаксис

             int GetCommError(nCid,lpStat)

             В случае ошибок связи Windows блокирует порт связи до  тех
             пор,  пока  ошибка  не  будет  удалена  с  помощью функции
             GetCommError.  Эта функция заполняет буфер  состояния,  на
             который  указывает  параметр  lpStat,  текущим  состоянием
             устройства связи, определенного параметром nCid. Она также
             возвращает  коды  ошибок,  которые встретились в последнем
             вызове GetCommError. Если lpState равен NULL, возвращается
             только код ошибки.  Список кодов ошибок приведен в таблице

       Windows 3.0/Ref/3#7                                       = 24 =

             4.8 "Коды ошибок связи".

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи. Это
                               значение можно получить с помощью
                               функции OpenComm.

             lpStat            COMSTAT FAR *  Указывает на структуру
                               данных COMSTAT в которую записывается
                               информация о состоянии устройства.
                               Структура содержит информацию об
                               устройстве связи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет коды ошибок, возвращаемые
             самой последней функцией связи.  Это может быть комбинация
             значений, приведенных в таблице 4.8 "Коды ошибок связи".

        Примечание

             Код               Описание
             ──────────────────────────────────────────────────────────
             CE_BREAK          Аппаратура обнаружила наличие брейка.

             CE_CTSTO          Тайм-аут сигнала "Готов к передаче" (CTS).
                               Сигнал CTS     был     небольшим      по
                               длительности,  определенной  CtsTimeout,
                               при попытке передать символ.

             CE_DNS            Не установлена связь с параллельным
                               устройством.

             CE_DSRTO          Тайм-аут сигнала "Готовность аппаратуры
                               передачи данных"  (DSR).  Сигнал DSR был
                               небольшим  по длительности, определенной
                               DsrTimeout, при попытке передать символ.

             CE_FRAME          Аппаратура обнаружила ошибку кадра.

             CE_IOE            Имела место ошибка ввода/вывода при
                               попытке связаться с параллельным
                               устройством.

             CE_MODE           Требуемый режим не поддерживается или
                               параметр nCid некорректен. Если эта
                               ошибка имеется, то это единственная
                               допустимая ошибка.

             CE_OOP            Параллельное устройство сигнализирует,
                               что отсутствует бумага.

       Windows 3.0/Ref/3#7                                       = 25 =


             CE_OVERRUN        Символ не был считан с устройства до
                               получения следующего символа. Символ
                               потерян.

             CE_PTO            Имел место тайм-аут при попытке
                               связаться с устройством, подключенным к
                               параллельному порту.

             CE_RLSDTO         Тайм-аут обнаружения принимаемого
                               линейного сигнала (RLSD). Сигнал был
                               небольшим по длительности, определенной
                               RlsdTimeout, при попытке передать символ.

             CE_RXOVER         Очередь приема переполнена. Это означает,
                               что либо нет места в очереди  ввода, либо
                               символ был получен после того, как был
                               принят символ EofChar.

             CE_RXPARITY       Аппаратура обнаружила ошибку четности.

             CE_TXFULL         Очередь  передачи  была  уже  заполнена,
                               когда была предпринята попытка установить
                               в очередь символ.
        ───────────────────────────────────────────────────────────────
                                   GetCommEventMask                            

        Синтаксис

             WORD GetCommEventMask(nCid,nEvtMask)

             Эта функция  возвращает  значение  текущей маски события и
             затем очищает маску.  Эта функция должна быть использована
             для предотвращения потери информации о событии.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи. Это
                               значение можно получить с помощью
                               функции OpenComm.

             nEvtMask          int  Определяет, какие события были
                               возможны. Список значений событий
                               приводится при описании  функции
                               SetCommEventMask.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  текущее  значение маски
             события.  Каждый бит в маске события специфицирует,  имело
             ли место данное событие.  Бит равен 1,  если событие имело
             место.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 26 =

                                     GetCommState                              

        Синтаксис

             int GetCommState(nCid,lpDCB)

             Эта функция заполняет буфер, на который указывает параметр
             lpDCB,  содержимым  блока  управления  устройством  связи,
             определяемым параметром nCid.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nCid              int  Определяет устройство связи. Это
                               значение можно получить с помощью
                               функции OpenComm.

             lpDCB             DCB FAR * Указывает на структуру данных
                               DCB, в которую копируется текущий блок
                               управления устройством. Структура
                               определяет установки управления для
                               устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  нулю,  если   функция   была
             завершена успешно. Если имеется ошибка, оно отрицательно.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetCurrentPDB [3.0]

        Синтаксис

             WORD GetCurrentPDB()

             Эта функция  возвращает  адрес   сегмента   или   селектор
             текущей Базы  Данных  Программ  DOS (DOS Program Data Base
             PDB), который также называют Префиксом сегмента  программы
             (PSP).

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение содержит адрес сегмента или селектор
             текущего PDB.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 27 =

                                                                               
       GetCurrentPosition

        Синтаксис

             DWORD GetCurrentPosition(hDC)

             Эта функция   возвращает   логические  координаты  текущей
             позиции.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    текущее    позицию.
             Координата x хранится в младшем слове, а y - в старшем.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetCurrentTask

        Синтаксис

             HANDLE GetCurrentTask()

             Эта функция  возвращает  дескриптор  текущей выполняющейся
             задачи.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение идентифицирует задачу,  если функция
             завершена успешно. В противном случае оно равно нуль.

        ───────────────────────────────────────────────────────────────
                                    GetCurrentTime                             

        Синтаксис

             DWORD GetCurrentTime( )

             Эта функция возвращает время, прошедшее с момента загрузки
             системы до текущего момента.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение    равно    прошедшему   времени   в
             миллисекундах.

        Примечание


       Windows 3.0/Ref/3#7                                       = 28 =

             Функции GetCurrentTime   и    GetMessageTime    возвращают
             различное время.  Функция GetMessageTime возвращает время,
             когда появилось данное сообщение, а не текущее время.

             Иногда системный таймер  переполняется  и  сбрасывается  в
             ноль.

        ───────────────────────────────────────────────────────────────
                                     GetCursorPos                              

        Синтаксис

             void GetCursorPos(lpPoint)

             Эта функция  возвращает  текущую  позицию  (в  координатах
             экрана) курсора мыши и сохраняет ее в структуре POINT,  на
             которую указывает lpPoint.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpPoint           LPPOINT  Указывает на структуру данных
                               типа POINT, в которою записываются
                               координаты зкрана курсора.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Позиция курсора  всегда задается в координатах экрана и не
             зависит  от  режима  отображения  окна,  которое  содержит
             курсор.

        ───────────────────────────────────────────────────────────────
                                        GetDC                                  

        Синтаксис

             HDC GetDC(hWnd)

             Эта функция возвращает  дескриптор  контекста  отображения
             для    области   пользователя   данного   окна.   Контекст
             отображения может быть использован в последующих  функциях
             GDI для рисования в области пользователя.

             Функция GetDC получает общие,  собственные и принадлежащие
             классу контексты  отображения,  в  зависимости   от   типа
             класса, указанного для данного окна.  Для общих контекстов
             устройств, GetDC связывает с ним атрибуты по умолчанию при
             каждом его получении.  Для контекстов принадлежащих классу
             и собственных   контекстов   она   оставляет   неизменными

       Windows 3.0/Ref/3#7                                       = 29 =

             предыдущие значения.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует дескриптор окна,
                               контекст отображения которого требуется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует контекст отображения
             для заданной области пользователя  в  окне,  если  функция
             успешно завершена. В противном случае равно NULL.

        Примечание

             В любой  момент  времени в системе Windows доступны только
             пять контекстов  отображения  (в  это  число   не   входят
             собственные   и   контексты   отображения  класса).  После
             окончания  работы  с  контекстом  отображения   необходимо
             вызвать  функцию  ReleaseDC  для  того,  чтобы  освободить
             контекст отображения, который может использоваться другими
             окнами и  прикладными  программами.  Этого однако не нуждо
             делать для собственных контекстов и контекстов отображения
             класса.

        ───────────────────────────────────────────────────────────────
                                       GetDCOrg                                

        Синтаксис

             LONG GetDCOrg(hDC)

             Эта функция получает окончательно  преобразованное  начало
             координат  для контекста устройства.  Это начало координат
             определяет    смещение,    используемое    Windows     для
             преобразования    координат    устройства   в   координаты
             пользователя  для   точек   окна   прикладной   программы.
             Окончательно      преобразованное     начало     координат
             отсчитывается относительно физического начала координат на
             экране дисплея.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства,
                               начало координат которого требуется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение        определяет       окончательно
             преобразованное начало координат (в единицах  устройства).
             y- координата расположена в старшем слове,  x-координата -
             в младшем.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 30 =

                                                                               
       GetDesktopWindow [3.0]

        Синтаксис

             HWND GetDesktopWindow()

             Эта функция   возвращает   дескриптор  окна  Windows,  так
             называемого "рабочего стола". Это окно занимает весь экран
             и оно является той областью на которой рисуются все окна и
             иконы.

             Эта функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение идентифицирует окно "рабочего стола"
             Windows.

        ───────────────────────────────────────────────────────────────
                                    GetDeviceCaps                              

        Синтаксис

             int GetDeviceCaps(hDC,nIndex)

             Эта функция возвращает информацию,  зависящую  от  данного
             устройства  отображения.  Параметр  nIndex  определяет тип
             требуемой информации.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nIndex            int  Определяет возвращаемый элемент.
                               Может принимать одно из значений,
                               приведенных в таблице 4.9, "Информационные
                               индексы GDI".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   значение   требуемого
             элемента.

        Примечание

             Таблица 4.9 содержит значения параметра nIndex.


       Windows 3.0/Ref/3#7                                       = 31 =

             Таблица 4.9, "Информационные индексы GDI.
             ──────────────────────────────────────────────────────────
             Индекс         Описание
             ──────────────────────────────────────────────────────────
             DRIVERVERSION  Номер версии, например 0х100 для 1.0.

             TECHNOLOGY     Тип устройства. Он может быть одним из
                            следующих значений:

                            Значение        Описание
                            ───────────────────────────────────────────
                            DT_PLOTTER      Векторный графопостроитель.

                            DT_RASDISPLAY   Растровый дисплей.

                            DT_RASTPRINTER  Растровое устройство печати.

                            DT_RASCAMERA    Растровая камера.

                            DT_CHARSTREAM   Cимвольный поток.

                            DT_METAFILE     Метафайл.

                            DT_DISPFILE     Дисплейный файл.
                            ───────────────────────────────────────────

             НORZSIZE       Ширина физического дисплея в мм.

             VERTSIZE       Высота физического дисплея в мм.

             HORZRES        Ширина дисплея в элементах изображения.

             VERTRES        Высота дисплея (в линиях растра).

             LOGPIXELSX     Количество пикселей на логический дюйм по
                            ширине дисплея.

             LOGPIXELSY     Количество пикселей на логический дюйм по
                            высоте дисплея.

             BITSPIXEL      Число допустимых цветовых бит для каждого
                            пикселя.

             PLANES         Число цветовых планов.

             NUMBRUSHES     Число кистей для указанного устройства.

             NUMPENS        Число перьев для указанного устройства.

             NUMFONTS       Число шрифтов для указанного устройства.

             NUMCOLORS      Число записей в цветовой таблице устройства.

             ASPECTX        Относительная ширина пикселя устройства,
                            применяемая для рисования линии.

       Windows 3.0/Ref/3#7                                       = 32 =


             ASPECTY        Относительная высота пикселя устройства,
                            применяемая для рисования линии.

             ASPECTXY       Диагональная ширина пикселя устройства,
                            применяемая для рисования линии.

             PDEVICESIZE    Размер внутренней структуры данных PDEVICE.

             CLIPCAPS       Флаг, показывающий возможности устройства
                            выполнять операцию отсечения. Он равен 1,
                            если устройство может выполнять операцию
                            отсечения прямоугольника, и равен 0, если
                            не может.

             SIZEPALETTE    Число элементов в системной палитре.
                            Этот индекс допустим только если драйвер
                            устройства установил бит RC_PALETTE в
                            индексе PASTERCAPS и доступен только в
                            драйверах версии 3.0 и выше.

             NUMRESERVED    Число зарезервированных элементов в
                            системной палитре. Этот индекс допустим
                            только если драйвер устройства установил
                            бит RC_PALETTE в индексе PASTERCAPS и
                            доступен только в драйверах версии 3.0 и
                            выше.

             COLORRES       Действительное разрешение по цветам
                            устройства в битах на пиксель. Этот индекс
                            допустим только если драйвер устройства
                            установил бит RC_PALETTE в индексе
                            PASTERCAPS и доступен только в драйверах
                            версии 3.0 и выше.

             RASTERCAPS     Значение, определяющее растровые возможности
                            устройства, такие как:

                            Значение        Описание
                            ───────────────────────────────────────────
                            RC_BANDING      Требование поддержки
                                            фрагментации.

                            RC_BITBLT       Возможность передачи
                                            растровых карт.

                            RC_BITMAP64     Возможность поддержки
                                            растровых карт размером
                                            свыше 64K.

                            RC_DI_BITMAP    Возможность поддержки
                                            функций SetDIBits и
                                            GetDiBits.

       Windows 3.0/Ref/3#7                                       = 33 =


                            RC_DIBTODEV     Возможность поддержки
                                            функции SetDIBitsToDevice.

                            RC_FLOODFILL    Возможность заливки.

                            RC_GDI20_OUTPUT Возможность поддержки 2-ой
                                            версии Windows.

                            RC_PALETTE      Устройство, использующее
                                            палитру.

                            RC_SCALING      Возможность масштабирования.

                            RC_STRETCHBLT   Возможность выполнения
                                            функции StretchBlt.

                            RC_STRETCHDIB   Возможность выполнения
                                            функции StretchDIBits.
                            ───────────────────────────────────────────

             CURVECAPS      Битовая маска, указывающая возможности
                            устройства в части вывода кривых. Биты имеют
                            следующие значения:

                            Бит Описание
                            ───────────────────────────────────────────
                            0   Означает возможность рисовать
                                окружность.

                            1   Означает возможность выводить круговые
                                диаграммы.

                            2   Означает возможность выводить дуги хорд.

                            3   Означает возможность рисовать эллипсы.

                            4   Означает возможность выводить широкую
                                границу.

                            5   Означает возможность выводить типовую
                                границу.

                            6   Означает возможность выводить широкую и
                                типовую границу.

                            7   Означает возможность выводить внутренние
                                части объекта.
                            ───────────────────────────────────────────

                            Старший байт равен 0.

             LINECAPS       Битовая маска, показывающая возможности

       Windows 3.0/Ref/3#7                                       = 34 =

                            устройства в части вывода линий. Биты имеют
                            следующие значения:

                            Бит Описание
                            ───────────────────────────────────────────
                            0   Зарезервирован.

                            1   Означает возможность вывода ломаной.

                            2   Зарезервирован.

                            3   Зарезервирован.

                            4   Означает возможность вывода широкой
                                линии.

                            5   Означает возможность вывода типовых
                                линий.

                            6   Означает возможность вывода широких
                                линий и типовых линий.

                            7   Означает возможность выводить внутренные
                                части объекта.
                            ───────────────────────────────────────────

                            Старший байт равен 0.

             POLYGONALCAPS  Битовая маска, указывающая возможности
                            устройства в части вывода многоугольников.
                            Биты имеют следующие значения:

                            Бит Описание
                            ───────────────────────────────────────────
                            0   Означает возможность частичной заливки.

                            1   Означает возможность создания
                                прямоугольника.

                            2   Означает возможность закрашивать
                                несколько многоугольников.

                            3   Означает возможность построчной
                                развертки.

                            4   Означает возможность выводить широкую
                                границу.

                            5   Означает возможность выводить типовую
                                границу.

                            6   Означает возможность выводить широкую и
                                типовую границу.

       Windows 3.0/Ref/3#7                                       = 35 =


                            7   Означает возможность выводить внутренние
                                части объекта.
                            ───────────────────────────────────────────

                            Старший байт равен 0.

             TEXTCAPS       Битовая маска, указывающая возможности
                            устройства в части вывода текста. Биты имеют
                            следующие значения:

                            Бит Описание
                            ───────────────────────────────────────────
                            0   Означает точность вывода символа.

                            1   Означает точность вывода штриха.

                            2   Означает точность отсечения штриха.

                            3   Означает возможность разворота символа
                                на 90 градусов.

                            4   Означает возможность произвольного
                                вращения символа.

                            5   Означает возможность независимого
                                масштабирования по осям x и y.

                            6   Означает возможность выводить парный
                                символ для масштабирования.

                            7   Означает возможность целочисленного
                                умножения для масштабирования.

                            8   Означает возможность произвольного
                                умножения для точного масштабирования.

                            9   Означает возможность выводить символы
                                двойной яркости.

                            10  Означает возможность выводить курсив.

                            11  Означает возможность выводить
                                подчеркивание.

                            12  Означает возможность выводить
                                перечеркнутые символы.

                            13  Означает возможность выводить растровые
                                шрифты.

                            14  Означает возможность выводить векторные
                                шрифты.

       Windows 3.0/Ref/3#7                                       = 36 =


                            15  Зарезервирован. Должен быть 0.
             ──────────────────────────────────────────────────────────

             Список всех допустимых возможностей  приведен  в  описании
             структуры данных  LOGFONT  в  главе  7,  "Типы и структуры
             данных".

        ───────────────────────────────────────────────────────────────
                               GetDialogBaseUnits [3.0]                        

        Синтаксис

             Эта функция  возвращает  размер  базовой  единицы диалога,
             которая используется Windows при создании панелей диалога.
             Прикладная программа  должна использовать эти значения для
             вычисления средней ширины символов системного шрифта.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение определяет базовую единицу  диалога.
             Старшее слово  содержит высоту в пикселях базовой единицы,
             которая  вычисляется  на  основе  размера   по   вертикали
             системного шрифта,  а  младшее  слово  содержит  ширину  в
             пикселях базовой единицы  диалога,  полученной  на  основе
             ширины системного шрифта.

        Примечание

             Возвращаемое значение  представляет  собой единицу диалога
             до того,  как она  будет  преобразована  в  действительную
             единицу диалога.     Действительная     единица    диалога
             представляет собой   1/4    базовой    единицы    диалога,
             возвращаемой функцией GetDialogBaseUnits,  по горизонтали.
             Действительная  единица  диалога  представляет  собой  1/8
             базовой    единицы    диалога,    возвращаемой    функцией
             GetDialogBaseUnits, по вертикали.

             Для определения действительной высоты и ширины в  пикселях
             блока управления,    можно    воспользоваться    следующей
             формулой, которая  использует  высоту   и   ширину   блока
             управления и размеры базовой единицы диалога, возвращаемое
             функцией GetDialogBaseUnits (lDlgBaseUnits):

             (x*LOWORD(lDlgBaseUnits))/4)
             (y*HIWORD(lDlgBaseUnits))/8)

             Для исключения    возможности    появления    проблем    с
             округлением, в случае,  если базовая  единица  диалога  не
             делится без   остатка   на  четыре,  в  начале  выполняйте
             умножение.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 37 =

                                   GetDIBits [3.0]                             

        Синтаксис

             int SetDIBits(hDC,hBitmap,nStartScan,nNumScans,lpBits,
                                                     lpBitsInfo,wUsage)

             Эта функция получает  биты  указанной  растровой  карты  и
             копирует их,  в  аппаратно  независимом формате,  в буфер,
             определяемый параметром  lpBits.  В  lpBitsInfo  заносится
             формат цветов аппаратно независимой растровой карты.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hBitmap           HBITMAP  Идентифицирует растровую карту.

             nStartScan        WORD  Определяет номер первой строки,
                               которая копируется в lpBits.

             nNumScans         WORD  Определяет число копируемых строк.

             lpBits            LPSTR  Указывает на буфер, в который
                               копируются биты растровой карты в
                               аппаратно независимом формате.

             lpBitsInfo        LPBITMAPINFO  Указывает на структуру
                               данных BITMAPINFO, которая определяет
                               формат цветов и размеры аппаратно
                               независимой растровой карты.

             wUsage            WORD  Определяет содержат ли поля
                               bmiColors[] явные значение RGB, или
                               индексы текущей реализованной палитры.
                               Параметр wUsage может содержать одно
                               из следующих значений:

                 Значение        Описание
                 ──────────────────────────────────────────────────────
                 DIB_PAL_COLORS  Таблица цветов состоит из массива
                                 16-битовых индексов текущей
                                 реализоавнной палитры.

                 DIB_RGB_COLORS  Таблица цветов содержит явные RGB
                                 значения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  число  скопированных из

       Windows 3.0/Ref/3#7                                       = 38 =

             растровой карты строк.  Если произошла  ошибка  оно  равно
             нулю.

        Примечание

             Если параметр  lpBits  равен  NULL,  то  функция GetDIBits
             только заполняет   структуру   BITMAPINFO,    определяемую
             параметром lpBitsInfo, но не копирует биты самой растровой
             карты.

             При вызове этой  функции,  растровая  карта,  определяемая
             параметром  hBitmap  не  должна  быть  выбрана в контексте
             устройства.

             За начало аппаратно независимой растровой карты  принимают
             нижний левый  угол,  который  является  началом  в  режиме
             отображения MM_TEXT.

             Эта функция  также  получает  описания   растровых   карт,
             сформатированные для  Microsoft  OS/2 Presentation Manager
             версии 1.1 и 1.2,  если параметром lpBitsInfo указывает на
             структуру BITMAPCOREINFO.

        ───────────────────────────────────────────────────────────────
                                  GetDlgCtrlID [3.0]                           

        Синтаксис

             int GetDlgCtrlID(hWnd)

             Эта функция  возвращает  идентификатор   дочернего   окна,
             определяемого параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Определяет дочернее окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  является  числовым  идентификатором
             дочернего окна  в  случает  успешного  завершения функции.
             Если функция завершается с ошибкой  возвращаемое  значение
             равно NULL.

        Примечание

             Поскольку окна верхнего уровня не имеют идентификатора, то
             для таких окон возвращаемое значение не будет корректным.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 39 =

                                      GetDlgItem                               

        Синтаксис

             HWND GetDlgItem(hDlg,nIDDlgItem)

             Эта функция  возвращает дескриптор блока управления панели
             диалога, определяемой параметром hDlg.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога,
                               содержащую блок управления.

             nIDDlgItem        int  Определяет целый ID возвращаемого
                               элемента.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение     идентифицирует    данный    блок
             управления. Равно NULL,  если  не  существует  элемента  с
             заданным nIDDlgItem.

        Примечание

             Функция GetDlgItem  может  использоваться  с  любой  парой
             родительское-дочернее окно,  а  не   только   с   панелями
             диалога.  Если  параметр  hDlg  специфицирует родительское
             окно, а  дочернее  окно  имеет  уникальное   ID-имя   (оно
             определяется   параметром   hMenu   функции  CreateWindow,
             создающей дочернее окно),  функция  GetDlgItem  возвращает
             корректный дескриптор дочернего окна.

        ───────────────────────────────────────────────────────────────
                                    GetDlgItemInt                              

        Синтаксис

             WORD GetDlgItemInt(hDlg,nIDDlgItem,lpTranslated,bSigned)

             Эта функция переводит в целое значение и возвращает  текст
             блока управления, идентифицируемого параметром nIDDlgItem.
             Функция переводит тект посредством удаления дополнительных
             пробелов в начале текста и преобразования десятичных цифр;
             перевод  заканчивается,  когда  заканчивается  текст,  или
             встречается какой-либо символ,  не являющийся цифрой. Если
             параметр bSigned не равен нулю,  то функция  GetDlgItemInt
             контролирует  наличие  знака  минуса  в  начале  текста  и
             переводит текст в число со знаком.  В противном случае эта
             функция создает беззнаковое значение.

             Функция GetDlgItemInt возвращает нуль,  если преобразуемое
             число больше,  чем 32.676 (для чисел зо знаком) или 65.535
             (для беззнаковых чисел).  Когда встречается ошибка (такая,

       Windows 3.0/Ref/3#7                                       = 40 =

             как  использование  нечислового  символа  или   превышение
             заданного максимума),  функция помещает нуль в ячейку,  на
             которую указывает параметр lpTranslated.  Если ошибок нет,
             параметр  lpTranslate  получает  ненулевое значение.  Если
             lpTranslate  равен  NULL,  то  функция  GetDlgItemInt   не
             предупреждает  об  ошибке.  Данная функция посылает в блок
             управления сообщение WM_GETTEXT.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога.

             nIDDlgItem        int  Идентифицирует блок управления
                               панели диалога, над которым необходимо
                               выполнить преобразование.

             lpTranslated      BOOL  FAR*  Указывает на булевскую
                               переменную, которая представляет собой
                               флаг преобразования.

             bSigned           BOOL  Определяет, имеет ли знак
                               преобразуемое значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет преобразованное  значение
             текста   элемента   диалога.   Поскольку   нуль   является
             допустимым возвращаемым значением,  для обнаружения ошибок
             должен быть использован lpTranslated. Если предполагается,
             что возвращаемое значение будет иметь знак,  то тип должен
             быть заменен на int.

        ───────────────────────────────────────────────────────────────
                                    GetDlgItemText                             

        Синтаксис

             int GetDlgItemText(hDlg,nIDDlgItem,lpString,nMaxCount)

             Эта функция    возвращает     заголовок     или     текст,
             соответствующий блоку управления, копирует его в буфер, на
             который  указывает  lpString   и   возвращает   количество
             скопированных символов.

             Функция GetDlgItemText    посылает   в   блок   управления
             сообщение WM_GETTEXT.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога.

             nIDDlgItem        int  Идентифицирует блок управления

       Windows 3.0/Ref/3#7                                       = 41 =

                               панели диалога, текст которого нам
                               необходим.

             lpString          LPSTR  Указывает на буфер, в который
                               копируется текст.

             nMaxCount         int  Задает максимальную длину в байтах
                               строки, которая должна быть скопирована
                               в lpString. Если строка длиннее чем
                               nMaxCount, она обрезается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет фактическое число знаков,
             скопированных в буфер;  оно  равно  нулю,  если  текст  не
             скопирован.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetDOSEnvironment [3.0]

        Синтаксис

             LPSTR GetDOSEnvironment()

             Эта функция возвращает дальний указатель на  строку  среды
             текущей загруженной задачи. Описание формата и содержимого
             строки среды вы найдете в "Microsoft  MS-DOS  Programmer's
             Reference".

             Эта функция не имеет параметров.

        Примечание

             В отличие  от прикладных программ динамически подключаемые
             библиотеки (DLL) не имеют копии строки среды.  Поэтому для
             получения строки  среды  библиотека  должна  вызывать  эту
             функцию.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetDoubleClickTime

        Синтаксис

             WORD GetDoubleClickTime()

             Эта функция  возвращает  текущее  установленное  время для
             двойного нажатия на клавишу.  Установленное время двойного
             нажатия определяет    максимальное    время   задержки   в
             миллисекундах между нажатиями на кнопку мыши,  для которых
             система  Windows  будет  генерировать  сообщение о двойном
             нажатии.


       Windows 3.0/Ref/3#7                                       = 42 =

             Эта функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение определяет  текущее  время  двойного
             нажатия (в миллисекундах).

        ───────────────────────────────────────────────────────────────
                                  GetDriveType [3.0]                           

        Синтаксис

             WORD GetDriveType(hDrive)

             Эта функция  определяет  является  ли  дисковод   сменным,
             фиксированным или удаленным.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nDrive            int  Определяет дисковод, тип которого
                               мы хотим определить. Дисковод A: это 0,
                               B: - 1, C: - 2 и т.д.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет тип дисковода.  Оно может
             принимать одно из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             DRIVE_REMOVEABLE  Диск может быть снят с дисковода.

             DRIVE_FIXED       Диск нельзя снять с дисковода.

             DRIVE_REMOTE      Удаленный дисковод (сетевой).
             ──────────────────────────────────────────────────────────

        ───────────────────────────────────────────────────────────────
                                    GetEnvironment                             

        Синтаксис

             int GetEnvironment(lpPortName,lpEnviron,nMaxCount)

             Эта функция    копирует   текущую   среду,   связанную   с
             устройством,  которое  присоединено  к  системному  порту,
             определяемому параметром lpPortName, в буфер, определяемый
             параметром lpEnviron.  Среда, поддерживаемая GDI, содержит
             двоичные   данные,   применяемые  GDI  каждый  раз,  когда
             создается контекст устройства,  присоединенного к  данному
             порту.


       Windows 3.0/Ref/3#7                                       = 43 =

             Функция не выполняется, если для данного порта нет среды.

             Для определения размера буфера,  необходимого для хранения
             среды прикладная программа может  вызвать  эту  функцию  с
             параметром lpEnviron равным NULL. Затем она может выделить
             буфер и вызвать функцию  GetEnvironment  второй  раз,  для
             получения среды.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpPortName        LPSTR  Указывает на оканчивающуюся нулем
                               строку, определяющую имя желаемого порта.

             lpEnviron         LPSTR  Указывает на буфер, в который
                               копируется среда.

             nМахCount         WORD  Определяет максимальное число
                               копируемых байт.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  числу байт,  скопированных в
             lpEnviron. Если  при  вызове  функции  параметр  lpEnviron
             равен NULL, то функция возвращает размер буфера, требуемый
             для хранения среды.  Если среда  не  найдена  возвращаемое
             значение равно нулю.

        Примечание

             Первое поле  в  буфере  с указателем lpEnviron должно быть
             тем же самым,  что и передаваемое в параметре lpDeviceName
             функции CreateDC.  Если lpPortName определяет нулевой порт
             (как определено  в  файле  win.ini),  то  имя  устройства,
             указанного   с   помощью   lpEnviron,   используется   для
             размещения желаемой среды.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetFocus

        Синтаксис

             HWND GetFocus( )

             Эта функция    осуществляет    поиск   дескриптора   окна,
             захватившего в настоящий момент ввод.

             Эта функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение  идентифицирует   дескриптор   окна,
             захватившего   ввод   в   настоящее  время,  если  функция

       Windows 3.0/Ref/3#7                                       = 44 =

             завершилась успешно. В противном случае равно NULL.

        ───────────────────────────────────────────────────────────────
                                  GetFreeSpace [3.0]                           

        Синтаксис

             DWORD GetFreeSpace(wFlags)

             Эта функция  просматривает глобальную динамическую область
             памяти и возвращает число доступных байт.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFlags            WORD  Определяет нужно ли просматривать
                               глобальную динамическую память выше или
                               ниже границы отображения EMS в системах
                               с EMS с малым или большим фреймом
                               отображения. Если он равен
                               GMEM_NOT_BANKED, GetFreeSpace возвращает
                               объем памяти доступной ниже границы.
                               Если wFlags равно нулю то возвращается
                               объем памяти, доступный выше границы
                               отображения. Если машина не имеет EMS,
                               то данный параметр игнорируется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет объем доступной памяти в
             байтах. Необязательно,  что это непрерывный  блок  памяти.
             Функция GlobalConmpact   возвращает  число  байт  в  самом
             большим непрерывном блоке памяти.

        ───────────────────────────────────────────────────────────────

        ───────────────────────────────────────────────────────────────
                               GetPaletteEntries [3.0]                         

        Синтаксис

             WORD GetPaletteEntries(hPalette,wStartIndex,wNumEntries,
                                                      lpPaletteEntries)

             Эта функция возвращает часть логической палитры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hPalette          HPALETTE  Идентифицирует логическую
                               палитру.

             wStartIndex       WORD  Определяет первый получаемый из
                               логической палитры элемент.

       Windows 3.0/Ref/3#7                                       = 45 =


             wNumEntries       WORD  Определяет число копируемых
                               элементов логической палитры.

             lpPaletteEntries  LPPALETTEENTRY  Указывает на массив
                               структур данных PALETTEENTRY в который
                               записываются элементы логической палитры.
                               Массив должен быть достаточно велик,
                               чтобы в него поместилось требуемое
                               количество элементов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  число   полученных   из
             логической палитры   элементов.   В  случае  возникновения
             ошибок возвращаемое значение равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetParent

        Синтаксис

             HWND GetParent(hWnd)

             Эта функция возвращает дескриптор родительского окна (если
             оно существует), для указанного окна.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, дескриптор
                               родительского окна к которому требуется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  родительское  окно.
             Оно равно NULL, если окно не имеет родителя.

        ───────────────────────────────────────────────────────────────
                                       GetPixel                                

        Синтаксис

             DWORD GetPixel(hDC,X,Y)

             Эта функция возвращает цветовое значение RGB точки растра,
             определяемой   параметрами   X,  Y.  Точка  растра  должна
             принадлежать области отсечения, в противном случае функция
             игнорируется.


       Windows 3.0/Ref/3#7                                       = 46 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет логические координату х
                               проверяемой точки растра.

             Y                 int  Определяет логические координату y
                               проверяемой точки растра.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет цветовое значение RGB для
             заданной точки растра.  Оно равно -1, если точка растра не
             принадлежит области отсечения.

        Примечание

             Не все устройства поддерживают эту функцию (см.  растровую
             операцию RC_BITBLT в функции GetDeviceCaps).

        ───────────────────────────────────────────────────────────────
                                   GetPolyFillMode                             

        Синтаксис

             int GetPolyFillMode(hDC)

             Эта функция    возвращает    текущий     режим     заливки
             многоугольника.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет  режим  заливки,  который
             может быть одним из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             ALTERNATE         Попеременный режим.

             WINDING           Сплошной режим.
             ──────────────────────────────────────────────────────────

             Для более полной информации  о  режимах  смотрите  функцию
             SetPolyFillMode.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 47 =

                           GetPriorityClipboardFormat [3.0]                    

        Синтаксис

             int GetPriorityClipboardFormat(lpPriorityList,nCount)

             Эта функция  возвращает  первых  формат  в   списке,   для
             которого в системном буфере имеются данные.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpPriorityList    WORD FAR *  Указывает на массив целых,
                               который содержит форматы системного
                               буфера в порядке приоритетов. Описание
                               форматов системного буфера вы найдете в
                               описание функции SetClipboardData.

             nCount            int  Определяет число элементов в
                               lpPriorityList. Это значение не должно
                               превышать действительного числа членов
                               списка.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет формат системного буфера
             с высшим приоритетом для которого в буфере имеются данные.
             Если в  системном буфера нет данных эта функция возвращает
             NULL. Если имеющиеся в системном буфера данные не подходят
             ни под  один  из  указанных  в  списке  форматов,  функция
             возвращает -1.

        ───────────────────────────────────────────────────────────────
                              GetPrivateProfileInt [3.0]                       

        Синтаксис

             int GetPrivateProfileInt(lpAppName,lpKeyName,nDefault,
                                                            lpFileName)

             Эта функция  возвращает  значение   цифрового   ключа   из
             указанного файла инициализации.

             Функция осуществляет поиск в файле ключа, соответствующего
             имени, определяемому параметром lpKeyName,  под заголовком
             прикладной  программы,  определяемым параметром lpAppName.
             Запись числа в файле инициализации должна иметь  следующий
             вид:

             [имя_прикладной_программы]
             ключевое_имя = значение
                     .
                     .
                     .


       Windows 3.0/Ref/3#7                                       = 48 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на имя прикладной
                               программы Windows, которое появляется в
                               файле инициализации.

             lpKeyName         LPSTR  Указывает на ключевое имя,
                               которое появляется в файле инициализации.

             nDefault          int  Определяет значение по умолчанию
                               для данного ключа, если ключ не был
                               найден в файле инициализации.

             lpFileName        LPSTR  Указывает на строку, которая
                               содержит имя файла инициализации. Если
                               lpFileName не содержит маршрут файла,
                               Windows ищет его в директории Windows.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Оно  равно нулю,  если значение,  соответствующее
             заданному ключевому имени, не является числом или если это
             число отрицательное.    Если   значение,   соответствующее
             ключевому имени,  содержит  цифры,  за  которыми   следуют
             нецифровые  символы,  то функция возвращает значение цифр.
             Например,  если  доступна  запись   "keyname=102abc",   то
             функция  возвращает  102.  Если  значение  не найдено,  то
             функция возвращает значение по умолчанию - nDefault.

        Примечание

             Функция GetPrivateProfileInt не  зависит  от  регистра,  и
             поэтому  строки  lpAppName  и  lpKeyName  могут быть любой
             комбинацией из символов верхнего и нижнего регистра.

        ───────────────────────────────────────────────────────────────
                            GetPrivateProfileString [3.0]                      

        Синтаксис

             int GetPrivateProfileString(lpAppName,lpKeyName,lpDefault,
                                    lpReturnedString,nSize,lpFileName)

             Эта функция копирует символьную строку из указанного файла
             инициализации  в  буфер,  на  который  указывает  параметр
             lpReturnedString.

             Функция осуществляет поиск в  файле  инициализации  ключа,
             соответствующего     имени,    определенного    параметром
             lpKeyName,  в   соответствии   с   заголовком   прикладной
             программы,  определяемым  параметром lpAppName.  Если ключ

       Windows 3.0/Ref/3#7                                       = 49 =

             найден, то соответствующая строка копируется в буфер. Если
             ключ не существует,  то по умолчанию копируется символьная
             строка, определяемая параметром lpDefault. Запись строки в
             файле инициализации должна иметь следующий вид:

             [имя_прикладной_программы]
             ключевое_имя = значение
                     .
                     .
                     .

             Если lpKeyName    равен    NULL,   GetPrivateProfileString
             перечисляет  все   ключевые   имена,   ассоциированные   с
             lpAppName, заполняя область, на которую указывает параметр
             lpReturnedString,  списком ключевых  имен  (не  значений).
             Каждое  ключевое  имя  в  списке  завершается  символом 0.
             Последняя строка в списке завершается двумя  символами  0.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на имя прикладной
                               программы Windows, которое появляется в
                               файле инициализации.

             lpKeyName         LPSTR  Указывает на ключевое имя,
                               которое появляется в файле инициализации.

             lpDefault         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую значение,
                               возвращаемое, если искомый ключ не
                               найден.

             lpReturnedString  LPSTR  Указывает на буфер, в который
                               копируется строка символов.

             nSize             int  Определяет максимальное число байт
                               (исключая последний символ нуля),
                               которые копируются в буфер.

             lpFileName        LPSTR  Указывает на строку, которая
                               содержит имя файла инициализации. Если
                               lpFileName не содержит маршрут файла,
                               Windows ищет его в директории Windows.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    фактическое   число
             символов, скопированных в буфер,  определяемый  параметром
             lpReturnedString, не  считая  завершающий  нулевой символ.
             Если буфер недостаточно велик, чтобы в нем поместилась вся
             строка, и  lpKeyName не равно NULL,  возвращаемое значение
             равно nSize.  Если буфер недостаточно велик,  чтобы в  нем

       Windows 3.0/Ref/3#7                                       = 50 =

             поместилась вся  строка  и  параметр lpKeyName равен NULL,
             возвращаеоме значение равно nSize - 2.

        Примечание

             Функция GetPrivateProfileString не зависит от регистра,  и
             поэтому строки  lpAppName  и  lpKeyName  могут  быть любой
             комбинацией из символов верхнего и нижнего регистра.

        ───────────────────────────────────────────────────────────────
                                    GetProcAddress                             

        Синтаксис

             FARPROC GetProcAddress(hModule,lpProcName)

             Эта функция возвращает адрес функции,  имя которой указано
             в параметре  lpProcName.  GetProcAddress  ищет  функцию  в
             модуле,  определяемом  параметром  hModule,  или в текущем
             модуле, если  hModule  равен  NULL.  Функция  должна  быть
             экспортируемой  функцией;  файл  определения модуля должен
             содержать соответствующую строку EXPORTS для этой функции.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hModule           HANDLE  Идентифицирует модуль,
                               содержащий функцию.

             lpProcName        LPSTR  Указывает на имя функции или
                               содержит порядковое значение функции.
                               Если это порядковое значение, то оно
                               должно находиться в младшем слове и
                               старшее слово должно быть равно нулю.
                               Строка должна оканчиваться нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  указывает на точку входа в функцию,
             если функция завершена успешно.  В противном случае  равно
             NULL.

             Если параметр  lpProcName содержит порядковое значение и в
             модуле такой  функции  не  существует,  GetProcAdress  все
             равно будет  возвращать  ненулевое  значение.  В  случаях,
             когда функция может не  существовать,  пользуйтесь  вместо
             порядкового значение именем функции.

        Примечание

             GetProcAddress должна   быть   использована   только   для
             получения адресов  экспортируемых  функций,  принадлежащих
             модулям  библиотеки.  Функция  MakeProcInstance может быть

       Windows 3.0/Ref/3#7                                       = 51 =

             использована  для  доступа  к  функциям  внутри  различных
             экземпляров текущего модуля.

             Имя функции  (определяемое  параметром  lpProcName) должно
             быть идентично имени,  под которым  она  включена  в  файл
             определения модуля библиотеки (.DEF).  В файле определения
             функция может быть переименована.

        ───────────────────────────────────────────────────────────────
                                    GetProfileInt                              

        Синтаксис

             int GetProfileInt(lpAppName,lpKeyName,nDefault)

             Эта функция  возвращает  значение   цифрового   ключа   из
             указанного файла инициализации Windows,  WIN.INI.  Функция
             осуществляет поиск в файле WIN.INI ключа, соответствующего
             имени, определяемому параметром lpKeyName,  под заголовком
             прикладной  программы,  определяемым параметром lpAppName.
             Запись числа  в  файле  инициализации  Windows,   WIN.INI,
             должна иметь следующий вид:

             [имя_прикладной_программы]
             ключевое_имя = значение
                     .
                     .
                     .

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на имя прикладной
                               программы Windows, которое появляется в
                               файле инициализации Windows.

             lpKeyName         LPSTR  Указывает на ключевое имя,
                               которое появляется в файле инициализации
                               Windows.

             nDefault          int  Определяет значение по умолчанию
                               для данного ключа, если ключ не был
                               найден в файле инициализации Windows.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Оно  равно нулю,  если значение,  соответствующее
             заданному ключевому имени, не является числом или если это
             число отрицательное.    Если   значение,   соответствующее
             ключевому имени,  содержит  цифры,  за  которыми   следуют
             нецифровые  символы,  то функция возвращает значение цифр.
             Например,  если  доступна  запись   "keyname=102abc",   то

       Windows 3.0/Ref/3#7                                       = 52 =

             функция  возвращает  102.  Если  значение  не найдено,  то
             функция возвращает значение по умолчанию - nDefault.

        ───────────────────────────────────────────────────────────────
                                GetProfileString [3.0]                         

        Синтаксис

             int GetProfileString(lpAppName,lpKeyName,lpDefault,
                                                lpReturnedString,nSize)

             Эта функция   копирует   символьную   строку   из    файла
             инициализации   Windows,  WIN.INI,  в  буфер,  на  который
             указывает параметр lpReturnedString.  Функция осуществляет
             поиск в     файле     инициализации     WIN.INI     ключа,
             соответствующего имени,      определенному      параметром
             lpKeyName,   в   соответствии   с   заголовком  прикладной
             программы,  определяемым параметром lpAppName.  Если  ключ
             найден, то соответствующая строка копируется в буфер. Если
             ключ не существует,  то по умолчанию копируется символьная
             строка, определяемая параметром lpDefault. Запись строки в
             файле инициализации WIN.INI должна иметь следующий вид:

             [имя_прикладной_программы]
             ключевое_имя = значение
                     .
                     .
                     .

             Если lpKeyName равен  NULL,  GetProfileString  перечисляет
             все ключевые имена,  ассоциированные с lpAppName, заполняя
             область,  на которую указывает параметр  lpReturnedString,
             списком ключевых имен (не значений). Каждое ключевое имя в
             списке завершается символом 0.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpAppName         LPSTR  Указывает на имя прикладной
                               программы Windows, которое появляется в
                               файле инициализации Windows.

             lpKeyName         LPSTR  Указывает на ключевое имя.

             lpDefault         LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, именующую значение,
                               возвращаемое, если искомый ключ не
                               найден.

             lpReturnedString  LPSTR  Указывает на буфер, в который
                               копируется строка символов.


       Windows 3.0/Ref/3#7                                       = 53 =

             nSize             int  Определяет максимальное число байт
                               (исключая последний символ нуля),
                               которые копируются в буфер.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    фактическое   число
             символов, скопированных в буфер,  определяемый  параметром
             lpReturnedString, не  считая  завершающий  нулевой символ.
             Если буфер недостаточно велик, чтобы в нем поместилась вся
             строка, и  lpKeyName не равно NULL,  возвращаемое значение
             равно nSize.  Если буфер недостаточно велик,  чтобы в  нем
             поместилась вся  строка  и  параметр lpKeyName равен NULL,
             возвращаеоме значение равно nSize - 2.

        Примечание

             Функция GetProfileString не зависит от регистра, и поэтому
             строки  lpAppName и lpKeyName могут быть любой комбинацией
             из символов верхнего и нижнего регистра.

        ───────────────────────────────────────────────────────────────
                                       GetProp                                 

        Синтаксис

             HANDLE GetProp(hWnd,lpString)

             Эта функция  возвращает  дескриптор данных из собственного
             перечня заданного окна.  Символьная  строка,  определяемая
             параметром  lpString,  идентифицирует дескриптор,  который
             должен  быть  получен.  Предполагается,   что   строка   и
             дескриптор  были включены в собственный перечень с помощью
             функции SetProp.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, для которого
                               осуществляется поиск перечня свойств.

             lpString          LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку или атом,
                               идентифицирующий строку. Если задан
                               атом, он должен быть предварительно
                               создан с помощью функции AddAtom. Атом,
                               16-битовое значение, должен быть записан
                               в младшее слово параметра lpString;
                               старшее слово должно быть равно нулю.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует связующий дескриптор
             данных, если перечень свойств содержит  данную  строку.  В

       Windows 3.0/Ref/3#7                                       = 54 =

             противном случае равно NULL.

        Примечание

             Возвращаемое функцией  GetProp  значение  может быть любым
             значением, используемым прикладной программой.

        ───────────────────────────────────────────────────────────────
                                   GetRgnBox [3.0]                             

        Синтаксис

             int GetRgnBox(hRgn,lpRect)

             Эта функция     возвращает    координаты    прямоугольника
             ограничивающего область, определяемую параметром hRgn.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hRgn              HRGN Идентифицирует область.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, в которую заносятся координаты
                               ограничивающего прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  тип области.  Оно может
             быть одним из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Область с перекрывающими границами.

             NULLREGION        Пустая область.

             SIMPLEREGION      Область не имеет перекрывающихся границ.
             ──────────────────────────────────────────────────────────

             Если параметр  hRgn  не идентифицирует корректную область,
             функция возвращает NULL.

        ───────────────────────────────────────────────────────────────
                                       GetROP2                                 

        Синтаксис

             int GetROP2(hDC)

             Эта функция  возвращает  текущий  режим  рисования.  Режим
             рисования определяет,  как  комбинируются  перо  или  цвет
             заливки и цвета,  уже существующие на экране дисплея,  для

       Windows 3.0/Ref/3#7                                       = 55 =

             получения нового цвета.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    соответствует   текущему   режиму
             вывода.  Список  режимов  рисования  приведен  в  описании
             функции SetROP2, в таблице 4.16, "Режимы рисования".

        Примечание

             Для более  полной  информации о режимах рисования смотрите
             Главу 11,  "Коды  растровых  операций",  во  втором   томе
             Справочного руководства.

        ───────────────────────────────────────────────────────────────
                                      GetRValue                                

        Синтаксис

             BYTE GetRValue(rgbColor)

             Эта макрокоманда  извлекает  значение  красного  цвета  из
             значения цвета RGB.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             rgbColor          DWORD  Определяет поля красного,
                               зеленого и   синего   цветов,    которые
                               определяют интенсивность соответствующих
                               цветов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет байт, содержащий значение
             красного цвета, параметра rgbColor.

        Примечания

             Значение 0FFH соответствует максимальной интенсивности для
             отдельного байта.  Значение 000H соответствует минимальной
             интенсивности.

        ───────────────────────────────────────────────────────────────
                                     GetScrollPos                              

        Синтаксис


       Windows 3.0/Ref/3#7                                       = 56 =

             int GetScrollPos(hWnd,nBar)

             Эта функция   возвращает   текущую  позицию  лифта  строки
             прокрутки.  Текущая позиция - это относительное  значение,
             которое зависит от текущего диапазона прокрутки. Например,
             если диапазон прокрутки изменяется в интервале от 0 до 100
             и лифт расположен в середине строки прокрутки,  то текущая
             позиция равна 50.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nWnd              HWND  Идентифицирует окно, имеющее
                               строки прокрутки или блок управления
                               строкой прокрутки, в зависимости от
                               параметра nBar.

             nBar              int  Определяет, какую строку прокрутки
                               следует проверить. Он может принимать
                               одно из следующих значений:

                               Значение  Описание
                               ────────────────────────────────────────
                               SB_CTL    Возвращает позицию блока
                                         управления строкой прокрутки.
                                         В этом случае параметр hWnd
                                         должен быть дескриптором окна
                                         для блока управления строкой
                                         прокрутки.

                               SB_HORZ   Возвращает позицию
                                         горизонтальной строки прокрутки
                                         окна.

                               SB_VERT   Возвращает позицию вертикальной
                                         строки прокрутки окна.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  текущую  позицию  лифта
             строки прокрутки.

        ───────────────────────────────────────────────────────────────
                                    GetScrollRange                             

        Синтаксис

             void GetScrollRange(hWnd,nBar,lpMinPos,lpMaxPos)

             Эта функция копирует текущие  минимальную  и  максимальную
             позиции для  данной  строки  прокрутки в ячейки,  заданные
             параметрами lpMinPos и lpMaxPos. Если данное окно не имеет
             стандартных  строк  прокрутки  и не имеет блока управления

       Windows 3.0/Ref/3#7                                       = 57 =

             строкой прокрутки,  то функция GetScrollRange обнуляет эти
             параметры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nWnd              HWND  Идентифицирует окно, имеющее
                               строки прокрутки или блок управления
                               строкой прокрутки, в зависимости от
                               параметра nBar.

             nBar              int  Определяет, какую строку прокрутки
                               следует проверить. Он может принимать
                               одно из следующих значений:

                               Значение  Описание
                               ────────────────────────────────────────
                               SB_CTL    Возвращает позицию блока
                                         управления строкой прокрутки.
                                         В этом случае параметр hWnd
                                         должен быть дескриптором окна
                                         для блока управления строкой
                                         прокрутки.

                               SB_HORZ   Возвращает позицию
                                         горизонтальной строки прокрутки
                                         окна.

                               SB_VERT   Возвращает позицию вертикальной
                                         строки прокрутки окна.
                               ────────────────────────────────────────

             lpMinPos          LPINT  Указывает на целую переменную,
                               в которую копируется минимальная позиция.

             lpMaxPos          LPINT  Указывает на целую переменную,
                               в которую копируется максимальная
                               позиция.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Диапазон от  0 до 100 является диапазоном по умолчанию для
             стандартной строки прокрутки.  Диапазон по  умолчанию  для
             блока  управления  строкой  прокрутки  не  устанавливается
             (т.е. оба значения равны 0).

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 58 =

                                    GetStockObject                             

        Синтаксис

             HANDLE GetStockObject(nIndex)

             Эта функция   возвращает   дескриптор   одного   из  ранее
             определенных перьев, кистей или шрифтов.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nIndex            short  Определяет тип желаемого объекта.
                               Он может быть одним из следующих
                               значений:

                               Значение         Описание
                               ────────────────────────────────────────
                               BLACK_BRUSH      Черная кисть.

                               DKGRAY_BRUSH     Темносерая кисть.

                               GRAY_BRUSH       Серая кисть.

                               HOLLOW_BRUSH     Прозрачная кисть.

                               LTGRAY_BRUSH     Светлосерая кисть.

                               NULL_BRUSH       Нулевая кисть.

                               WHITE_BRUSH      Белая кисть.

                               BLACK_PEN        Черное перо.

                               NULL_PEN         Нулевое перо.

                               WHITE_PEN        Белое перо.

                               ANSI_FIXED_FONT  Фиксированный системный
                                                шрифт ANSI.

                               ANSI_VAR_FONT    Переменный системный
                                                шрифт ANSI.

                               DEVICE_DEFAULT_FONT Шрифт, зависящий от
                                                устройства.

                               OEM_FIXED_FONT   Фиксированный системный
                                                шрифт OEM.

                               SYSTEM_FONT      Системный шрифт. По
                                                умолчанию Windows
                                                использует системный
                                                шрифт для меню, блоков
                                                управления в панелях
                                                диалога и т.п. В Windows

       Windows 3.0/Ref/3#7                                       = 59 =

                                                версии 3.0 и более
                                                поздних системный шрифт
                                                имеет пропорциональную
                                                ширину. В младших
                                                версиях Windows
                                                использовался
                                                фиксированный шрифт.

                               SYSTEM_FIXED_FONT Фиксированный системный
                                                шрифт, который
                                                использовался в ранних
                                                версиях Windows. Этот
                                                объект доступен для
                                                совместимости с ранними
                                                версиями.

                               DEFAULT_PALETTE  Палитра по умолчанию.
                                                Она состоит из 20
                                                статических цветов,
                                                всегда присутствующих
                                                в системной палитре для
                                                отображения цветов
                                                логических палитр
                                                нижележащих окон.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует требуемый  логический
             объект,  если  функция  закончилась  успешно.  В противном
             случае равен NULL.

        Примечание

             Примечание. Объекты     DKGRAY_BRUSH,     GRAY_BRUSH     и
             LTGRAY_BRUSH  не могут быть использованы как фоновые кисти
             или для какой-то другой цели в  окне,  класс  которого  не
             определен  типами  CS_HREDRAW и CS_VREDRAW.  Использование
             кисти  серой  палитры  в  таких  окнах  может  привести  к
             рассогласованию   шаблонов  кисти,  после  того  как  окно
             сдвигается или  меняется  его  размер.  Начала  логических
             кистей не могут устанавливаться.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetStretchBltMode

        Синтаксис

             int GetStretchBltMode(hDC)

             Эта функция возвращает  текущий  режим  растяжения/сжатия.
             Этот режим  определяет,  как  информация  добавляется  или
             удаляется  из  растровых   карт,   которые   сжимают   или

       Windows 3.0/Ref/3#7                                       = 60 =

             растягивают с помощью функции StretchBlt.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   соответствует   текущему    режиму
             растяжения/сжатия. Это     может     быть    BLACKONWHITE,
             WHITEONBLACK  или  COLORONCOLOR.  Пояснения  для   каждого
             режима вы найдете в описании функции SetStretchBltMode.

        ───────────────────────────────────────────────────────────────
                                      GetSubMenu                               

        Синтаксис

             HMENU GetSubMenu(hMenu,nPos)

             Эта функция возвращает дескриптор накладываемого меню.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует меню.

             nPos              int  Определяет позицию накладываемого
                               меню в заданном меню. Для первого
                               элемента меню значение позиции равно 0.
                               В этой функции не может быть
                               использован ID накладываемого меню.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение        идентифицирует       заданное
             накладываемое меню.  Равно NULL,  если в данной позиции не
             существует накладываемого меню.

        ───────────────────────────────────────────────────────────────
                                     GetSysColor                               

        Синтаксис

             DWORD GetSysColor(nIndex)

             Эта функция возвращает текущий цвет элемента  изображения,
             задаваемого   параметром  nIndex.  Элементами  отображения
             являются различные части окна и дисплея  Windows,  которые
             появляются на экране системного дисплея.


       Windows 3.0/Ref/3#7                                       = 61 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nIndex            int  Определяет элемент изображения,
                               цвет которого должен быть найден. Список
                               значений индексов представлен ниже в
                               этой главе в описании функции
                               SetSysColors.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   значение   RGB   цвета
             заданного элемента.

        Примечание

             Системные цвета    для    монохромного    дисплея   обычно
             интерпретируются как различные оттенки серого.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetSysModalWindow

        Синтаксис

             HWND GetSysModalWindow()

             Эта функция  возвращает  дескриптор  системного модального
             окна, если оно существует.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение идентифицирует  системное  модальное
             окно, если оно существует. Если такого окна не существует,
             то равно NULL.

        ───────────────────────────────────────────────────────────────
                               GetSystemDirectory [3.0]                        

        Синтаксис

             WORD GetSystemDirectory(lpBuffer,nSize)

             Эта функция   возвращает   маршрут   системной  директории
             Windows. Системная директория содержит  такие  файлы,  как
             библиотеки, драйверы и файлы шрифтов Windows.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpBuffer          LPSTR  Указывает на буфер, в который
                               копируется символьная строка с маршрутом
                               системной директории Windows.


       Windows 3.0/Ref/3#7                                       = 62 =

             nSize             int  Определяет максимальную длину (в
                               байтах) буфера. Это значение должно быть
                               по крайней мере не меньше 144, чтобы
                               было достаточно места для маршрута.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  длину  скопированной  в
             lpBuffer строки,  не включая завершающий  нулевой  символ.
             Если возвращаемое  значение  больше  nSize,  оно  означает
             размер буфера,  требуемый для хранения  строки.  В  случае
             ошибки возвращаемое значение равно нулю.

        Примечание

             Возвращаемый этой   функцией   маршрут   не   оканчивается
             обратным слежем (\),  если  это  не  корневая  директория.
             Например, если     системная    директория    имеет    имя
             WINDOWS\SYSTEM на  диске  C:,  то   эта   функция   вернет
             следующую строку: "C:\WINDOWS\SYSTEM".

        ───────────────────────────────────────────────────────────────
                                    GetSystemMenu                              

        Синтаксис

             HMENU GetSystemMenu(hWnd,bRevert)

             Эта функция  открывает  прикладной  программе   доступ   к
             системному меню для его копирования и модификации.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, которое
                               обладает копией системного меню.

             bRevert           BOOL  Определяет действие, которое
                               должно быть предпринято.

                               Если bRevert Описание
                               ────────────────────────────────────────
                               нулю         GetSystemMenu возвращает
                                            дескриптор копии системного
                                            меню. Эта копия
                                            первоначально идентична
                                            системному меню, но может
                                            затем модифицироваться.

                               ненулю       GetSystemMenu разрушает
                                            возможно модифицированную
                                            копию системного меню (если
                                            она имеется), принадлежащую

       Windows 3.0/Ref/3#7                                       = 63 =

                                            указанному окну, и передает
                                            дескриптор оригинальной,
                                            немодифицированной версии
                                            системного меню.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует системное меню,  если
             bRevert  не  равен нулю и системное меню модифицировалось.
             Если  bRevert  не  равен  нулю,  и   системное   меню   не
             модифицировалось,  то  возвращаемое  значение  равно NULL.
             Если bRevert равен нулю,  то возвращается дескриптор копии
             системного меню.

        Примечания

             Любое окно,   которое   не  использует  GetSystemMenu  для
             получения  собственной  копии  системного  меню,  получает
             стандартное системное меню.

             Дескриптор, возвращаемый   этой   функцией,   может   быть
             использован  в   функциях   AppendMenu,   InsertMenu   или
             ModifyMenu  для изменения системного меню.  Системное меню
             первоначально содержит элементы идентификаторами,  такими,
             как:  SC_CLOSE, SC_MOVE, SC_SIZE. Элементы системного меню
             посылают  сообщения  WM_SYSCOMMAND.  Все  предопределенные
             элементы  системного  меню  имеют значения идентификаторов
             большие,  чем 0xF000.  Если прикладная программа добавляет
             элементы   к  системному  меню,  она  должна  использовать
             значения идентификаторов меньшие чем 0xF000.

             Windows автоматически изменяет цвет элементов стандартного
             системного  меню  на  серый  в  зависимости  от  ситуации.
             Прикладная  программа  может  выполнять  свой  собственные
             контроль  или  изменение  цвета  на серый в соответствии с
             сообщением WM_INITMENU,  которое посылается до  того,  как
             любое меню индицируется.

        ───────────────────────────────────────────────────────────────
                                   GetSystemMetrics                            

        Синтаксис

             int GetSystemMetrics(nIndex)

             Эта функция  возвращает   информацию   о   характеристиках
             системы. Системные  характеристики  -  это ширина и высота
             различных элементов  изображения  Windows.  Функция  может
             также  возвращать флаги,  которые показывают,  является ли
             текущая версия - отладочной версией,  имеется ли мышь  или
             было ли изменено назначение левой и правой кнопок мыши.


       Windows 3.0/Ref/3#7                                       = 64 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nIndex            int  Определяет системные размеры,
                               которые должны быть возвращены. Все
                               системные размеры задаются в пикселях.
                               Системные размеры должны быть одним из
                               значений, перечисленных в таблице 4.10,
                               "Индексы системных характеристик".
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение зависит от параметра nIndex.

        Примечание

             Системные характеристики  зависят  от системного дисплея и
             могут меняться  от  дисплея  к  дисплею.  В  таблице  4.10
             перечислены возможные значения параметра nIndex.

             Таблица 4.10  "Индексы системных характеристик".
             ──────────────────────────────────────────────────────────
             Индекс            Описание
             ──────────────────────────────────────────────────────────
             SM_CXSCREEN       Ширина экрана.

             SM_CYSCREEN       Высота экрана.

             SM_CXFRAME        Ширина рамки окна, которое может
                               изменить размер.

             SM_CYFRAME        Толщина рамки окна, которое может
                               изменить размер.

             SM_CXVSCROLL      Ширина графического символа стрелки в
                               вертикальной строке прокрутки.

             SM_CYVSCROLL      Высота графического символа стрелки в
                               вертикальной строке прокрутки.

             SM_CXHSCROLL      Ширина графического символа стрелки в
                               горизонтальной строке прокрутки.

             SM_CYHSCROLL      Высота графического символа стрелки в
                               горизонтальной строке прокрутки.

             SM_CYCAPTION      Высота заголовка.

             SM_CXBORDER       Ширина рамки окна, которое не может
                               изменять размеры.

             SM_CYBORDER       Толщина рамки окна, которое не может
                               изменять размеры.

       Windows 3.0/Ref/3#7                                       = 65 =


             SM_CXDLGFRAME     Ширина рамки, если окно имеет тип
                               WS_DLGFRAME.

             SM_CYDLGFRAME     Толщина рамки, если окно имеет тип
                               WS_DLGFRAME.

             SM_CXHTHUMB       Ширина панели бегунка в горизонтальной
                               строке прокрутки.

             SM_CYVTHUMB       Высота панели  бегунка в вертикальной
                               строке прокрутки.

             SM_CXICON         Ширина иконы.

             SM_CYICON         Высота иконы.

             SM_CXCURSOR       Ширина курсора.

             SM_CYCURSOR       Высота курсора.

             SM_CYMENU         Высота меню-строки.

             SM_CXFULLSCREEN   Ширина области пользователя для
                               полноэкранного окна.

             SM_CYFULLSCREEN   Высота области пользователя для
                               полноэкранного окна (равна высоте экрана
                               минус высота заголовка окна).

             SM_CYKANJIWINDOW  Высота окна Каньи.

             SM_CXMINTRACK     Минимальная ширина контура окна.

             SM_CYMINTRACK     Минимальная высота контура окна.

             SM_CXMIN          Минимальная ширина окна.

             SM_CYMIN          Минимальная высота окна.

             SM_CXSIZE         Ширина растров, содержащихся в строке
                               заголовка.

             SM_CYSIZE         Высота растров, содержащихся в строке
                               заголовка.

             SM_MOUSEPRESENT   Не равно нулю, если установлена мышь.

             SM_DEBUG          Не равно нулю, если работает отладочная
                               версия Windows.

             SM_SWAPBUTTON     Не равно нулю, если изменены на
                               противоположные назначения левой и правой
                               кнопок мыши.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 66 =

                            GetSystemPaletteEntries [3.0]                      

        Синтаксис

             WORD GetSystemPaletteEntries(hDC,wStartIndex,wNumEntries,
                                                      lpPaletteEntries)

             Эта функция возвращает часть элементов системной палитры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             wStartIndex       WORD  Определяет первый получаемый из
                               системной палитры элемент.

             wNumEntries       WORD  Определяет число копируемых
                               элементов системной палитры.

             lpPaletteEntries  LPPALETTEENTRY  Указывает на массив
                               структур данных PALETTEENTRY в который
                               записываются элементы логической палитры.
                               Массив должен быть достаточно велик,
                               чтобы в него поместилось требуемое
                               количество элементов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  число   полученных   из
             системной палитры элементов. В случае возникновения ошибки
             возвращаемое значение равно нулю.

        ───────────────────────────────────────────────────────────────
                              GetSystemPaletteUse [3.0]                        

        Синтаксис

             WORD GetSystemPaletteUse(hDC)

             Эта функция   определяет  имеет  ли  прикладная  программа
             доступ ко всей системной палитре.  По умолчанию, системная
             палитра содержит   20   статических   цветов,  которые  не
             изменяются, когда  прикладные  программы  реализуют   свои
             логические палитры.  Прикладная  программа  может получить
             доступ к большинству из  этих  цветов  с  помощью  функции
             SetSystemPaletteUse.

             Параметр hDC   должен   определять   контекст  устройтсва,
             поддерживающего палитры цветов.

       Windows 3.0/Ref/3#7                                       = 67 =


             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет  текущее  использование
             системной палитры.  Оно  может  быть  одним  из  следующих
             значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             SYSPAL_NOSTATIC   Системная палитра не содержит статических
                               цветов, за исключением белого и черного.

             SYSPAL_STATIC     Системная палитра содержит статические
                               цвета, которые не изменяются, когда
                               прикладная программа реализует свою
                               логическую палитру.

        ───────────────────────────────────────────────────────────────
                              GetTabbedTextExtent [3.0]                        

        Синтаксис

             DWORD GetTabbedTextExtent(hDC,lpString,nCount,
                                     nTabPositions,lpnTabStopPositions)

             Эта функция  вычисляет  ширину  и  высоту  строки  текста,
             определяемой параметром  lpString.  Если  строка  содержит
             один или   более   символов   табуляции,   ширина   строки
             базируется на  основе  позиций   табуляции,   определяемых
             параметром lpnTabStopPositions.                    Функция
             GetTabbedTextExtent для   вычисления    размеров    строки
             использует текущий  выбранный  шрифт.  Ширина  и высота (в
             логических единицах вычисляются без учета текущей  области
             выреза.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpString          LPSTR  Указывает на текстовую строку.

             nCount            int  Определяет число символов в строке.

             nTabPositions     int  Определяет число позиций табуляции
                               в массиве, определяемом параметром
                               lpnTabStopPositions.


       Windows 3.0/Ref/3#7                                       = 68 =

             lpnTabStopPositions LPINT  Указывает на массив целых,
                               содержащих позиции табуляции в пикселях.
                               Позиции табуляции должны быть
                               расположены в возростающем порядке.
                               Обратная табуляция не допускается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет  размеры  строки.  Высота
             содержится в старшем слове, а ширина в младшем.

        Примечание

             Поскольку некоторые  устройства  не  располагают символы в
             регулярных ячейках,  (то есть они  поддерживают  кернинг),
             сумма расширений  символов  строки  может  не  быть равной
             расширению строки.

             Если параметр  nTabPositions   равен   нулю   и   параметр
             lpnTabStopPositions равен    NULL,    позиции    табуляции
             располагаются через восемь  позиций  символов  со  средней
             шириной.

             Если параметр  nTabPositions  равен  1,  позиции табуляции
             располагаются через    значение,    определяемое    первым
             элементом массива lpnTabStopPositions.

             Если параметр  lpnTabStopPositions указывает на больше чем
             одно значение,  то  каждый  элемент   массива   определяет
             позицию табуляции,  вплоть до числа позиций,  определяемых
             параметром nTabPositions.

        ───────────────────────────────────────────────────────────────
                                     GetTempDrive                              

        Синтаксис

             BYTE GetTempDrive(cDriveLetter)

             Эта функция получает однобуквенное имя драйвера или нуль и
             возвращает  однобуквенное  имя,  определяющее  оптимальный
             драйвер  для  временного файла.  Оптимальный драйвер - это
             драйвер  диска,  который  может  обеспечить  лучшее  время
             доступа во время дисковых операций с временным файлом.

             Функция GetTempDrive  возвращает  букву  драйвера жесткого
             диска,  если  он  имеется   в   системе.   Если   параметр
             cDriveLetter   равен   нулю,  то  функция  возвращает  имя
             драйвера  текущего  диска;  если   параметр   cDriveLetter
             содержит имя, то функция возвращает имя этого драйвера или
             имя другого доступного драйвера.


       Windows 3.0/Ref/3#7                                       = 69 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cDriveLetter      BYTE  Определяет однобуквенное имя
                               драйвера диска.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет оптимальный драйвер диска
             для временных файлов.

        ───────────────────────────────────────────────────────────────
                                   GetTempFileName                             

        Синтаксис

             int GetTempFileName(cDriveLetter,lpPrefixString,wUnique,
                                                       lpTempFileName)

             Эта функция  создает  имя  временного  файла по следующему
             формату:

             drive:\path\prefixuuuu.TMP

             Где drive -  однобуквенное  имя  устройства,  определяемое
             параметром  cDriveLetter,  path  - имя маршрута временного
             файла (или корневой  каталог  указанного  устройства,  или
             каталог, определенный в переменной окружения TEMP), prefix
             -  буквы  (не  более  первых  трех)  строки,  на   которую
             указывает      параметр     lpPrefixString,     uuuu     -
             шестнадцатеричное значение числа,  задаваемого  параметром
             wUnique.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cDriveLetter      BYTE  Определяет предполагаемое
                               устройство для временного файла. Если
                               cDriveLetter равен 0, используется
                               устройство по умолчанию.

             lpPrefixString    LPSTR  Указывает на оканчивающуюся нулем
                               символьную строку, которая будет
                               использоваться как префикс имени
                               временного файла. Строка должна состоять
                               из символов из набора OEM.

             wUnique           WORD  Определяет беззнаковое короткое
                               целое.

             lpTempFileName    LPSTR  Указывает на буфер, в который
                               будет записано имя временного файла. Эта
                               строка состоит из символов набора OEM.
                               Буфер должен иметь длину не меньше 144
                               символов, чтобы в нем поместился маршрут

       Windows 3.0/Ref/3#7                                       = 70 =

                               временного файла.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   уникальное   числовое
             значение,  используемое в имени временного файла. Если для
             параметра  wUnique  было  задано  ненулевое  значение,  то
             возвращаемое значение равно этому числу.

        Примечания

             Для исключения  проблем,  возникающих  при  преобразовании
             строки из  набора  OEM  в  ASCII,  для  открытия временных
             файлов пользуйтесь функцией _lopen.

             Функция GetTempFileName     использует      предполагаемое
             однобуквенное  имя драйвера для создания временного файла,
             кроме следующих случаев:

             - Если имеется жесткий  диск,  то  GetTempFileName  всегда
               использует однобуквенное  имя  драйвера первого жесткого
               диска.

             - Если определена переменная окружения TEMP и ее  значение
               начинается   с   однобуквенного   имени   драйвера,   то
               используется однобуквенное имя этого драйвера.

             Если бит TF_FORCEDRIVE параметра cDriveLetter  установлен,
             то  перечисленные  выше  исключения не будут приниматься в
             расчет.  Временный файл будет всегда создаваться в текущем
             каталоге      устройства,     определяемого     параметром
             cDriveLetter,  не взирая на  наличие  жесткого  диска  или
             переменной окружения TEMP.

             Если wUnique    равен   нулю,   GetTempFileName   пытается
             сформировать  уникальное  число,  базируясь   на   текущем
             системном времени. Если файл с вновь сформированным именем
             уже  имеется,  число   уменьшается   на   1   и   проверка
             повторяется. Этот процесс продолжается до тех пор, пока не
             будет найдено уникальное имя файла;  затем GetTempFileName
             создает  файл с таким именем и закрывает его.  Не делается
             попытка создать и открыть файл,  когда  wUnique  не  равен
             нулю.

        ───────────────────────────────────────────────────────────────
                                     GetTextAlign                              

        Синтаксис

             WORD GetTextAlign(hDC)

             Эта функция возвращает статус флага  выравнивания  текста.

       Windows 3.0/Ref/3#7                                       = 71 =

             Флаг  выравнивания текста определяет,  как функция TextOut
             выравнивает строку текста  по  отношению  к  точке  начала
             строки.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    состояние     флага
             выравнивания текста. Оно может быть комбинацией одного или
             нескольких следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             TA_BASELINE       Определяет выравнивание по оси х и
                               базовой линии выбранного шрифта в
                               ограничивающем прямоугольнике.

             TA_BOTTOM         Определяет выравнивание по оси x и
                               нижней границе ограничивающего
                               прямоугольника.

             TA_CENTER         Определяет выравнивание по оси y и
                               центру ограничивающего прямоугольника.

             TA_LEFT           Определяет выравнивание по оси y и левой
                               стороне ограничивающего прямоугольника.

             TA_NOUPDATECP     Определяет, что текущая позиция не
                               изменяется.

             TA_RIGHT          Определяет выравнивание по оси y и
                               правой стороне ограничивающего
                               прямоугольника.

             TA_TOP            Определяет выравнивание по оси x и
                               верхней границе ограничивающего
                               прямоугольника.

             TA_UPDATECP       Определяет, что текущая позиция
                               изменяеся.
             ──────────────────────────────────────────────────────────

        Примечания

             Флаги выравнивания  текста  не  обязательно  однобитовые и
             могут быть равны нулю. Для проверки того, что определенный
             флаг в  возвращаемом этой функцией значения остановлен,  в
             прикладной программе выполните следующие действия:


       Windows 3.0/Ref/3#7                                       = 72 =

             1. Выполните  битовую  операцию  OR  над  флагом   и   его
                зависимыми флагами.

                Ниже показаны группы зависимых флагов:

                - TA_LEFT, TA_CENTER и TA_RIGHT.

                - TA_BASELINE, TA_BOTTOM и TA_TOP.

                - TA_NOUPDATECP и TA_UPDATECP.

             2. Выполните   битовую  операцию  AND  над  результатом  и
                возвращаемым значением.

             3. Проверьте равенство результата и флага.

             Ниже показан пример определения того,  что установлен флаг
             горизонтального выравнивания:

             switch(TA_LEFT | TA_CENTER | TA_RIGHT) & GetTextAlign(hDC))
             {
                case TA_LEFT:
                .
                .
                .
                case TA_RIGHT:
                .
                .
                .
                case TA_CENTER:
                .
                .
                .
             }

        ───────────────────────────────────────────────────────────────
                                GetTextCharacterExtra                          

        Синтаксис

             int GetTextCharacterExtra(hDC)

             Эта функция возвращает размер  межсимвольного  промежутка.
             Межсимвольный    промежуток    определяет   дополнительное
             пространство  (в  логических  единицах),  которое  функции
             TextOut и  ExtTextOut  добавляет  к  каждому  символу  при
             выводе  строки.  Промежуток  используется  для  расширения
             строк текста.

             Если текущий   режим   отображения   не  MM_TEXT,  функция
             GetTextCharacterExtra преобразует и округляет результат до
             ближайшего единицы.


       Windows 3.0/Ref/3#7                                       = 73 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    определяет    текущее    значение
             межсимвольного промежутка.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetTextColor

        Синтаксис

             DWORD GetTextColor(hDC)

             Эта функция возвращает текущий цвет  текста.  Цвет  текста
             определяет  основной цвет символов,  выводимых посредством
             функции TextOut и ExtTextOut.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   равно   цветовому   значению   RGB
             текущего цвета текста.

        ───────────────────────────────────────────────────────────────
                                    GetTextExtent                              

        Синтаксис

             DWORD GetTextExtent(hDC,lpString,nCount)

             Эта функция  вычисляет  ширину и высоту строки текста,  на
             которую   указывает   параметр   lpString.   GetTextExtent
             использует текущий выбранный шрифт для вычисления размеров
             строки.  Ширина   и   высота   (в   логических   единицах)
             вычисляются без учета текущей области отсечения.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpString          LPSTR  Указывает на строку текста.

             nCount            int  Определяет число символов в строке.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                       = 74 =

        Возвращаемое значение

             Возвращаемое значение определяет  размеры  строки.  Высота
             располагается в старшем слове, ширина - в младшем.

        Примечание

             Поскольку некоторые  устройства  не  размещают  символы  в
             регулярных  массивах  ячеек  (т.е.,  выполняют  разрядку),
             сумма  протяженностей  символов  может быть не равна длине
             строки.

        ───────────────────────────────────────────────────────────────
                                     GetTextFace                               

        Синтаксис

             int GetTextFace(hDC,nCount,lpFacename)

             Эта функция  копирует  имя  текущего  выбранного  шрифта в
             буфер, на который указывает lpFacename. Имя копируется как
             оканчивающаяся  нулем  символьная строка.  Параметр nCount
             определяет максимальное число  копируемых  символов.  Если
             имя   длиннее,  чем  заданный  размер  в  nCount,  то  оно
             обрезается.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             nCount            int  Определяет размер буфера в байтах.

             lpFacename        LPSTR  Указывает на буфер, в который
                               копируется имя шрифта.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно  фактическому   числу   байт,
             скопированных в буфер, и равно 0, если произошла ошибка.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetTextMetrics

        Синтаксис

             BOOL GetTextMetrics(hDC,lpMetrics)

             Эта функция   заполняет   буфер,   указанный   посредством
             lpMetrics, параметрами текущего выбранного шрифта.


       Windows 3.0/Ref/3#7                                       = 75 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpMetrics         LPTEXTMETRIC  Указывает на структуру
                               данных типа TEXTMETRIC, в которую
                               заносятся параметры шрифта.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение не равно 0, если функция выполнилась
             успешно. В противном случае равно 0.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetThresholdEvent

        Синтаксис

             LPINT GetThresholdEvent()

             Эта функция  возвращает   флаг,   идентифицирующий   новое
             пороговое   событие.   Пороговое  событие  -  это  переход
             голосовой очереди из n в n-1,  где n - пороговый уровень в
             нотах.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение    указывает   на   короткое   целое
             значение, определяющее пороговое событие.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetThresholdStatus

        Синтаксис

             int GetThresholdStatus()

             Эта функция  возвращает  состояние  порогового события для
             каждого голоса.  Каждый бит состояния представляет  голос.
             Если бит установлен, то уровень голосовой очереди в данный
             момент ниже порога.

             Функция GetThresholdStatus    также    сбрасывает     флаг
             порогового события.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение    определяет    состояние    флагов
             состояния текущего порогового события.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 76 =

                                                                               
       GetTickCount

        Синтаксис

             DWORD GetTickCount()

             Эта функция  возвращает  информацию об интервале времени в
             миллисекундах, прошедшего со времени запуска системы.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение   равно    интервалу    времени    в
             миллисекундах, прошедшего со времени запуска системы.

        Примечания

             Счетчик имеет точность +-55 миллисекунд.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetTopWindow

        Синтаксис

             HWND GetTopWindow(hWnd)

             Эта функция осуществляет поиск дескриптора дочернего  окна
             верхнего  уровня,  которое принадлежит родительскому окну,
             заданному параметром  hWnd.  Если  окно  не  дочернее,  то
             функция возвращает NULL.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует родительское окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует дескриптор  дочернего
             окна  верхнего  уровня  в  связанном  списке дочерних окон
             родительского окна.  Если дочерние окна  отсутствуют,  оно
             равно NULL.

        ───────────────────────────────────────────────────────────────
                                    GetUpdateRect                              

        Синтаксис

             BOOL GetUpdateRect(hWnd,lpRect,bErase)

             Эта функция     возвращает     координаты      наименьшего

       Windows 3.0/Ref/3#7                                       = 77 =

             прямоугольника   (в   координатах  пользователя),  который
             ограничивает модифицируемую  область  данного  окна.  Если
             окно было  создано с типом CS_OWNDC и с типом отображения,
             не равным  MM_TEXT,   функция   GetUpdateRect   возвращает
             прямоугольник в   логических  координатах.  Иначе  функция
             GetUpdateRect возвращает   прямоугольник   в   координатах
             области пользователя.     Если     область     модификации
             отсутствует,  функция GetUpdateRect  делает  прямоугольник
             пустым (устанавливает все координаты в 0).

             Параметр bErase   определяет,   должна   ли  GetUpdateRect
             очищать фон модифицируемой области.  Если параметр  bErase
             соответствует  TRUE и модифицируемая область не пуста,  то
             фон очищается.  Для  очистки  фона  функция  GetUpdateRect
             посылает сообщение WM_ERASEBKGND в данное окно.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND Идентифицирует окно, модифицируемая
                               область которого должна быть
                               скорректирована.

             lRect             LPRECT  Указывает на структуру данных
                               RECT, в которую заносятся координаты
                               ограничивающего прямоугольника (в
                               координатах пользователя).

             bErase            BOOL  Определяет, очищается ли фон в
                               модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение не равно нулю,  если  модифицируемая
             область не пуста. В противном случае равно нулю.

        Примечания

             Координаты модифицируемого    прямоугольника,   получаемые
             функцией    GetUpdateRect,     аналогичны     координатам,
             возвращаемым функцией BeginPaint.

             BeginPaint автоматически    корректирует    модифицируемую
             область,  поэтому  любой   вызов   функции   GetUpdateRect
             непосредственно   после   вызова   BeginPaint   возвращает
             информацию о том, что область модификации пуста.

        ───────────────────────────────────────────────────────────────
                                     GetUpdateRgn                              

        Синтаксис

             int GetUpdateRgn(hwnd,hRgn,fErase)

       Windows 3.0/Ref/3#7                                       = 78 =


             Эта функция   копирует   корректируемую   область  окна  в
             область, заданную параметром hRgn. Координаты этой области
             определяются   относительно   верхнего  левого  угла  окна
             (координаты пользователя).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hwnd              HWND  Идентифицирует окно, которое
                               содержит область коррекции.

             hRgn              HRGN  Идентифицирует область коррекции.

             fErase            BOOL  Определяет, должен ли быть очищен
                               фон окна и должен ли осуществляться
                               вывод непользовательских областей
                               дочерних окон. Если параметр равен 0, то
                               вывод не осуществляется.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет короткое целое  значение,
             которое определяет тип полученной области. Оно может иметь
             одно из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Область имеет перекрываемые границы.

             ERROR             Область не создана.

             NULLREGION        Область пуста.

             SIMPLEREGION      Область не имеет перекрываемых границ.
             ──────────────────────────────────────────────────────────

        Примечание

             BeginPaint автоматически    корректирует    модифицируемую
             область, поэтому   любой   вызов   функции    GetUpdateRgn
             непосредственно   после   вызова   BeginPaint   возвращает
             информацию о том, что область модификации пуста.

        ───────────────────────────────────────────────────────────────
                                      GetVersion                               

        Синтаксис

             WORD GetVersion()

             Эта функция возвращает номер текущей версии Windows.


       Windows 3.0/Ref/3#7                                       = 79 =

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение  определяет  старший и младший номер
             версии Windows. Старший байт содержит младший номер версии
             (пересмотренной  и  исправленной);  младший  байт содержит
             старший номер версии.

        ──────────────────────────────────────────────────────────────
        GetViewportExt

        Синтаксис

             DWORD GetViewportExt(hDC)

             Эта функция возвращает протяженность по осям x и y области
             просмотра.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   содержит   протяженность   области
             просмотра в единицах устройства.  Протяженность по  оси  y
             содержится в старшем слове, по оси x - в младшем.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetViewportOrg

        Синтаксис

             DWORD GetViewportOrg(hDC)

             Эта функция возвращает координаты x  и  y  начала  области
             просмотра, связанной с указанным контекстом устройства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   начало   области    в
             координатах   устройства.  Координата  y  располагается  в
             старшем слове, координата x - в младшем.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 80 =

                                      GetWindow                                

        Синтаксис

             HWND GetWindow(hWnd,wCmd)

             Эта функция  осуществляет поиск дескриптора окна из списка
             управления  окнами.  Список  управления  окнами   содержит
             записи  о  всех  окнах  верхнего уровня,  принадлежащих им
             дочерних окон, а также дочерних окнах любых дочерних окон.
             Параметр    wCmd    определяет    связь    между    окном,
             идентифицируемым  параметром  hWnd,  и  окном,  дескриптор
             которого возвращается функцией.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует исходное окно.

             wCmd              WORD  Определяет связь между
                               исходным и возвращаемым окнами. Он может
                               принимать одно из следующих значений:

                               Значение      Описание
                               ────────────────────────────────────────
                               GW_CHILD      Идентифицирует первое
                                             дочернее окно исходного
                                             окна.

                               GW_HWNDFIRST  Возвращается первое окно
                                             сестры для дочернего окна.
                                             В противном случае
                                             возвращается первое окно
                                             верхнего уровня в списке.

                               GW_HWNDLAST   Возвращается последнее
                                             окно сестры для дочернего
                                             окна. В противном случае
                                             возвращается последнее
                                             окно верхнего уровня в
                                             списке.

                               GW_HWNDNEXT   Возвращается окно, которое
                                             следует за данным окном в
                                             списке управления окнами.

                               GW_HWNDPREV   Возвращается предшествующее
                                             окно в списке управления
                                             окнами.

                               GW_OWNER      Идентифицирует владельца
                                             окна.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 81 =


        Возвращаемое значение

             Возвращаемое значение идентифицирует окно.

        ───────────────────────────────────────────────────────────────
                                     GetWindowDC                               

        Синтаксис

             HDC GetWindowDC(hWnd)

             Эта функция  осуществляет  поиск контекста отображения для
             всего  окна,  включая  строку  заголовка,  меню  и  строки
             прокрутки.    Контекст    отображения    окна    позволяет
             перерисовывать  в  любом  месте   окна,   включая   строку
             заголовка,  меню  и  строки  прокрутки,  так  как  началом
             отсчета контекста является верхний левый угол окна,  а  не
             области пользователя.

             GetWindowDC назначает  атрибуты по умолчанию для контекста
             отображения  каждый   раз,   когда   контекст   требуется.
             Предыдущие атрибуты теряются.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, контекст
                               отображения которого должен быть получен.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует контекст отображения
             для данного окна,  если функция была выполнена успешно.  В
             противном случае равно NULL.

        Примечание

             Функция GetWindowDC    предназначена    для    специальной
             перерисовки в непользовательской области окна. Перерисовка
             в непользовательской области любого окна не рекомендуется.

             Функция GetSystemMetrics   может   быть  использована  для
             получения  размеров  различных  частей  непользовательской
             области,   таких  как  строка  заголовка,  меню  и  строки
             прокруки.

             После того  как  перерисование  завершено,   должна   быть
             вызвана   функция   ReleaseDC  для  сбрасывания  контекста
             отображения.  Невыполнение операции сбрасывания  контекста
             отображения   может   привести   к   серии  перерисований,
             затребованных другими прикладными программами.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 82 =

                                                                               
       GetWindowExt

        Синтаксис

             DWORD GetWindowExt(hDC)

             Эта функция  возвращает значение протяженности по осям x и
             y окна, связанного с указанным контекстом устройства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  равно значению протяженности окна в
             логических единицах.  Протяженность по оси y содержится  в
             старшем слове, протяженность по оси x - в младшем.

        ───────────────────────────────────────────────────────────────
                                    GetWindowLong                              

        Синтаксис

             LONG GetWindowLong(hWnd,nIndex)

             Эта функция     возвращает     информацию     об     окне,
             идентифицированном параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.

             nIndex            int  Определяет тип информации. Это
                               может быть одно из следующих значений:

                               Значение     Описание
                               ────────────────────────────────────────
                               GWL_EXTSTYLE Тип окна.

                               GWL_STYLE    Тип окна.

                               GWL_WNDPROC  Длинный указатель на функцию
                                            окна.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  искомое  длинное  целое
             значение.

        Примечание


       Windows 3.0/Ref/3#7                                       = 83 =

             Для доступа  к  любым дополнительным 4-байтовым значениям,
             которые были зарезервированы при создании структуры класса
             окна,   используйте   положительные  смещения  в  качестве
             индексов,  начиная с нуля для первого 4-байтового значения
             дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                                                               
       GetWindowOrg

        Синтаксис

             DWORD GetWindowOrg(hDC)

             Эта функция возвращает  координаты  x  и  y  начала  окна,
             связанного с указанным контекстом устройства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет начало окна в  логических
             координатах.  Координата  y располагается в старшем слове,
             координата x - в младшем.

        ───────────────────────────────────────────────────────────────
                                    GetWindowRect                              

        Синтаксис

             void GetWindowRect(hWnd,lpRect)

             Эта функция      копирует      размеры     прямоугольника,
             ограничивающего указанное окно,  в структуру,  на  которую
             указывает параметр lpRect.  Размеры задаются в координатах
             экрана относительно верхнего левого угла экрана дисплея  и
             включают заголовок,  границы и строки прокрутки,  если они
             существуют.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно.

             lpRect            LPRECT  Указывает на структуру типа
                               RECT, содержащую координаты экрана
                               верхнего левого и нижнего правого углов
                               окна.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                       = 84 =

        Возвращаемое значение

             Нет.
        ───────────────────────────────────────────────────────────────
                              GetWindowsDirectory [3.0]                        

        Синтаксис

             WORD GetWindowsDirectory(lpBuffer,nSize)

             Эта функция   возвращает   маршрут   директории   Windows.
             Эта директория  содержит  такие  файлы,   как   прикладные
             программы Windows,   файлы   инициализации   и   файлы  со
             справочной информацией.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpBuffer          LPSTR  Указывает на буфер, в который
                               копируется символьная строка с маршрутом
                               директории Windows.

             nSize             int  Определяет максимальную длину (в
                               байтах) буфера. Это значение должно быть
                               по крайней мере не меньше 144, чтобы
                               было достаточно места для маршрута.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  длину  скопированной  в
             lpBuffer строки,  не включая завершающий  нулевой  символ.
             Если возвращаемое  значение  больше  nSize,  оно  означает
             размер буфера,  требуемый для хранения  строки.  В  случае
             ошибки возвращаемое значение равно нулю.

        Примечание

             Возвращаемый этой   функцией   маршрут   не   оканчивается
             обратным слежем (\),  если  это  не  корневая  директория.
             Например, если директория Windows  имеет  имя  WINDOWS  на
             диске   C:,   то  эта  функция  вернет  следующую  строку:
             "C:\WINDOWS".

        ───────────────────────────────────────────────────────────────
                                                                               
       GetWindowTask

        Синтаксис

             HANDLE GetWindowTask(hWnd)

             Эта функция осуществляет поиск дескриптора задачи, которой
             принадлежит окно,  заданное параметром hWnd.  Задача - это
             любая   программа,  которая  выполняется  как  независимый
             элемент. Все прикладные программы выполняются как  задачи.

       Windows 3.0/Ref/3#7                                       = 85 =

             Каждый экземпляр прикладной программы - это задача.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, для которого
                               возвращается дескриптор задачи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   задачу,   которой
             принадлежит данное окно.

        ───────────────────────────────────────────────────────────────
                                    GetWindowText                              

        Синтаксис

             int GetWindowText(hWnd,lpString,nMaxCount)

             Эта функция  копирует  текст заголовка окна (если окно его
             вообще имеет)  в  буфер,  на  который  указывает  параметр
             lpString.   Если   параметр   hWnd   идентифицирует   блок
             управления,  то  вместо  заголовка  функция  GetWindowText
             копирует текст внутри блока управления.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно или блок
                               управления, заголовок или текст которого
                               нужно скопировать.

             lpString          LPSTR  Указывает на буфер, получающий
                               копируемую строку.

             nMaxCount         int  Определяет максимальное число
                               знаков, копируемых в буфер. Если строка
                               длиннее, чем количество знаков, заданных
                               этим параметром, она усекается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   длину   скопированной
             строки. Оно равно нулю, если окно не имеет заголовка.

        Примечание

             Эта функция  заставляет  послать  сообщение  WM_GETTEXT  в
             данное окно или блок управления.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 86 =

                                                                               
       GetWindowTextLength

        Синтаксис

             int GetWindowTextLength(hWnd)

             Эта функция  возвращает  длину  заголовка  заданного окна.
             Если параметр  hWnd  идентифицирует  блок  управления,  то
             функция GetWindowTextLength возвращает длину текста внутри
             блока управления вместо заголовка.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно или блок
                               управления.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет длину текста.  Оно  равно
             нулю, если такого текста не существует.


        ───────────────────────────────────────────────────────────────
                                    GetWindowLong                              

        Синтаксис

             LONG GetWindowWord(hWnd,nIndex)

             Эта функция     возвращает     информацию     об     окне,
             идентифицированном параметром hWnd.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.

             nIndex            int  Определяет тип информации. Это
                               может быть одно из следующих значений:

                               Значение       Описание
                               ────────────────────────────────────────
                               GWW_HINSTANCE  Дескриптор экземпляра
                                              модуля, владеющего окном.

                               GWW_HWNDPARENT Дескриптор родительского
                                              окна, если оно существует.
                                              Функция SetParent
                                              изменяет родительское
                                              окно дочернего окна.
                                              Прикладная программа
                                              должна вызвать функцию
                                              SetWindowLong для
                                              изменения родителя

       Windows 3.0/Ref/3#7                                       = 87 =

                                              дочернего окна.

                               GWW_ID         ID блока управления
                                              дочернего окна.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет искомое целое значение.

        Примечание

             Для доступа  к  любым дополнительным 2-байтовым значениям,
             которые были зарезервированы при создании структуры класса
             окна,   используйте   положительные  смещения  в  качестве
             индексов,  начиная с нуля для первого 2-байтового значения
             дополнительной памяти.

        ───────────────────────────────────────────────────────────────
                                  GetWinFlags [3.0]                            

        Синтаксис

             DWORD GetWinFlags()

             Эта  функция  возвращает  32-битовое  значение, содержащее
             флаг, который определяет конфигурацию памяти, под  которой
             работает Windows.

             Параметры

             Эта функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое   значение   содержит  флаг,  специфицирующий
             текущую конфигурацию памяти.  Этот  флаг  может  принимать
             одно из следующих значений:

             Значение           Описание
             ──────────────────────────────────────────────────────────
             WF_80x87           Система содержит арифметический
                                сопроцессор фирмы Intel.

             WF_CPU086          Центральный процессор системы - 8086.

             WF_CPU186          Центральный процессор системы - 80186.

             WF_CPU286          Центральный процессор системы - 80286.

             WF_CPU386          Центральный процессор системы - 80386.

             WF_CPU486          Центральный процессор системы - 80486.

       Windows 3.0/Ref/3#7                                       = 88 =


             WF_ENHANCED        Windows работает в расширенном режиме
                                процессора 386. Если установлен флаг
                                WF_ENHANCDE, то в этом случае всегда
                                устанавливается флаг WF_PMODE.

             WF_LARGEFRAME      Windows работает под конфигурацией
                                памяти EMS с большим фреймом
                                отображения.

             WF_PMODE           Windows работает в защищенном режиме.
                                Этот флаг устанавливается всегда, если
                                установлены флаги WF_ENHANCED или
                                WF_STANDARD.

             WF_SMALLFRAME      Windows работает под конфигурацией
                                памяти EMS с малым фреймом отображения.

             WF_STANDARD        Windows работает в стандартном режиме.
                                Если установлен флаг WF_STANDARD, то в
                                этом случае всегда устанавливается флаг
                                WF_PMODE.
             ──────────────────────────────────────────────────────────

             Если  не установлены флаги WF_ENHANCED или WF_STANDARD, то
             Windows работает в реальном режиме.

        ───────────────────────────────────────────────────────────────
                                    GlobalAddAtom                              

        Синтаксис

             ATOM GlobalAddAtom(lpString)

             Эта функция добавляет строку символов, заданную параметром
             lpString, в таблицу  атомов  и  создает  новый  глобальный
             атом,  который  является  уникальным  идентификатором  для
             данной  строки.  Глобальный  атом  -  это  атом,   который
             доступен  всем  прикладным  программам.  Атом  может  быть
             использован в последующей  функции  GlobalGetAtomName  для
             получения строки из таблицы атомов.
             Функция  GlobalAddAtom  сохраняет  не  больше  одной копии
             данной строки в таблице атомов. Если строка уже имеется  в
             таблице, то функция возвращает существующее значение атома
             и  увеличивает  на 1 счетчик ссылок строки. Счетчик ссылок
             строки - это число, которое определяет, сколько  раз  была
             вызвана функция GlobalAddAtom для отдельной строки.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString          LPSTR  Указывает на символьную строку,
                               добавляемую в таблицу. Строка должна быть
                               оканчивающейся нулем строкой символов.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 89 =


        Возвращаемое значение

             Возвращаемое значение идентифицирует вновь созданный атом,
             если  функция  завершена  успешно.  В противном случае оно
             равно NULL.

        Примечания

             Значения   атома,   возвращаемые   GlobalAddAtom,   всегда
             находятся в диапазоне от 0xC000 до 0xFFFF.

        ───────────────────────────────────────────────────────────────
                                     GlobalAlloc                               

        Синтаксис

             HANDLE GlobalAlloc(wFlags, dwBytes)

             Эта  функция  выделяет dwBytes байтов памяти из глобальной
             динамической области. Память может быть фиксированной  или
             перемещаемой  в  зависимости от типа памяти, определяемого
             параметром wFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFlags            WORD  Определяет один или более флагов,
                               указывающих функции GlobalAlloc, каким
                               образом выделить память. Он может
                               принимать следующие значения:

                               Значение         Описание
                               ────────────────────────────────────────
                               GMEM_DDESHARE    Выделить разделяемую
                                                память. Используется
                                                только для
                                                динамического обмена
                                                данными (DDE). Заметим,
                                                однако, что Windows
                                                автоматически
                                                сбрасывает память,
                                                выделенную в
                                                соответствии с этим
                                                флагом, когда
                                                прикладная программа,
                                                которая выделиля память,
                                                закончила работу.

                               GMEM_DISCARDABLE Выделить сбрасываемую
                                                память. Может быть
                                                использован только с
                                                GMEM_MOVEABLE.

       Windows 3.0/Ref/3#7                                       = 90 =


                               GMEM_FIXED       Выделить фиксированную
                                                память.

                               GMEM_MOVEABLE    Выделить перемещаемую
                                                память. Не может быть
                                                использован с
                                                GMEM_FIXED.


                               GMEM_NOCOMPACT   Не сжимаеть и не
                                                сбрасываеть память для
                                                удовлетворения запроса
                                                размещения.

                               GMEM_NODISCARD   Не сбрасываеть память
                                                для удовлетворения
                                                запроса размещения.

                               GMEM_NOT_BANKED  Выделить
                                                небанкированный блок
                                                памяти. Не может быть
                                                использован с
                                                GMEM_NOTIFY.

                               GMEM_NOTIFY      Вызвать подпрограмму
                                                уведомления, если блок
                                                памяти будет
                                                сбрасываться.

                               GMEM_ZEROINIT    Обнулить содержимое
                                                блока памяти.
                               ────────────────────────────────────────

                               Выберите значение GMEM_FIXED или
                               GMEM_MOVEABLE и, затем, комбинируйте его
                               с другими при необходимости, используя
                               поразрядный оператор OR.

             dwBytes           DWORD  Задает количество выделяемых
                               байтов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует выделенную глобальную
             память, если функция завершена успешно. В противном случае
             равно NULL.

        Примечания

             Если выполнение этой функции прошло успешно, она выделяет,
             по крайней мере, требуемое количество байтов.  Фактически,

       Windows 3.0/Ref/3#7                                       = 91 =

             может  быть  выделено  большее  количество,  и  прикладная
             программа может его использовать целиком. Для того,  чтобы
             узнать  величину  фактически выделенной памяти, необходимо
             вызвать функцию GlobalSize.

             Самый  большой  блок  памяти,  который  может быть выделен
             прикладной программе, составляет 1 MB в стандартном режиме
             и 64 MB в расширенном режиме.

        ───────────────────────────────────────────────────────────────
                                    GlobalCompact                              

        Синтаксис

             DWORD GlobalCompact(dwMinFree)

             Эта   функция   выделяет   количество   свободных   байтов
             глобальной   памяти,  определяемое  параметром  dwMinFree,
             уплотняя и, если необходимо, сбрасывая блоки из глобальной
             динамической  области  памяти  системы.   Функция   всегда
             уплотняет  память  перед  проверкой  на  свободную память.
             Затем она проверяет глобальную динамическую область памяти
             на наличие dwMinFree свободных байтов непрерывной  памяти.
             Если   это  не  позволяет  получить  требуемое  количество
             свободного      пространства,      функция      сбрасывает
             незаблокированные  сбрасываемые  блоки до тех пор, пока не
             будет получено требуемое пространство.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             dwMinFree         DWORD  Задает требуемое число свободных
                               байтов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет  число  байтов  в  самом
             большом блоке свободной глобальной памяти.

        Примечания

             Если   параметр  dwMinFree  равен  нулю,  то  возвращаемое
             значение определяет число байтов  в  самом  большом  блоке
             свободной  глобальной  памяти, который среда Windows может
             выделить, если она удалит все сбрасываемые сегменты.

             Если   прикладная   программа   использует    возвращаемое
             значение в качестве параметра dwBytes функции GlobalAlloc,
             то    нельзя    применять    флаг    GMEM_NOCOMPACT    или
             GMEM_NODISCARD.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 92 =

                                   GlobalDeleteAtom                            


        Синтаксис

             ATOM GlobalDeleteAtom(nAtom)

             Эта  функция  уменьшает  на 1 счетчик ссылок на глобальный
             атом. Если счетчик ссылок атома  равен  нулю,  то  функция
             удаляет   соответствующую   строку   из   таблицы  атомов.
             (Глобальный  атом  -  это  атом,  который  доступен   всем
             прикладным программам среды Windows).
             Счетчик  ссылок  атома  определяет,  сколько  раз атом был
             добавлен   в   таблицу   атомов.   Функция   GlobalAddAtom
             увеличивает  счетчик  ссылок  при  каждом  вызове; функция
             GlobalDeleteAtom  уменьшает  счетчик  при  каждом  вызове.
             GlobalDeleteAtom  удаляет строку только в том случае, если
             счетчик ссылок на атом равен 0.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nAtom             ATOM  Идентифицирует атом и символьную
                               строку, удаляемые из таблицы.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое   значение  определяет  результат  выполнения
             функции. Оно равно NULL, если функция завершена успешно, и
             равно nAtom, если функция завершена неудачно,  и  атом  не
             был удален.

        ───────────────────────────────────────────────────────────────
                                    GlobalDiscard                              

        Синтаксис

             HANDLE GlobalDiscard(hMem)

             Эта  функция  сбрасывает  блок глобальной памяти, заданный
             параметром hMem. Счетчик блокировок  блока  памяти  должен
             быть равным нулю.
             Блок   глобальной  памяти  удаляется  из  памяти,  но  его
             дескриптор остается доступным. Прикладная программа  может
             впоследствии     передать    этот    дескриптор    функции
             GlobalReAlloc  для  выделения  другого  блока   глобальной
             памяти, который будет задаваться тем же самым дескриптором.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует сбрасываемый блок
                               глобальной памяти.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                       = 93 =

        Возвращаемое значение

             Возвращаемое значение идентифицирует сброшенный блок, если
             функция  завершена  успешно.  В противном случае оно равно
             нулю.

        Примечания

             Функция  GlobalDiscard  сбрасывает  только  те  глобальные
             объекты,  в  запросе  на  выделение   которых   прикладная
             программа     установила    флаги    GMEM_DISCARDABLE    и
             GMEM_MOVEABLE.  Функция   заканчивается   неудачно,   если
             прикладная  программа  пытается сбросить фиксированный или
             заблокированный объект.

        ───────────────────────────────────────────────────────────────
                                 GlobalDosAlloc [3.0]                          

        Синтаксис

             DWORD GlobalDosAlloc(dwBytes)

             Эта функция выделяет глобальную память, которая может быть
             доступна  DOS при работе в реальном режиме. Гарантируется,
             что  эта  память  будет  расположена  в  первом  мегабайте
             линейного адресного пространства.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             dwBytes           DWORD Задает количестро выделяемых
                               байтов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  содержит  в  своем  старшем  слове
             значение адреса сегмента, а в младшем  слове  -  селектор.
             Прикладная  программа  может  использовать значение адреса
             сегмента для  того,  чтобы  получить  доступ  к  памяти  в
             реальном режиме, и селектор для получения доступа к памяти
             в  защищенном  режиме.  Если  Windows  работает в реальном
             режиме, значения старшего и младшего  слова  будут  равны.
             Если   Windows  не  может  выделить  блок  памяти  нужного
             размера, возвращаемое значение равно NULL.

        Примечания

             Прикладная программа не должна использовать  эту  функцию,
             пока  это  не  станет абсолютно необходимо. Пул памяти, из
             которого   выделяется   объект,   является    лимитируемым
             системным ресурсом.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 94 =

                                                                               
       GlobalDosFree [3.0]

        Синтаксис

             WORD GlobalDosFree(wSelector)

             Эта  функция  освобождает  блок глобальной памяти, который
             был выделен перед этим функцией GlobalDosAlloc.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wSelector         WORD  Задает освобождаемую память.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  определяет  результат   выполнения
             функции. Оно равно NULL, если функция выполнилась успешно.
             В противном случае оно равно wSelector.

        ───────────────────────────────────────────────────────────────
                                    GlobalFindAtom                             

        Синтаксис

             ATOM GlobalFindAtom(lpString)

             Эта  функция  ищет  в  таблице  атомов  символьную строку,
             заданную параметром lpString, и получает глобальный  атом,
             связанный  с  данной строкой. (Глобальный атом - это атом,
             который  доступен   всем   прикладным   программам   среды
             Windows).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString          LPSTR  Указывает на символьную строку,
                               поиск которой должен быть осуществлен.
                               Строка должна быть оканчивающейся нулем
                               строкой символов.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое    значение   определяет   глобальный   атом,
             связанный с данной строкой. Оно равно  NULL,  если  строки
             нет в таблице.

        ───────────────────────────────────────────────────────────────
                                   GlobalFix [3.0]                             

        Синтаксис

             void GlobalFix(hMem)

       Windows 3.0/Ref/3#7                                       = 95 =


             Эта  функция  защищает  блок глобальной памяти, задаваемый
             параметром hMem, от перемещения в  линейной  памяти.  Блок
             фиксируется в линейной памяти по своему текущему адресу, и
             его  счетчик  блокировок  увеличивается  на 1. Блокируемая
             память  не  подлежит  перемещению  или  сбрасыванию,  если
             только   она   не   была   повторно   выделена    функцией
             GlobalReAlloc.  Блок  остается  "запертым" в памяти до тех
             пор, пока пока его счетчик  блокировок  не  станет  равным
             нулю.  Всякий  раз,  когда  прикладная  программа вызывает
             функцию GlobalFix для объекта памяти, она  должна  столько
             же  раз  вызвать  функцию  GlobalUnfix  для этого объекта.
             Функция GlobalUnfix уменьшает счетчик блокировок  объекта.
             Изменять  счетчик блокировок объекта памяти могут и другие
             функции. Список этих функций приведен в  описании  функции
             GlobalFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Задает блок глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Отсутствует.

        Примечания

             Вызов   этой   функции  входит  в  конфликт  с  программой
             управления  памятью  Windows   и   приводит к фрагментации
             линейной   памяти.   Только   очень  небольшое  количество
             прикладных программ  нуждается  в  фиксировании  памяти  в
             линейном адресном пространстве.

        ───────────────────────────────────────────────────────────────
                                     GlobalFlags                               

        Синтаксис

             WORD GlobalFlags(hMem)
             Эта  функция  возвращает  информацию  о  блоке  глобальной
             памяти, заданном параметром hMem.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок глобальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  содержит  в  старшем  байте  флаг
             выделения  памяти.  Он  может  иметь  одно  из  следующих

       Windows 3.0/Ref/3#7                                       = 96 =

             значений:

             Значение           Описание
             ──────────────────────────────────────────────────────────
             GMEM_DDESHARE      Блок может разделяться. Этот флаг
                                используется только при динамическом
                                обмене данными (DDE).

             GMEM_DISCARDABLE   Блок может быть сброшен.

             GMEM_DISCARDED     Блок сброшен.

             GMEM_NOT_BANKED    Блок не может быть банкируемым.
             ──────────────────────────────────────────────────────────

             Младший  байт  возвращаемого  значения  содержит   счетчик
             блокировок  объекта.  Для  получения   значения   счетчика
             блокировок  из  возвращаемого  значения  надо использовать
             маску GMEM_LOCKCOUNT.

        Примечания

             Для  того,  чтобы проверить, может ли объект быть сброшен,
             надо   использовать    возвращаемое    значение    функции
             GlobalFlags  и  флаг GMEM_DISCARDABLE, связанные операцией
             AND.

             Нижеперечисленные   функции   могут    изменять    счетчик
             блокировок объекта глобальной памяти:

             Увеличивают счетчик            Уменьшают счетчик
             блокировок                     блокировок
             ──────────────────────────────────────────────────────────
             GlobalFix                      GlobalUnfix

             GlobalLock                     GlobalUnlock

             GlobalWire                     GlobalUnWire

             LockSegment                    UnlockSegment

        ───────────────────────────────────────────────────────────────
                                      GlobalFree                               

        Синтаксис

             HANDLE GlobalFree(hMem)

             Эта   функция   освобождает   блок   глобальной    памяти,
             идентифицируемый  параметром  hMem,  и  делает недоступным
             дескриптор этого блока памяти.


       Windows 3.0/Ref/3#7                                       = 97 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует освобождаемой
                               блок глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  определяет  результат   выполнения
             функции. Оно равно NULL, если функция завершена успешно. В
             противном случае равно hMem.

        Примечания

             GlobalFree  не  должна  быть использована для освобождения
             фиксированного блока памяти,  т.е.  такого  блока  памяти,
             счетчик  блокировок  которого  больше  нуля. Для получения
             списка функций,  изменяющего  счетчик  блокировок,  смотри
             описание  функции  GlobalFlags.

        ───────────────────────────────────────────────────────────────
                                  GlobalGetAtomName                            

        Синтаксис

             WORD GlobalGetAtomName(nAtom, lpBuffer, nSize)

             Эта  функция возвращает копию символьной строки, связанной
             с параметром nAtom, и записывает ее в  буфер,  на  который
             указывает   параметр   lpBuffer.   Параметр  nSize  задает
             максимальный размер буфера. (Глобальный атом -  это  атом,
             который   доступен   всем   прикладным   программам  среды
             Windows.)

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nAtom             ATOM  Идентифицирует получаемую
                               символьную строку.

             lpBuffer          LPSTR  Указывает на буфер, в который
                               записывается символьная строка.

             nSize             int  Определяет максимальный размер
                               (в байтах) буфера.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое    значение    равно    фактическому    числу
             скопированных  в  буфер байтов. Оно равно нулю, если задан
             некорректный глобальный атом.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 98 =

                                     GlobalHandle                              

        Синтаксис

             DWORD GlobalHandle(wMem)

             Эта функция получает дескриптор объекта глобальной памяти,
             адрес сегмента  или  селектор  которого  задан  параметром
             wMem.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wMem              WORD  Специфицирует беззнаковое целое
                               значение, определяющее адрес сегмента
                               или селектор объекта глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Младшее слово возвращаемого значения  содержит  дескриптор
             объекта  глобальной  памяти.  Старшее  слово возвращаемого
             значения содержит  адрес  сегмента  или  селектор  объекта
             памяти.   Возвращаемое   значение   равно  NULL,  если  не
             существует дескриптора для объекта памяти.

        ───────────────────────────────────────────────────────────────
                                      GlobalLock                               

        Синтаксис

             LPSTR GlobalLock(hMem)

             Эта функция получает указатель на блок глобальной  памяти,
             задаваемый параметром hMem.
             Исключая несбрасываемые объекты в защищенном  (стандартном
             или  расширенном 386) режиме, блок фиксируется в памяти по
             данному адресу, и его счетчик блокировок увеличивается  на
             1.   Блокируемая   память   не  подлежит  перемещению  или
             сбрасыванию, если только она  не  была  повторно  выделена
             функцией  GlobalReAlloc. Блок остается "запертым" в памяти
             до тех пор, пока пока его  счетчик  блокировок  не  станет
             равным   нулю.  В  защищенном  режиме  функция  GlobalLock
             увеличивает   счетчик   блокировок   только   сбрасываемых
             объектов  и  автоматических  сегментов данных. Всякий раз,
             когда прикладная программа вызывает функцию GlobalLock для
             объекта памяти, она должна столько же раз вызвать  функцию
             GlobalUnlock   для  этого  объекта.  Функция  GlobalUnlock
             уменьшает счетчик  блокировок  объекта.  Изменять  счетчик
             блокировок  объекта  памяти могут и другие функции. Список
             этих функций приведен в описании функции GlobalFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блокируемый блок
                               глобальной памяти.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                       = 99 =


        Возвращаемое значение

             Возвращаемое значение указывает на первый  байт  в  блоке
             глобальной памяти, если  функция  завершена  успешно.  Оно
             равно NULL, если объект был сброшен или имеется ошибка.

        Примечания

             Сброшенные объекты всегда имеют счетчик блокировок, равный
             нулю.

        ───────────────────────────────────────────────────────────────
                                   GlobalLRUNewest                             

        Синтаксис

             HANDLE GlobalLRUNewest(hMem)

             Эта   функция   перемещает   объект   глобальной   памяти,
             задаваемый  параметром  hMem,  на самую последнюю наименее
             используемую (LRU) позицию в памяти. Это в большой степени
             уменьшает вероятность того,  что  объект  будет  в  скором
             времени  сброшен,  но  не  защищает  объект от сбрасывания
             вообще.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует перемещаемый
                               объект глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  равно  NULL,  если  параметр  hMem
             задает некорректный дескриптор.

        Примечания

             Эта  функция  полезна  только в случае, если hMem является
             сбрасываемым.

        ───────────────────────────────────────────────────────────────
                                   GlobalLRUOldest                             

        Синтаксис

             HANDLE GlobalLRUOldest(hMem)

             Эта   функция   перемещает   объект   глобальной   памяти,
             задаваемый  параметром  hMem,  на  самую  первую  наименее

       Windows 3.0/Ref/3#7                                      = 100 =

             используемую (LRU) позицию в памяти,  и  т.о.  делает  его
             следующим кандитатом для сбрасывания.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует перемещаемый
                               объект памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  равно  NULL,  если  параметр  hMem
             задает некорректный дескриптор.

        Примечания

             Эта функция полезна только в случае,  если  hMem  является
             сбрасываемым.

        ───────────────────────────────────────────────────────────────
                                     GlobalNotify                              

        Синтаксис

             void GlobalNotify(lpNotifyProc)

             Эта функция инсталлирует процедуру уведомления для текущей
             задачи. Windows вызывает процедуру уведомления всякий раз,
             когда  блок глобальной памяти, выделенный с использованием
             флага GMEM_NOTIFY, сбрасывается.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpNotifyProc      FARPROC  Содержит адрес экземпляра
                               процедуры уведомления текущей задачи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Отсутствует.

        Примечания

             Прикладная   программа   не   должна   вызывать    функцию
             GlobalNotify в экземпляре чаще, чем один раз.

             Windows  не  вызывает  процедуру  уведомления,  когда  она
             сбрасывает память, относящуюся к DLL.

             Если  объект  сбрасывается,  прикладная  программа  должна
             использовать  флаг GMEM_NOTIFY, когда она повторно создает
             объект с помощью функции GlobalRealloc. В противном случае
             прикладная  программа  не  будет   знать,   когда   объект

       Windows 3.0/Ref/3#7                                      = 101 =

             сбрасывается вновь.

             Если процедура уведомления возвращает ненулевое  значение,
             Windows    сбрасывает   блок   глобальной   памяти.   Если
             возвращается нуль, то блок не сбрасывается.

             Функция   многократного   вызова    должна    использовать
             соглашение   по   вызову  системы  Pascal  и  должна  быть
             объявлена как FAR.  Функция  многократного  вызова  должна
             располагаться в фиксированном кодовом сегменте DLL.

        Функция многократного вызова

             BOOL FAR PASCAL NotifyProc(hMem)

             NotifyProc    является   шаблоном   для   имени   функции,
             предоставляемой  прикладной  программой.  Фактическое  имя
             должно  быть  экпортировано путем включения его в оператор
             EXPORTS в файл определения модуля прикладной программы.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок глобальной
                               памяти, который будет сбрасываться.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  не  равно  0,  если Windows должна
             сбросить блок памяти, и равно 0 в противном случае.

        Примечания

             Функция  многократного  вызова  не  всегда  вызывается  из
             прикладной  программы,  которая  является ее владельцем. В
             этом  случае  функция  многократного  вызова   не   должна
             принимать  стековый  сегмент прикладной программы. Функция
             многократного вызова не должна вызывать процедуру, которая
             может перемещать память.

        ───────────────────────────────────────────────────────────────
                                 GlobalPageLock [3.0]                          

        Синтаксис

             WORD GlobalPageLock(wSelector)

             Эта   функция   увеличивает  счетчик  блокировки  страницы
             памяти,   связанной   со   специфицированным    глобальным
             селектором.  До  тех пор, пока счетчик блокировок страницы
             не равен нулю,  данные,  на  которые  ссылается  селектор,
             гарантировано   остаются   в  памяти  по  тому  же  самому
             физическому адресу и на той же самой странице.

       Windows 3.0/Ref/3#7                                      = 102 =

             Функция  GlobalPageLock  увеличивает  счетчик   блокировок
             страницы   блока   памяти,   а   функция  GlobalPageUnlock
             уменьшает этот счетчик. Операции блокировни страницы могут
             быть вложенными,  но  каждая  блокировка  страницы  должна
             компенсироваться соответствующей разблокировкой.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wSelector         WORD  Задает селектор памяти, которая
                               должна быть странично-блокирована.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое   значение   определяет   счетчик  блокировок
             страницы после того, как  данная  функция  его  увеличила.
             Если   произошла   ошибка   при   выполнении  функции,  то
             возвращаемое значение равно 0.

        Примечания

             Прикладная  программа  должна  использовать  эту   функцию
             только  в случае крайней необходимости. Использование этой
             функции   противоречит   принятой   в   Windows   практике
             программирования.  Она предназначена для использования для
             динамически размещаемых данных, доступ  к  которым  должен
             осуществляться  во  время прерывания. Поэтому, эта функция
             должна вызываться только для DLL.

        ───────────────────────────────────────────────────────────────
                                GlobalPageUnlock [3.0]                         

        Синтаксис

             WORD GlobalPageUnlock(wSelector)

             Эта  функция  уменьшает  счетчик блокировок страницы блока
             памяти, задаваемого параметорм wSelector, и, если  счетчик
             блокировок  страницы  становится  равнын  нулю,  позволяет
             блоку памяти перемещаться, а странице быть подкаченной  на
             диск.
             Функция  GlobalPageLock  увеличивает  счетчик   блокировок
             страницы   блока   памяти,   а   функция  GlobalPageUnlock
             уменьшает этот счетчик.  Оперции  фиксации  страниц  могут
             быть  вложенными,  но  каждой  блокировке  страницы должна
             соответствовать  операция  разблокирования.  Эту   функция
             могут вызывать только библиотеки.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wSelector         WORD  Задает селектор памяти, для
                               которой должна выполниться операция
                               разблокирования страницы.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 103 =

        Возвращаемое значение

             Возвращаемое   значение   определяет   величину   счетчика
             блокировки   страницы   после  того,  как  данная  функция
             уменьшила  его  значение.  Если  при  выполнении   функции
             произошла ошибка, то возвращаемое значение равно 0.

        ───────────────────────────────────────────────────────────────
                                    GlobalReAlloc                              

        Синтаксис

             HANDLE GlobalReAlloc(hMem, dwBytes, wFlags)

             Эта  функция  повторно  выделяетт  блок глобальной памяти,
             определяемый параметром hMem, уменьшая или увеличивая  его
             размер до числа байтов, заданного параметром dwBytes.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует повторно-
                               выделяемый блок глобальной памяти.

             dwBytes           DWORD  Определяет новый размер блока
                               памяти.

             wFlags            WORD  Задает флаг, указывающий, каким
                               образом глобальный блок должен быть
                               повторно выделен.

                               Если существующие флаги памяти могут
                               быть  модифицированы,  используйте один
                               или оба флага из приведенных ниже (если
                               заданы оба флага, соедините их
                               поразрядным оператором OR).

                  Значение          Описание
                  ─────────────────────────────────────────────────────
                  GMEM_DISCARDABLE  Память может быть сбрасываемой.
                                    Используется только с GMEM_MODIFY.

                  GMEM_MODIFY       Флаги памяти модифицируются.
                                    Параметр dwBytes игнорируется.
                                    Использутся только в том случае,
                                    если прикладная программа будет
                                    модифицировать существующие флаги
                                    памяти и не перевыделять блок
                                    памяти, изменяя его размер.

                  GMEM_MOVEABLE     Память перемещаемая. Если dwBytes
                                    равен 0, этот флаг позволяет

       Windows 3.0/Ref/3#7                                      = 104 =

                                    сбросить объект, ранее объявленный
                                    как перемещаемый и сбрасываемый,
                                    если его счетчик блокировок равен
                                    0. Если блок не является
                                    перемещаемым и сбрасываемым, то
                                    функция GlobalReAlloc вернет
                                    ошибку. Если dwBytes не равен 0, и
                                    блок, заданный hMem, является
                                    фиксированным, этот флаг переместит
                                    повторно выделенный блок на новые
                                    фиксированные ячейки памяти. Если
                                    перемещаемый объект зоблокирован,
                                    то использование этого флага
                                    позволит объекту переместиться. Это
                                    может произойти только в том
                                    случае, если в настоящее время
                                    объект заблокирован предыдущим
                                    вызовом функции GlobalLock.
                                    (Следует помнить, что  дескриптор,
                                    возвращаемый GlobalReAlloc в этом
                                    случае может отличаться от
                                    дескриптора, переданного в
                                    функцию). Используйте этот флаг
                                    совместно с флагом GMEM_MODIFY для
                                    преобразования  фиксированного
                                    блока памяти в перемещаемый.

                  GMEM_NOCOMPACT    При удовлетворении запроса о
                                    выделении памяти не будет
                                    производиться ее уплотнение или
                                    сбрасывание. Этот флаг
                                    игнорируется, если установлен флаг
                                    GMEM_MODIFY.

                  GMEM_NODISCARD    При удовлетворении запроса о
                                    выделении памяти не будет
                                    производиться ее сбрасывание.
                                    Этот флаг игнорируется, если
                                    установлен флаг GMEM_MODIFY.

                  GMEM_ZEROINIT     Если блок увеличивается,
                                    дополнительная память обнуляется.
                                    Этот флаг игнорируется, если
                                    установлен флаг GMEM_MODIFY.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  идентифицирует повторно выделенную
             глобальную  память,  если   функция   завершена   успешно.
             Возвращаемое  значение равно NULL, если блок не может быть
             повторно выделен.
             Если  выполнение  функции  прошло успешно, то возвращаемое

       Windows 3.0/Ref/3#7                                      = 105 =

             значение всегда  равно  параметру  hMem,  если  только  не
             выполняются следующие условия:

             Флаг GMEM_MOVEABLE используется для разрешения перемещения
             фиксированного блока на новые фиксированные ячейки.

             Windows   работает   в   стандартном  режиме,  а  повторно
             выделяемый объект кратен 65,519 байт.

             Windows работает  в  расширеном  режиме  386,  а  повторно
             выделяемый объект кратен 64 K.

        ───────────────────────────────────────────────────────────────
                                      GlobalSize                               

        Синтаксис

             DWORD GlobalSize(hMem)

             Эта  функция  получает  текущий  размер  (в  байтах) блока
             глобальной памяти, определяемого параметром hMem.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок глобальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  фактический  размер  (в
             байтах)  заданного  блока памяти. Оно равно 0, если данный
             дескриптор некорректен или объект сброшен.

        Примечания

             Фактический размер блока памяти иногда больше, чем размер,
             запрошенный при выделении памяти.

             Прикладная  программа  должна  вызвать функцию GlobalFlags
             перед  вызовом  функции  GlobalSize  для   проверки,   что
             указанный блок памяти не был сброшен. Если блок памяти был
             сброшен,  возвращаемое  значение  будет  бессмысленно  для
             GlobalSize.

        ───────────────────────────────────────────────────────────────
                                  GlobalUnfix [3.0]                            

        Синтаксис

             BOOL GlobalUnfix(hMem)

             Эта  функция  освобождает  глобальную  память,  задаваемую

       Windows 3.0/Ref/3#7                                      = 106 =

             параметром hMem.
             Функция GlobalUnfix уменьшает счетчик  блокировки  объекта
             на  1. Блок полностью освобожден и готов к перемещению или
             сбрасыванию, если его  счетчик  блокировок  уменьшился  до
             нуля.  Изменять  счетчик блокировок объекта памяти могут и
             другие функции. Список этих функций  приведен  в  описании
             функции   GlobalFlags.   Каждый   раз,   когда  прикладная
             программа вызывает  функция  GlobalFix  для  объекта,  она
             должна вызвать для него функцию GlobalUnfix.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Определяет освобождаемый блок
                               глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение специфицирует  результат  выполнения
             функции.  Оно  равно  0,  если  счетчик блокировок объекта
             уменьшился  до  нуля.  В  противном  случае   возвращаемое
             значение не равно 0.

        ───────────────────────────────────────────────────────────────
                                     GlobalUnlock                              

        Синтаксис

             BOOL GlobalUnlock(hMem)

             Эта  функция разблокирует блок глобальной памяти, заданный
             параметром hMem.
             В   реальном  режиме,  если  блок  является  сбрасываемым,
             функция GlobalUnlock уменьшает  на  1  счетчик  блокировок
             объекта.   В   защищенном   режиме   функция  GlobalUnlock
             уменьшает  счетчик  блокировок  только  для   сбрасываемых
             объектов и автоматических сегментов данных.
             Блок  полностью  разблокируется и подвергается перемещению
             или  сбрасыванию,  если  счетчик  блокировок станет равным
             нулю. Изменять счетчик блокировок объекта памяти  могут  и
             другие  функции.  Список  этих функций приведен в описании
             функции GlobalFlags. В  этих  случаях  всякий  раз,  когда
             прикладная   программа   вызывает   для   объекта  функцию
             GlobalLock,  оан  должна  вызвать  для  него  же  функцияю
             GlobalUnlock.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Определяет освобождаемый блок
                               глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

       Windows 3.0/Ref/3#7                                      = 107 =


             Возвращаемое значение специфицирует  результат  выполнения
             функции.  Оно  равно  0,  если  счетчик блокировок объекта
             уменьшился  до  нуля.  В  противном  случае   возвращаемое
             значение  не  равно  0.  Прикладная  программа  не  должна
             полагаться  на  возвращаемое  значение   для   определения
             необходимых  последовательных вызовов функции GlobalUnlock
             для объекта памяти.

        ───────────────────────────────────────────────────────────────
                                     GlobalUnWire                              

        Синтаксис

             BOOL GlobalUnWire(hMem)

             Эта  функция  освобождает  сегмент  памяти,  который   был
             заблокирован  функцией  GlobalWire,  и  уменьшает  счетчик
             блокировки на 1.
             Блок  полностью  разблокируется и подвергается перемещению
             или сбрасыванию, если  счетчик  блокировок  станет  равным
             нулю.  Изменять  счетчик блокировок объекта памяти могут и
             другие функции. Список этих функций  приведен  в  описании
             функции   GlobalFlags.   Всякий   раз,   когда  прикладная
             программа вызывает для  объекта  функцию  GlobalWire,  она
             должна вызвать для него же функцияю GlobalUnWire.


             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Определяет освобождаемый блок
                               глобальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое   значение  определяет  результат  выполнения
             функции.  Оно  равно  TRUE,  если   сегмент   памяти   был
             освобожден,  т.е.  его  счетчик  блокировок  уменьшился до
             нуля. В противном случае оно равно FALSE.

        ───────────────────────────────────────────────────────────────
                                      GlobalWire                               

        Синтаксис

             LPSTR GlobalWire(hMem)

             Эта функция перемещает сегмент в младшие адреса  памяти  и
             блокирует  его - процедура крайне полезна, если прикладная
             программа должна блокировать сегмент на длительный  период
             времени.  Если  на  длительный  период времени блокируется
             сегмент из средних адресов памяти, то это создает проблемы

       Windows 3.0/Ref/3#7                                      = 108 =

             по  управлению  памятью,  уменьшая   размеры   наибольшего
             смежного   доступного  блока  памяти.  Функция  GlobalWire
             перемещает сегмент на самомый  нижний  адрес  и  блокирует
             его,  тем  самым  освобождая  область  памяти,  чаще всего
             используемую Windows.
             Всякий   раз,  когда  прикладная  программа  вызывает  для
             объекта функцию GlobalWire, она должна вызвать для него же
             функцияю  GlobalUnWire.  Функция  GlobalUnWire   уменьшает
             счетчик  блокировок  объекта.  Изменять счетчик блокировок
             объекта памяти могут и другие функции. Список этих функций
             приведен в описании функции GlobalFlags.
             Прикладная   программа   не   должна   вызывать    функцию
             GlobalUnlock для освобождения данного объекта.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HMEM  Идентифицирует сегмент, который
                               должен быть перемещен и заблокирован.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое  значение  указывает на новый адрес сегмента.
             Оно равно  NULL,  если  в  результате  выполнения  функции
             обнаружилась ошибка.

        ───────────────────────────────────────────────────────────────
                                      GrayString                               

        Синтаксис

             BOOL GrayString(hDC, hBrush, lpOutputFunc, lpData, nCount,
                             X, Y, nWidth, nHeight)

             Эта  функция  выводит  символьную  строку  серого  цвета в
             заданное место. GrayString выполняет эту  операцию  в  три
             этапа:
             - преобразует символы текста в графсимволы, создавая растр
             в памяти;
             - изменяет цвет растра на серый;
             - выводит растр на экран дисплея.
             Функция  изменяет  цвет  строки  на  серый  независимо  от
             выбранных кисти  и  фона.  Функция  GrayString  использует
             текущий   выбранный  для  контекста  устройства  (задается
             параметром hDC) шрифт.
             Если параметр  lpOutputFunc  равен  NULL,  GDI  использует
             функцию   TextOut,  и  параметр  lpData  содержит  длинный
             указатель на выводимую строку символов.  Если  символы  не
             могут  быть  выведены с помощью функции TextOut (например,
             строка  сохранена   как   растровая   карта),   прикладная
             программа  должна  предоставить  свою  собственную функцию
             вывода.


       Windows 3.0/Ref/3#7                                      = 109 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hBrush            HBRUSH Определяет   кисть,  используемую
                               для вывода текста серого цвета.

             lpOutputFunc      FARPROC Содержит адрес экземпляра проце-
                               дуры функции, предоставляемой прикладной
                               программой для вывода строки,  или равен
                               NULL, если для вывода строки применяется
                               функция TextOut.

             lpData            DWORD Содержит длинный указатель на дан-
                               ные, передаваемые в функцию вывода. Если
                               параметр lpOutputFunc равен NULL, lpData
                               должен  быть длинным указателем на выво-
                               димую строку.

             nCount            int Определяет число выводимых символов.
                               Если параметр nCount равен 0, GrayString
                               вычисляет длину строки (в предположении,
                               что  lpData  - это указатель на строку).
                               Если nCount равен -1,  и функция, на ко-
                               торую указывает lpOutputFunc, возвращает
                               0,  изображение выводится,  но не серого
                               цвета.

             X                 int  Определяет логическую координату х
                               начальной позиции прямоугольника,  в ко-
                               торый заключена строка.

             Y                 int Определяет  логическую  координату y
                               начальной позиции прямоугольника,  в ко-
                               торый заключена строка.

             nWidth            int Определяет ширину (в логических еди-
                               ницах) прямоугольника,  в который заклю-
                               чена строка.  Если параметр nWidth равен
                               0,  функция GrayString вычисляет  ширину
                               области,  предполагая,  что lpData - это
                               указатель на строку.

             nHeight           int Определяет высоту (в логических еди-
                               ницах) прямоугольника,  в который заклю-
                               чена строка. Если параметр nHeight равен
                               0,  функция  GrayString вычисляет высоту
                               области,  предполагая,  что lpData - это
                               указатель на строку.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/3#7                                      = 110 =

             Возвращаемое   значение  определяет  результат  выполнения
             функции. Оно не  равно  0,  если  вывелась  строка  серого
             цвета. Если возвращаемое значение равно 0, это значит, что
             произошла одна из следующих ошибок:
             -  возвратила  0  или  функция TextOut или функция вывода,
             предоставляемая прикладной программой;
             -  недостаточно  доступной  памяти  для создания растровой
             карты для вывода серым цветом.

        Примечания

             Прикладная программа может выводить строку серого цвета на
             устройстве, поддерживающем  сплошной  серый  цвет,  и  без
             вызова    функции    GrayColor.    Для    вывода   текста,
             представляющего  собой   запрещенную   в   данный   момент
             операцию,   используется  системный  цвет  COLOR_GRAYTEXT,
             который  является   системным   сплошным   серым   цветом.
             Прикладная программа может вызвать функцию GetSysColor для
             получения цветового значения для COLOR_GRAYTEXT. Если цвет
             отличен  от  нуля  (черный),  прикладная  программа  может
             вызвать функция SetTextColor для установки цвета текста  в
             это значение, и затем непосредственно вывести строку. Если
             возвращаемый  цвет  черный, то прикладная программа должна
             вызвать функцию GrayString для вывода строки серого цвета.

             Функция    многократного    вызова   должна   использовать
             соглашения вызова для языка Pascal и  быть  объявлена  как
             FAR.

         Функция многократного вызова

             BOOL FAR PASCAL OutputFunc(hDC, lpData, nCount)
             HDC hDC;
             DWORD lpData;
             int nCount;

             OutputFunc    является   шаблоном   для   имени   функции,
             предоставляемой  прикладной  программой.  Фактическое  имя
             должно  быть  экпортировано путем включения его в оператор
             EXPORTS в файл определения модуля прикладной программы.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               Идентифицирует контекст устройства
                               памяти с растровой картой, ширина и
                               высота которой определена параметрами
                               nWidth и nHeight соответственно.

             lpData            Указывает на выводимую символьную
                               строку.

             nCount            Определяет количество выводимых
                               символов.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 111 =


        Возвращаемое значение

             Возвращаемое значение не равно 0, если функция выполнилась
             успешно. В противном случае оно равно 0.

        Примечания

             Эта    функция   вывода   (OutputFunc)   должна   выводить
             изображение относительно координат (0, 0), а  не  (X,  Y).
             Адрес, передаваемый как параметр lpOutputFunc, должен быть
             создан  с  помощью  MaкeProcInstance, и имя функции вывода
             должно  быть  экспортировано;  она   должна   быть   точно
             определена  в  операторе  EXPORTS файла определения модуля
             прикладной программы.

             Перед использованием этой функции должен быть выбран режим
             отображения MM_TEXT.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 112 =

                                     InflateRect                               

        Синтаксис

             void InflateRect(lpRect,X,Y)

             Эта функция  служит для расширения или уменьшения ширины и
             высоты  заданного  прямоугольника.   Функция   InflateRect
             расширяет   на   X   единиц   влево   и   вправо   границы
             прямоугольника и расширяет  высоту  на  Y  единиц  вниз  и
             вверх. Параметры  X  или  Y  являются  целыми  со  знаком:
             положительные  значения  увеличивают   ширину   и   высоту
             прямоугольника, а отрицательные значения уменьшают их.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на модифицируемую
                               структуру данных типа RECT.

             X                 int  Определяет, насколько увеличивается
                               или уменьшается ширина прямоугольника.
                               Параметр должен быть отрицательным для
                               уменьшения ширины.

             Y                 int  Определяет, насколько увеличивается
                               или уменьшается высота прямоугольника.
                               Параметр должен быть отрицательным для
                               уменьшения высоты.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Значения координат  прямоугольника  не  должны быть больше
             32767 и меньше -32767  единиц.  Параметры  X  и  Y  должны
             выбираться    осторожно   для   предотвращения   получения
             некорректных прямоугольников.

        ───────────────────────────────────────────────────────────────
                                    InitAtomTable                              

        Синтаксис

             BOOL InitAtomTable(nSize)

             Эта функция    инициализирует    хеш-таблицу    атомов   и
             устанавливает ее размер,  определяемый  параметром  nSize.
             Если  эта функция не была вызвана,  то по умолчанию размер
             хеш-таблицы атомов устанавливается  равным  37,  определяя
             максимальное число атомов равным 37.

       Windows 3.0/Ref/3#7                                      = 113 =


             Эта функция  должна вызываться перед любой другой функцией
             управления атомами.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nSize             int  Определяет размер (в записях)
                               хеш-таблицы атомов. Это значение должно
                               быть первичным числом.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно нулю,  если функция завершена успешно. В
             противном случае оно равно 0.

        Примечания

             Если прикладная программа использует большое число атомов,
             она может уменьшить время, требуемое на поиск и добавление
             атома увеличив размер таблицы атомов.  Однако это приведет
             к увеличению объема памяти, требуемого для работы таблицы.

             Размер глобальной таблицы атомов не может быть изменен  со
             значения, используемого по умолчанию и равного 37.

        ───────────────────────────────────────────────────────────────
                                    InSendMessage                              

        Синтаксис

             BOOL InSendMessage( )

             Эта функция определяет,  обрабатывает ли  текущая  функция
             окна сообщение,  которое передается ему посредством вызова
             функции SendMessage.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно   TRUE,   если  функция  окна  обрабатывает
             сообщение,  посланное  ему  с   помощью   SendMessage.   В
             противном случае равно FALSE.

        Примечание

             Эта функция  обычно используется прикладной программой для
             определения того,  как быть в случае  ошибки,  если  окно,
             которое   обрабатывает  сообщение,  не  является  активным
             окном. Например, если активное окно использует SendMessage

       Windows 3.0/Ref/3#7                                      = 114 =

             для посылки запроса на информацию в другое окно, последнее
             не  может  стать  активным  до  тех  пор,  пока   ему   не
             возвратится    управление    из    функции    SendMessage.
             Единственным методом для  неактивного  окна  информировать
             пользователя   об   ошибке,   является   создание   панели
             сообщения.

        ───────────────────────────────────────────────────────────────
                                  InsertMenu  [3.0]                            

        Синтаксис

             BOOL InsertMenu(hMenu,nPosition,wFlags,wIDNewItem,
                                                            lpNewItem)

             Эта функция  вставляет  новый  элемент  меню   в   позицию
             определяемую параметром  nPosition,  при  этом  оставшиеся
             элементы смещаются  вниз.  Состояние   элемента   задается
             параметром wFlags.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует изменяемое меню.

             nPosition         WORD  Определяет элемент, перед которым
                               должен  быть вставлен новый элемент.
                               Интерпретация этого параметра зависит от
                               значения wFlags.

                               Если wFlags    nPosition
                               ────────────────────────────────────────
                               MF_BYPOSITION  Задает позицию элемента
                                              меню. Первый элемент - в
                                              позиции 0.

                                              Если nPosition равен -1,
                                              элемент добавляется к
                                              концу меню.

                               MF_BYCOMMAND   Определяет ID
                                              существующего элемента
                                              меню.
                               ────────────────────────────────────────

             wFlags            WORD Определяет как должен интерпретиро-
                               ваться параметр nPosition, и также опре-
                               деляет состояние нового  элемента  меню.
                               Он  может  содержать  одно или несколько
                               значений,  приведенных в разделе "Приме-
                               чания".

             wIDNewItem        WORD Идентифицирует  или  ID нового эле-
                               мента меню, или дескриптор накладываемо-

       Windows 3.0/Ref/3#7                                      = 115 =

                               го   меню,   если  wFlags  установлен  в
                               MF_POPUP.

             lpNewItem         LPSTR Определяет содержимое нового  эле-
                               мента   меню.   Если   wFlags   содержит
                               MF_STRING (по умолчанию),  то  lpNewItem
                               это дальний указатель на строку, оканчи-
                               вающуюся нулем. Если wFlags установлен в
                               MF_BITMAP,  то  lpNewItem содержит деск-
                               риптор растровой карты (HBITMAP) в млад-
                               шем  слове.  Если  wFlags  установлен  в
                               MF_OWNERDRAW,  то  lpNewItem  определяет
                               32-битовое значение,  которое прикладная
                               программа может использовать для опреде-
                               ления дополнительной информации для это-
                               го  элемента.  Это  32-битовое  значение
                               доступно прикладной программе через поле
                               itemData структуры данных,  которая  ад-
                               ресуется параметром lParam в сообщениях:

                               WM_MEASHUREITEM
                               WM_DRAWITEM

                               Эти сообщения посылаются при начальном
                               отображении элемента и при его изменении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно  TRUE,  если  изменение  было  успешным.  В
             противном случае равно FALSE.

        Примечания

             Каждый раз  при  изменении  меню  (независимо   от   того,
             отображается или нет на экране окно,  которому данное меню
             принадлежит) прикладная программа должна  вызвать  функцию
             DrawMenuBar.

             Каждая из нижеприведенных групп содержит взаимоисключающие
             флаги, которые не должны использоваться вместе:

             - MF_BYCOMMAND и MF_BYPOSITION.

             - MF_DISABLED, MF_ENABLED и MF_GRAYED.

             - MF_BITMAP, MF_STRING, MF_OWNERDRAW и MF_SEPARATOR.

             - MF_MENUBARBREAK и MF_MENUBREAK.

             - MF_CHECKED и MF_UNCHECKED.


       Windows 3.0/Ref/3#7                                      = 116 =

             Ниже приведен список  возможных  значений,  которые  можно
             использовать для параметра wFlags.

             Значение         Описание
             ──────────────────────────────────────────────────────────
             MF_BITMAP        Использовать растр как элемент. Младшее
                              слово lpNewItem является дескриптором
                              растровой карты.

             MF_BYCOMMAND     nPosition задает номер ID элемента меню.
                              Используется по   умолчанию.

             MF_BYPOSITION    nPosition задает позицию элемента  меню,
                              который должен быть изменен, вместо ID.

             MF_CHECKED       Расположить контрольную отметку рядом с
                              элементом. Если программа определяет соб-
                              ственную контрольную отметку (смотрите
                              SetMenuItemBitmap), в этом случае за эле-
                              ментом выводится растровая карта включен-
                              ной контрольной отметки.

             MF_DISABLED      Сделать недоступным элемент (т. е элемент
                              не может быть выбран) без изменения его
                              внешнего вида.

             MF_ENABLED       Сделать доступным элемент, разрешая его
                              выборку и восстановить его, если он был
                              сделан серым.

             MF_GRAYED        Сделать недоступным элемент и изменить
                              его цвет на серый для того, чтобы
                              показать, что он не может быть выбран.

             MF_MENUBARBREAK  Действие аналогично флагу MF_MENUBREAK
                              за исключением того, что для накладывае-
                              мого меню новый столбец отделяется от ста-
                              рого вертикальной разделительной линией

             MF_MENUBREAK     Для статических меню (типа меню-строки)
                              расположить элемент на новой строке. Для
                              накладываемого меню расположить элемент в
                              новом столбце без разделительной линии
                              между столбцами.

             MF_OWNERDRAW     Определяет, что данный элемент программа
                              будет рисовать     самостоятельно.    При
                              исходном отображении   элемента,    окно,
                              которому принадлежит это меню получает
                              сообщение WM_MEASHUREITEM, для определения
                              его высоты и ширины. Затем при каждом
                              изменении состояния     элемента     окну
                              посылается сообщение WM_DRAWITEM. Этот

       Windows 3.0/Ref/3#7                                      = 117 =

                              флаг не применим к элементу меню верхнего
                              уровня.

             MF_POPUP         Связать накладываемое меню с элементом
                              меню. Параметр wIDNewItem    -     это
                              дескриптор меню.  Добавляет накладываемое
                              меню к меню верхнего уровня или каскадное
                              меню к накладываемым меню.

             MF_SEPARATOR     Рисует горизонтальную разделительную
                              линию. Этот   флаг   можно   использовать
                              только с накладываемыми меню. Эта линия
                              не может быть сделана серой, недоступной
                              или  подсвеченной. Параметры lpNewItem и
                              wIDNewItem игнорируются.

             MF_STRING        Использовать строку как элемент (флаг по
                              умолчанию). lpNewItem - длинный указатель
                              на символьную строку в коде ASCII, закан-
                              чивающуюся нулем.

             MF_UNCHECKED     Не располагать контрольную отметку рядом
                              с элементом.   Контрольная   отметка   не
                              используется если не использованы флаги ни
                              MF_CHECKED ни     MF_UNCHECKED.      Если
                              программа      определяет     собственную
                              контрольную       отметку       (смотрите
                              SetMenuItemBitmap),   в  этом  случае  за
                              элементом   выводится   растровая   карта
                              выключенной контрольной отметки.

        ───────────────────────────────────────────────────────────────
                                  IntersectClipRect                            

        Синтаксис

             int IntersectClipRect(hDC,X1,Y1,X2,Y2)

             Эта функция создает новую область  отсечения,  формируемую
             пересечением  текущей области и прямоугольника,  заданного
             X1, Y1,  X2 и Y2.  GDI отсекает  весь  последующий  вывод,
             выходящий за новые границы.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X1                int  Определяет логическую координату x
                               верхнего левого угла прямоугольника.

             Y1                int  Определяет логическую координату y
                               верхнего левого угла прямоугольника.


       Windows 3.0/Ref/3#7                                      = 118 =

             X2                int  Определяет логическую координату x
                               нижнего правого угла прямоугольника.

             Y2                int  Определяет логическую координату y
                               нижнего правого угла прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   тип   новой   области
             отсечения. Может принимать одно из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Новая область отсечения имеет
                               перекрываемые границы.

             ERROR             Некорректный контекст устройства.

             NULLREGION        Новая область отсечения пуста.

             SIMPLEREGION      Новая область отсечения не имеет
                               перекрываемых границ.
             ──────────────────────────────────────────────────────────

        Примечание

             Ширина прямоугольника,  определяемая (X2 - Х1)  не  должны
             превышать 32767 единиц.  Такое же ограничение налагается и
             на высоту прямоугольника.

        ───────────────────────────────────────────────────────────────
                                    IntersectRect                              

        Синтаксис

             int IntersectRect(lpDestRect,lpSrc1Rect,lpSrc2Rect)

             Эта функция  находит  пересечение  двух  прямоугольников и
             копирует его параметры в структуру данных  типа  RECT,  на
             которую  указывает параметр lpDestRect.  Пересечение - это
             наибольший    прямоугольник,    содержащийся    в    обоих
             прямоугольниках.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpDestRect        LPRECT  Указывает на структуру данных
                               типа RECT, в которую заносятся
                               координаты пересечения.

             lpSrc1Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую прямоугольник
                               источника.

       Windows 3.0/Ref/3#7                                      = 119 =


             lpSrc2Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую прямоугольник
                               источника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение        определяет        пересечение
             прямоугольников. Не  равно  нулю,  если  пересечение  двух
             прямоугольников  не  пусто.  Оно  равно  нулю,  если   это
             пересечение пусто.

        ───────────────────────────────────────────────────────────────
                                    InvalidateRect                             

        Синтаксис

             void InvalidateRect(hWnd,lpRect,bErase)

              Эта функция объявляет недействительной  ту  часть  области
             пользователя,     которая     расположена    в    заданном
             прямоугольнике,    добавляя    этот    прямоугольник     к
             модифицируемой  области  окна.  Некорректный прямоугольник
             совместно с другими  областями  в  модифицируемой  области
             помечается  для  перерисовывания,  когда  появляется новое
             сообщение WM_PAINT.  Некорректные области накапливаются  в
             модифицируемой  области  до  тех пор,  пока эта область не
             будет  обработана  при  появлении   следующего   сообщения
             WM_PAINT  или  объявлена  действительной с помощью функции
             ValidateRect или ValidateRgn.

             Параметр bErase  определяет,  будет  ли  стираться  фон  в
             модифицируемой  области  при ее обработке.  Если bErase не
             равен  нулю,  то  фон   стирается   при   вызове   функции
             BeginPaint;  если  bErase  равен  нулю,  то  фон  остается
             неизменным.  Если для любой части  модифицируемой  области
             bErase  не  равен 0,  фон стирается во всей области,  а не
             только в данной части.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND Идентифицирует окно, модифицируемая
                               область которой должна быть
                               скорректирована.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, которая определяет
                               прямоугольник (в координатах пользователя),
                               добавляемый к модифицируемой области.
                               Если параметр lpRect равен NULL, то все
                               окно добавляется к области.


       Windows 3.0/Ref/3#7                                      = 120 =

             bErase            BOOL  Определяет, должен ли стираться фон
                               в модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Windows посылает  в  окно  сообщение  WM_PAINT каждый раз,
             когда не пуста ее  модифицируемая  область  и  нет  других
             сообщений в очереди прикладной программы для этого окна.

        ───────────────────────────────────────────────────────────────
                                    InvalidateRgn                              

        Синтаксис

             void InvalidateRgn(hWnd,hRgn,bErase)

             Эта функция  объявляет  некорректной  ту   часть   области
             пользователя,  которая  расположена  в  заданной  области,
             добавляя  эту  область  к  модифицируемой  области   окна.
             Некорректная  область  совместно  с  другими  областями  в
             модифицируемой  области  помечается  для  перерисовывания,
             когда  появляется  новое сообщение WM_PAINT.  Некорректные
             области накапливаются в модифицируемой области до тех пор,
             пока   эта  область  не  будет  обработана  при  появлении
             следующего сообщения WM_PAINT или объявлена действительной
             с помощью функции ValidateRect или ValidateRgn.

             Параметр bErase  определяет,  будет  ли  стираться  фон  в
             модифицируемой области при ее обработке.  Если  bErase  не
             равен   нулю,   то   фон   стирается  при  вызове  функции
             BeginPaint;  если  bErase  равен  нулю,  то  фон  остается
             неизменным.  Если  для  любой части модифицируемой области
             bErase не равен 0,  фон стирается во всей  области,  а  не
             только в данной части.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND Идентифицирует окно, модифицируемая
                               область которого должна быть
                               скорректирована.

             hRgn              HRGN  Идентифицирует область,
                               добавляемую в модифицируемую область.

             bErase            BOOL  Определяет, должен ли стираться
                               фон в модифицируемой области.
             ──────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 121 =

        Возвращаемое значение

             Нет.

        Примечание

             Windows посылает в окно  сообщение  WM_PAINT  каждый  раз,
             когда  не  пуста  ее  модифицируемая  область и нет других
             сообщений в очереди прикладной программы для этого окна.

             Данная область  должна  быть  предварительно   создана   с
             помощью одной из функций работы с областями.

        ───────────────────────────────────────────────────────────────
                                      InvertRect                               

        Синтаксис

             void InvertRect(hDC,lpRect)

             Эта функция     инвертирует      содержимое      заданного
             прямоугольника.  В  монохромных  дисплеях  функция  делает
             белые  пиксели  черными  и  черные  -  белыми.  В  цветных
             дисплеях  инверсия  зависит  от того,  каким образом цвета
             генерируются  для  дисплея.  При  двукратном  вызове  этой
             функции     для     того    же    самого    прямоугольника
             восстанавливаются предшествующие цвета на экране дисплея.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, которая содержит логические
                               координаты инвертируемого прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция сравнивает  значения  полей границ и,  если нижняя
             граница меньше или равна  верхней,  а  правая  меньше  или
             равна левой, то прямоугольник не рисуется.

        ───────────────────────────────────────────────────────────────
                                      InvertRgn                                

        Синтаксис

             BOOL InvertRgn(hDC,hRgn)

       Windows 3.0/Ref/3#7                                      = 122 =


             Эта функция  инвертирует  цвета  в  области,  определяемой
             параметром  hRgn.  В  монохромных  дисплеях функция делает
             белые  пиксели  черными  и  черные  -  белыми.  В  цветных
             дисплеях  инверсия  зависит  от того,  каким образом цвета
             генерируются для дисплея.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hRgn              HRGN  Идентифицирует заливаемую область.
                               Координаты области задаются в единицах
                               устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно 0,  если функция выполнилась успешно.  В
             противном случае равно 0.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharAlpha [3.0]

        Синтаксис

             BOOL IsCharAlpha(cChar)

             Эта функция определяет  является  ли  символ  буквой.  Это
             определение выполняется   драйвером   языка,   на   основе
             критериев текущего  языка,  выбранного   пользователем   с
             использованием либо   программы   установки  либо  Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает  TRUE,  если  символ  является  буквой.
             Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharAlphaNumeric [3.0]

        Синтаксис

             BOOL IsCharAlphaNumeric(cChar)

             Эта функция  определяет  является  ли  символ  буквой  или

       Windows 3.0/Ref/3#7                                      = 123 =

             цифрой.  Это определение выполняется драйвером  языка,  на
             основе критериев текущего языка,  выбранного пользователем
             с использованием либо  программы  установки  либо  Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает TRUE,  если символ является буквой  или
             цифрой. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharLower [3.0]

        Синтаксис

             BOOL IsCharLower(cChar)

             Эта функция  определяет  относится  ли  символ  к  нижнему
             регистру. Это определение выполняется драйвером языка,  на
             основе критериев текущего языка,  выбранного пользователем
             с  использованием  либо  программы  установки либо Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает   TRUE,   если   это  символ  в  нижнем
             регистре. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharUpper [3.0]

        Синтаксис

             BOOL IsCharUpper(cChar)

             Эта функция  определяет  относится  ли  символ  к верхнему
             регистру.  Это определение выполняется драйвером языка, на
             основе критериев текущего языка,  выбранного пользователем
             с использованием либо  программы  установки  либо  Control
             Panel.


       Windows 3.0/Ref/3#7                                      = 124 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает  TRUE,  если  это  символ   в   верхнем
             регистре. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                       IsChild                                 

        Синтаксис

             BOOL IsChild(hWndParent,hWnd)

             Эта функция  указывает,  является  ли  окно,  определяемое
             параметром hWnd,  дочерним окном или прямым потомком окна,
             заданного параметром hWndParent.  Дочернее  окно  является
             прямым  потомком  данного  родительского  окна,  если  это
             родительское окно находится в цепочке  родительских  окон,
             которая  ведет от первоначального окна накладываемого типа
             к дочернему окну.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWndParent        HWND  Идентифицирует окно.

             hWnd              HWND  Идентифицирует проверяемое окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно TRUE,  если hWnd  является  дочерним  окном
             hWndParent. В противном случае оно равно FALSE.

        ───────────────────────────────────────────────────────────────
                              IsClipboardFormatAvailable                       

        Синтаксис

             BOOL IsClipboardFormatAvailable(wFormat)

             Эта функция  определяет  имеются  ли  в  системном  буфере
             данные указанного типа.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFormat           WORD  Определяет зарегистрированный
                               формат. Описание форматов системного
                               буфера приведено в функции
                               SetClipboardData.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 125 =


        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно  TRUE,  если  имеются   данные   указанного
             формата. В противном случае равно FALSE.

        Примечание

             Эта функция обычно вызывается во время обработки сообщения
             WM_INITMENU или WM_INITMENUPOPUP для определения, содержит
             ли  системный  буфер данные,  которые прикладная программа
             может склеить.  Если такие данные присутствуют, прикладная
             программа  обычно  разрешает  команду Paste (в меню Edit).

        ───────────────────────────────────────────────────────────────
                                   IsDialogMessage                             

        Синтаксис

             BOOL IsDialogMessage(hDlg,lpMsg)

             Эта функция определяет,  принадлежит ли  данное  сообщение
             немодальной панели    диалога,    определенной   hDlg,   и
             автоматически обрабатывает сообщение,  если это так. Когда
             функция   IsDialogMessage   обрабатывает   сообщение,  она
             проверяет сообщения клавиатуры и преобразует их в  команды
             для соответствующей панели диалога.  Например, клавиша Tab
             выбирает  следующий  блок  управления  или  группу  блоков
             управления,  а  клавиша  "стрелка вниз" выбирает следующий
             блок управления в группе.

             Если сообщение обрабатывается функцией IsDialogMessage, то
             оно  не  должно  посылаться  функциям TranslateMessage или
             DispatchMessage.  Это  происходит  потому,   что   функция
             IsDialogMessage выполняет все необходимые преобразования и
             передачи сообщений.

             Функция IsDialogMessage посылает функции диалога сообщение
             WM_GETDLGCODE  для определения,  какая клавиша должна быть
             обработана.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога.

             lpMsg             LPMSG Указывает на структуру данных типа
                               MSG, которая содержит сообщение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  обработано  ли   данное

       Windows 3.0/Ref/3#7                                      = 126 =

             сообщение.  Не  равно нулю,  если сообщение обработано,  и
             равно нулю в противоположном случае.

        Примечание

             Хотя функция IsDialogMessage предназначена для немодальной
             панели диалога, она может быть использована с любым окном,
             содержащим блоки  управления,  для  обеспечения  обработки
             клавиш так же, как в панели диалога.

        ───────────────────────────────────────────────────────────────
                                  IsDlgButtonChecked                           

        Синтаксис

             WORD IsDlgButtonChecked(hDlg,nIDButton)

             Эта функция определяет, имеет ли клавишный блок управления
             контрольную   отметку,   или   будет   ли  трехпозиционный
             клавишный блок управления сереть,  ставиться  на  контроль
             или  оставаться  в  прежнем состоянии.  IsDlgButtonChecked
             посылает    клавишному    блоку    управления    сообщение
             BM_GETCHECK.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога,
                               содержащую клавишный блок управления.

             nIDButton         int  Определяет целый ID клавишного
                               блока управления.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно нулю,  если данный блок управления имеет
             контрольную  отметку,  и  равно  нулю,   если   нет.   Для
             трехпозиционных  мягких клавиш возвращаемое значение равно
             2, если мягкая клавиша серая, 1, если мягкая клавиша имеет
             контрольную отметку, и 0 в противном случае.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsIconic

        Синтаксис

             BOOL IsIconic(hWnd)

             Функция определяет,  является ли окно минимизированным  (в
             виде иконы).


       Windows 3.0/Ref/3#7                                      = 127 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   не   равно   нулю,    если    окно
             минимизировано. Иначе оно равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsRectEmpty

        Синтаксис

             BOOL IsRectEmpty(lpRect)

             Эта функция  определяет  является  ли   пустым   указанный
             прямоугольник. Он пуст, если его ширина и/или высота равны
             нулю.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, содержащую заданный
                               прямоугольник.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  является  ли  указанный
             прямоугольник пустым.  Не равно нулю,  если  прямоугольник
             пуст. В противном случае равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsWindow

        Синтаксис

             BOOL IsWindow(hWnd)

             Эта функция     определяет     является      ли      окно,
             идентифицированное hWnd, допустимым существующим окном.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   является   ли    hWnd
             корректным окном.   Не  равно  нулю,  если  hWnd  является
             допустимым окном. В противном случае равно нулю.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 128 =

                                    IsWindowEnable                             

        Синтаксис

             BOOL IsWindowEnable(hWnd)

             Эта функция  определяет,  доступно  или нет указанное окно
             для ввода с помощью мыши или клавиатуры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  доступно  ли  окно.  Не
             равно нулю,  если окно доступно.  В противном случае равно
             нулю.

        Примечание

             Дочернее окно  получает  вводимую  информацию только в том
             случае, если оно доступно и видимо.

        ───────────────────────────────────────────────────────────────
                                   IsWindowVisible                             

        Синтаксис

             BOOL IsWindowVisible(hWnd)

             Эта функция  возвращает  ненулевое  значение  каждый  раз,
             когда прикладная программа делает окно видимым,  используя
             функцию ShowWindow  (даже  если  указанное  окно полностью
             закрыто другим окном дочернего  или  накладываемого  типа,
             возвращаемое значение не равно нулю).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет имеется ли данное окно на
             экране. Не  равно  нулю,  если  данное  окно существует на
             экране. В противном случае оно равно нулю.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 129 =

                                                                               
       IsZoomed

        Синтаксис

             BOOL IsZoomed(hWnd)

             Эта функция  определяет,  расширено  ли  окно  до размеров
             экрана или нет.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение     определяет    было    ли    окно
             максимизировано.  Не равно нулю,  если окно  увеличено  до
             размеров  экрана,  и  равно  нулю,  если  окно нормального
             размера или в виде иконы.

        ───────────────────────────────────────────────────────────────
                                     InflateRect                               

        Синтаксис

             void InflateRect(lpRect,X,Y)

             Эта функция  служит для расширения или уменьшения ширины и
             высоты  заданного  прямоугольника.   Функция   InflateRect
             расширяет   на   X   единиц   влево   и   вправо   границы
             прямоугольника и расширяет  высоту  на  Y  единиц  вниз  и
             вверх. Параметры  X  или  Y  являются  целыми  со  знаком:
             положительные  значения  увеличивают   ширину   и   высоту
             прямоугольника, а отрицательные значения уменьшают их.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на модифицируемую
                               структуру данных типа RECT.

             X                 int  Определяет, насколько увеличивается
                               или уменьшается ширина прямоугольника.
                               Параметр должен быть отрицательным для
                               уменьшения ширины.

             Y                 int  Определяет, насколько увеличивается
                               или уменьшается высота прямоугольника.
                               Параметр должен быть отрицательным для
                               уменьшения высоты.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/3#7                                      = 130 =

             Нет.

        Примечание

             Значения координат  прямоугольника  не  должны быть больше
             32767 и меньше -32767  единиц.  Параметры  X  и  Y  должны
             выбираться    осторожно   для   предотвращения   получения
             некорректных прямоугольников.

        ───────────────────────────────────────────────────────────────
                                    InitAtomTable                              

        Синтаксис

             BOOL InitAtomTable(nSize)

             Эта функция    инициализирует    хеш-таблицу    атомов   и
             устанавливает ее размер,  определяемый  параметром  nSize.
             Если  эта функция не была вызвана,  то по умолчанию размер
             хеш-таблицы атомов устанавливается  равным  37,  определяя
             максимальное число атомов равным 37.

             Эта функция  должна вызываться перед любой другой функцией
             управления атомами.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nSize             int  Определяет размер (в записях)
                               хеш-таблицы атомов. Это значение должно
                               быть первичным числом.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно нулю,  если функция завершена успешно. В
             противном случае оно равно 0.

        Примечания

             Если прикладная программа использует большое число атомов,
             она может уменьшить время, требуемое на поиск и добавление
             атома увеличив размер таблицы атомов.  Однако это приведет
             к увеличению объема памяти, требуемого для работы таблицы.

             Размер глобальной таблицы атомов не может быть изменен  со
             значения, используемого по умолчанию и равного 37.

        ───────────────────────────────────────────────────────────────
                                    InSendMessage                              

        Синтаксис


       Windows 3.0/Ref/3#7                                      = 131 =

             BOOL InSendMessage( )

             Эта функция определяет,  обрабатывает ли  текущая  функция
             окна сообщение,  которое передается ему посредством вызова
             функции SendMessage.

             Функция не имеет параметров.

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно   TRUE,   если  функция  окна  обрабатывает
             сообщение,  посланное  ему  с   помощью   SendMessage.   В
             противном случае равно FALSE.

        Примечание

             Эта функция  обычно используется прикладной программой для
             определения того,  как быть в случае  ошибки,  если  окно,
             которое   обрабатывает  сообщение,  не  является  активным
             окном. Например, если активное окно использует SendMessage
             для посылки запроса на информацию в другое окно, последнее
             не  может  стать  активным  до  тех  пор,  пока   ему   не
             возвратится    управление    из    функции    SendMessage.
             Единственным методом для  неактивного  окна  информировать
             пользователя   об   ошибке,   является   создание   панели
             сообщения.

        ───────────────────────────────────────────────────────────────
                                  InsertMenu  [3.0]                            

        Синтаксис

             BOOL InsertMenu(hMenu,nPosition,wFlags,wIDNewItem,
                                                            lpNewItem)

             Эта функция  вставляет  новый  элемент  меню   в   позицию
             определяемую параметром  nPosition,  при  этом  оставшиеся
             элементы смещаются  вниз.  Состояние   элемента   задается
             параметром wFlags.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует изменяемое меню.

             nPosition         WORD  Определяет элемент, перед которым
                               должен  быть вставлен новый элемент.
                               Интерпретация этого параметра зависит от
                               значения wFlags.

                               Если wFlags    nPosition
                               ────────────────────────────────────────
                               MF_BYPOSITION  Задает позицию элемента

       Windows 3.0/Ref/3#7                                      = 132 =

                                              меню. Первый элемент - в
                                              позиции 0.

                                              Если nPosition равен -1,
                                              элемент добавляется к
                                              концу меню.

                               MF_BYCOMMAND   Определяет ID
                                              существующего элемента
                                              меню.
                               ────────────────────────────────────────

             wFlags            WORD Определяет как должен интерпретиро-
                               ваться параметр nPosition, и также опре-
                               деляет состояние нового  элемента  меню.
                               Он  может  содержать  одно или несколько
                               значений,  приведенных в разделе "Приме-
                               чания".

             wIDNewItem        WORD Идентифицирует  или  ID нового эле-
                               мента меню, или дескриптор накладываемо-
                               го   меню,   если  wFlags  установлен  в
                               MF_POPUP.

             lpNewItem         LPSTR Определяет содержимое нового  эле-
                               мента   меню.   Если   wFlags   содержит
                               MF_STRING (по умолчанию),  то  lpNewItem
                               это дальний указатель на строку, оканчи-
                               вающуюся нулем. Если wFlags установлен в
                               MF_BITMAP,  то  lpNewItem содержит деск-
                               риптор растровой карты (HBITMAP) в млад-
                               шем  слове.  Если  wFlags  установлен  в
                               MF_OWNERDRAW,  то  lpNewItem  определяет
                               32-битовое значение,  которое прикладная
                               программа может использовать для опреде-
                               ления дополнительной информации для это-
                               го  элемента.  Это  32-битовое  значение
                               доступно прикладной программе через поле
                               itemData структуры данных,  которая  ад-
                               ресуется параметром lParam в сообщениях:

                               WM_MEASHUREITEM
                               WM_DRAWITEM

                               Эти сообщения посылаются при начальном
                               отображении элемента и при его изменении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно  TRUE,  если  изменение  было  успешным.  В
             противном случае равно FALSE.

       Windows 3.0/Ref/3#7                                      = 133 =


        Примечания

             Каждый раз  при  изменении  меню  (независимо   от   того,
             отображается или нет на экране окно,  которому данное меню
             принадлежит) прикладная программа должна  вызвать  функцию
             DrawMenuBar.

             Каждая из нижеприведенных групп содержит взаимоисключающие
             флаги, которые не должны использоваться вместе:

             - MF_BYCOMMAND и MF_BYPOSITION.

             - MF_DISABLED, MF_ENABLED и MF_GRAYED.

             - MF_BITMAP, MF_STRING, MF_OWNERDRAW и MF_SEPARATOR.

             - MF_MENUBARBREAK и MF_MENUBREAK.

             - MF_CHECKED и MF_UNCHECKED.

             Ниже приведен список  возможных  значений,  которые  можно
             использовать для параметра wFlags.

             Значение         Описание
             ──────────────────────────────────────────────────────────
             MF_BITMAP        Использовать растр как элемент. Младшее
                              слово lpNewItem является дескриптором
                              растровой карты.

             MF_BYCOMMAND     nPosition задает номер ID элемента меню.
                              Используется по   умолчанию.

             MF_BYPOSITION    nPosition задает позицию элемента  меню,
                              который должен быть изменен, вместо ID.

             MF_CHECKED       Расположить контрольную отметку рядом с
                              элементом. Если программа определяет соб-
                              ственную контрольную отметку (смотрите
                              SetMenuItemBitmap), в этом случае за эле-
                              ментом выводится растровая карта включен-
                              ной контрольной отметки.

             MF_DISABLED      Сделать недоступным элемент (т. е элемент
                              не может быть выбран) без изменения его
                              внешнего вида.

             MF_ENABLED       Сделать доступным элемент, разрешая его
                              выборку и восстановить его, если он был
                              сделан серым.

             MF_GRAYED        Сделать недоступным элемент и изменить
                              его цвет на серый для того, чтобы

       Windows 3.0/Ref/3#7                                      = 134 =

                              показать, что он не может быть выбран.

             MF_MENUBARBREAK  Действие аналогично флагу MF_MENUBREAK
                              за исключением того, что для накладывае-
                              мого меню новый столбец отделяется от ста-
                              рого вертикальной разделительной линией

             MF_MENUBREAK     Для статических меню (типа меню-строки)
                              расположить элемент на новой строке. Для
                              накладываемого меню расположить элемент в
                              новом столбце без разделительной линии
                              между столбцами.

             MF_OWNERDRAW     Определяет, что данный элемент программа
                              будет рисовать     самостоятельно.    При
                              исходном отображении   элемента,    окно,
                              которому принадлежит это меню получает
                              сообщение WM_MEASHUREITEM, для определения
                              его высоты и ширины. Затем при каждом
                              изменении состояния     элемента     окну
                              посылается сообщение WM_DRAWITEM. Этот
                              флаг не применим к элементу меню верхнего
                              уровня.

             MF_POPUP         Связать накладываемое меню с элементом
                              меню. Параметр wIDNewItem    -     это
                              дескриптор меню.  Добавляет накладываемое
                              меню к меню верхнего уровня или каскадное
                              меню к накладываемым меню.

             MF_SEPARATOR     Рисует горизонтальную разделительную
                              линию. Этот   флаг   можно   использовать
                              только с накладываемыми меню. Эта линия
                              не может быть сделана серой, недоступной
                              или  подсвеченной. Параметры lpNewItem и
                              wIDNewItem игнорируются.

             MF_STRING        Использовать строку как элемент (флаг по
                              умолчанию). lpNewItem - длинный указатель
                              на символьную строку в коде ASCII, закан-
                              чивающуюся нулем.

             MF_UNCHECKED     Не располагать контрольную отметку рядом
                              с элементом.   Контрольная   отметка   не
                              используется если не использованы флаги ни
                              MF_CHECKED ни     MF_UNCHECKED.      Если
                              программа      определяет     собственную
                              контрольную       отметку       (смотрите
                              SetMenuItemBitmap),   в  этом  случае  за
                              элементом   выводится   растровая   карта
                              выключенной контрольной отметки.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 135 =

                                  IntersectClipRect                            

        Синтаксис

             int IntersectClipRect(hDC,X1,Y1,X2,Y2)

             Эта функция создает новую область  отсечения,  формируемую
             пересечением  текущей области и прямоугольника,  заданного
             X1, Y1,  X2 и Y2.  GDI отсекает  весь  последующий  вывод,
             выходящий за новые границы.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X1                int  Определяет логическую координату x
                               верхнего левого угла прямоугольника.

             Y1                int  Определяет логическую координату y
                               верхнего левого угла прямоугольника.

             X2                int  Определяет логическую координату x
                               нижнего правого угла прямоугольника.

             Y2                int  Определяет логическую координату y
                               нижнего правого угла прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   тип   новой   области
             отсечения. Может принимать одно из следующих значений:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             COMPLEXREGION     Новая область отсечения имеет
                               перекрываемые границы.

             ERROR             Некорректный контекст устройства.

             NULLREGION        Новая область отсечения пуста.

             SIMPLEREGION      Новая область отсечения не имеет
                               перекрываемых границ.
             ──────────────────────────────────────────────────────────

        Примечание

             Ширина прямоугольника,  определяемая (X2 - Х1)  не  должны
             превышать 32767 единиц.  Такое же ограничение налагается и
             на высоту прямоугольника.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 136 =

                                    IntersectRect                              

        Синтаксис

             int IntersectRect(lpDestRect,lpSrc1Rect,lpSrc2Rect)

             Эта функция  находит  пересечение  двух  прямоугольников и
             копирует его параметры в структуру данных  типа  RECT,  на
             которую  указывает параметр lpDestRect.  Пересечение - это
             наибольший    прямоугольник,    содержащийся    в    обоих
             прямоугольниках.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpDestRect        LPRECT  Указывает на структуру данных
                               типа RECT, в которую заносятся
                               координаты пересечения.

             lpSrc1Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую прямоугольник
                               источника.

             lpSrc2Rect        LPRECT  Указывает на структуру данных
                               типа RECT, содержащую прямоугольник
                               источника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение        определяет        пересечение
             прямоугольников. Не  равно  нулю,  если  пересечение  двух
             прямоугольников  не  пусто.  Оно  равно  нулю,  если   это
             пересечение пусто.

        ───────────────────────────────────────────────────────────────
                                    InvalidateRect                             

        Синтаксис

             void InvalidateRect(hWnd,lpRect,bErase)

              Эта функция объявляет недействительной  ту  часть  области
             пользователя,     которая     расположена    в    заданном
             прямоугольнике,    добавляя    этот    прямоугольник     к
             модифицируемой  области  окна.  Некорректный прямоугольник
             совместно с другими  областями  в  модифицируемой  области
             помечается  для  перерисовывания,  когда  появляется новое
             сообщение WM_PAINT.  Некорректные области накапливаются  в
             модифицируемой  области  до  тех пор,  пока эта область не
             будет  обработана  при  появлении   следующего   сообщения
             WM_PAINT  или  объявлена  действительной с помощью функции
             ValidateRect или ValidateRgn.


       Windows 3.0/Ref/3#7                                      = 137 =

             Параметр bErase  определяет,  будет  ли  стираться  фон  в
             модифицируемой  области  при ее обработке.  Если bErase не
             равен  нулю,  то  фон   стирается   при   вызове   функции
             BeginPaint;  если  bErase  равен  нулю,  то  фон  остается
             неизменным.  Если для любой части  модифицируемой  области
             bErase  не  равен 0,  фон стирается во всей области,  а не
             только в данной части.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND Идентифицирует окно, модифицируемая
                               область которой должна быть
                               скорректирована.

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, которая определяет
                               прямоугольник (в координатах пользователя),
                               добавляемый к модифицируемой области.
                               Если параметр lpRect равен NULL, то все
                               окно добавляется к области.

             bErase            BOOL  Определяет, должен ли стираться фон
                               в модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Windows посылает  в  окно  сообщение  WM_PAINT каждый раз,
             когда не пуста ее  модифицируемая  область  и  нет  других
             сообщений в очереди прикладной программы для этого окна.

        ───────────────────────────────────────────────────────────────
                                    InvalidateRgn                              

        Синтаксис

             void InvalidateRgn(hWnd,hRgn,bErase)

             Эта функция  объявляет  некорректной  ту   часть   области
             пользователя,  которая  расположена  в  заданной  области,
             добавляя  эту  область  к  модифицируемой  области   окна.
             Некорректная  область  совместно  с  другими  областями  в
             модифицируемой  области  помечается  для  перерисовывания,
             когда  появляется  новое сообщение WM_PAINT.  Некорректные
             области накапливаются в модифицируемой области до тех пор,
             пока   эта  область  не  будет  обработана  при  появлении
             следующего сообщения WM_PAINT или объявлена действительной
             с помощью функции ValidateRect или ValidateRgn.


       Windows 3.0/Ref/3#7                                      = 138 =

             Параметр bErase  определяет,  будет  ли  стираться  фон  в
             модифицируемой области при ее обработке.  Если  bErase  не
             равен   нулю,   то   фон   стирается  при  вызове  функции
             BeginPaint;  если  bErase  равен  нулю,  то  фон  остается
             неизменным.  Если  для  любой части модифицируемой области
             bErase не равен 0,  фон стирается во всей  области,  а  не
             только в данной части.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND Идентифицирует окно, модифицируемая
                               область которого должна быть
                               скорректирована.

             hRgn              HRGN  Идентифицирует область,
                               добавляемую в модифицируемую область.

             bErase            BOOL  Определяет, должен ли стираться
                               фон в модифицируемой области.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Windows посылает в окно  сообщение  WM_PAINT  каждый  раз,
             когда  не  пуста  ее  модифицируемая  область и нет других
             сообщений в очереди прикладной программы для этого окна.

             Данная область  должна  быть  предварительно   создана   с
             помощью одной из функций работы с областями.

        ───────────────────────────────────────────────────────────────
                                      InvertRect                               

        Синтаксис

             void InvertRect(hDC,lpRect)

             Эта функция     инвертирует      содержимое      заданного
             прямоугольника.  В  монохромных  дисплеях  функция  делает
             белые  пиксели  черными  и  черные  -  белыми.  В  цветных
             дисплеях  инверсия  зависит  от того,  каким образом цвета
             генерируются  для  дисплея.  При  двукратном  вызове  этой
             функции     для     того    же    самого    прямоугольника
             восстанавливаются предшествующие цвета на экране дисплея.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.


       Windows 3.0/Ref/3#7                                      = 139 =

             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, которая содержит логические
                               координаты инвертируемого прямоугольника.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция сравнивает  значения  полей границ и,  если нижняя
             граница меньше или равна  верхней,  а  правая  меньше  или
             равна левой, то прямоугольник не рисуется.

        ───────────────────────────────────────────────────────────────
                                      InvertRgn                                

        Синтаксис

             BOOL InvertRgn(hDC,hRgn)

             Эта функция  инвертирует  цвета  в  области,  определяемой
             параметром  hRgn.  В  монохромных  дисплеях функция делает
             белые  пиксели  черными  и  черные  -  белыми.  В  цветных
             дисплеях  инверсия  зависит  от того,  каким образом цвета
             генерируются для дисплея.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             hRgn              HRGN  Идентифицирует заливаемую область.
                               Координаты области задаются в единицах
                               устройства.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Не равно 0,  если функция выполнилась успешно.  В
             противном случае равно 0.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharAlpha [3.0]

        Синтаксис

             BOOL IsCharAlpha(cChar)

             Эта функция определяет  является  ли  символ  буквой.  Это
             определение выполняется   драйвером   языка,   на   основе
             критериев текущего  языка,  выбранного   пользователем   с

       Windows 3.0/Ref/3#7                                      = 140 =

             использованием либо   программы   установки  либо  Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает  TRUE,  если  символ  является  буквой.
             Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharAlphaNumeric [3.0]

        Синтаксис

             BOOL IsCharAlphaNumeric(cChar)

             Эта функция  определяет  является  ли  символ  буквой  или
             цифрой.  Это определение выполняется драйвером  языка,  на
             основе критериев текущего языка,  выбранного пользователем
             с использованием либо  программы  установки  либо  Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает TRUE,  если символ является буквой  или
             цифрой. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharLower [3.0]

        Синтаксис

             BOOL IsCharLower(cChar)

             Эта функция  определяет  относится  ли  символ  к  нижнему
             регистру. Это определение выполняется драйвером языка,  на
             основе критериев текущего языка,  выбранного пользователем
             с  использованием  либо  программы  установки либо Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 141 =


        Возвращаемое значение

             Функция возвращает   TRUE,   если   это  символ  в  нижнем
             регистре. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsCharUpper [3.0]

        Синтаксис

             BOOL IsCharUpper(cChar)

             Эта функция  определяет  относится  ли  символ  к верхнему
             регистру.  Это определение выполняется драйвером языка, на
             основе критериев текущего языка,  выбранного пользователем
             с использованием либо  программы  установки  либо  Control
             Panel.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             cChar             char  Определяет проверяемый символ.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Функция возвращает  TRUE,  если  это  символ   в   верхнем
             регистре. Иначе она возвращает FALSE.

        ───────────────────────────────────────────────────────────────
                                       IsChild                                 

        Синтаксис

             BOOL IsChild(hWndParent,hWnd)

             Эта функция  указывает,  является  ли  окно,  определяемое
             параметром hWnd,  дочерним окном или прямым потомком окна,
             заданного параметром hWndParent.  Дочернее  окно  является
             прямым  потомком  данного  родительского  окна,  если  это
             родительское окно находится в цепочке  родительских  окон,
             которая  ведет от первоначального окна накладываемого типа
             к дочернему окну.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWndParent        HWND  Идентифицирует окно.

             hWnd              HWND  Идентифицирует проверяемое окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/3#7                                      = 142 =

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно TRUE,  если hWnd  является  дочерним  окном
             hWndParent. В противном случае оно равно FALSE.

        ───────────────────────────────────────────────────────────────
                              IsClipboardFormatAvailable                       

        Синтаксис

             BOOL IsClipboardFormatAvailable(wFormat)

             Эта функция  определяет  имеются  ли  в  системном  буфере
             данные указанного типа.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFormat           WORD  Определяет зарегистрированный
                               формат. Описание форматов системного
                               буфера приведено в функции
                               SetClipboardData.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно  TRUE,  если  имеются   данные   указанного
             формата. В противном случае равно FALSE.

        Примечание

             Эта функция обычно вызывается во время обработки сообщения
             WM_INITMENU или WM_INITMENUPOPUP для определения, содержит
             ли  системный  буфер данные,  которые прикладная программа
             может склеить.  Если такие данные присутствуют, прикладная
             программа  обычно  разрешает  команду Paste (в меню Edit).

        ───────────────────────────────────────────────────────────────
                                   IsDialogMessage                             

        Синтаксис

             BOOL IsDialogMessage(hDlg,lpMsg)

             Эта функция определяет,  принадлежит ли  данное  сообщение
             немодальной панели    диалога,    определенной   hDlg,   и
             автоматически обрабатывает сообщение,  если это так. Когда
             функция   IsDialogMessage   обрабатывает   сообщение,  она
             проверяет сообщения клавиатуры и преобразует их в  команды
             для соответствующей панели диалога.  Например, клавиша Tab
             выбирает  следующий  блок  управления  или  группу  блоков
             управления,  а  клавиша  "стрелка вниз" выбирает следующий
             блок управления в группе.


       Windows 3.0/Ref/3#7                                      = 143 =

             Если сообщение обрабатывается функцией IsDialogMessage, то
             оно  не  должно  посылаться  функциям TranslateMessage или
             DispatchMessage.  Это  происходит  потому,   что   функция
             IsDialogMessage выполняет все необходимые преобразования и
             передачи сообщений.

             Функция IsDialogMessage посылает функции диалога сообщение
             WM_GETDLGCODE  для определения,  какая клавиша должна быть
             обработана.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога.

             lpMsg             LPMSG Указывает на структуру данных типа
                               MSG, которая содержит сообщение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  обработано  ли   данное
             сообщение.  Не  равно нулю,  если сообщение обработано,  и
             равно нулю в противоположном случае.

        Примечание

             Хотя функция IsDialogMessage предназначена для немодальной
             панели диалога, она может быть использована с любым окном,
             содержащим блоки  управления,  для  обеспечения  обработки
             клавиш так же, как в панели диалога.

        ───────────────────────────────────────────────────────────────
                                  IsDlgButtonChecked                           

        Синтаксис

             WORD IsDlgButtonChecked(hDlg,nIDButton)

             Эта функция определяет, имеет ли клавишный блок управления
             контрольную   отметку,   или   будет   ли  трехпозиционный
             клавишный блок управления сереть,  ставиться  на  контроль
             или  оставаться  в  прежнем состоянии.  IsDlgButtonChecked
             посылает    клавишному    блоку    управления    сообщение
             BM_GETCHECK.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога,
                               содержащую клавишный блок управления.

             nIDButton         int  Определяет целый ID клавишного
                               блока управления.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 144 =


        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Не равно нулю,  если данный блок управления имеет
             контрольную  отметку,  и  равно  нулю,   если   нет.   Для
             трехпозиционных  мягких клавиш возвращаемое значение равно
             2, если мягкая клавиша серая, 1, если мягкая клавиша имеет
             контрольную отметку, и 0 в противном случае.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsIconic

        Синтаксис

             BOOL IsIconic(hWnd)

             Функция определяет,  является ли окно минимизированным  (в
             виде иконы).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   не   равно   нулю,    если    окно
             минимизировано. Иначе оно равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsRectEmpty

        Синтаксис

             BOOL IsRectEmpty(lpRect)

             Эта функция  определяет  является  ли   пустым   указанный
             прямоугольник. Он пуст, если его ширина и/или высота равны
             нулю.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpRect            LPRECT  Указывает на структуру данных
                               типа RECT, содержащую заданный
                               прямоугольник.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  является  ли  указанный
             прямоугольник пустым.  Не равно нулю,  если  прямоугольник
             пуст. В противном случае равно нулю.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 145 =

                                                                               
       IsWindow

        Синтаксис

             BOOL IsWindow(hWnd)

             Эта функция     определяет     является      ли      окно,
             идентифицированное hWnd, допустимым существующим окном.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   является   ли    hWnd
             корректным окном.   Не  равно  нулю,  если  hWnd  является
             допустимым окном. В противном случае равно нулю.

        ───────────────────────────────────────────────────────────────
                                    IsWindowEnable                             

        Синтаксис

             BOOL IsWindowEnable(hWnd)

             Эта функция  определяет,  доступно  или нет указанное окно
             для ввода с помощью мыши или клавиатуры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  доступно  ли  окно.  Не
             равно нулю,  если окно доступно.  В противном случае равно
             нулю.

        Примечание

             Дочернее окно  получает  вводимую  информацию только в том
             случае, если оно доступно и видимо.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsWindowVisible

        Синтаксис


       Windows 3.0/Ref/3#7                                      = 146 =

             BOOL IsWindowVisible(hWnd)

             Эта функция  возвращает  ненулевое  значение  каждый  раз,
             когда прикладная программа делает окно видимым,  используя
             функцию ShowWindow  (даже  если  указанное  окно полностью
             закрыто другим окном дочернего  или  накладываемого  типа,
             возвращаемое значение не равно нулю).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет имеется ли данное окно на
             экране. Не  равно  нулю,  если  данное  окно существует на
             экране. В противном случае оно равно нулю.

        ───────────────────────────────────────────────────────────────
                                                                               
       IsZoomed

        Синтаксис

             BOOL IsZoomed(hWnd)

             Эта функция  определяет,  расширено  ли  окно  до размеров
             экрана или нет.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует  окно.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение     определяет    было    ли    окно
             максимизировано.  Не равно нулю,  если окно  увеличено  до
             размеров  экрана,  и  равно  нулю,  если  окно нормального
             размера или в виде иконы.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 147 =

                                      KillTimer                                

        Синтаксис

             BOOL KillTimer(hWnd,nIDEvent)

             Эта функция  отменяет событие таймера,  идентифицированное
             параметрами hWnd и  nIDEvent.  Любые  ожидаемые  сообщения
             WM_TIMER,  связанные  с  таймером,  удаляются  из  очереди
             сообщений.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует окно, связанное с
                               данным событием таймера. Оно должно быть
                               тем же самым событием, которое было
                               определено при вызове функции SetTimer.

             nIDEvent          int  Определяет идентификатор события
                               таймера, которое должно быть отменено.
                               Если прикладная программа вызвала функцию
                               SetTimer с параметром hWnd равным NULL,
                               это должен быть идентификатор события,
                               возвращаемый функцией SetTimer. Если
                               при вызове функции SetTimer был указан
                               корректный дескриптор окна в качестве
                               параметра hWnd, это должно быть значение,
                               передаваемое функции SetTimer в качестве
                               параметра nIDEvent.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Оно не равно нулю, если событие отменено, и равно
             нулю,   если   функция   KillTimer    не    может    найти
             указанное событие таймера.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 148 =

                                       _lclose                                 

        Синтаксис

             int _lclose(hFile)

             Эта функция закрывает файл, определяемый параметром hFile.
             В результате файл становится недоступным  для  записи  или
             чтения.

             Аргумент hFile  возвращают  функции  создания или открытия
             файлов.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hFile             int Определяет дескриптор MS_DOS
                               закрываемого файла.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  был  ли  файл   успешно
             закрыт. Если файл закрыт,  функция возвращает ноль,  иначе
             -1.

        ───────────────────────────────────────────────────────────────
                                       _lcreate                                

        Синтаксис

             int _lcreate(lpPathName,iAttribute)

             Эта функция   открывает   файл   с   именем,  определяемым
             параметром lpPathName.  Параметр  iAttributes   определяет
             атрибуты файла,  когда функция его открывает. Если файл не
             существует, функция создает новый файл и открывает его для
             записи. Если файл существует функция обрезает его длину до
             нуля и открывает его для чтения и записи.  Указатель файла
             устанавливается на начало файла при его открытии.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpPathName        LPSTR  Указывает на строку, завершаемую
                               нулевым символом, которая содержит имя
                               открываемого файла. Строка должна
                               содержать символы из набора ANSI.

             iAttribute        int  Определяет атрибуты файла. Этот
                               параметр должен быть одним из следующих
                               значений:


       Windows 3.0/Ref/3#7                                      = 149 =

                               Значение   Описание
                               ────────────────────────────────────────
                               0          Обычный файл. Можно читать
                                          или писать без каких либо
                                          ограничений.

                               1          Только для чтения. Не может
                                          быть открыт для записи. Файл
                                          с таким же именем не может
                                          быть создан.

                               2          Скрытый. Не отображается при
                                          просмотре директории.

                               3          Системный. Не отображается
                                          при просмотре директории.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             При успешном завершении возвращаемое  значение  определяет
             дескриптор файла MS_DOS. Иначе оно равно -1.

        ───────────────────────────────────────────────────────────────
                                    LimitEmsPages                              

        Синтаксис

             void LimitEmsPages(dwKbytes)

             Эта функция ограничивает объем расширенной памяти, которую
             Windows предоставляет прикладной программе. Эта функция не
             ограничивает объем расширенной памяти,  которую прикладная
             программа может получить с помощью прямого вызова INT 67H.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             dwKbytes          DWORD  Определяет число килобайт
                               расширенной памяти к которой имеет
                               доступ прикладная программа.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Функция имеет эффект только в том случае, если расширенная
             память установлена в системе и используется Windows.  Если
             расширенная память  не  используется  Windows  то   данная
             функция не имеет никакого эффекта.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 150 =

                                       LineDDA                                 

        Синтаксис

             void LineDDA(X1,Y1,X2,Y2,lpLineFunc,lpData)

             Эта функция вычисляет всю последовательность точек  линии,
             начиная с точки, определяемой параметрами X1 и Y1 и кончая
             точкой,  определяемой параметрами X2 и Y2.  Конечная точка
             не  включается  в последовательность.  Для каждой точки на
             линии функция LineDDA вызывает предоставляемую  прикладной
             программой   функцию,   на   которую   указывает  параметр
             lpLineFunc,  передавая  ей  координаты  текущей  точки   и
             параметр lpData.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             X1                int  Определяет логическую координату х
                               первой точки линии.

             Y1                int  Определяет логическую координату y
                               первой точки линии.

             X2                int  Определяет логическую координату х
                               последней точки линии.

             Y2                int  Определяет логическую координату y
                               последней точки линии.

             lpLineFunc        FARPROC  Содержит адрес функции,
                               предоставляемой прикладной программой.
                               Смотрите раздел "Примечание".

             lpData            LPSTR  Указывает на предоставляемые
                               прикладной программой данные.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Адрес, передаваемый  в  параметре  lpLineFunc  должен быть
             создан с помощью функции МakeProcInstance.

             Функция многократного    вызова    должна     использовать
             соглашения   вызова   для  языка  Паскаль  и  должна  быть
             объявлена как FAR.  Функция  многократного  вызова  должна
             иметь вид:

             void FAR PASCAL  LineFunc(X,Y,lpData)
             int X;
             int Y;

       Windows 3.0/Ref/3#7                                      = 151 =

             LPSTR lpData;

             LineFunc - это метка-заполнитель для функции многократного
             вызова, предоставляемой прикладной программой. Фактическое
             имя должно быть экспортировано с помощью включения  его  в
             оператор EXPORTS  в  файле  определения  модуля прикладной
             программы.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             X                 Определяет логическую координату х
                               текущей точки.

             X                 Определяет логическую координату х
                               текущей точки.

             lpData            Длинный указатель на предоставляемые
                               прикладной программой данные.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Эта функция не возвращает значения.

        ───────────────────────────────────────────────────────────────
                                        LineTo                                 

        Синтаксис

             BOOL LineTo(hDC,X,Y)

             Эта функция  рисует  линию  от текущей позиции до позиции,
             определяемой   параметрами   X   и   Y   (конечная   точка
             исключается).  Линия  рисуется  выбранным  пером.  Если не
             произошла ошибка,  то текущая  позиция  устанавливается  в
             (X,Y).

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет логическую координату х
                               последней точки линии.

             Y                 int  Определяет логическую координату y
                               последней точки линии.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет была ли нарисована линия.
             Не равно 0,  если функция выполнилась успешно,  и равно 0,
             если произошла ошибка.
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 152 =

                                       _llseek                                 

        Синтаксис

             LONG _llseek(hFile,lOffset,iOrigin)

             Эта функция    перемещает    указатель   текущей   позиции
             предварительно открытого    файла.    Параметр     iOrigin
             определяет начальную    позицию    а   lOffset   смещение,
             относительно нее.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hFile             int Определяет дескриптор файла MS_DOS.

             lOffset           LONG  Определяет на какое число байт
                               указатель необходимо переместить.

             iOrigin           int  Определяет начальную позицию,
                               относительно которой перемещается
                               указатель. Он может быть одним из
                               следующих значений:

                               Значение   Описание
                               ────────────────────────────────────────
                               0          Перемещает указатель файла на
                                          lOffset байт относительно
                                          начала файла.

                               1          Перемещает указатель файла на
                                          lOffset байт относительно
                                          текущей позиции файла.

                               2          Перемещает указатель файла на
                                          lOffset байт относительно
                                          конца файла.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет новое положение указателя
             файла. В случае ошибки функция возвращает -1.

        Примечание

             Когда файл    открывается     первый     раз     указатель
             устанавливается на начало файла. Функция _llseek позволяет
             осуществить прямой доступ к файлу перемещая  указатель  на
             любое место файла.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 153 =

                                   LoadAccelerators                            

        Синтаксис

                HANDLE LoadAccelerators(hInstance,lpTableName)

             Эта функция      загружает      таблицу       ускорителей,
             идентифицируемую  параметром lpTableName,  из выполняемого
             файла  соответствующего   модуля,   заданного   параметром
             hInstance.

             Функция LoadAccelerators  загружает  таблицу  только в том
             случае,  если она  не  была  предварительно  загружена.  В
             противном  случае  она  возвращает  дескриптор загруженной
             таблицы.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               таблицу ускорителей.

             lpTableName       LPSTR  Указывает на строку, определяющую
                               имя таблицы ускорителей. Строка должна
                               быть символьной строкой, оканчивающейся
                               нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует  загруженную  таблицу
             ускорителей,  если функция завершена успешно.  В противном
             случае равно NULL.

        ───────────────────────────────────────────────────────────────
                                      LoadBitmap                               

        Синтаксис

             HBITMAP LoadBitmap(hInstance,lpBitmapName)

             Эта функция загружает ресурс растровой карты, определяемой
             параметром    lpBitmapName,    из    выполняемого    файла
             соответствующего модуля, заданного параметром hInstance.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               растровую карту.

             lpBitmapName      LPSTR  Указывает на строку, определяющую
                               имя растровой карты.  Строка должна быть

       Windows 3.0/Ref/3#7                                      = 154 =

                               символьной    строкой,    оканчивающейся
                               нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует загруженную растровую
             карту, если функция завершена успешно.  В противном случае
             равно NULL.

        Примечания

             Прикладная программа  каждую загруженную с помощью функции
             LoadBitmap растровой  карты  должна  удалять   с   помощью
             функции DeleteObject.     Это     также     относится    к
             предопределенным растровым картам, описанным ниже.

             Функцию LoadBitmap можно также использовать для доступа  к
             предопределенным растровым  картам,  используемым Windows.
             Для этого параметр hInstance должен  быть  равен  NULL,  а
             lpBitmapName должен содержать один из следующих значений:

             - OBM_BTNCORNERS

             - OBM_BTSIZE

             - OBM_CHECK

             - OBM_CHECKBOXES

             - OBM_CLOSE

             - OBM_COMBO

             - OBM_DNARROW

             - OBM_DN_ARROWD

             - OBM_LFARROW

             - OBM_LFARROWD

             - OBM_MNARROW

             - OBM_OLD_CLOSE

             - OBM_OLD_DNARROW

             - OBM_OLD_LFARROW

             - OBM_OLD_REDUCE

             - OBM_OLD_RESTORE

       Windows 3.0/Ref/3#7                                      = 155 =


             - OBM_OLD_RGARROW

             - OBM_OLD_UPARROW

             - OBM_OLD_ZOOM

             - OBM_REDUCE

             - OBM_REDUCED

             - OBM_RESTORE

             - OBM_RESTORED

             - OBM_RGARROW

             - OBM_RGARROWD

             - OBM_SIZE

             - OBM_UPARROW

             - OBM_UPARROWD

             - OBM_ZOOM

             - OBM_ZOOMD

             Растровые карты   с   именами,   начинающиеся   с  OBM_OLD
             использовались версиями Windows до 3.0

             Параметр lpBitmapName   может   также   быть    значением,
             создаваемым   функцией  MakeIntResource.  Если  это  имеет
             место,   ID   должен   располагаться   в   младшем   слове
             lpBitmapName, а старшее слово должно быть обнулено.

        ───────────────────────────────────────────────────────────────
                                      LoadCursor                               

        Синтаксис

                 HCURSOR (hInstance,lpCursorName)

             Эта функция загружает  ресурс  курсора,  идентифицируемого
             параметром    lpCursorName,    из    выполняемого    файла
             соответствующего модуля,  заданного параметром  hInstance.
             Функция  загружает курсор в память только,  если он не был
             предварительно загружен. В противном случае она возвращает
             дескриптор существующего ресурса.


       Windows 3.0/Ref/3#7                                      = 156 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               курсор.

             lpCursorName      LPSTR  Указывает на строку, определяющую
                               имя курсора.    Строка    должна    быть
                               символьной    строкой,    оканчивающейся
                               нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  загруженный курсор,
             если функция завершена успешно.  В противном случае  равно
             NULL.

        Примечания

             Функция LoadCursor    возвращает   корректный   дескриптор
             курсора только в том случае,  если  параметр  lpCursorName
             определяет ресурс  курсора.  Если этот параметр определяет
             любой другой тип ресурса  (например  икону),  возвращаемое
             значение не   равно   NULL,  даже  если  это  некорректный
             дескриптор курсора.

             Функция LoadCursor  может  также  быть  использована   для
             доступа    к    предварительно    определенным   курсорам,
             используемым Windows.  В этом  случае  параметр  hInstance
             должен  быть  установлен  в NULL,  а параметр lpCursorName
             может принимать одно из следующих значений:

             Значение      Описание
             ──────────────────────────────────────────────────────────
             IDC_ARROW     Стандартный курсор в виде стрелки.

             IDC_CROSS     Курсор в виде перекрестия.

             IDC_IBEAM     I-образный курсор для текста.

             IDC_ICON      Пустая икона.

             IDC_SIZE      Загружает курсор в виде квадрата с меньшим
                           квадратом в правом нижнем углу.

             IDC_SIZENEWS  Курсор панели размера со стрелками,
                           указывающими на северо-восток и юго-запад.

             IDC_SIZENS    Курсор панели размера со стрелками,
                           указывающими на север и юг.

             IDC_SIZENWSE  Курсор панели размера со стрелками,
                           указывающими на северо-запад и
                           юго-восток.

       Windows 3.0/Ref/3#7                                      = 157 =


             IDC_SIZEWE    Курсор панели размера со стрелками,
                           указывающими на восток и запад.

             IDC_UPARROW   Курсор в виде вертикальной стрелки.

             IDC_WAIT      Курсор в виде песочных часов.
             ──────────────────────────────────────────────────────────

             Параметр lpCursorName    может   также   быть   значением,
             созданным функцией MakeIntResource.  Если это имеет место,
             то ID должен располагаться в младшем слове lpCursorName, а
             старшее слово должно быть обнулено.

        ───────────────────────────────────────────────────────────────
                                       LoadIcon                                

        Синтаксис

             HICON LoadIcon(hInstance,lpIconName)

             Эта функция   загружает   ресурс  иконы,  идентифицируемый
             параметром    lpIconName,    из     выполняемого     файла
             соответствующего  модуля,  заданного параметром hInstance.
             Функция загружает икону в память только в том случае, если
             она  не была предварительно загружена.  В противном случае
             она возвращает дескриптор загруженного ресурса.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит икону.

             lpCursorName      LPSTR  Указывает на строку, определяющую
                               имя иконы. Строка должна быть символьной
                               строкой, оканчивающейся нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  загруженную  икону,
             если  функция завершена успешно.  В противном случае равно
             NULL.

        Примечание

             Функция LoadIcon может также быть использована для доступа
             к предварительно    определенным    иконам,   используемым
             Windows.  В этом случае  параметр  hInstance  должен  быть
             установлен в NULL, а параметр lpIconName должен иметь одно
             из следующих значений:


       Windows 3.0/Ref/3#7                                      = 158 =

             Значение         Описание
             ──────────────────────────────────────────────────────────
             IDI_APPLICATION  Икона прикладной программы по умолчанию.

             IDI_ASTERISK     Звездочка (используется в
                              информациционных сообщениях).

             IDI_EXCLAMATION  Восклицательный знак (используется  в
                              предупреждающих сообщениях).

             IDI_HAND         Икона, изображающая руку (используется в
                              серьезных  предупреждающих сообщениях).

             IDI_QUESTION     Вопросительный  знак (используется  в
                              сообщениях-подсказках).
             ──────────────────────────────────────────────────────────

             Параметр lpIconName может также быть значением,  созданным
             функцией MakeIntResource.  Если это  имеет  место,  то  ID
             должен располагаться в младшем слове lpIconName, а старшее
             слово должно быть обнулено.

        ───────────────────────────────────────────────────────────────
                                     LoadLibrary                               

        Синтаксис

             HANDLE LoadLibrary(lpLibFileName)

             Эта функция  загружает  модуль библиотеки,  содержащийся в
             указанном  файле,  и  возвращает  дескриптор  загруженного
             модуля.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpLibFileName     LPSTR  Указывает на  строку,  содержащую
                               имя библиотечного файла. Строка должна
                               быть оканчивающейся нулем символьной
                               строкой.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  идентифицирует  загруженный  модуль
             библиотеки.  Оно равно 0,  если данный  файл  не  является
             библиотечным файлом.  Возвращаемое значение меньшее чем 32
             определяет ошибку.  Ниже  приведен  список  кодов  ошибок,
             возвращаемых этой функцией:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             0                 Не хватает памяти.

             2                 Не найден файл.

       Windows 3.0/Ref/3#7                                      = 159 =


             3                 Не найден маршрут.

             5                 Попытка динамической связи с задачей.

             6                 Библиотека требует для каждой задачи
                               отдельного сегмента данных.

             10                Некорректная версия Windows.

             11                Неправильный EXE-файл. (не Windows или
                               ошибка в файле).

             12                Прикладная программа OS/2.

             13                Прикладная программа DOS 4.0.

             14                Неизвестный тип EXE-файла.

             15                Попытка из защищенного (стандартного или
                               расширенного режима процессора 80386)
                               загрузить программу, созданную для ранней
                               версии Windows.

             16                Попытка загрузить второй экземпляр
                               EXE-файла, содержащего несколько запи-
                               сываемыё сегментов данных.

             17                Попытка в режиме EMS с большим фреймом
                               отображения загрузить второй экземпляр
                               программы, которая подсоединяется
                               несколькими, неразделяемыми,
                               используемыми в данный момент DLL.

             18                Попытка в реальном режиме загрузить
                               прикладную программу, предназначенную
                               только для защищенного режима.

        ───────────────────────────────────────────────────────────────
                                       LoadMenu                                

        Синтаксис

             HMENU LoadMenu(hInstance,lpMenuName)

             Эта функция   загружает   ресурс   меню,  идентифицируемый
             параметром    lpMenuName,    из     выполняемого     файла
             соответствующего модуля, заданного параметром hInstance.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит меню.

       Windows 3.0/Ref/3#7                                      = 160 =


             lpMenuName      LPSTR  Указывает на строку, определяющую
                               имя меню. Строка должна быть символьной
                               строкой, оканчивающейся нулем.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует  загруженное  меню,
             если функция завершена успешно.  В противном случае  равно
             NULL.

        Примечание

             Параметр lpMenuName может также быть значением,  созданным
             функцией MakeIntResource.  Если это  имеет  место,  то  ID
             должен располагаться в младшем слове lpMenuName, а старшее
             слово должно быть обнулено.

        ───────────────────────────────────────────────────────────────
                                   LoadMenuIndirect                            

        Синтаксис

             HMENU LoadMenuIndirect(lpMenuTemplate)

             Эта функция  загружает  ресурс  меню,  заданный параметром
             lpMenuTemplate.   Шаблон,    задаваемый    lpMenuTemplate,
             представляет   набор  из  одной  или  нескольких  структур
             MENUITEMTEMPLATE,  каждая из которых может содержать  один
             или несколько элементов меню и меню накладываемого типа.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpMenuTemplate    LPSTR  Указывает на шаблон меню (который
                               является набором из одной или нескольких
                               структур MENUITEMTEMPLATE).
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует  загруженное  меню,
             если функция завершена успешно.  В противном случае  равно
             NULL.

        ───────────────────────────────────────────────────────────────
                                   LoadModule [3.0]                            

        Синтаксис

             HANDLE LoadModule(lpModuleName,lpParameterBlock)

             Эта функция  загружает  и  запускает  прикладную программу

       Windows 3.0/Ref/3#7                                      = 161 =

             Windows или создает новый экземпляр  работающей  программы
             Windows.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpModuleName      LPSTR  Указывает на строку, завершаемую
                               нулевым символом, которая содержит имя
                               файла запускаемой прикладной программы.
                               Если lpModuleName не содержит маршрут,
                               Windows ищет файл в следующем порядке:

                               1. В текущей директории.

                               2. В директории Windows. (Директория,
                                  в которой содержится файл WIN.COM).
                                  Эту директорию можно получить с
                                  помощью функции GetWindowsDirectory.

                               3. Системная директория Windows. (Это
                                  директория в которой содержится
                                  системные файлы типа KERNEL.EXE).
                                  Функция GetSystemDirectory
                                  возвращает эту функцию.

                               4. В директориях перечисленных в
                                  переменной среды PATH.

                               5. В директориях отображенных на сеть.

                               Если имя прикладной программы не
                               содержит расширения, то Windows
                               подразумевает .EXE.

             lpParameterBlock  LPVOID  Указывает на структуру данных,
                               состоящей из четырех полей, которая
                               определяет блок параметров. Эта структура
                               содержит следующие поля:

             Поле              Тип/Описание
             ──────────────────────────────────────────────────────────
             wEnvSeg           WORD  Определяет адрес сегмента среды,
                               в которой будет работать модуль. Windows
                               копирует собственную среду, если этот
                               параметр равен 0.

             lpCmdLine         LPSTR  Указывает на строку символов,
                               завершаемую нулевым символом, которая
                               содержит корректную командную строку.
                               Эта строку не должна в длину превышать
                               120 байт.

             lpCmdShow         LPVOID  Указывает на структуру данных,
                               содержащую два значения типа WORD.

       Windows 3.0/Ref/3#7                                      = 162 =

                               Первое значение должно всегда содержать
                               2. Второе значение определяет параметры
                               отображения окна. Смотрите описание
                               параметра nCmdShow в функции ShowWindow.

             dwReserved        DWORD  Зарезервировано и должно быть
                               NULL.

                               Все неиспользуемые поля должны быть
                               установлены в NULL, за исключением
                               lpCmdLine, который должен указывать на
                               нулевую строку, если вы не используете
                               этот параметр.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует  загруженный  модуль.
             Возвращаемое значение  меньшее  чем  32 определяет ошибку.
             Ниже  приведен  список  кодов  ошибок,  возвращаемых  этой
             функцией:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             0                 Не хватает памяти.

             2                 Не найден файл.

             3                 Не найден маршрут.

             5                 Попытка динамической связи с задачей.

             6                 Библиотека требует для каждой задачи
                               отдельного сегмента данных.

             10                Некорректная версия Windows.

             11                Неправильный EXE-файл. (не Windows или
                               ошибка в файле).

             12                Прикладная программа OS/2.

             13                Прикладная программа DOS 4.0.

             14                Неизвестный тип EXE-файла.

             15                Попытка из защищенного (стандартного или
                               расширенного режима процессора 80386)
                               загрузить программу, созданную для ранней
                               версии Windows.

             16                Попытка загрузить второй экземпляр
                               EXE-файла, содержащего несколько запи-

       Windows 3.0/Ref/3#7                                      = 163 =

                               сываемыё сегментов данных.

             17                Попытка в режиме EMS с большим фреймом
                               отображения загрузить второй экземпляр
                               программы, которая подсоединяется
                               несколькими, неразделяемыми,
                               используемыми в данный момент DLL.

             18                Попытка в реальном режиме загрузить
                               прикладную программу, предназначенную
                               только для защищенного режима.
             ──────────────────────────────────────────────────────────

        Примечание

             Функция WinExec предоставляет вам альтернативный метод для
             запуска программ.

        ───────────────────────────────────────────────────────────────
                                     LoadResource                              

        Синтаксис

             HANDLE LoadResource(hInstance,hResInfo)

             Эта функция     загружает    ресурс,    идентифицированный
             параметром     hResInfo,     из     выполняемого     файла
             соответствующего  модуля,  заданного параметром hInstance.
             Функция загружает ресурс в память  только  в  том  случае,
             если он не был предварительно загружен. В противном случае
             она возвращает дескриптор существующего ресурса.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               ресурс.

             hResInfo          HANDLE  Идентифицирует требуемый ресурс.
                               Предполагается, что этот дескриптор был
                               создан с использованием функции
                               FindResource.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   блок   глобальной
             памяти,  содержащий  данные соответствующего ресурса.  Оно
             равно NULL, если такого ресурса не существует.

        Примечание

             Ресурс фактически  не  загружается  до   тех   пор,   пока

       Windows 3.0/Ref/3#7                                      = 164 =

             LockResource   не   будет   вызвана   для   преобразования
             дескриптора,   возвращенного   LoadResource,   в   длинный
             указатель на данные ресурса.

        ───────────────────────────────────────────────────────────────
                                      LoadString                               

        Синтаксис

             int LoadString(hInstance,wID,lpBuffer,nBufferMax)

             Эта функция загружает  ресурс  строки,  идентифицированной
             параметром  wID,  из  выполняемого  файла соответствующего
             модуля,  заданного параметром hInstance.  Функция копирует
             строку в буфер,  на который указывает параметр lpBuffer, и
             добавляет завершающий символ 0.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hInstance         HANDLE  Идентифицирует экземпляр модуля,
                               выполняемый файл которого содержит
                               ресурс строки.

             wID               WORD  Определяет целый идентификатор
                               загружаемой строки.

             lpBuffer          LPSTR  Указывает на буфер в который
                               записывается строка.

             nBufferMax        int  Определяет максимальное число
                               символов, которые могут быть скопированы
                               в буфер. Строка усекается, если она
                               длиннее заданного размера буфера.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет    фактическое    число
             символов,  скопированных в буфер. Оно равно 0, если ресурс
             строки не существует.

        ───────────────────────────────────────────────────────────────
                                                                               
       LOBYTE

        Синтаксис

             BYTE LOBYTE(nInteger)

             Эта макрокоманда выделяет младший байт из короткого целого
             значения, задаваемого параметром nInteger.


       Windows 3.0/Ref/3#7                                      = 165 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             nInteger          int  Определяет преобразуемое значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  младший байт указанного
             параметра.

        ───────────────────────────────────────────────────────────────
                                      LocalAlloc                               

        Синтаксис

             HANDLE LocalAlloc(wFlags,wBytes)

             Эта функция  выделяет  wBytes  байт  памяти,  из локальной
             динамической  памяти.   Блок   памяти   может   быть   или
             фиксированным,  или  перемещаемым,  как задано в параметре
             wFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wFlags            WORD  Определяет, параметры выделяемой
                               памяти. Он может иметь одно или более
                               значений, приведенных ниже:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             LMEM_DISCARDABLE  Выделяет сбрасываемый блок памяти. Может
                               использоваться только с флагом
                               LMEM_MOVEABLE.

             LMEM_FIXED        Выделяет фиксированную  память.

             LMEM_MODIFY       Модифицирует флаг LMEM_DISCARDABLE. Может
                               использоваться только с флагом
                               LMEM_DISCARDABLE.

             LMEM_MOVEABLE     Выделяет перемещаемую память. Не может
                               использоваться с флагом LMEM_FIXED.

             LMEM_NOCOMPACT    Уплотнение блока или сбрасывание не будет
                               выполнено для удовлетворения запроса о
                               размещении.

             LMEM_NODISCARD    Сбрасывание блока не будет выполнено для
                               удовлетворения запроса о размещении.

             LMEM_ZEROINIT     Память обнуляется.

                               Выберите значение     LMEM_FIXED     или
                               LMEM_MOVEABLE,  затем комбинируйте его с
                               другими   флагами,   если    необходимо,

       Windows 3.0/Ref/3#7                                      = 166 =

                               используя поразрядный оператор OR.
             ──────────────────────────────────────────────────────────

             dwBytes           WORD  Определяет общее число выделяемых
                               байт.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует вновь выделенный блок
             локальной   памяти,  если  функция  завершена  успешно.  В
             противном случае оно равно NULL.

        Примечание

             Если сегмент  данных,  содержащий   динамическую   область
             памяти является  перемещаемым,  вызов  этой  функции может
             привести к  перемещению  сегмента  данных,  если   Windows
             требуется увеличить его размер,  а в том месте,  в котором
             он расположен   это   невозможно.    Для    того,    чтобы
             предотвратить перемещение   сегмента   данных   вы   может
             использовать функцию LockData,  которая  блокирует  его  в
             памяти.

             При успешном  завершении  эта  функция выделяет по крайней
             мере блок памяти требуемого  размера.  В  действительности
             она может  выделить  больший  объем.  Вы  может определить
             действительный объем выделенного блока  памяти  с  помощью
             функции LocalSize.

        ───────────────────────────────────────────────────────────────
                                     LocalCompact                              

        Синтаксис

             WORD LocalCompact(wMinFree)

             Эта функция выделяет  определенное  число  свободных  байт
             памяти,   заданное  параметром  wMinFree,  уплотняя,  если
             необходимо,  локальную динамическую память модуля. Функция
             проверяет   локальную   динамическую   память  на  наличие
             wMinFree свободных  байт  непрерывной  памяти.  Если   нет
             требумого    количества   байтов,   функция   LocalCompact
             уплотняет  локальную   память,   сначала   перемещая   все
             незаблокированные   перемещаемые  блоки  в  верхнюю  часть
             памяти.  Если  это   не   позволяет   получить   требуемое
             количество  свободного  пространства,  функция  сбрасывает
             незаблокированные сбрасываемые перемещаемые блоки  до  тех
             пор, пока требуемое пространство не будет получено.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wMinFree          WORD  Определяет число требуемых

       Windows 3.0/Ref/3#7                                      = 167 =

                               свободных байт. Если wMinFree равен 0,
                               то функция возвращает значение, но не
                               уплотняет память.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   число  байт  в  самом
             большом блоке свободной локальной памяти.

        ───────────────────────────────────────────────────────────────
                                     LocalDiscard                              

        Синтаксис

             HANDLE LocalDiscard(hMem)

             Эта функция  сбрасывает  блок  локальной памяти,  заданный
             параметром hMem.

             Блок локальной  памяти  сбрасывается,  но  его  дескриптор
             остается корректным.    Прикладная   программа   может   в
             дальнейшем использовать   этот   дескриптор   в    функции
             LocalRealloc, для   выделения   другого   блока  локальной
             памяти, который   будет   использовать   тот   же    самый
             дескриптор.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует сбрасываемый блок
                               локальной памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно NULL,  если функция  завершена  успешно.  В
             противном случае оно равно hMem.

        ───────────────────────────────────────────────────────────────
                                      LocalFlags                               

        Синтаксис

             WORD LocalFlags(hMem)

             Эта функция  возвращает  информацию  об  указанном   блоке
             локальной памяти.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 168 =


        Возвращаемое значение

             Возвращаемое значение  в  старшем  байте  содержит один из
             следующих флагов выделения памяти:

             Флаг              Описание
             ──────────────────────────────────────────────────────────
             LMEM_DISCARDABLE  Блок был помечен как сбрасываемый.

             LMEM_DISCARDED    Блок был сброшен.
             ──────────────────────────────────────────────────────────

             Младший байт   возвращаемого   значения  содержит  счетчик
             ссылок  на  блок.  Используйте  маску  LMEM_LOCKCOUNT  для
             получения  значения  счетчика  блокировки из возвращаемого
             значения.

        ───────────────────────────────────────────────────────────────
                                                                               
       LocalFree

        Синтаксис

             HANDLE LocalFree(hMem)

             Эта функция     очищает     блок     локальной     памяти,
             идентифицируемый  параметром  hMem,  и  делает  дескриптор
             этого блока (hMem) некорректным.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно NULL,  если функция  завершена  успешно.  В
             противном случае оно равно hMem.

        ───────────────────────────────────────────────────────────────
                                                                               
       LocalHandle

        Синтаксис

             HANDLE LocalHandle(wMem)

             Эта функция  возвращает   дескриптор   объекта   локальной
             памяти, адрес которого задается параметром wMem.


       Windows 3.0/Ref/3#7                                      = 169 =

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wMem              WORD  Определяет адрес объекта локальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   идентифицирует   объект  локальной
             памяти.

        ───────────────────────────────────────────────────────────────
                                      LocalInit                                

        Синтаксис

             BOOL LocalInit(wSegment,wStart,wEnd)

             Эта функция  инициализирует локальную динамическую область
             памяти в сегменте, определяемом параметром wSegment.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wSegment          WORD  Определяет адрес сегмента,
                               содержащего локальную динамическую
                               память.

             wStart            WORD  Определяет адрес начала локальной
                               динамической памяти внутри сегмента.

             wEnd              WORD  Определяет адрес конца локальной
                               динамической памяти внутри сегмента.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Если локальная   динамическая   память   инициализирована,
             возвращаемое значение не равно нулю.  В  противном  случае
             равно нулю.

        Примечание

             Если параметр  wStart  равен 0,  то по умолчанию начальная
             позиция для  локальной  динамической  памяти  определяется
             числом   байтов,  задаваемым  параметром  wEnd,  от  конца
             данного сегмента.     Например,     если     вы     хотите
             инициализировать локальную  область памяти размером в 4096
             байт, и хотите,  чтобы она начиналась с первого байта,  то
             вы должны указать wStart равным 0, и wEnd равным 4096.

             Функция LocalInit   для   сегмента   данных,   содержащего
             локальнцю динамическую память вызывает функцию GlobalLock.
             Это   не  позволяет  Windows  перемещать  сегмент  данных.
             Однако,  сегмент будет  перемещен,  если  выполняются  оба

       Windows 3.0/Ref/3#7                                      = 170 =

             следующих условия:

             1. Сегмент данных является перемещаемым.

             2. Прикладная  программа  вызывает  функции LocalAlloc или
                LocalRealloc, и в результате этого  Windows  приходится
                увеличить размеры    сегмента    данных,    содержащего
                локальную динамической области памяти.  Если Windows не
                может увеличить  размер  сегмента  данных,  содержащего
                локальную динамическую область памяти  без  перемещения
                сегмента, то Windows перемещает сегмент.

             Прикладная программа    может   явно   запретить   Windows
             перемещать сегмент данных  с  помощью  функции  LocalData,
             которая блокирует сегмент данных.

             Прикладная программа может разблокировать сегмент данных с
             помощью функции UnlockData.

        ───────────────────────────────────────────────────────────────
                                      LocalLock                                

        Синтаксис

             PSTR LocalLock(hMem)

             Эта функция блокирует блок локальной памяти,  определяемый
             параметром hMem.  Блок блокируется в  памяти  с  заданного
             адреса   и   его   счетчик   ссылок  увеличивается  на  1.
             Блокированная   память   не   подлежит   перемещению   или
             сбрасыванию. Блок остается заблокированным в памяти до тех
             пор,  пока его счетчик ссылок не уменьшится  до  нуля  при
             помощи функции LocalUnlock.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             В случае   успешного   завершения   возвращаемое  значение
             указывает на первый байт в блоке локальном  памяти.  Иначе
             оно равно NULL.

        ───────────────────────────────────────────────────────────────
                                     LocalReAlloc                              

        Синтаксис

             HANDLE LocalReAlloc(hMem,wBytes,wFlags)


       Windows 3.0/Ref/3#7                                      = 171 =

             Эта функция изменяет блок локальной  памяти,  определяемый
             параметром  hMem,  уменьшая  или  увеличивая его размер до
             числа байт,  заданного параметром wBytes,  или изменяя его
             параметры.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти, размер или параметры которого
                               изменяются.

             wBytes            WORD  Определяет новый размер блока
                               памяти.

             wFlags            WORD  Определяет, параметры блока памяти.
                               Он может иметь одно или более значений,
                               приведенных ниже:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             LMEM_DISCARDABLE  Сбрасываемый блок памяти.  Может исполь-
                               зоваться только с флагом LMEM_MOVEABLE.

             LMEM_MODIFY       Модифицирует флаги   памяти.    Параметр
                               wBytes   игнорируется.  Может  использо-
                               ваться только с флагом LMEM_DISCARDABLE.

             LMEM_MOVEABLE     Перемещаемая память.  Если wBytes  равен
                               нулю,  то  этот флаг приводит к тому что
                               фиксированный блок будет очищен или  пе-
                               ремещаемый  блок будет сброшен (если его
                               счетчик ссылок равен 0).  Если wBytes не
                               равен нулю,  а блок,  определяемый пара-
                               метром фиксированный, этот флаг позволя-
                               ет  переместить фиксированный блок в но-
                               вое место и изменить его размер.  (Заме-
                               тим,  что дескриптор, возвращаемый функ-
                               цией LocalRealloc в  этом  случае  может
                               отличаться от hMem).  Этот флаг не может
                               использоваться с флагом LMEM_MODIFY.

             LMEM_NOCOMPACT    Уплотнение блока или сбрасывание не  бу-
                               дет выполнено для удовлетворения запроса
                               о размещении. Этот флаг не может исполь-
                               зоваться с флагом LMEM_MODIFY.

             LMEM_NODISCARD    Сбрасывание блока не будет выполнено для
                               удовлетворения  запроса  о   размещении.
                               Этот флаг не может использоваться с фла-
                               гом LMEM_MODIFY.

             LMEM_ZEROINIT     Если размер блока памяти  увеличивается,
                               то  дополнительная  область  обнуляется.

       Windows 3.0/Ref/3#7                                      = 172 =

                               Этот флаг не может использоваться с фла-
                               гом LMEM_MODIFY.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение идентифицирует вновь выделенный блок
             локальной   памяти,  если  функция  завершена  успешно.  В
             противном случае оно равно NULL.

             Возвращаемое значение    всегда    идентично    hMem,   за
             исключением того   случая,   когда    используется    флаг
             LMEM_MOVEABLE для  перемещения фиксированного блока памяти
             в новую фиксированную позицию.

        Примечание

             Если сегмент  данных,  содержащий   динамическую   область
             памяти является  перемещаемым,  вызов  этой  функции может
             привести к  перемещению  сегмента  данных,  если   Windows
             требуется увеличить его размер,  а в том месте,  в котором
             он расположен   это   невозможно.    Для    того,    чтобы
             предотвратить перемещение   сегмента   данных   вы   может
             использовать функцию LockData,  которая  блокирует  его  в
             памяти.

        ───────────────────────────────────────────────────────────────
                                     LocalShrink                               

        Синтаксис

             WORD LocalShrink(hSeg,wSize)

             Эта функция  сжимает  указанную  динамическую  память   до
             размера, определяемого параметром wSize. Минимальный объем
             локальной динамической области памяти определяется в файле
             определения модуля прикладной программы.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hSeg              HANDLE  Идентифицирует сегмент данных
                               содержащий локальную динамическую память.

             wSize             WORD  Определяет размер (в байтах)
                               требуемой локальной динамической области
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет размер  локальной  динамической  области памяти
             после сжатия.


       Windows 3.0/Ref/3#7                                      = 173 =

        Примечание

             Если hSeg равен 0,  то Windows сжимает  локальную  область
             памяти в  текущем  сегменте данных.  Windows не сжимает ту
             часть сегмента  данных  которая  относится   к   стеку   и
             статическим переменным.

             Для определения   размера   сегмента   данных   вы  можете
             использовать функцию GlobalSize.

        ───────────────────────────────────────────────────────────────
                                      LocalSize                                

        Синтаксис

             WORD LocalSize(hMem)

             Эта функция  возвращает  текущий  размер  (в байтах) блока
             локальной памяти, заданного параметром hMem.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет размер (в байтах) заданного блока  памяти.  Оно
             равно нулю, если данный дескриптор некорректен.

        Примечание

             При выделении   памяти  фактический  размер  блока  памяти
             иногда больше требуемого.

        ───────────────────────────────────────────────────────────────
                                     LocalUnlock                               

        Синтаксис

             BOOL LocalUnlock(hMem)

             Эта функция    разблокирует    блок    локальной   памяти,
             определяемый параметром hMem,  и уменьшает  на  1  счетчик
             ссылок на блок. Блок полностью разблокируется и может быть
             перемещен или сброшен,  если счетчик ссылок станет  равным
             нулю.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hMem              HANDLE  Идентифицирует блок локальной
                               памяти.
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 174 =


        Возвращаемое значение

             Возвращаемое значение равно нулю,  если счетчик блокировок
             равен нулю.  В  противном  случае  возвращается  ненулевое
             значение.

        ───────────────────────────────────────────────────────────────
                                                                               
       LockData

        Синтаксис

             HANDLE LockData(Dummy)

             Эта макрокоманда  блокирует  текущий  сегмент   данных   в
             памяти.  Она  предназначена  для  использования в модулях,
             которые имеют перемещаемые сегменты данных.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             Dummy             int  Не используется. Должен быть равен
                               нулю.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             В случае  успешного   завершения   возвращаемое   значение
             идентифицирует  блокированный  сегмент  данных.  Иначе оно
             равно нулю.

        ───────────────────────────────────────────────────────────────
                                     LockResource                              

        Синтаксис

             LPSTR LockResource(hResData)

             Эта функция  возвращает  абсолютный  адрес  загруженного в
             память  ресурса,  идентифицируемого  параметром  hResData.
             Ресурс  блокируется  в памяти и данный адрес и его счетчик
             ссылок  увеличиваются  на  1.  Блокированный   ресурс   не
             подлежит перемещению или сбрасыванию.

             Ресурс остается  блокированным  в памяти до тех пор,  пока
             его счетчик ссылок не уменьшится  до  нуля  из-за  вызовов
             функции FreeResource.

             Если ресурс,  идентифицированный  hResData,  был  сброшен,
             функция  управления  соответствующим  ресурсом  (если  она
             имеется)    вызывается    перед   возвратом   из   функции
             LockResource. Функция  управления  ресурсом  может  заново
             считать  и  загрузить ресурс,  если это необходимо.  После

       Windows 3.0/Ref/3#7                                      = 175 =

             возврата  из  функции  управления  ресурсом,  LockResource
             делает   еще   одну   попытку  для  блокировки  ресурса  и
             возвращает ее результат.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hResData          HANDLE  Идентифицирует требуемый ресурс.
                               Предполагается, что этот дескриптор был
                               создан с помощью функции LoadResource.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение    указывает    на    первый    байт
             загруженного  ресурса,  если  ресурс  был  блокирован.   В
             противном случае, оно равно NULL.

        Примечания

             Использование в  качестве  параметра hResData дескриптора,
             возвращаемого функцией FindResource, приведет к ошибке.

             Используйте макрокоманду        UnlockResource         для
             разблокирования ресурса,  который был блокирован с помощью
             функции LockResource.

        ───────────────────────────────────────────────────────────────
                                     LockSegment                               

        Синтаксис

             HANDLE LockSegment(wSegment)

             Эта функция   блокирует   сегмент,  адрес  которого  задан
             параметром wSegment.  Если wSegment равен -1,  то  функция
             LockSegment блокирует текущий сегмент данных.

             За исключением   несбрасываемых  сегментов  при  работе  в
             защищенном (стандартном или расширенном) режиме,  сегменты
             блокируются в  памяти  по  данному  адресу  и  их  счетчик
             блокировок увеличивается на  1.  Блокированная  память  не
             подлежит перемещению   или   сбрасыванию   за  исключением
             ситуаций, когда   используется   функцию    GlobalRealloc.
             Сегмент остается заблокированным в памяти до тех пор, пока
             счетчик блокировок не равен нулю.

             В защищенном режиме функция увеличивает счетчик блокировок
             только сбрасываемых и автоматических сегментов данных.

             Для каждого   вызова  функции  LockSegment  для  сегмента,
             должен быть  вызов  UnlockSegment.  Функция  UnlockSegment
             уменьшает на  1  счетчик  блокировок сегмента.  На счетчик
             блокировок объекта памяти  могут  влиять  другие  функции.

       Windows 3.0/Ref/3#7                                      = 176 =

             Список таких   функций   приведен   в   описании   функции
             GlobalFlags.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             wSegment          WORD  Определяет адрес  блокируемого
                               сегмента. Если wSegment равен -1,
                               функция LockSegment блокирует текущий
                               сегмент данных.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             В случае  успешного   завершения   возвращаемое   значение
             идентифицирует сегмент.   Если   объект  был  сброшен  или
             возникла ошибка функция возвращает NULL.

        ───────────────────────────────────────────────────────────────
                                        _lopen                                 

        Синтаксис

             int _lopen(lpPathName,iReadWrite)

             Эта функция   открывает   файл   с   именем,  определяемым
             параметром lpPathName.  Параметр   iReadWrite   определяет
             режим доступа к открываемому файлу. Если файл существует и
             открывается только для записи,  функция  обрезает  его  до
             нулевого размера.  При  открытии  файла  указатель текущей
             позиции устанавливается на начало файла.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpPathName        LPSTR  Указывает на строку символов,
                               завершаемую нулевым символом, которая
                               содержит имя открываемого файла. Строка
                               должна содержать символы из набора ANSI.

             iReadWrite        int  Определяет должна ли функция
                               открывать файл для записи, чтения или
                               для записи и чтения. Этот параметр должен
                               содержать одно из следующих значений:

                 Значение      Описание
                 ───────────────────────────────────────────────────────
                 OF_READ       Открывает файл только для чтения.

                 OF_READWRITE  Открывает файл для чтения и записи.

                 OF_SHARE_COMPAT  Открывает файл в совместимом режиме,
                               позволяя другим процессам данной машины
                               открывать файл сколько угодно раз. Если
                               файл уже был открыт в другом режиме, то

       Windows 3.0/Ref/3#7                                      = 177 =

                               функция _lopen завершается по ошибке.

                 OF_SHARE_DENY_NONE  Открывает файл не запрещая другим
                               процессам доступа к файлу для чтения и
                               записи. Если   файл  уже  был  открыт  в
                               совместимом режиме,  то функция _lopen
                               завершается по ошибке.

                 OF_SHARE_DENY_READ  Открывает файл и запрещает другим
                               процессам доступ к файлу для чтения. Если
                               файл уже  был  открыт другим процессом в
                               режиме совместимости или для чтения,  то
                               функция _lopen завершается по ошибке.

                 OF_SHARE_DENY_WRITE  Открывает файл и запрещает другим
                               процессам доступ к файлу для записи. Если
                               файл уже  был  открыт другим процессом в
                               режиме совместимости или для записи,  то
                               функция _lopen завершается по ошибке.

                 OF_SHARE_EXCLUSIVE  Открывает файл в исключительном
                               режиме, запрещая другим процессам доступ
                               к  файлу для чтения и записи.  Если файл
                               уже был  открыт  в  другом  режиме   для
                               чтения или  записи,  то функция _lopen
                               завершается по ошибке.

                 OF_WRITE      Открывает файл только для записи.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  дескриптор  файла  DOS,
             если функция завершена успешно.  В противном  случае,  оно
             равно -1.

        ───────────────────────────────────────────────────────────────
                                                                               
       LOWORD

        Синтаксис

             WORD LOWORD(lInteger)

             Эта макрокоманда  возвращает младшее слово длинного целого
             значения, задаваемого параметром lInteger.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lInteger          DWORD  Определяет преобразуемое значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение


       Windows 3.0/Ref/3#7                                      = 178 =

             Возвращаемое значение  определяет  младшее  слово длинного
             значения.

        ───────────────────────────────────────────────────────────────
                                        LPtoDP                                 

        Синтаксис

             Функция LPtoDP   преобразует   логические  точки  в  точки
             устройтсва. Функция  LPtoDP  отображает  координаты   всех
             точек, задаваемых   параметром   lpPoints   из  логической
             системы координат  GDI  в  систему  координат  устройства.
             Преобразование зависит от текущего режима отображения.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hDC               HANDLE  Идентифицирует контекст
                               устройства.

             lpPoints          LPPOINT  Указывает на массив точек.
                               Каждая точка массива представлена
                               структурой типа POINT.

             nCount            int  Определяет число точек в массиве.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   все   ли  точки  были
             преобразованы. Если все точки были  преобразованы  оно  не
             равно нулю, иначе равно нулю.

        ───────────────────────────────────────────────────────────────
                                        _lread                                 

        Синтаксис

             int _lread(hFile,lpBuffer,wBytes)

             Эта функция  считывает  данные  из  файла,   определяемого
             параметром hFile.   Параметр   wBytes   определяет  размер
             считываемых данных.   Возвращаемое   значение   определяет
             действительное число считанных байт. Возвращаемое значение
             равное нулю говорит о том,  что функция  пыталась  считать
             EOF.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hFile             int  Определяет дескриптор файла MS-DOS,
                               из которого производится чтение.

             pBuffer          LPSTR  Указывает на буфер, в который
                               помещаются считываемые данные.

       Windows 3.0/Ref/3#7                                      = 179 =


             wBytes            WORD  Определяет число байт, которые
                               необходимо считать из файла.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   действительное  число
             считанных байт или  -1,  в  случае  возникновения  ошибки.
             Возвращаемое значение  меньшее  wBytes говорит о том,  что
             функция встретила конец файла (EOF) до того,  как  считала
             wBytes байт.

        ───────────────────────────────────────────────────────────────
                                       lstrcat                                 

        Синтаксис

             LPSTR  lstrcat(lpString1,lpString2)

             Эта функция  подсоединяет  строку  lpString2   к   строке,
             определяемой параметром lpString1,  помещает за полученной
             строкой завершающий нулевой символ  и  возвращает  дальний
             указатель на полученную строку (lpString1).

             Все строки должны быть меньше 64К.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString1         LPSTR  Указывает на массив байт,
                               содержащий строку символов, завершаемую
                               нулем, к которой подсоединяется
                               lpString2. Массив должен быть достаточно
                               велик, чтобы в нем поместилась
                               результирующая строка.

             lpString2         LPSTR  Указывает на строку, завершаемую
                               нулевым символом, которая подсоединяется
                               к lpString1.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение является lpString1.  В случае ошибки
             возвращается ноль.

        ───────────────────────────────────────────────────────────────
                                    lstrcmp [3.0]                              

        Синтаксис

             int lstrcmp(lpString1,lpString2)


       Windows 3.0/Ref/3#7                                      = 180 =

             Эта функция    сравнивает    две    строки,   определяемые
             параметрами lpString1    и    lpString2    и    возвращает
             соответствующее значение.  Сравнение выполняется на основе
             текущего языка,   выбранного   пользователем   с   помощью
             программы Control  Panel.  Сравнение  учитывает  регистры.
             Функция не эквивалентна функции strcmp исполняющей системы
             С.

             Все строки должны быть меньше 64К.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString1         LPSTR  Указывает на первую сравниваемую
                               строку, завершаемую нулевым символом.

             lpString2         LPSTR  Указывает на вторую сравниваемую
                               строку, завершаемую нулевым символом.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  является  ли  lpString1
             больше, равна  или  меньше  lpString2.  Оно   может   быть
             следующим:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             <0                lpString1 меньше lpString2.

             =0                lpString1 равно lpString2.

             >0                lpString1 больше lpString2.
             ──────────────────────────────────────────────────────────

        ───────────────────────────────────────────────────────────────
                                    lstrcmpi [3.0]                             

        Синтаксис

             int lstrcmpi(lpString1,lpString2)

             Эта функция    сравнивает    две    строки,   определяемые
             параметрами lpString1    и    lpString2    и    возвращает
             соответствующее значение.  Сравнение выполняется на основе
             текущего языка,   выбранного   пользователем   с   помощью
             программы Control  Panel.  Сравнение  учитывает  регистры.
             Функция эквивалентна функции strcmp исполняющей системы С.

             Все строки должны быть меньше 64К.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString1         LPSTR  Указывает на первую сравниваемую

       Windows 3.0/Ref/3#7                                      = 181 =

                               строку, завершаемую нулевым символом.

             lpString2         LPSTR  Указывает на вторую сравниваемую
                               строку, завершаемую нулевым символом.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет  является  ли  lpString1
             больше, равна  или  меньше  lpString2.  Оно   может   быть
             следующим:

             Значение          Описание
             ──────────────────────────────────────────────────────────
             <0                lpString1 меньше lpString2.

             =0                lpString1 равно lpString2.

             >0                lpString1 больше lpString2.
             ──────────────────────────────────────────────────────────

        ───────────────────────────────────────────────────────────────
                                    lstrcpy [3.0]                              

        Синтаксис

             LPSTR lstrcpy(lpString1,lpString2)

             Эта функция  копирует   lpString2,   включая   завершающий
             нулевой символ   по   адресу,   определяемому   параметром
             lpString1, и возвращает lpString1.

             Все строки должны быть меньше 64К.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             lpString1         LPSTR  Указывает на буфер в который
                               копируется lpString2. Он должен быть
                               достаточно велик, чтобы в нем поместилась
                               lpString2.

             lpString2         LPSTR  Указывает на завершаемую нулем
                               символьную строку.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  является  параметром  lpString1.  В
             случае возникновения ошибки оно равно нулю.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 182 =

                                                                               
       lstrlen

        Синтаксис

             int lstrlen(lpString)

             Эта функция  возвращает  длину  (в  байтах)  lpString,  не
             считая завершающего нулевого символа.

             Все строки должны быть меньше 64К.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение определяет длину lpString.

        ───────────────────────────────────────────────────────────────
                                       _lwrite                                 

        Синтаксис

             int _lwrite(hFile,lpBuffer,wBytes)

             Эта функция   записывает   данные   в  файл,  определяемый
             параметром hFile.   Параметр   wBytes   определяет   число
             записываемых байт   из  буфера,  определяемого  параметром
             lpBuffer.

             Параметры         Тип/Описание
             ──────────────────────────────────────────────────────────
             hFile             int  Определяет дескриптор файла MS-DOS,
                               в который производится запись.

             pBuffer           LPSTR  Указывает на буфер, в котором
                               содержатся записываемые данные.

             wBytes            WORD  Определяет число байт, которые
                               необходимо записать в файл.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   определяет   действительное  число
             записанных байт или  -1,  в  случае  возникновения  ошибки.

        Примечание

             Буфер, определяемый параметром lpBuffer не может превышать
             оставшуюся часть сегмента.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 183 =

                                     MAKEINTATOM                               

        Синтаксис

             LPSTR MAKEINTATOM(wInteger)

             Эта макрокоманда   создает   атом  целого  числа,  который
             представляет собой символьную строку десятичных цифр.

             Атомы целого числа,  созданные этой  макрокомандой,  могут
             быть добавлены в таблицу атомов с помощью функции AddAtom.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wInteger          (WORD) Определяет численное  значение
                               символьной строки атома.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Указывает на атом, созданный для заданного целого числа.

        Примечание

             Функция DeleteAtom всегда завершается успешно  для  атомов
             целых  чисел,  даже  если она ничего не делает,  а функция
             GetAtomName всегда   возвращает   значение  атома  в  виде
             строки.

        ───────────────────────────────────────────────────────────────
                                                                               
       MAKEINTRESOURCE

        Синтаксис

             LPSTR MAKEINTRESOURCE(nInteger)

             Эта макрокоманда  преобразует  целое  значение  в  длинный
             указатель   на   строку,  причем  старшее  слово  длинного
             указателя устанавливается равным нулю.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nInteger          int Определяет преобразуемое значение.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Указывает  на строку.

        ───────────────────────────────────────────────────────────────
                                       MAKELONG                                

        Синтаксис

       Windows 3.0/Ref/3#7                                      = 184 =


             DWORD MAKELONG(nLowWord,nHighWord)

             Эта макрокоманда  создает   беззнаковое   длинное   целое,
             объединяя  два  целых  значения,  определяемых параметрами
             nLowWord и nHighWord.


             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nLowWord          int Определяет младшее слово нового
                               длинного значения.

             nHighWord         int Определяет старшее слово нового
                               длинного значения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

              Определяет беззнаковое длинное целое значение.

        ───────────────────────────────────────────────────────────────
                                                                               
       MAKEPOINT

        Синтаксис

             POINT MAKEPOINT(lInteger)

             Эта макрокоманда   преобразует   длинное  целое  значение,
             содержащее x- и y-координаты  точки,  в  структуру  данных
             POINT.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lInteger          DWORD  Определяет x- и  y-координаты
                               точки.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет структуру данных POINT.

        ───────────────────────────────────────────────────────────────
                                   MakeProcInstance                            

        Синтаксис

             FARPROC MakeProcInstance(lpProc,hInstance)

             Эта функция  создает  адрес  экземпляра  процедуры.  Адрес
             экземпляра   процедуры  указывает  на  код  инициализации,
             который  выполняется  перед   выполнением   функции.   Код
             инициализации   связывает   сегмент   данных   экземпляра,

       Windows 3.0/Ref/3#7                                      = 185 =

             задаваемого параметром hInstance,  с функцией  на  которую
             указывает  параметр lpProc.  Таким образом,  когда функция
             выполняется,  то ей доступны  переменные  и  данные  этого
             сегмента данных экземпляра.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             lpProc            FARPROC  Определяет адрес экземпляра
                               процедуры.
             hInstance         HANDLE  Идентифицирует экземпляр с
                               требуемым сегментом данных.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Указывает на   функцию  после  связывания,  если  операция
             завершена успешно. В противном случае равно 0.

        Примечания

             MakeProcInstance должна быть использована  для  доступа  к
             функциям из   экземпляров   только  текущего  модуля.  Для
             библиотечных модулей функция не требуется.

             После того   как   MakeProcInstance   была   вызвана   для
             определенной функции,  все обращения к этой функции должны
             осуществляться через возвращенный ею адрес.

             Функция MakeProcInstance может  создать  не  более  одного
             экземпляра процедуры прикладной программы.  Ваша программа
             не должна повторно вызывать MakeProcInstance  для  той  же
             функции и с тем же экземпляром, чтобы исключить перерасход
             памяти.

             Для связывания сегмента данных с функцией, она должна быть
             объявлена,   как   экспортируемая,  при  помощи  оператора
             EXPORTS в файле определения модуля.

        ───────────────────────────────────────────────────────────────
                                    MapDialogRect                              

        Синтаксис

             void MapDialogRect(hDlg,lpRect)

             Эта функция преобразует единицы панели диалога, заданные в
             параметре lpRect,  в единицы эрана. Единицы панели диалога
             устанавливаются в единицах диалога,  которые получаются из
             средней ширины и высоты символов системного  шрифта.  Одна
             единица  по  горизонтали равна 1/4 ширины символа,  а одна
             единица по вертикали равна  1/8  высоты  символа.  Функция
             GetDialogBaseUnits возвращает  размер  единицы  диалога  в
             пикселях.

       Windows 3.0/Ref/3#7                                      = 186 =


             Функция MapDialogRect заменяет единицы  панали  диалога  в
             lpRect  на  единицы  экрана  (пиксели) таким образом,  что
             данный прямоугольник может быть использован  для  создания
             панели   диалога  или  позиционирования  блока  управления
             внутри панели.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDlg              HWND  Идентифицирует панель диалога.

             lpRect            LPRECT  Указывает  на  структуру  данных
                               типа RECT,  содержащую  координаты панели
                               диалога, которые необходимо преобразовать.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Параметр hDlg   должен   быть  создан  с  помощью  функций
             CreateDialog или DialogBox.

        ───────────────────────────────────────────────────────────────
                                 MapVirtualKey [3.0]                           

        Синтаксис

             WORD MapVirtualKey(wCode,wMapType)

             Эта функция   коды  виртуальных  клавиш  или  скан-коды  и
             возвращает соответствующий  скан  код,   код   виртуальной
             клавиши, или  значение  в  коде ASCII.  Значение параметра
             wMapType определяет тип выполняемого преобразования.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wCode             WORD  Определяет код виртуальной клавиши
                               или скан-код.   Интерпретация  параметра
                               wCode зависит  от   значения   параметра
                               wMapType.

             wMapType          WORD  Определяет выполняемое преобразо-
                               вание. Параметр wMapType может принимать
                               следующие значения:

                               Значение  Описание
                               ────────────────────────────────────────
                               0         Параметр wCode содержит код
                                         виртуальной клавиши и функция
                                         возвращает соответствующий

       Windows 3.0/Ref/3#7                                      = 187 =

                                         скан-код.

                               1         wCode содержит скан-код, и
                                         функция возвращает код соот-
                                         ветствующей виртуальной кла-
                                         виши.

                               2         wCode содержит код виртуальной
                                         клавиши и функция возвращает
                                         соответствующее значение в коде
                                         ASCII (в стандартном регистре).

                               Остальные значения зарезервированы.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение зависит от значения параметров wCode
             и wMapType. Смотрите описание параметра wMapType.

        ───────────────────────────────────────────────────────────────
                                         max                                   

        Синтаксис

             int max(value1,value2)

             Эта макрокоманда   возвращает  максимальное  из  значений,
             заданных параметрами Value1 и Value2.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             Value1            int  Определяет  первое  из  двух
                               произвольных значений.

             Value2            int  Определяет  второе  из  двух
                               произвольных значений.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Содержит Value1  или  Value2 в зависимости от того,  какое
             больше.

        Примечание

             Значения, определяемые параметрами Value1 и Value2  могут
             быть любого сравниваемого типа.

        ───────────────────────────────────────────────────────────────
                                                                               
       MessageBeep

        Синтаксис

       Windows 3.0/Ref/3#7                                      = 188 =


             BOOL MessageBeep(wType)

             Эта функция генерирует звуковой сигнал.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             wType             WORD  Не используется. Должно быть равно
                               нулю.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        ───────────────────────────────────────────────────────────────
                                      MessageBox                               

        Синтаксис

             int MessageBox(hWndParent,lpText,lpCaption,wType)

             Эта функция создает и индицирует  окно,  которое  содержит
             предоставляемые прикладной    программой    сообщение    и
             заголовок,  а  также   любую   комбинацию   предварительно
             определенных икон и альтернативных клавиш, описанных ниже.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWndParent        HWND  Идентифицирует окно, которое обла-
                               дает панелью сообщения. Захват ввода
                               устанавливается  для  этого окна при
                               возврате управления функцией MessageBox.

             lpText            LPSTR  Указывает на сообщение, которое
                               должно быть индицировано. Строка должна
                               быть  оканчивающейся  нулем символьной
                               строкой.

             lpCaption         LPSTR  Указывает на символьную строку,
                               которая  должна  быть использована для
                               заголовка панели диалога. Строка должна
                               заканчиваться  нулем.  Если  lpCaption
                               равен NULL, используется заголовок по
                               умолчанию "Error".

             wType             WORD  Определяет содержимое панели диа-
                               лога. Это может быть любая комбинация
                               значений, объединенных операцией пораз-
                               рядного OR. Список допустимых значений
                               приведен в   табл.  4.11,  "Типы  панели
                               сообщений".
             ──────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 189 =


        Возвращаемое значение

             Возвращаемое значение   определяет   результат  выполнения
             функции. Равно  нулю,  если  нет  достаточно  памяти   для
             создания панели диалога. В противном случае, соответствует
             одному из следующих значений элементов меню,  возвращаемых
             панелью диалога:

             Значение   Описание
             ──────────────────────────────────────────────────────────
             IDABORT    Нажата клавиша прерывания.
             IDCANCEL   Нажата клавиша отмены.
             IDIGNORE   Нажата клавиша игнорирования.
             IDNO       Нажата клавиша нет.
             IDOK       Нажата клавиша выполнить.
             IDRETRY    Нажата клавиша повтора.
             IDYES      Нажата клавиша да.
             ──────────────────────────────────────────────────────────

             Если панель сообщений имеет мягкую  клавишу  "Cancel",  то
             будет  возвращено значение IDCANCEL при нажатии Escape или
             "Cancel". Если панель сообщений не  имеет  мягкой  клавиши
             "Cancel", то нажатие Escape не имеет действия.

        Примечания

             Когда создается  системная  модальная панель сообщений для
             указания  того,  что  пользователю  недостает  памяти,  то
             передаваемые  как  параметры  lpText и lpCaption строки не
             должны  браться  из  файла  ресурсов,  поскольку   попытка
             загрузить файл ресурсов может закончиться неудачно.

             Если программа вызывает функцию MessageBox и устанавливает
             флаги MB_ICONHAND  и  MB_SYSTEMMODAL  в  параметре  wType,
             Windows  будет отображать результирующую панель сообщений,
             не взирая на доступную память.  Когда эти  флаги  указаны,
             Windows  ограничивает  длину  текста  панели диалога одной
             строкой.

             Если панель сообщений создается в то время,  когда имеется
             панель  диалога,  следует  использовать  дескриптор панели
             диалога как параметр hWndParent.  Параметр  hWndParent  не
             определяет дочернее  окно,  такое  как  блок  управления в
             панели диалога.

             Таблица 4.11   Типы панели сообщений.
             ───────────────────────────────────────────────────────────
             Значение                Назначение
             ───────────────────────────────────────────────────────────
             MB_ABORTRETRYIGNORE  Панель  сообщений  содержит  три мягкие
                                  клавиши: Abort, Retry и Ignore.


       Windows 3.0/Ref/3#7                                      = 190 =

             MB_APPLMODAL         Пользователь должен ответить панели со-
                                  общений прежде, чем продолжать работать
                                  в окне, заданном  hWndParent.   Однако,
                                  пользователь может перейти и работать в
                                  окнах других  программ.  По умолчанию
                                  определено MB_APPLMODAL,   если    не
                                  заданы ни      MB_SYSTEMMODAL      ни
                                  MB_TASKMODAL.

             MB_DEFBUTTON1        Первая   мягкая  клавиша  по  умолчанию
                                  (она   всегда   определена   по   умол-
                                  чанию,  если  только не специфицированы
                                  MB_DEFBUTTON2 или MB_DEFBUTTON3)

             MB_DEFBUTTON2        Вторая мягкая клавиша используется
                                  по умолчанию.

             MB_DEFBUTTON3        Третья  мягкая клавиша используется
                                  по умолчанию.

             MB_ICONASTERISK      Аналогично MB_ICONINFORMATION.

             MB_ICONEXCLAMATION   В  панели  сообщений появляется  икона
                                  восклицательного знака.

             MB_ICONHAND          В панели сообщений появляется икона ру-
                                  ки.

             MB_ICONINFORMATION   В панели сообщений появляется икона в
                                  виде буквы i внутри окружности.

             MB_ICONQUESTION      В  панели  сообщений появляется  икона
                                  вопросительного знака.

             MB_ICONSTOP          В панели сообщения появляется икона
                                  "стоп".

             MB_OK                Панель сообщений содержит  альтернатив-
                                  ную клавишу: OK.

             MB_OKCANCEL          Панель сообщений содержит две альтерна-
                                  тивные клавиши: OK и Cancel.

             MB_RETRYCANCEL       Панель сообщений содержит две альтерна-
                                  тивные клавиши: Retry и Cancel.

             MB_SYSTEMMODAL       Выполнение всех  прикладных программ
                                  задерживается до тех пор, пока пользо-
                                  ватель не  ответит панели диалога.
                                  Системные модальные панели  сообщений
                                  используются для уведомления пользова-
                                  теля о серьезных, потенциально опасных
                                  ошибках,  которые требуют немедленного

       Windows 3.0/Ref/3#7                                      = 191 =

                                  вмешательства (например, выход за пре-
                                  делы памяти).

             MB_TASKMODAL         Аналогично MB_APPMODAL, за исключением
                                  того, что если параметр hWndParent
                                  равен NULL, то запрещается работа во
                                  всех окнах верхнего уровня, относящих-
                                  ся к данной задаче. Этот флаг исполь-
                                  зуется, когда вызывающая программа или
                                  библиотека не имеют доступного дескрип-
                                  тора окна, но тем не менее, необходимо
                                  предотвратить ввод   в   другие  окна
                                  прикладной программы,  не  влияя   на
                                  другие прикладные программы.

             MB_YESNO             Панель сообщений содержит две альтерна-
                                  тивные клавиши: Yes и No.

             MB_YESNOCANCEL       Панель сообщений содержит три альтерна-
                                  тивные клавиши: Yes, No и Cancel.

        ───────────────────────────────────────────────────────────────
                                         min                                   

        Синтаксис

             int min(Value1,Value2)

             Эта макрокоманда  возвращает  минимальное   из   значений,
             заданных параметрами Value1 и Value2.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             Value1            Определяет  первое  из двух произвольных
                               значений.
             Value2            Определяет второе из  двух  произвольных
                               значений.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Содержит Value1  или  Value2 в зависимости от того,  какое
             меньше.

        Примечание

             Значения, определяемые параметрами Value1 и Value2  могут
             быть любого сравниваемого типа.

        ───────────────────────────────────────────────────────────────
                                  ModifyMenu  [3.0]                            

        Синтаксис

       Windows 3.0/Ref/3#7                                      = 192 =


             BOOL ModifyMenu(hMenu,nPosition,wFlags,wIDNewItem,
                                                            lpNewItem)

             Эта функция изменяет существующий  элемент  меню,  позиция
             которого определяется    параметром    nPosition.    Новое
             состояние элемента  задается  параметром  wFlags.  Если  с
             помощью этой   функции   заменяется   накладываемое  меню,
             связанное с этим  элементом,  функция  самостоятельно  его
             разрушает и освобождает память, занимаемую этим меню.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hMenu             HMENU  Идентифицирует меню, которое
                               должно  быть изменено.

             nPosition         WORD  Определяет элемент, который должен
                               быть изменен. Интерпретация этого парамет-
                               ра зависит от содержимого wFlags.

                               Если wFlags    nPosition
                               ────────────────────────────────────────
                               MF_BYPOSITION  Задает позицию элемента
                                              меню. Первый элемент - в
                                              позиции 0
                               MF_BYCOMMAND   является ID элемента меню.
                               ────────────────────────────────────────

             wFlags            WORD  Определяет как должен интерпрети-
                               роваться параметр nPosition, и также
                               определяет изменения, которые должны быть
                               выполнены над элементом меню. Он может
                               содержать одно или несколько значений,
                               приведенных в разделе "Примечания".

             wIDNewItem        WORD  Идентифицирует  или ID нового
                               элемента  меню,  или дескриптор наклады-
                               ваемого меню, если wFlags установлен в
                               MF_POPUP.

             lpNewItem         LPSTR  Определяет содержимое элемента
                               меню. Если wFlags содержит MF_STRING
                               (по умолчанию), то lpNewItem это дальний
                               указатель на строку, оканчивающуюся ну-
                               лем. Если wFlags установлен в MF_BITMAP,
                               то lpNewItem содержит дескриптор растро-
                               вой карты (HBITMAP) в младшем слове.
                               Если wFlags установлен в MF_OWNERDRAW,
                               то lpNewItem определяет 32-битовое
                               значение, которое прикладная программа
                               может использовать для определения до-
                               полнительной информации для этого эле-
                               мента. Это 32-битовое значение доступ-

       Windows 3.0/Ref/3#7                                      = 193 =

                               но прикладной программе через поле
                               itemData структуры данных, которая адре-
                               суется параметром lParam в сообщениях:

                               WM_MEASHUREITEM
                               WM_DRAWITEM

                               Эти сообщения посылаются при начальном
                               отображении элемента и при его изменении.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение  определяет   результат   выполнения
             функции. Равно  TRUE,  если  изменение  было  успешным.  В
             противном случае равно FALSE.

        Примечания

             Каждый раз  при  изменении  меню  (независимо   от   того,
             отображается или нет на экране окно,  которому данное меню
             принадлежит) прикладная программа должна  вызвать  функцию
             DrawMenuBar. Однако  для  изменения атрибутов существующих
             элементов  меню  гораздо  быстрее   использовать   функции
             CheckMenuItem и EnableMenuItem.

             Каждая из нижеприведенных групп содержит взаимоисключающие
             флаги, которые не должны использоваться вместе:

             - MF_BYCOMMAND и MF_BYPOSITION.

             - MF_DISABLED, MF_ENABLED и MF_GRAYED.

             - MF_BITMAP, MF_STRING, MF_OWNERDRAW и MF_SEPARATOR.

             - MF_MENUBARBREAK и MF_MENUBREAK.

             - MF_CHECKED и MF_UNCHECKED.

             Ниже приведен список  возможных  значений,  которые  можно
             использовать для параметра wFlags.

             Значение         Описание
             ──────────────────────────────────────────────────────────
             MF_BITMAP        Использовать растр как элемент. Младшее
                              слово lpNewItem является дескриптором
                              растровой карты.

             MF_BYCOMMAND     nPosition задает номер ID элемента меню.
                              Используется по   умолчанию,   если    не
                              установлен ни   флаг   MF_BYPOSITION   ни
                              MF_BYCOMMAND.


       Windows 3.0/Ref/3#7                                      = 194 =

             MF_BYPOSITION    nPosition задает позицию элемента  ме-
                              ню, который  должен  быть  изменен,  а не
                              номер ID.

             MF_CHECKED       Расположить контрольную отметку рядом с
                              элементом. Если программа определяет соб-
                              ственную контрольную отметку (смотрите
                              SetMenuItemBitmap), в этом случае за эле-
                              ментом выводится растровая карта включен-
                              ной контрольной отметки.

             MF_DISABLED      Сделать недоступным элемент (т. е элемент
                              не может быть выбран) без изменения его
                              внешнего вида.

             MF_ENABLED       Сделать доступным элемент, разрешая его
                              выборку и восстановить его, если он был
                              сделан серым.

             MF_GRAYED        Сделать недоступным элемент и изменить
                              его цвет на серый для того, чтобы
                              показать, что он не может быть выбран.

             MF_MENUBARBREAK  Действие аналогично флагу MF_MENUBREAK
                              за исключением того, что для накладывае-
                              мого меню новый столбец отделяется от ста-
                              рого вертикальной разделительной линией

             MF_MENUBREAK     Для статических меню (типа меню-строки)
                              расположить элемент на новой строке. Для
                              накладываемого меню расположить элемент в
                              новом столбце без разделительной линии
                              между столбцами.

             MF_OWNERDRAW     Определяет, что данный элемент программа
                              будет рисовать     самостоятельно.    При
                              исходном отображении   элемента,    окно,
                              которому принадлежит это меню получает
                              сообщение WM_MEASHUREITEM, для определения
                              его высоты и ширины. Затем при каждом
                              изменении состояния     элемента     окну
                              посылается сообщение WM_DRAWITEM. Этот
                              флаг не применим к элементу меню верхнего
                              уровня.

             MF_POPUP         Связать накладываемое меню с элементом
                              меню. Параметр wIDNewItem    -     это
                              дескриптор меню.  Добавляет накладываемое
                              меню к меню верхнего уровня или каскадное
                              меню к накладываемым меню.

             MF_SEPARATOR     Рисует горизонтальную разделительную
                              линию. Этот   флаг   можно   использовать

       Windows 3.0/Ref/3#7                                      = 195 =

                              только с накладываемыми меню. Эта линия
                              не может быть сделана серой, недоступной
                              или  подсвеченной. Параметры lpNewItem и
                              wIDNewItem игнорируются.

             MF_STRING        Использовать строку как элемент (флаг по
                              умолчанию). lpNewItem - длинный указатель
                              на символьную строку в коде ASCII, закан-
                              чивающуюся нулем.

             MF_UNCHECKED     Не располагать контрольную отметку рядом
                              с элементом.   Контрольная   отметка   не
                              используется если не использованы флаги ни
                              MF_CHECKED ни     MF_UNCHECKED.      Если
                              программа      определяет     собственную
                              контрольную       отметку       (смотрите
                              SetMenuItemBitmap),   в  этом  случае  за
                              элементом   выводится   растровая   карта
                              выключенной контрольной отметки.

        ───────────────────────────────────────────────────────────────
                                        MoveTo                                 

        Синтаксис

             DWORD MoveTo(hDC,X,Y)

             Эта функция   перемещает   текущую   позицию   в    точку,
             определяемую параметрами X и Y.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hDC               HDC  Идентифицирует контекст устройства.

             X                 int  Определяет логическую x-координату
                               новой  позиции.

             Y                 int  Определяет логическую координату по
                               оси y новой позиции.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Определяет координаты x и y предыдущей позиции. Координата
             x хранится в младшей части слова, а y - в старшей.

        Примечание

             Хотя функция MoveTo не осуществляет вывода,  она влияет на
             другие функции вывода, использующие текущую позицию.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 196 =

                                      MoveWindow                               

        Синтаксис

             void MoveWindow(hWnd,X,Y,nWidth,nHeight,bRepaint)

             Эта функция  вызывает  посылку  сообщения  WM_SIZE данному
             окну. Параметры X, Y, nWidth и nHeight задают новый размер
             окна.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             hWnd              HWND  Идентифицирует накладываемое или
                               дочернее окно.
             X                 int  Задает новую координату по х левого
                               верхнего угла окна.

             Y                 int  Задает новые координаты по оси y
                               верхнего левого угла окна. Для накла-
                               дываемых окон X и Y задаются в координа-
                               тах экрана (относительно верхнего левого
                               угла  экрана).  Для дочерних окон они
                               задаются в координатах пользователя
                               (относительно верхнего левого угла
                               области  пользователя родительского
                               окна).

             nWidth            int  задает новую ширину окна.

             nHeight           int  задает новую высоту окна.

             bRepaint          BOOL  Определяет, должно ли быть окно
                               перерисовано после перемещения. Если
                               этот параметр равен нулю,  то окно не
                               перерисовывается.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Нет.

        Примечание

             Любое накладываемое или дочернее  окно  имеет  минимальные
             ширину и высоту.  Эти минимальные значения зависят от типа
             и содержимого окна.  Любые попытки сделать ширину и высоту
             меньше, используя функцию MoveWindow, обречены на неудачу.
             Сообщение  WM_SIZE,  передаваемое  этой  функцией,  задает
             новые  ширину  и  высоту области пользователя,  а не всего
             окна.

        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/3#7                                      = 197 =

                                    MulDiv  [3.0]                              

        Синтаксис

             int MulDiv(nNumber,nNumerator,nDenominator)

             Эта функция  умножает  два  значения,  размером  в слово и
             затем делит результат на третье  число,  также  являющееся
             словам. Возвращаемое     значение    представляет    собой
             результат, округленный к ближайшему целому.

             Параметры         Описание
             ──────────────────────────────────────────────────────────
             nNumber           int  Определяет число, которое будет
                               умножено на nNumerator.

             nNumerator        int  Определяет число, которое будет
                               умножено на nNumber.

             nDenominator      int  Определяет число, на которое будет
                               разделен результат умножения.
             ──────────────────────────────────────────────────────────

        Возвращаемое значение

             Возвращаемое значение   представляет    собой    результат
             умножения и  деления.  Они  равно  32767  или  -32767 если
             возникло переполнение или если nDenominator равно 0.

        Примечание



        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/3#7                                      = 198 =

                                  NetBIOSCall [3.0]                            

             Эта функция  позволяет  прикладной  программе генерировать
             прерывание NETBIOS  5CH.   Прикладные   программы   должны
             использовать это   прерывание   вместо   явной   генерации
             прерывания 5CH,  для обеспечения совместимости с  будущими
             продуктами Microsoft.

             Программа может    вызывать    эту   функцию   только   из
             подппрограмм, написанных на ассемблере. Она экспортируется
             из KERNEL.EXE и не объявлена во включаемых файлах.

             Для ее  использования прикладная программа должна объявить
             ее следующим образом:

             extrn   NetBIOSCall:  far

             Если прикладная программа включает файл CMACROS.INC, то ее
             можно объявить следующим образом:

             externFP  NetBIOSCall

             Перед вызовом  NetBIOSCall  в  регистры необходимо занести
             значения, соответствующие для прерывания 5CH.  При  выходе
             из функции все регистры соответствуют выходу из прерывания
             5CH.

             Эта функция не имеет параметров и возвращаемого значения.

             Ниже приведен пример использования функции NetBIOSCall:

             extrn NetBIOSCall : far
                .
                .
                .
             ; установка регистров
             cCall NetBIOSCall

