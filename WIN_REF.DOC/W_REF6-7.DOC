                                   Оглавление                                  
       Windows 3.0/Ref/6#7                                        = 1 =

       Глава 7. ТИПЫ И СТРУКТУРЫ ДАННЫХ...............................4
       7.1. Типы данных...............................................5
       7.2  Структуры данных..........................................9
       BITMAP........................................................10
       BITMAPCOREHEADER [3.0]........................................11
       BITMAPCOREINFO [3.0]..........................................12
       BITMAPFILEHEADER [3.0]........................................14
       BITMAPINFO [3.0]..............................................15
       BITMAPINFOHEADER [3.0]........................................17
       CLIENTCREATESTRUCT [3.0]......................................24
       COLORREF......................................................24
       COMPAREITEMSTRUCT [3.0].......................................27
       COMSTAT.......................................................28
       CREATESTRUCT..................................................29
       DCB...........................................................31
       DELETEITEMSTRUCT [3.0]........................................35
       DEVMODE [3.0].................................................36
       DLGTEMPLATE...................................................40
       DRAWITEMSTRUCT [3.0]..........................................45
       HANDLTABLE....................................................49
       LOGBRUSH......................................................50
       LOGFONT.......................................................52
       LOGPALETTE [3.0]..............................................56
       LOGPEN........................................................57
       MDICREATESTRUCT [3.0].........................................59
       MEASUREITEMSTRUCT [3.0].......................................60
       MENUITEMTEMPLATE..............................................62
       METAFILEPICT..................................................64
       MSG...........................................................65
       МULTIKEYHELP..................................................66
       OFSTRUCT......................................................67
       PAINTSTRUCT...................................................68
       PALETTEENTRY [3.0]............................................68
       POINT.........................................................70
       RECT..........................................................71
       RGBQUAD [3.0].................................................71
       RGBTRIPLE [3.0]...............................................72
       TEXTMETRIC....................................................73
       WNDCLASS......................................................76
       Глава 8. ОПЕРАТОРЫ ФАЙЛА ОПИСАНИЯ РЕСУРСОВ....................81
       8.1  Однострочные операторы...................................82
       8.2  Ресурсы, определяемые пользователем......................85
       8.3  Оператор RCDATA..........................................87
       8.4  Оператор STRINGTABLE.....................................89
       8.5   Оператор ACCELERATORS...................................91
       8.6 Оператор MENU.............................................93
       8.6.1  Операторы  определения  элементов......................94
       Оператор MENUITEM.............................................94
       Оператор POPUP................................................96
       Оператор MENUITEM SEPARATOR...................................97
       8.7 Оператор DIALOG...........................................99
       8.7.1  Операторы  параметров диалога.........................101

       Windows 3.0/Ref/6#7                                        = 2 =

       Оператор STYLE...............................................101
       Оператор CAPTION.............................................104
       Оператор MENU................................................105
       Оператор CLASS...............................................105
       Оператор FONT................................................106
       8.7.2 Управляющие операторы панели диалога...................106
       Оператор LTEXT...............................................107
       Оператор RTEXT...............................................108
       Оператор CTEXT...............................................110
       Оператор CHECKBOX............................................111
       Оператор PUSHBUTTON..........................................112
       Оператор LISTBOX.............................................113
       Оператор GROUPBOX............................................115
       Оператор DEFPUSHBUTTON.......................................116
       Оператор RADIOBUTTON.........................................117
       Оператор EDITTEXT............................................119
       Оператор COMBOBOX............................................120
       Оператор ICON................................................122
       Оператор SCROLLBAR...........................................123
       Оператор CONTROL.............................................124
       8.8 Директивы................................................138
       8.8.1  Оператор #include.....................................138
       8.8.2  Оператор #define......................................138
       8.8.3  Оператор #undef.......................................139
       8.8.4  Оператор #ifdef.......................................139
       8.8.5  Оператор #ifndef......................................140
       8.8.6  Оператор #if..........................................140
       8.8.7  Оператор #elif........................................141
       8.8.8  Оператор #else........................................141
       8.8.9  Оператор #endif.......................................142
       8.9 Заключение...............................................143
       Глава 9. ФОРМАТЫ ФАЙЛОВ......................................144
       9.1  Форматы файла растровой карты...........................145
       9.2 Формат файла ресурса икон................................146
       9.3 Формат файла ресурса курсора.............................148
       9.4 Формат файла системного буфера...........................151
       9.5 Формат метафайла.........................................153
       9.5.1. Заголовок метафайла...................................153
       9.5.2. Записи метафайла......................................154
       Запись AnimatePalette [3.0]..................................156
       Запись BitBlt ( до 3.0 ).....................................157
       Запись BitBlt [3.0]..........................................158
       Запись CreateBrushIndirect...................................159
       Запись CreateFontIndirect....................................159
       Запись CreatePalette [3.0]...................................160
       Запись CreatePatternBrush ( до 3.0 ).........................160
       Запись CreatePatternBrush [3.0]..............................161
       Запись CreatePenIndirect.....................................162
       Запись Create Region.........................................163
       Запись DeleteObject [3.0]....................................163
       Запись DrawText..............................................164
       Запись Escape................................................164
       Запись ExtTextOut............................................165

       Windows 3.0/Ref/6#7                                        = 3 =

       Запись Polygon...............................................166
       Запись PolyPolygon...........................................167
       Запись Polyline..............................................167
       Запись SelectClipRegion......................................168
       Запись SelectObject..........................................168
       Запись SelectPalette [3.0]...................................169
       Запись SetDlBitsToDevice [3.0]...............................169
       Запись SetPaletteEntries[3.0]................................170
       Запись StretchBlt ( до 3.0 ).................................171
       Запись StretchBlt [3.0]......................................172
       Запись StretchDlBits [3.0]...................................174
       Запись TextOut...............................................175
       9.5.3. Пример программы работы с метафайлом..................175
       9.6 Заключение...............................................178
       Глава 10. ОПЕРАТОРЫ ОПРЕДЕЛЕНИЯ МОДУЛЯ.......................179
       CODE.........................................................179
       DATA.........................................................180
       DESCRIPTION..................................................181
       EXETYPE......................................................182
       EXPORTS......................................................182
       HEAPSIZE.....................................................184
       IMPORTS......................................................184
       LIBRARY......................................................185
       NAME.........................................................186
       SEGMENTS.....................................................187
       STACKSIZE....................................................188
       STUB.........................................................189
       Глава 11. ДВОИЧНЫЕ И ТРОИЧНЫЕ КОДЫ РАСТРОВЫХ ОПЕРАЦИЙ........190
       11.1 Бинарные растровые операции.............................191
       11.2 Троичные растровые операции.............................195
       11.3 Заключение..............................................203

       Windows 3.0/Ref/6#7                                        = 4 =

                                                                               
            Глава 7. ТИПЫ И СТРУКТУРЫ ДАННЫХ
       ----------------------------------------------------------------

             В этой  главе  описываются  типы   и   структуры   данных,
        используемые  функциями  и  сообщениями  среды WINDOWS.  Раздел
        состоит из двух  частей,  содержащих  таблицы  типов  данных  и
        список структур данных, упорядоченных по алфавиту.



       Windows 3.0/Ref/6#7                                        = 5 =

                                     7.1. Типы данных                          
       ----------------------------------------------------------------

             В этом  подразделе  описываются типы данных,  используемые
        функциями среды WINDOWS.  Типы данных  -  это  ключевые  слова,
        которые определяют размер и назначение соответствующих функциям
        параметров  и  возвращаемых  значений.  Этот  список   содержит
        символьные,   целые   и   булевские  типы,  типы  указателей  и
        дескрипторы.  Большая часть имен указателей типов начинается  с
        префикса  P  (для  коротких  указателей)  или  LP  (для длинных
        указателей).  При  помощи  короткого  указателя  осуществляется
        доступ  к  данным  внутри текущего сегмента,  длинный указатель
        содержит 32-ух  битовое  значение сегмент/смещение.  Прикладная
        программа в среде WINDOWS использует дескриптор для  ссылки  на
        ресурс,  который  загружается  в  память.  WINDOWS обеспечивает
        доступ  к  этим  ресурсам  через  таблицы,   которые   содержат
        отдельные  записи  для  каждого  дескриптора.  Каждая  запись в
        таблице  дескрипторов  содержит  адрес  ресурса   и   значение,
        идентифицирующее   тип   ресурса.  Типы  данных  среды  WINDOWS
        приведены в таблице 7.1.

                                                            Таблица 7.1
        ───────────────────────────────────────────────────────────────
             Тип         |             Определение
        ───────────────────────────────────────────────────────────────
        BOOL             | 16-ти разрядное булевское значение.
                         |
        BYTE             | 8-ми разрядное беззнаковое целое.
                         |
        char             | Символ в коде ASCII или 8-ми разрядное
                         | знаковое целое.
                         |
        DWORD            | 32-ух разрядное беззнаковое целое или
                         | адресная комбинация сегмент/смещение.
                         |
        FAR              | Атрибут  типа  данных,  который  может  быть
                         | использован для создания длинного указателя.
                         |
        FARPROC          | Длинный указатель на функцию, полученную
                         | вызовом функции MakeProcInstance.
                         |
        GLOBALHANDLE     | Дескриптор    глобальной     памяти.    Это
                         | 16-ти разрядный   индекс   блока     памяти,
                         | выделенного    из    системной    глобальной
                         | динамической области памяти.
                         |
        HANDLE           | Основной  дескриптор.   Представляет   собой
                         | 16-ти разрядный  индекс  записи  в  таблице,
                         | идентифицирующий данные программы.
                         |
        HBITMAP          | Дескриптор  физической  карты  растра.   Это
                         | 16-ти разрядный индекс физических графических
                         | объектов GDI.

       Windows 3.0/Ref/6#7                                        = 6 =

                         |
        HBRUSH           | Дескриптор     физической     кисти.     Это
                         | 16-ти разрядный индекс физических графических
                         | объектов GDI.
                         |
        HCURSOR          | Дескриптор ресурса курсора. Это 16-ти
                         | разрядный индекс записи в таблице ресурсов.
                         |
        HDC              | Дескриптор   контекста   отображения.    Это
                         | 16-ти разрядный   индекс  таблиц   контекста
                         | отображения GDI.
                         |
        HFONT            | Дескриптор    физического    шрифта.     Это
                         | 16-ти разрядный индекс физических графических
                         | объектов GDI.
                         |
        HICON            | Дескриптор ресурса иконы. Это 16-ти разрядный
                         | индекс записи в таблице ресурсов.
                         |
        HMENU            | Дескриптор ресурса меню. Это  16-ти разрядный
                         | индекс записи в таблице ресурсов.
                         |
        HPALETTE         | Дескриптор  логической  палитры.  Это  16-ти
                         | разрядный  индекс   физических   графических
                         | объектов GDI.
                         |
        HPEN             | Дескриптор     физического     пера.     Это
                         | 16-ти разрядный индекс физических графических
                         | объектов GDI.
                         |
        HRGN             | Дескриптор    физической    области.     Это
                         | 16-ти разрядный индекс физических графических
                         | объектов GDI.
                         |
        HSTR             | Дескриптор ресурса строки. Это 16-ти
                         | разрядный  индекс записи в таблице ресурсов.
                         |
        int              | 16-ти разрядное знаковое целое.
                         |
        LOCALHANDLE      | Дескриптор     локальной     памяти.     Это
                         | 16-ти разрядный  индекс    блока     памяти,
                         | выделенного    из    системной     локальной
                         | динамической области памяти.
                         |
        long             | 32-ух разрядное знаковое целое.
                         |
        LONG             | 32-ух разрядное знаковое целое.
                         |
        LPBITMAP         | Длинный указатель на структуру данных BITMAP.
                         |
        LPBITMAPCORE-    |
        -HEADER          | Длинный  указатель   на   структуру   данных
                         | BITMAPCOREHEADER.

       Windows 3.0/Ref/6#7                                        = 7 =

                         |
        LPBITMAPCORE     |
        -INFO            | Длинный  указатель   на   структуру   данных
                         | BITMAPCOREINFO.
                         |
        LPBITMAPFILE     |
        -HEADER          | Длинный  указатель   на   структуру   данных
                         | BITMAPFILEHEADER.
                         |
        LPBITMAPINFO     | Длинный  указатель   на   структуру   данных
                         | BITMAPINFO.
                         |
        LPBITMAPINFO     |
        -HEADER          | Длинный  указатель   на   структуру   данных
                         | BITMAPINFOHEADER.
                         |
        LPCOMPAREITEM    |
        -STRUCT          | Длинный  указатель   на   структуру   данных
                         | COMPAREITEMSTRUCT.
                         |
        LPCREATESTRUCT   | Длинный  указатель   на   структуру   данных
                         | CREATESTRUCT.
                         |
        LPDELETEITEM     |
        -STRUCT          | Длинный  указатель   на   структуру   данных
                         | DELETEITEMSTRUCT.
        LPDRAWITEM       |
        -STRUCT          | Длинный  указатель   на   структуру   данных
                         | DRAWITEMSTRUCT.
                         |
        LPHANDLETABLE    | Длинный  указатель   на   структуру   данных
                         | HANDLETABLE.
                         |
        LPINT            | Длинный указатель на 16-ти разрядное знаковое
                         | целое.
                         |
        LPLOGBRUSH       | Длинный  указатель   на   структуру   данных
                         | LOGBRUSH.
                         |
        LPLOGFONT        | Длинный  указатель   на   структуру   данных
                         | LOGFONT.
                         |
        LPLOGPALETTE     | Длинный  указатель   на   структуру   данных
                         | LOGPALETTE.
                         |
        LPLOGPEN         | Длинный указатель на структуру данных LOGPEN.
                         |
        LPMEASUREITEM-   |
        -STRUCT          | Длинный  указатель   на   структуру   данных
                         | MEASURESTRUCT.
                         |
        LPMETAFILEPICT   | Длинный  указатель   на   структуру   данных
                         | METAFILEPICT.

       Windows 3.0/Ref/6#7                                        = 8 =

                         |
        LPMSG            | Длинный указатель на структуру данных MSG.
                         |
        LPOFSTRUCT       | Длинный  указатель   на   структуру   данных
                         | OFSTRUCT.
                         |
        LPPAINTSTRUCT    | Длинный  указатель   на   структуру   данных
                         | PAINTSTRUCT.
                         |
        LPPALETTEENTRY   | Длинный  указатель   на   структуру   данных
                         | PALETTEENTRY.
                         |
        LPPOINT          | Длинный указатель на структуру данных POINT.
                         |
        LPRECT           | Длинный указатель на структуру данных RECT.
                         |
        LPRESOURCELIST   | Длинный  указатель  на  одну  или  несколько
                         | структур данных RESOURCESTRUCT.
                         |
        LPSTR            | Длинный указатель на строку символов.
                         |
        LPTEXTMETRIC     | Длинный  указатель   на   структуру   данных
                         | TEXSTMETRIC.
                         |
        LPVOID           | Длинный  указатель  на  неопределенный   тип
                         | данных.
                         |
        LPWNDCLASS       | Длинный  указатель   на   структуру   данных
                         | WNDCLASS.
                         |
        NEAR             | Атрибут  типа  данных,  который  может  быть
                         | использован для создания короткого указателя.
                         |
        NPSTR            | Ближний указатель на строку символов.
                         |
        PINT             | Указатель на 16-ти разрядное знаковое целое.
                         |
        PSTR             | Указатель на строку символов.
                         |
        PWORD            | Указатель  на  беззнаковое  16-ти  разрядное
                         | целое.
                         |
        short            | 16-ти разрядное знаковое целое.
                         |
        void             | Пустое значение. Используется  для  указания
                         | отсутствия у функции возвращаемого  значения.
                         |
        WORD             | 16-ти разрядное беззнаковое целое.
                         |
        ───────────────────────────────────────────────────────────────




       Windows 3.0/Ref/6#7                                        = 9 =

                                                                               
           7.2  Структуры данных
       ----------------------------------------------------------------
             В этом    подразделе    описываются    структуры   данных,
        используемые средой  Windows.  Структуры  данных  приведены   в
        алфавитном  порядке.  Дано  определение структуры и описание ее
        полей.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 10 =

                                          BITMAP                               

             Структура данных растровой карты

             Структура данных   BITMAP   определяет   ширину,   высоту,
        цветовой формат и значения битов логической карты растра.

             typedef struct tagBITMAP {
                     short  bmType;
                     short  bmWidth;
                     short  bmHeight;
                     short  bmWidthBytes;
                     BYTE   bmPlanes;
                     BYTE   bmBitsPixel;
                     LPSTR  bmBits;
             } BITMAP;

             Поля BITMAP имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             bmType       Определяет тип карты  растра. Для  логической
                          растровой карты поле bmType должно быть 0.

             bmWidth      Определяет  ширину  карты  растра в пикселях.
                          Ширина должна быть больше 0.

             bmHeight     Определяет  высоту  карты   растра  в  линиях
                          растра. Высота должна быть больше 0.

         bmWidthBytes     Определяет число  байт в каждой линии растра.
                          Это должно быть четное  число,  так  как  GDI
                          предполагает, что значения битов карты растра
                          формируют массив целых (по 2 байта) значений.
                          Другими   словами,   значение  bmWidthBytes*8
                          должно быть  следующим  кратным  шестнадцати,
                          большим или равным bmWidth.

             bmPlanes     Определяет количество цветовых  планов  карты
                          растра.

          bmBitsPixel     Определяет число   смежных   цветовых   битов
                          каждого  плана,  необходимых  для определения
                          элемента изображения.

               bmBits     Определяет  размещение значений битов в карте
                          растра.  Это должен быть длинный указатель на
                          массив символьных (по 1 байту) значений.

             Комментарий


       Windows 3.0/Ref/6#7                                       = 11 =

             Текущим форматом  карты  растра может быть монохромный или
        цветной.  Монохромная  карта  растра  использует   однобитовый,
        одноплановый  формат.  Каждая строка развертки является кратным
        16 бит.

             Для монохромной карты растра  высоты  n  строки  развертки
        организуются следующим образом:

                          Строка развертки 0
                          Строка развертки 1
                                .
                                .
                                .
                          Строка развертки n-2
                          Строка развертки n-1

             Элементы изображения  монохромного  устройства  могут быть
        черными или  белыми.  Если  соответствующий  бит  карты  растра
        содержит  1,  то  элемент  изображения  включен  (белый);  если
        соответствующий бит  карты  растровой  памяти  содержит  0,  то
        элемент изображения выключен (черный).

             Все устройства,      растровые     возможности     которых
        характеризуются значением RC_BITBLT, поддерживают карты растра.

             Каждое устройство  имеет  свой уникальный цветовой формат.
        Для того,  чтобы переслать карту растра с одного устройства  на
        другое используйте функции GetDIBits и SetDIBits.

             Смотрите также   описание  функций  CreatBitmapIndirect  и
        GetObject в "Списке функций" ,  Справочного руководства,  Том1,
        глава 4.

        ───────────────────────────────────────────────────────────────
                 BITMAPCOREHEADER                                    [3.0]     

             Формат информации аппаратно-независимой карты растра

             Структура данных  BITMAPCOREHEADER  содержит  информацию о
        размерах и цветовом формате аппаратно-независимой карты растра,
        которая совместима с картами растра Microsoft OS/2 Presentation
        Manager версий 1.1 и 1.2.

             typedef struct tagBITMAPCOREHEADER {
                     DWORD  bcSize;
                     WORD   bcWidth;
                     WORD   bcHeight;
                     WORD   bcPlanes;
                     WORD   bcBitCount;
             } BITMAPCOREHEADER;

             Поля BITMAPCOREHEADER имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/6#7                                       = 12 =


             Поле         Назначение
             ────         ──────────

             bcSize       Определяет число   байт    необходимых    для
                          структуры BITMAPCOREHEADER.

             bcWidth      Определяет  ширину карты растра в пикселях.

             bсHeight     Определяет высоту карты растра в пикселях.

             bсPlanes     Определяет количество  цветовых  планов карты
                          растра для приемного устройства и должно быть
                          установлено в 1.

             bсBitCount   Определяет  число  бит  на пиксель.  Значение
                          должно быть равно 1,4,8 или 24.

             Комментарий

             Структура данных BITMAPCOREINFO, составленная из структуры
        BITMAPCOREHEADER и таблицы цветов, полностью определяет размеры
        и   цвета  аппаратно-независимой  карты  растра.  В  прикладной
        программе для  получения  таблицы  цветов  в  структуре  данных
        BITMAPCOREINFO   содержимое   поля  bcSize  нужно  использовать
        следующим образом:

        pColor = ((LPSTR) pBitmapCoreInfo +
                                   +(WORD) (pBitmapCoreInfo -> bcSize))

        ───────────────────────────────────────────────────────────────
                BITMAPCOREINFO                                       [3.0]     

             Информация аппаратно-независимой карты растра

             Структура данных   BITMAPCOREINFO   полностью   определяет
        размеры  и  цвет  для  аппаратно-независимой  растровой   карты
        совместимой   с  картами  растра  Microsoft  OS/2  Presentation
        Manager версий 1.1 и 1.2.

             typedef struct _BITMAPCOREINFO {
                     BITMAPCOREHEADER  bmciHeader;
                     RGBTRIPLE         bmciColors[];
             } BITMAPCOREINFO;

             Поля  BITMAPCOREINFO имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             bmciHeader   Определяет структуру данных  BITMAPCOREHEADER
                          которая содержит   информацию  о  размерах  и

       Windows 3.0/Ref/6#7                                       = 13 =

                          цветовом    формате     аппаратно-независимой
                          растровой карты.

             bmciColors   Определяет массив структур данных RGBTRIPLE,в
                          котором определены цвета растровой карты.

             Комментарий

             Аппаратно-независимая растровая  карта  OS/2  Presentation
        Manager состоит из двух различных частей:

             - структуры  BITMAPCOREINFO,  которая  описывает размеры и
               цвета растровой карты:

             - области  байтов,  которые  определяют  пиксели растровой
               карты.

             Биты в этой области упакованы  вместе,  но  каждая  строка
        развертки   должна  быть  дополнена  нулями  до  конца  дальней
        границы.Однако,границы сегмента могут появляться в любом  месте
        растровой  карты.Начало  карты  растра находится в левом нижнем
        углу.

             Поле bcBitCount    структуры    данных    BITMAPCOREHEADER
        определяет  число  битов,  которые  определяют каждый пиксель и
        максимальное количество цветов  в  карте.Это  поле  может  быть
        равным одной из следующих величин:

             1            Карта  растра  монохромная  и поле bmciColors
                          должно содержать два  элемента.Каждый  бит  в
                          области  карты  представляет пиксель.Если бит
                          сброшен,    пиксель    отображается    цветом
                          указанном  в первом элементе поля bmciColors;
                          если  бит  установлен,  пиксель  имеет   цвет
                          указанный во втором элементе поля.

             4            Карта растра имеет максимум  16 цветов и поле
                          bmciColors содержит    16    элементов.Каждый
                          пиксель в  карте  представлен  4-ех   битовым
                          индексом в таблице цветов.

                          Например: если первый  байт  в  карте  растра
                          равен 0x1F, то байт представляет два пикселя.
                          Цвет первого  пикселя  содержится  во  втором
                          элементе,а второго пикселя содержится в 16-ом
                          элементе таблицы.

             8            Карта растра имеет максимум 256 цветов и поле
                          bmciColors имеет  256 элементов.В этом случае
                          каждый пиксель представлен одним байтом.

             24           Карта растра имеет максимум 2^24 цветов. Поле
                          bmciColors есть  NULL.  Каждые  три  байта  в

       Windows 3.0/Ref/6#7                                       = 14 =

                          области растровой  карты  представляют  собой
                          относительную интенсивность красной,  зеленой
                          и голубой составляющей пикселя.

             Цвета в  поле bmciColors должны быть расположены в порядке
        возрастания.

             Альтернативно, для          функций,          использующих
        аппаратно-независимые растровые карты,  поле  bmciColors  может
        быть массивом   16-ти   битовых   беззнаковых,   целых  которые
        определяют индекс в текущей  логической  палитре  взамен  точно
        определенных RGB величин.  В этом случае,программы,использующие
        растровую   карту,   вызывают   функции   аппаратно-независимых
        растровых    карт   с   параметром   wUsage   установленным   в
        DIB_PAL_COLORS.

             Примечание

             Поле bmciColors  не должно содержать индексов палитры,если
        растровая карта будет сохранена в файле или передана  в  другую
        прикладную  программу.  Но  до  тех  пор  пока  растровая карта
        находится под полным управлением  прикладной  программы,таблица
        цветов  растровой карты должна содержать точно определенные RGB
        величины.

        ───────────────────────────────────────────────────────────────
                BITMAPFILEHEADER                                     [3.0]     

             Информация о файле растровой карты

             Структура данных  BITMAPFILEHEADER  содержит  информацию о
        типе,размере  и  формате  файла   аппаратно-независимой   карты
        растра(аппаратно-независимые растровые карты).

             typedef struct tagBITMAPFILEHEADER {
                     WORD   bfType;
                     DWORD  bfSize;
                     WORD   bfReserved1;
                     WORD   bfReserved2;
                     DWORD  bfOffBits;
             } BITMAPFILEHEADER;

             Поля BITMAPFILEHEADER имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             bfType       Определяет тип файла. Должен быть BM.

             bfSize       Определяет размер файла в двойных словах.

             bfReserved1  Зарезервированно и должно быть равно нулю.

       Windows 3.0/Ref/6#7                                       = 15 =


             bfReserved2  Зарезервированно и должно быть равно нулю.

             bfOffBits    Определяет смещение в байтах  самой растровой
                          карты в файле.

             Комментарий

             Структуры данных     BITMAPINFO     или     BITMAPCOREINFO
        распологается    сразу   за   структурой   BITMAPFILEHEADER   в
        файле аппаратно-независимых растровых карт.

        ───────────────────────────────────────────────────────────────
                BITMAPINFO                                           [3.0]     

             Информация об аппаратно-независимой растровой карте

             Структура данных BITMAPINFO полностью определяет размеры и
        информацию  о  цветах для аппаратно-независимой растровой карты
        Windows версии 3.0.

             typedef struct tagBITMAPINFO {
                     BITMAPINFOHEADER   bmiHeader;
                     RGBQUAD            bmiColors[ ];
             } BITMAPINFO;

             Поля BITMAPINFO имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             bmiHeader    Определяет структуру        BITMAPINFOHEADER,
                          которая  содержит  информацию  о  размерах  и
                          цветовом     формате    аппаратно-независимых
                          растровых карт.

             bmiColors    Определяет массив  структур  RGBQUAD, которые
                          определяют цвета в карте растра.

             Комментарий

             Аппаратно-независимая растровая  карта  Windows версии 3.0
        состоит из двух различных частей:

              - структуры BITMAPINFO, которая описывает размеры и цвета
                растровой карты;

              - массива  байт,    которые  определяют пиксели растровой
                карты.

             Биты в  этой  области  упакованы вместе,  но каждая строка
        развертки  должна  быть  дополнена  нулями  до  конца   дальней

       Windows 3.0/Ref/6#7                                       = 16 =

        границы. Однако,границы сегмента могут появляться в любом месте
        растровой  карты.  Начало карты растра находится в левом нижнем
        углу.

             Поле biBitCount    структуры    данных    BITMAPINFOHEADER
        определяет  число  бит,  которые  определяют  каждый  пиксель и
        максимальное количество цветов  в  карте.Это  поле  может  быть
        равным одной из следующих величин:

             1            Карта  растра  монохромная  и  поле bmiColors
                          должно содержать  два  элемента.Каждый  бит в
                          массиве карты представляет  пиксель.Если  бит
                          сброшен,    пиксель    отображается    цветом
                          указанном в первом элементе  поля  bmiColors;
                          если   бит  установлен,  пиксель  имеет  цвет
                          указанный во втором элементе поля.

             4            Карта  растра имеет максимум 16 цветов и поле
                          bmiColors содержит     16    элементов.Каждый
                          пиксель в   карте  представлен  4-ех  битовым
                          индексом в таблице цветов.

                          Например:если первый   байт  в  карте  растра
                          равен 0x1F, то байт представляет два пикселя.
                          Цвет  первого  пикселя  содержится  во втором
                          элементе,а цвет  второго пикселя содержится в
                          16-ом элементе таблицы.

             8            Карта растра имеет максимум 256 цветов и поле
                          bmiColors имеет  до  256   элементов.В   этом
                          случае   каждый   пиксель  представлен  одним
                          байтом.

             24           Карта растра имеет максимум 2^24 цветов. Поле
                          bmiColors есть   NULL.  Каждые  три  байта  в
                          области растровой  карты  представляют  собой
                          относительную интенсивность красной,  зеленой
                          и голубой составляющей пикселя.

             Поле biClrUsed     структуры    данных    BITMAPINFOHEADER
        определяет   число   цветовых   индексов   в   таблице   цветов
        используемой в карте растра.  Если поле biClrUsed установлено в
        ноль,  то растровая карта использует максимальное число цветов,
        передаваемое значению поля biBitCount.

             Цвета в поле bmiColors должны быть расположены  в  порядке
        возрастания.

             Также, для        функции        которая        использует
        аппаратно-независимые растровые  карты,  поле  biClrUsed  может
        быть   массивом   16-ти   битовых  беззнаковых  целых,  которые
        определяют  индекс  текущей  логической  палитры   вместо   RGB
        величин. В  этом  случае  прикладная  программа,   использующая

       Windows 3.0/Ref/6#7                                       = 17 =

        растровую  карту  должна вызывать функции аппаратно-независимых
        растровых карт   с   параметром    wUsage    установленным    в
        DIB_PAL_COLORS.

             Примечание

             Поле bmiColors  не  должно содержать индексов палитры,если
        растровая карта будет сохранена в файле или передана  в  другую
        прикладную  программу.  Но  до  тех  пор  пока  растровая карта
        находиться под полным управлением прикладной программы, таблица
        цветов  растровой карты должна содержать точно определенные RGB
        величины.

        ───────────────────────────────────────────────────────────────
                BITMAPINFOHEADER                                     [3.0]     

             Информация о формате аппаратно-независимой растровой карты

             Структура данных BITMAPINFOHEADER  содержит  информацию  о
        размерах  и  цветовом  формате  аппаратно-независимой растровой
        карты Windows версии 3.0.

             typedef struct tagBITMAPINFOHEADER {
                     DWORD  biSize;
                     DWORD  biWidth;
                     DWORD  biHeight;
                     WORD   biPlanes;
                     WORD   biBitCount;
                     DWORD  biCompression;
                     DWORD  biSizeImage;
                     DWORD  biXPelsPerMeter;
                     DWORD  biYPelsPerMeter;
                     DWORD  biClrUsed;
                     DWORD  biClrImpotant;
             } BITMAPINFOHEADER;

             Поля BITMAPCOREHEADER имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

            Поле          Назначение
            ────          ──────────

            biSize        Определяет число    байт    необходимых   для
                          структуры BITMAPINFOHEADER.

            biWidth       Определяет  ширину карты растра в пикселях.

            biHeight      Определяет высоту карты растра в пикселях.

            biPlanes      Определяет количество  цветовых  планов карты
                          растра для приемного устройства и должно быть
                          установлено в 1.


       Windows 3.0/Ref/6#7                                       = 18 =

            biBitCount    Определяет  число  бит    на пиксель.Значение
                          должно быть равно 1,4,8 или 24.

            biCompression Определяет тип сжатия  для  сжатых  растровых
                          карт   и   может   иметь  одно  из  следующих
                          значений:

                          Величина     Значение
                          ────────     ────────

                          BI_RGB       Означает, что растровая карта не
                                       сжата.

                          BI_RLE8      Определяет формат     "групповое
                                       кодирование"  для растровых карт
                                       с 8-ю битами на пиксель.  Формат
                                       сжатия: это двух-байтовый формат
                                       состоящий  из  счетчика  байтов,
                                       следующим за байтом,  содержащим
                                       индекс цвета.           Смотрите
                                       дальнейшие комментарии       для
                                       получения         дополнительной
                                       информации.

                          BI_RLE4      Определяет формат     "групповое
                                       кодирование"  для растровых карт
                                       с 4-мя битами на пиксель. Формат
                                       сжатия: это двух-байтовый формат
                                       состоящий из  счетчика   байтов,
                                       следующим   за  индексами  цвета
                                       длиной по  слову.  Дополнительно
                                       смотрите дальнейшие комментарии.

             biSiseImage  Определяет размер образа в байтах.

         biXPelsPerMeter  Определяет разрешениеа в пикселях.

            biHeight      Определяет высоту карты растра в пикселях.

            biPlanes      Определяет количество  цветовых  планов карты
                          растра для приемного устройства и должно быть
                          установлено в 1.

            biBitCount    Определяет  число  бит    на пиксель.Значение
                          должно быть равно 1,4,8 или 24.

            biCompression Определяет тип сжатия  для  сжатых  растровых
                          карт   и   может   иметь  одно  из  следующих
                          значений:

                          Величина     Значение
                          ────────     ────────

                          BI_RGB       Означает, что растровая карта не
                                       сжата.

       Windows 3.0/Ref/6#7                                       = 19 =


                          BI_RLE8      Определяет формат     "групповое
                                       кодирование"  для растровых карт
                                       с 8-ю битами на пиксель.  Формат
                                       сжатия: это двух-байтовый формат
                                       состоящий  из  счетчика  байтов,
                                       следующим за байтом,  содержащим
                                       индекс цвета.           Смотрите
                                       дальнейшие комментарии       для
                                       получения         дополнительной
                                       информации.

                          BI_RLE4      Определяет формат     "групповое
                                       кодирование"  для растровых карт
                                       с 4-мя битами на пиксель. Формат
                                       сжатия: это двух-байтовый формат
                                       состоящий из  счетчика   байтов,
                                       следующим   за  индексами  цвета
                                       длиной по  слову.  Дополнительно
                                       смотрите дальнейшие комментарии.

             biSiseImage  Определяет размер образа в байтах.

         biXPelsPerMeter  Определяет разрешение   по   горизонтали    в
                          пикселях   на  единицу  измерения  устройства
                          назначения для  растровой  карты.  Прикладная
                          программа может использовать эту величину для
                          выбора растровой карты  из  группы  ресурсов,
                          которая    лучше   отвечает   характеристикам
                          текущего устройства.

         biYPelsPerMeter  Определяет разрешение по вертикали в пикселях
                          на  единицу  измерения  устройства назначения
                          для растровой карты.

             biClrUsed    Определяет число цветовых индексов в цветовой
                          таблице  действительно используемых растровой
                          картой. Если эта величина установлена в ноль,
                          то растровая  карта  использует  максимальное
                          число  цветов  передаваемых   величине   поля
                          biBitCount.   Дополнительную   информацию   о
                          размерах  цветовой  таблицы  можно  найти   в
                          структуре  BITMAPINFO  ранее описанной в этой
                          главе.

                          Если biClrUsed не  ноль,  то  поле  biClrUsed
                          определяет        действительное        число
                          цветов,которое   графическое   средство   или
                          драйвер устройства  задействует,  если   поле
                          biBitCount  меньше  24.  Если поле biBitCount
                          содержит 24,  то  поле  biClrUsed  определяет

       Windows 3.0/Ref/6#7                                       = 20 =

                          размер таблицы ссылок на цвета,  используемые
                          для оптимальной работы цветовых палитр  среды
                          Windows.

                          Если растровая карта "упакована"(то есть  это
                          растровая карта,  в которой сама карта растра
                          следует   непосредственно    за    заголовком
                          BITMAPINFO и на них имеется общий указатель),
                          то поле biClrUsed должно быть  установлено  в
                          ноль   или  содержать  действительный  размер
                          цветовой таблицы.

             biClrImpotant Определяет число цветовых индексов,  которые
                          считаются  необходимыми  для вывода растровой
                          карты.  Если эта величина равна  нулю,  тогда
                          необходимы все цвета.


              Комментарий

              Структура данных  BITMAPINFO,  составленная  из структуры
        BITMAPCOREHEADER и таблицы цветов, полностью определяет размеры
        и цвета  аппаратно-независимой  растровой  карты Windows версии
        3.0. Смотрите  описание   структуры   данных   BITMAPINFO   для
        получения дополнительной      информации     об     определении
        аппаратно-независимых карт Windows 3.0.

             В прикладной программе  для  получения  таблицы  цветов  в
        структуре  BITMAPINFO содержимое поля biSize нужно использовать
        следующим образом:

        pColor = ((LPSTR) pBitmapInfo + (WORD) (pBitmapInfo -> biSize))

             Формат сжатия растровых карт

             Windows поддерживает форматы для  сжатия  растровых  карт,
        которые определяют их цвета:

             - 8 бит на пиксель

             - 4 бита на пиксель

        Сжатие уменьшает место занимаемое растровой картой на диске или
        в памяти. Ниже описаны эти форматы.

             Когда поле biCompression установлено в BI_RLE8,  растровая
        карта сжимается  с  помощью формата "групповое кодирование" для
        8-битовых растровых карт.  Этот формат может быть сжат в  одном
        из двух режимов:

             - Кодированный

             - Абсолютный

       Windows 3.0/Ref/6#7                                       = 21 =


             Оба режима могут встречаться в любом месте растровой карты.

             Кодированный режим состоит из двух байт:

             - первый определяет  число  "законсервированных"  пикселей
               нарисованных цветом содержащемся во втором байте.  Нужно
               добавить,  что первый байт пары может быть установлен  в
               ноль для указания упрвляющей последовательности, которая
               означает конец линии,конец растровой карты  или  дельту.
               Интерпритацию  управляющей последовательности определяет
               значение второго байта пары.

             - второй  байт  в  этом  случае  может   иметь   следующие
               значения:

             Второй байт
             последовательности   Значение
             ──────────────────   ────────

             0                    Конец строки.

             1                    Конец растровой карты.

             2                    Дельта. Это значит, что следующие два
                                  байта содержат  беззнаковые  величины
                                  указывающие      горизонтальное     и
                                  вертикальное   смещение    следующего
                                  пикселя относительно текущей позиции.

             Абсолютный режим обозначается следующим образом:

             - первый байт должен быть равен нулю.

             - второй  байт  должен  иметь значение между 03H и FFH.  В
               абсолютном режиме   второй  байт  содержит  число  байт,
               которые за этим последуют,  каждый из  которых  содержит
               цвет  одного  пикселя.  Когда второй байт установлен в 2
               или меньше,  упровляющая последовательность будет  иметь
               то   же   значение,  что  и  в  кодированном  режиме.  В
               абсолютном режиме каждый отрезок должен быть выравнен по
               границе слова.

             Следующий пример  показывает  шестнадцатеричные   величины
        8-ми битового сжатого формата:

        03 04 05 06 00 03 45 56 67 00 02 05 01
        02 78 00 00 09 1Е 00 01

             Эта растровая    карта     будет     разжата     следующим
        образом(двухзначные  величины  содержат индекс цвета для одного
        пикселя):


       Windows 3.0/Ref/6#7                                       = 22 =

        04 04 04
        06 06 06 06 06
        45 56 67
        78 78

        переместить текущую позицию на 5 вправо и на 1 вниз

        78 78

        конец линии

        1E 1E 1E 1E 1E 1E 1E 1E 1E

        конец растровой карты RLE

             Когда поле  biComprfss  установлено  в  BI_RLE4  растровая
        карта сжимается,  используя формат "групового кодирования"  для
        4-х   битовых  карт,который  также  использует  кодированный  и
        абсолютный режимы.В   режиме   кодирования   первый  байт  пары
        содержит число пикселей,  рисуемых  цветом,  индексы  которого,
        находяться  во  втором  байте.Второй  байт содержит два индекса
        цвета,один лежит  в  старшем  полубайте,  а  второй  в  младшем
        полубайте.Первый   пиксель   рисуется  цветом,  определенном  в
        старшем полубайте.Второй пиксель рисуется цветом,  определенном
        в  младшем  полубайте.Третий  пиксель  рисуется  опять  цветом,
        определенном в старшем полубайте,  и так далее, до тех пор пока
        все  количество пикселей,  определенное в первом байте не будет
        нарисованно.

             В абсолютном  режиме первый байт содержит ноль,второй байт
        содержит индекс  цвета  в  старшем  и  младшем  полубайтах,один
        индекс  цвета  для  каждого  пикселя.В абсолютном режиме каждый
        отрезок  должен  быть  выравнен  на  границу  слова.Управляющие
        последовательности  конец строки,конец растровой карты и дельта
        также применяются в BI_RLE4.

             Следующий пример показывает шестнадцатиричные величины 4-х
        битовой сжатой растровой карты:

             03 04 05 06 00 06 45 56 67 00 04 78 00 02 05 01
             04 78 00 00 09 1Е 00 01

             Эта карта будет  расжата  как  показано  ниже(двух-значные
        величины определяют индекс цвета для одного пикселя):

             0 4 0
             0 6 0 6 0
             4 5 5 6 6 7
             7 8 7 8


       Windows 3.0/Ref/6#7                                       = 23 =

             переместить текущую позицию на 5 вправо и на 1 вниз

             7 8 7 8

             конец строки

             1 E 1 E 1 E 1 E 1 E

             конец растровой карты RLE.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 24 =

                 CLIENTCREATESTRUCT                                  [3.0]     

             Структура создания окна пользователя MDI

             Структура данных CLIENTCREATESTRUCT содержит информацию  о
        меню    и    первом    дочернем   окне   интерфейса   множества
        документов(MDI) окна  пользователя  MDI.  Прикладная  программа
        посылает   длинный   указатель  на  эту  структуру  в  качестве
        параметра  lpParam  функции  CreateWindow  при  создании   окна
        пользователя MDI.

             typedef struct tagCLIENTCREATESTRUCT
             {
                     HMENU  hWindowMenu;
                     WORD   idFirstChild;
             } CLIENTCREATESTRUCT;

             Поля CLIENTCREATESTRUCT имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────


             hWindowMenu  Это  дескриптор  меню  прикладной   программы
                          Windows.Прикладная программа  может  получить
                          этот  дескриптор  из  меню  окна  фрейма  MDI
                          используя функцию GetSubMehu.

             idFirctChild Это идентифекатор   дочернего   окна  первого
                          созданного MDI     дочернего     окна.Windows
                          увеличивает    идентифекатор    для   каждого
                          дополнительного  дочернего  окна  MDI,которое
                          создает  прикладная программа,и переназначает
                          идентифекатор,когда программа разрушает  окно
                          сохраняя         значения         последующих
                          идентифекаторов.Эти            идентифекаторы
                          используются в сообщениях WM_COMMAND для окон
                          фрейма MDI прикладной программы,  когда  окно
                          выбрано   из   меню   Windows   и  не  должны
                          пересекаться с       другими       командными
                          идентификаторами.

        ───────────────────────────────────────────────────────────────
                                         COLORREF                              

             Определение цветов

             Значение цвета   COLORREF  -  это  длинное  целое  которое
        определяет цвет.  Функции  GDI которым необходим цвет(такие как
        CreatePen и FloodFill) получают значение COLORREF как параметр.
        В  зависимости  от  того  как  прикладная  программа использует
        значение   COLORREF,значение   имеет   три   различные   формы,

       Windows 3.0/Ref/6#7                                       = 25 =

        представленные ниже:

             - Явно заданные величины для красного, зеленого и голубого
               (RGB)

             - Индекс в логической цветовой палитре

             - Величину RGB относительной палитры

        Явный формат RGB  Когда  значения  RGB  определяются  явно,  то
                          величина     COLORREF     имеет     следующую
                          шестнадцатиричную форму:

                          0x00bbggrr

                          Младший байт содержит значение  относительной
                          яркости красного цвета,  второй байт содержит
                          значение  зеленого  цвета,  и   третий   байт
                          содержит   значение   голубого  цвета.  Самый
                          старший байт обязательно должен быть нулевым.
                          Максимальное  значение  для каждого из байтов
                          FF  (шестнадцатеричное).   Следующий   список
                          иллюстрирует    шестнадцатеричные   величины,
                          которые задают показываемые цвета.

                          Значение     Цвет
                          ────────     ────

                          0x000000FF   Чисто красный

                          0x0000FF00   Чисто зеленый

                          0x00FF0000   Чисто голубой

                          0x00000000   Черный

                          0x00FFFFFF   Белый

                          0x00808080   Средне серый

                          Макро RGB    получает   на   входе   значения
                          красного,  зеленого  и   голубого   цвета   и
                          возвращает  точно  определенную  RGB COLORREF
                          величину.

        Индекс палитры    Когда определяется    индекс   в   логической
                          палире,  то величина COLORREF имеет следующую
                          шестнадцатеричную форму:

                          0x0100iiii

                          Два младших  байта  содержат  16-ти   битовое
                          целое   определяющее   индекс   в  логической

       Windows 3.0/Ref/6#7                                       = 26 =

                          палитре.  Третий байт должен быть равен нулю.
                          Четвертый    (старший)   байт   должен   быть
                          установлен в 1.

                          Например,  шестнадцатеричная         величина
                          0x01000000 определяет цвет во входной палитре
                          с индексом 0;  0x0100000C определяет цвет  на
                          входе с индексом 12, и так далее.

                          Макро PALETTEINDEX     преобразует     целое,
                          представляющее  собой  индекс  в   логической
                          палитре,   в   индексно-палитровую   величину
                          COLORREF.

        RGB относительной
        палитры           Когда определяется величина RGB относительной
                          палитры, значение  COLORREF  имеет  следующую
                          шестнадцатеричную форму:

                          0x02bbggrr

                          Как и в явно заданном RGB,  три младших байта
                          содержат  значения  для  красной,  зеленой  и
                          голубой  составляющей,  а старший байт должен
                          быть равен 2.

                          Для устройств      вывода      поддерживающих
                          логическую палитру,  Windows для значения RGB
                          относительной  палитры  подбирает   ближайший
                          цвет   в   логической   палитре   конкретного
                          устройства, как будто бы программа определила
                          индекс   для  этого  элемента  палитры.  Если
                          устройство вывода не  поддерживает  системную
                          палитру,  то Windows использует относительную
                          палитру RGB так  же  как  это  было  в  точно
                          определенной RGB COLORREF величине.

                          Макро PALETTERGB  получает  на входе значения
                          красного,  зеленого  и   голубого   цвета   и
                          возвращает      RGB     COLORREF     величину
                          относительной палитры.

             Комментарий

             Перед передачей           палитро-индексной            или
        палитро-относительной RGB величины COLORREF в функцию,  которая
        также  требует  параметр  конкретного  устройства,   прикладная
        программа,  которая  использует свою собственную палитру должна
        выбрать свою  палитру  на  конкретном  устройстве  (посредством
        вызова  функции  SelectPalette),  и  создать палитру (с помощью
        функци RealizePalette).  Это  гарантирует,  что  функция  будет
        использовать  правильный цвет из входной палитры.  Для функций,
        которые  создают  объект  (таких  как  CreatePen),   прикладная

       Windows 3.0/Ref/6#7                                       = 27 =

        программа  должна  выбрать  и создать палитру до выбора объекта
        для конкретного устройства.

        ───────────────────────────────────────────────────────────────
                COMPAREITEMSTRUCT                                    [3.0]     

             Рисуемая владельцем сортируемая информация

             Структура данных       COMPAREITEMSTRUCT      поддерживает
        идентификаторы  и  программно-поддерживаемые  данные  для  двух
        объектов   в   отсортированных   активных   панелях  перечня  и
        комбинированных панелях.

             Каждый раз,  когда  прикладная  программа  добавляет новый
        объект к рисуемой владельцем панели перечня  и  комбинированной
        панели  имеющие  тип  CBS_SORT  или LBS_SORT,  Windows посылает
        пользователю сообщение WM_COMPAREITEM.  Параметр  lParam  этого
        сообщения   содержит  длинный  указатель  на  структуру  данных
        COMPAREITEMSTRUCT.  Когда  владелец  получает   сообщение,   он
        сравнивает  два  объекта  и  возвращает  значение  показывающее
        объект,который расположен раньше.  Для получения дополнительной
        информации смотрите  описание  сообщения WM_COMPAREITEM в главе
        6,"Список сообщений", Справочного руководства, Том 1.

             typedef struct tagCOMPAREITEMSTRUCT {
                     WORD   CtlType;
                     WORD   CtlID;
                     HWND   hwndItem;
                     WORD   itemID1;
                     DWORD  itemData1;
                     WORD   itemID2;
                     DWORD  itemData2;
             } COMPAREITEMSTRUCT;


             Поля COMPAREITEMSTRUCT имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             CtlType      Это  ODT_LISTBOX (который определяет рисуемую
                          владельцем панель перечня)  или  ODT_COMBOBOX
                          (который   определяет   рисуемую   владельцем
                          комбинированную панель).

             CtlID        Это управляющий   ID  для  панели  перечня  и
                          комбинированной панели.

             hwndItem     Это дескриптор окна управления.

             itemID1      Это индекс  первого   сравниваемого   объекта
                          панели перечня или комбинированной панели.

       Windows 3.0/Ref/6#7                                       = 28 =


             itemData1    Это программно  -  поддерживаемое  данное для
                          первого  сравниваемого  обьекта.Это  значение
                          было передано как параметр lParam  сообщения,
                          которое  добавляет  обьект в панель перечня и
                          комбинированную панель.

             hwndID2      Это индекс   второго   сравниваемого  обьекта
                          панели перечня и комбинированной панели.

             itemData2    Это программно - поддерживаемое   данное  для
                          второго  сравниваемого  обьекта.Это  значение
                          было передано как параметр lParam  сообщения,
                          которое  добавляет  обьект в панель перечня и
                          комбинированную панель.

        ───────────────────────────────────────────────────────────────
                                          COMSTAT                              

             Состояние устройства связи

             Структура данных COMSTAT содержит информацию об устройстве
        связи.

             tydef struct tagCOMSTAT {
                   BYTE   fCtsHold: 1;
                   BYTE   fDsrHold: 1;
                   BYTE   fRlsdHold:  1;
                   BYTE   fXoffHold:  1;
                   BYTE   fXoffSent:  1;
                   BYTE   fEof:   1;
                   BYTE   fTxim:  1;
                   WORD   cbInQue;
                   WORD   cbOutQue;
             } COMSTAT;

             Поля COMSTAT имеют следующие значения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             fCtsHold: 1   Указывает,  будет  ли ожидаться при передаче
                           включение сигнала CTS (готов к передаче).

             fDsrHold: 1   Указывает,  будет  ли ожидаться при передаче
                           включение сигнала DSR (готовность аппаратуры
                           передачи данных).

             fRlsdHold: 1  Указывает, будет ли ожидаться  при  передаче
                           включение сигнала RLSD (обнаружение принима-
                           емого линейного сигнала).


       Windows 3.0/Ref/6#7                                       = 29 =

             fXoffHold: 1  Указывает,  будет ли ожидаться  при передаче
                           переход в состояние  ожидания  в  результате
                           получения XoffChar;

             fXoffSent: 1  Указывает, будет ли ожидаться при передаче в
                           состояние   ожидания  в  результате  посылки
                           XoffChar  для  содействия  системам, которые
                           принимают следующий символ как XON, невзирая
                           на реальный символ.

             fEof: 1       Указывает, был ли получен символ EofChar.

             fTxim: 1      Указывает,  ожидается  ли, что символ  будет
                           послан немедленно.

             cbInQue       Определяет  количество  символов  в  очереди
                           приема.

             cbOutQue      Определяет  количество  символов  в  очереди
                           передачи.

             Смотрите также описание  функции  GetCommError  в  "Списке
        функций", Руководства программиста, том 1,глава 4.

        ───────────────────────────────────────────────────────────────
                                       CREATESTRUCT                            

             Структура создания окна

             Структура данных   CREATESTRUCT    определяет    параметры
        инициализации, посылаемые в функцию окна прикладной программы.

             typedef struct  tagCREATESTRUCT  {
                     LPSTR   lpCreateParams;
                     HANDLE  hInstance;
                     HANDLE  hMenu;
                     HWND    hwndParent;
                     int     cy;
                     int     cx;
                     int     y;
                     int     x;
                     long    style;
                     LPSTR   lpszName;
                     LPSTR   lpszClass;
                     long    ExStyle;
             } CREATESTRUCT;

             Поля CREATESTRUCT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 30 =

             Поле         Назначение
             ────         ──────────

             lpCreateParams Указывает    на    данные,    которые   будут
                          использоваться при создании окна.

             hInstance    Определяет   дескриптор   экземпляра  модуля,
                          владеющего новым окном.

             hMenu        Определяет  дескриптор  меню, который  должен
                          использоваться новым окном.

             hwndParent   Определяет   дескриптор   окна,   являющегося
                          родительским по отношению к новому окну.  Это
                          поле равно NULL,  если  новое  окно  является
                          окном верхнего уровня.

             cy           Определяет высоту нового окна.

             cx           Определяет ширину нового окна.

             y            Определяет  координату y верхнего левого угла
                          нового    окна.    Если    новое    окно    -
                          дочернее,координаты  указываются относительно
                          родительского   окна.   В  других  случаях  -
                          относительно начала координат экрана.

             x            Определяет  координату x верхнего левого угла
                          нового    окна.    Если    новое    окно    -
                          дочернее,координаты  указываются относительно
                          родительского   окна.   В  других  случаях  -
                          относительно начала координат экрана.

             style        Определяет тип нового окна.

             lpszName     Определяет   имя  нового  окна.  Это  длинный
                          указатель  на  оканчивающуюся  нулем строку в
                          коде ASCII.

             lpszClass    Определяет имя класса нового окна.Это длинный
                          указатель  на  оканчивающуюся  нулем строку в
                          коде ASCII.

             ExStyle      Определяет расширенный тип для нового окна.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 31 =

                                            DCB                                

             Блок управления устройством связи

             Структура данных    DCB    определяет   среду   управления
        последовательного устройства связи.

             typedef struct  tagDCB  {
                     BYTE    Id;
                     WORD    BaudRate;
                     BYTE    ByteSize;
                     BYTE    Parity;
                     BYTE    StopBits;
                     WORD    RlsTimeout;
                     WORD    CtsTimeout;
                     WORD    DsrTimeout;

                     BYTE    fBinary:  1;
                     BYTE    fRtsDisable:  1;
                     BYTE    fParity: 1;
                     BYTE    fOutxCtsFlow:  1;
                     BYTE    fOutxDsrFlow: 1;
                     BYTE    fDummy: 2;
                     BYTE    fDtrDisable: 1;

                     BYTE    fOutX:  1;
                     BYTE    fInX: 1;
                     BYTE    fPeChar: 1;
                     BYTE    fNull: 1;
                     BYTE    fChEvt:  1;
                     BYTE    fDtrFlow:  1;
                     BYTE    fRtsFlow: 1;
                     BYTE    fDummy2: 1;

                     char    XonChar;
                     char    XoffChar;
                     WORD    XonLim;
                     WORD    XoffLim;
                     char    PeChar;
                     char    EofChar;
                     char    EvtChar;
                     WORD    TxDelay;
             } DCB;

             Поля DCB имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             Id           Идентифицирует устройство связи. Это значение
                          устанавливается   драйвером   устройства.Если
                          самый  старший  бит  включен, то это DCB -для

       Windows 3.0/Ref/6#7                                       = 32 =

                          параллельного устройства.

             BaudRate     Определяет  скорость  передачи  информации  в
                          бодах, с которой работает устройство связи.

             ByteSize     Определяет  количество  бит  в  посылаемых  и
                          принимаемых  символах.  Это  может быть любое
                          число в интервале от 4 до 8.

             Parity       Определяет    используемую   схему   контроля
                          четности.  Это  может  быть одно из следующих
                          значений:


                          Величина     Значение
                          ────────     ────────

                          NOPARITY     отсутствие    контроля  паритета

                          ODDPARITY    нечетность.

                          EVENPARITY   четность.

                          MARKPARITY   маркер.

                          SPACEPARITY  пробел.

             StopBits     Определяет   количество   используемых  битов
                          останова.  Это  может  быть одно из следующих
                          значений:

                          Величина     Значение
                          ────────     ────────

                          ONESTOPBIT   1  бит останова.

                          ONE5STOPBITS 1.5  бита останова.

                          TWOSTOPBITS  2 бита останова.

             RlsTimeout   Определяет  максимальное количество времени в
                          миллисекундах,  в течении которого устройство
                          будет    ожидать   включения   сигнала   RLSD
                          (обнаружение принимаемого линейного сигнала).

             CtsTimeout   Определяет  максимальное количество времени в
                          миллисекундах, в течении которого  устройство
                          будет  ожидать включения сигнала CTS (готов к
                          передаче).

             DsrTimeout   Определяет  максимальное количество времени в
                          миллисекундах,  в течении которого устройство
                          будет    ожидать    включения   сигнала   DSR

       Windows 3.0/Ref/6#7                                       = 33 =

                          (готовность аппаратуры передачи данных).

             fBinary: 1   Определяет двоичный режим.В недвоичном режиме
                          EofChar распознается при вводе и запоминается
                          в конце данных.

          fRtsDisable:1   Определяет,  является  ли  сигнал RTS (запрос
                          передачи) недоступным.  Если поле установлено
                          в 1,   то  RTS  не  используется  и  остается
                          выключенным.  Если  поле  очищено,   то   RTS
                          устанавливается,       когда       устройство
                          открывается,    и     сбрасывается,     когда
                          закрывается.

             fParity:1    Определяет  доступность контроля по паритету.
                          Если   поле   установлено,   то  контроль  по
                          паритету    осуществляется   и   об   ошибках
                          сообщается.

        fOutxCtsFlow:1    Определяет необходимость отслеживания сигнала
                          CTS   (готов  к  передаче  )  для  управления
                          потоком вывода. Если это поле установлено в 1
                          и      CTS     сбрасывается,     то     вывод
                          приостанавливается,  пока CTS снова не  будет
                          установлен.

        fOutxDsrFlow:1    Определяет необходимость отслеживания сигнала
                          DSR  (готовность  аппаратуры передачи данных)
                          для управления потоком вывода.  Если это поле
                          установлено в 1 и DSR сбрасывается,  то вывод
                          приостанавливается,  пока DSR снова не  будет
                          установлен.

             fDummy: 2    Зарезервировано.

         fDtrDisable:1    Определяет,    является    ли    сигнал   DTR
                          (готовность  терминала) недоступным. Если это
                          поле равно  1,то  DTR   не   используется   и
                          остается выключенным.  Если это поле равно 0,
                          то  DTR  устанавливается,  когда   устройство
                          открывается,     и     сбрасывается,    когда
                          закрывается.

             fOutX: 1     Определяет,    должно    ли    использоваться
                          управление    потоком   XON/XOFF   во   время
                          передачи. Если  это  поле  установлено  в  1,
                          передача    останавливается   при   получении
                          символа  XoffChar  и  запускается  снова  при
                          получении символа XonChar.

             fInX:  1     Определяет,    должно    ли    использоваться
                          управление  потоком XON/XOFF во время приема.
                          Если это  поле  равно  1,  то  символ XonChar

       Windows 3.0/Ref/6#7                                       = 34 =

                          посылается,  когда очередь  приема  достигает
                          XoffLim   символов,будучи   полной,  и  когда
                          очередь  приема  достигает  XonLim  символов,
                          будучи пустой.

             fPeChar: 1   Устанавливает,  что   символы,  получаемые  с
                          ошибками   паритета,   должны  быть  замещены
                          символом,  указанным  PeChar.  Для того чтобы
                          замещение    производилось,    должно    быть
                          установлено поле fParity.

             fNull:   1   Устанавливает,  что  принимаемые символы NULL
                          должны быть сброшены.

             fChEvt:  1   Устанавливает,что  получение  EvtСhar  должно
                          отмечаться как событие.

             fDtrFlow:1   Устанавливает   использование   сигнала   DTR
                          (готовность терминала) для управления потоком
                          приема. Если это поле установлено в 1, то DTR
                          cбрасывается,когда очередь  приема  достигает
                          XoffLim    символов,    будучи    полной,   и
                          устанавливается,   когда    очередь    приема
                          достигает XonLim символов,будучи пустой.

            fRtsFlow:1    Устанавливает   использование   сигнала   RTS
                          (запрос   передачи)  для  управления  потоком
                          приема. Если   это   поле  равно  1,  то  RTS
                          cбрасывается,  когда очередь приема достигает
                          XoffLim     символов,будучи     полной,     и
                          устанавливается,   когда    очередь    приема
                          достигает XonLim символов,будучи пустой.

             fDummy2:1    Зарезервировано.

             XonChar      Определяет  значение символа XON в коде ASCII
                          и для посылки, и для приема.

             XoffChar     Определяет значение символа XOFF в коде ASCII
                          и для посылки, и для приема.

             XonLim       Определяет       минимальное       количество
                          символов,которое  допустимо  в очереди приема
                          до посылки символа XON.

             XoffLim      Определяет предельное максимальное количество
                          символов,  которое допустимо в очереди приема
                          до посылки  символа  XOFF.  Значение  XoffLim
                          вычитается   из  размера  очереди  приема  (в
                          байтах)    для    вычисления    максимального
                          количества допустимых символов.

             PeChar       Определяет  значение  символа,  используемого

       Windows 3.0/Ref/6#7                                       = 35 =

                          для  замещения символов, получаемых с ошибкой
                          паритета.

             EvtChar      Определяет  значение  символа,  используемого
                          для сигнализации о событии.

             EofChar      Определяет  значение  символа,  используемого
                          для сигнализации о конце данных.

             TxDelay      Не используется в настоящее время.

             Смотрите также описание функций BuildCommDCB, GetCommState
        и SetCommState  в  "Списке  функцй",  Руководства программиста,
        Том1, глава 4.

        ───────────────────────────────────────────────────────────────
                DELETEITEMSTRUCT                                     [3.0]     

             Удаляемый элемент панели перечня рисуемой владельцем

             Структура данных   DELETEITEMSTRUCT   описывает  удаляемый
        элемент панели перечня или комбинированной панели,когда элемент
        удаляется из панели или панель перечня и комбинированная панель
        разрушается.Windows посылает сообщение WM_DELETEITEM  владельцу
        для каждого  удаленного  элемента.  Параметр  сообщения  lParam
        содержит указатель на эту структуру.

             typedef struct tagDELETEITEMSTRUCT
              {
                     WORD   CtlType;
                     WORD   CtlID;
                     WORD   itemID;
                     HWND   hwndItem;
                     DWORD  itemData;
              } DELETEITEMSTRUCT;

             Поля DELETEITEMSTRUCT имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             CtlType      Это  ODT_LISTBOX(который  определяет рисуемую
                          владельцем панель перечня) или ODT_COMBOBOX (
                          который    определяет   рисуемую   владельцем
                          комбинированную панель).

             CtlID        Это  управляющий  ID  для  панели  перечня  и
                          комбинированной панели.

             itemID       Это индекс удаляемого элемента панели перечня
                          или комбинированноц панели.


       Windows 3.0/Ref/6#7                                       = 36 =

             hwndItem     Это дескриптор окна управления.

             itemData     Содержит значение переданное блоку управления
                          в     параметре     lParam    в    сообщениях
                          LB_INSERTSTRING,LB_ADDSTRING,CB_INSERTSTRING
                          CB_ADDSTRING,  когда  элемент  был добавлен в
                          панель перечня.

        ───────────────────────────────────────────────────────────────
                DEVMODE                                              [3.0]     

             Информация об инициализации драйвера принтера

              Структура данных    DEVMODE    содержит   информацию   об
        инициализации  устройства  и  конфигурации  драйвера  принтера.
        Прикладная   программа   передает   эту   структуру  в  функции
        DeviceCapabilities и ExtDeviceMode.

             typedef struct tag_devicemode  {
                     char   dmDeviceName[32];
                     WORD   dmSpecVersion;
                     WORD   dmDriverVersion;
                     WORD   dmSize;
                     WORD   dmDriverExtra;
                     DWORD  dmFields;
                     short  dmOrientation;
                     short  dmPaperSize;
                     short  dmPaperLenght;
                     short  dmPaperWidth;
                     short  dmScale;
                     short  dmCopies;
                     short  dmDefaultSource;
                     short  dmPrintQuality;
                     short  dmColor;
                     short  dmDuplex;
                     BYTE   dmDriverData[ dmDriverExtra ];
             } DEVMODE;

             Поля DEVMODE имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             dmDeviceName Определяет    имя    устройства    из   числа
                          поддерживаемых драйверов. Например,  "PCL/HPL
                          LaserJet"  в  случае  PCL/HPL(R) LaserJet(R).
                          Эта строка уникальна среди  набора  драйверов
                          устройств.

            dmSpecVersion Определяет    номер    версии   инициализации
                          спецификации   данных,  на  которых  основана
                          структура.  Номер  версии  следует  из номера

       Windows 3.0/Ref/6#7                                       = 37 =

                          версии Windows и для этой версии: 0x300.

          dmDriverVersion Определяет  номер  версии  драйвера принтера,
                          назначенный его разработчиком.

                   dmSize Определяет  размер структуры DEVMODE в байтах
                          исключая   поле  dmDriverData  (зависящее  от
                          устройства).   Если   прикладная    программа
                          работает   только   с   аппаратно-независимой
                          частью данных,  она  может  использовать  это
                          поле  для  определения  длинны  структуры, не
                          делая вычислений для различных версий.

            dmDriverExtra Содержит  размер поля dmDriverData и это есть
                          длина  аппаратно-зависимых данных в структуре
                          DEVMODE.   Если   прикладная   программа   не
                          использует аппаратно-зависимой информации, то
                          это поле должно содержать ноль.

                  dmField Это битовое поле, которое определяет какое из
                          оставшихся    полей     структуры     DEVMODE
                          инициализировано.  Бит  0  (определенный  как
                          DM_ORIENTATION) соответствует  dmOrientation;
                          бит   1   (определенный   как   DM_PAPERSIZE)
                          соответствует  dmPaperSize,  и   так   далее.
                          Драйвер принтера поддерживает только те поля,
                          которые   являются   подходящими  для  данной
                          конструкции принтера.

            dmOrientation Выбирает  направление  бумаги. Это может быть
                          либо        DMORIENT_PORTRAIT(1),        либо
                          DMORIENT_LANDSCAPE(2).

              dmPaperSise Выбирает размер  бумаги  для печати. Это поле
                          может быть равно нулю, если  длина  и  ширина
                          бумаги  установлена  полями  dmPaperLenght  и
                          dmPaperWidth. Во всех остальных случаях  поле
                          dmPaperSise  может  иметь  одно  из следующих
                          значений:

                          Величина            Зачение
                          ────────            ───────

                          DMPAPER_LETTER      лист 8 1/2 на 11 дюймов

                          DMPAPER_LEGAL       лист 8 1/2 на 14 дюймов

                          DMPAPER_A4          лист 210 на 297
                                              миллиметров

                          DMPAPER_CSHEET      лист 17 на 22 дюйма

                          DMPAPER_DSHEET      лист 22 на 34 дюйма

       Windows 3.0/Ref/6#7                                       = 38 =


                          DMPAPER_ESHEET      лист 34 на 44 дюйма

                          DMPAPER_ENV_9       конверт #9 3 7/8 на 8 7/8
                                              дюймов
                          DMPAPER_ENV_10      конверт #10 4 1/8 на 9 1/5
                                              дюйма
                          DMPAPER_ENV_11      конверт #11 4 1/2 на 10 3/8
                                              дюймов
                          DMPAPER_ENV_12      конверт #12 4 3/4 на 11
                                              дюймов
                          DMPAPER_ENV_14      конверт #14 5 на 11 1/2
                                              дюймов

            dmPaperLenght Переопределяет     длину     листа    бумаги,
                          определенную   полем  dmPaperSize,  либо  для
                          определения  размера  бумаги  или  для  таких
                          устройств  как  матричные  принтеры,  которые
                          могут печатать на бумаге  произвольной длины.
                          Эти    величины,   вместе  со всеми   другими
                          величинами  определяют  физическую  длину  в
                          десятых долях миллиметра.

             dmPaperWidth Переопределяет    ширину     листа     бумаги
                          определенную   полем  dmPaperSize.

                  dmScale Масштабирует     печатаемый      вывод.Размер
                          печатаемой  страницы  получается   умножением
                          величины  dmScale/100  на  физический  размер
                          страницы. Лист с размерами письма в сочетании
                          с величиной dmScale равной 50  будет  выведен
                          размером  17  на 22 дюйма,  и текст и графика
                          будут изображены  в  половину  их  нормальной
                          величины.

                 dmCopies Выбирает   число    печатаемых   копий,  если
                          устройство    поддерживает    режим    печати
                          нескольких копий одной страницы.

          dmDefaultSource Определяет пенал   с   бумагой,  из  которого
                          бумага подается. Прикладная  программа  может
                          переопределить этот выбор путем мспользования
                          управляющей                последовательности
                          GETSETPAPERBINS. Возможно следующее включение
                          пеналов:

                          DMBIN_DEFAULT

                          DMBIN_UPPER

                          DMBIN_LOWER

                          DMBIN_MANUAL

       Windows 3.0/Ref/6#7                                       = 39 =


                          DMBIN_TRACTOR

                          DMBIN_ENVELOPE

                          Также  существует  область  зарезервированных
                          значений для пеналов зависимых от  устройств.
                          Управляющие                последовательности
                          GETSETPAPERBINS  и  ENUMPAPERBINS  используют
                          эти     индексы     для    совместимости    с
                          инициализацией информации.

           dmPrintQuality Определяет тип  разрешения принтера. Возможны
                          четыре предопределенных аппаратно-независимых
                          значения:

                          DMRES_HIGH   (-4)

                          DMRES_MRDIUM (-3)

                          DMRES_LOW    (-2)

                          DMRES_DREAFT (-1)

                          Если  задана  положительная  величина, то она
                          определяет    число    точек    на   дюйм  и,
                          следовательно, зависит от устройства.

                  dmColor На  цветных   принтерах   переключает   между
                          цветным  и  монохромным   режимом.   Возможны
                          следующие значения:

                          - DMCOLOR_COLOR(1)

                          - DMCOLOR_MONOCROME(2)

                dmDuplex  Выбирает  двустороннюю  печать  для принтеров
                          поддерживающих этот  режим.  Для  этого  поля
                          возможны следующие значения:

                          - DMDUP_SIMPLEX    (1)

                          - DMDUP_HORIZONTAL (2)

                          - DMDUP_VERTICAL   (3)

            mDriverData[] Содержит  зависимые  от  устройства  данные,
                          определенные драйвером устройства.

            Комментарий

            Только драйверы  настроенные  для  Windows  версии  3.0  и,
        те которые   экспортируют   функцию   ExtDeviceMode  используют

       Windows 3.0/Ref/6#7                                       = 40 =

        структуру DEVMODE.

        ───────────────────────────────────────────────────────────────
                                        DLGTEMPLATE                            

             Шаблон панели диалога

             Структура данных  DLGTEMPLATE определяет содержание панели
        диалога. Данная структура подразделяется на три части:

             - Структура данных     Содержит   общие  описания   панели
               заголовка            диалога.

             - Структура данных     Определяет шрифт, которым нарисован
               информации о         текст в панели  диалога. Эта  часть
               шрифтах              необязательна.

             - Список элементов     Описывает    части,    составляющие
                                    панель диалога.

             Эту структуру  используют  функции   CreateDialogIndirect,
        CreateDialogIndirectParam, DialogBoxIndirect  и функция
        DialogBoxInderectParam.

             Структура данных заголовка  DLGTEMPLATE:
        ───────────────────────────────────────────────────────────────

             typrdef struct  {
                     long  dtStyle;
                     BYTE  dtItemCount;
                     int   dtX;
                     int   dtY;
                     int   dtCX;
                     int   dtCY;
                     char  dtMenuName[];
                     char  dtClassName[];
                     char  dtCaptionText[];
             } DLGTEMPLATE;

             Поля заголовка имеют следующее значение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             dtStyle      Определяет тип панели  диалога.Это может быть
                          одна из следующих величин:

                          Величина        Значение
                          ────────        ────────

                          DS_LOCALEDIT    Определяет,   что       текст
                                          сохраненный для редактируемых

       Windows 3.0/Ref/6#7                                       = 41 =

                                          блоков    управления    будет
                                          размещен в локальном сегменте
                                          данных прикладной  программы.
                                          Это  позволяется использовать
                                          в сообщениях  EM_GETHANDLE  и
                                          EM_SETHANDLE.Если этот тип не
                                          определен,то           данные
                                          редактируемого          блока
                                          управления    размещаются   в
                                          отдельном  глобальном   блоке
                                          днных.

                          DS_SYSMODAL     Определяет системную модель
                                          панели диалога.

                          DS_MODALFRAME   Определяет    модель   панели
                                          диалога с окантовкой.Этот тип
                                          может  быть  скомбинирован  с
                                          флагами  типов  WS_CAPTION  и
                                          WS_SYSMENU    для    создания
                                          панели  диалога  со   строкой
                                          заголовка и системным меню.

                          DS_ABSALIGN     Показывает,что dtX  и   dtY в
                                          вычисляются      относительно
                                          начала     экрана,    а    не
                                          относительно владельца панели
                                          диалога.

                          DS_SETFONT      Определяет,    что     будет
                                          использоваться другой  шрифт,
                                          а  не  системный,  для вывода
                                          текста в панели  диалога.Если
                                          этот     флаг     установлен,
                                          структура  данных   FONTINFO,
                                          описанная     ниже,    должна
                                          следовать   сразу    же    за
                                          заголовком DLGITEMTEMPLATE.

                                          Когда  Windows создает панель
                                          диалога  с  этим   атрибутом,
                                          Windows   посылает  сообщение
                                          WM_SETFONT в  панель  диалога
                                          перед     созданием    блоков
                                          управления.

                          DS_NOIDLEMSG    Определяет, что   Windows  не
                                          посылает            сообщение
                                          WM_ENTERIDLE владельцу панели
                                          диалога  пока  панель диалога
                                          отображается.

             dtItemCount  Определяет число элементов в панели диалога.

       Windows 3.0/Ref/6#7                                       = 42 =

                          Панель диалога может содержать до 255 блоков
                          управления.

             dtX          Определяет координату X верхнего  левого угла
                          панели диалога,в  единицах  измерения  равных
                          1/4 базовой  ширины  сивола.  Базовая  ширина
                          символа   вычисляется   из  высоты  и  ширины
                          текущего системного      шрифта;      функция
                          GetDialgBoxUnits  возвращает  базовую  ширину
                          символа в пикселях. Если величина DS_ABSALIGN
                          не   установлена   в  поле  dtStyle,  то  это
                          значение  вычисляется   относительно   начала
                          координат  области пользователя родительского
                          окна.

             dtY          Определяет координату Y верхнего левого  угла
                          панели диалога  в  единицах  измерения равных
                          1/8 базовой  высоты  символа.  Если  величина
                          DS_ABSALIGN в поле dtStyle не установлена, то
                          это значение ычисляется  относительно  начала
                          координат  области пользователя родительского
                          окна.

             dtCX         Определяет ширину панели  диалога в  единицах
                          измерения  базовой ширины символа.

             dtCY         Определяет высоту панели  диалога в  единицах
                          измерения базовой высоты символа.

        dtResourceName[]  Определяет   оканчивающуюся   нулем   строку,
                          специфицирующую имя меню панели диалога. Если
                          это  поле  NULL,  то  панель диалога не имеет
                          меню.

           ClassName[]    Определяет  оканчивающуюся    нулем   строку,
                          специфицирующую имя    класса   окна   панели
                          диалога. Если  это  поле  ноль,  то создается
                          панель диалога   стандартного   типа.    Если
                          прикладная программа определяет имя класса,то
                          она   должна   прямо   снабдить    сообщением
                          процедуру   диалога,   которая   обрабатывает
                          каждую панель диалога,  либо вызвать  функцию
                          DefDlgProc для   обработки  сообщения.  Также
                          прикладная программа должна  зарегистрировать
                          класс   окна   в  поле  cbWndExtra  структуры
                          WNDCLASS установленном в DLGWINDOWEXTRA.

         dtCaptionText[]  Определяет   оканчивающуюся   нулем   строку,
                          которая является   заголовоком   для   панели
                          диалога.

             Структура данных о шрифте FONTINFO
             ───────────────────────────────────

       Windows 3.0/Ref/6#7                                       = 43 =


             Структура данных FONTINFO содержит информацию  о  размерах
        точки и  типе  начертания  шрифта,  который   система   Windows
        использует для вывода текста в панели диалога.

             typedef struct {
                     short int   PointSize;
                     char        szTypeFace[];
             } FONTINFO;

             Поля FONTINFO имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             PointSize    Определяет размер начертания шрифта в точках.

             szTypeFace   Это  оканчивающаяся  нулем   строка,  которая
                          определяет имя  начертания  шрифта.  Например
                          "Courier".

             Комментарий

             Определенный шрифт  должен  быть  предварительно  загружен
        либо из WIN.INI, либо явным вызовом функции LoadFont.

             Список элементов
        ───────────────────────────────────────────────────────────────

             Список элементов  состоит  из  одной  или  более  структур
        данных  DLGITEMTEMPLATE,по одной для каждого блока управления в
        панели диалога.  Первая такая структура  следует  сразу  же  за
        структурой FONTINFO  или  за  заголовком  в  первом байте после
        символа, оканчивающегося нулем в поле  szTypeFace  или  в  поле
        dtCaptionText[]. Ниже    приведен   формат   структуры   данных
        DLGITEMTEMPLATE.

             typedef struct {
                     int  dtilX;
                     int  dtilY;
                     int  dtilCX;
                     int  dtilCY;
                     int  dtilID;
                     long dtilStyle;
                     char dtilClass[];
                     char dtilText[];
                     BYTE dtilInfo;
                     PTR  dtilData;
             } DLGITEMTEMPLATE;

             Поля DLGITEMTEMPLATE имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

       Windows 3.0/Ref/6#7                                       = 44 =


             Поле         Назначение
             ────         ──────────

             dtilX        Определяет координату X верхнего левого  угла
                          элемента  панели диалога,в единицах измерения
                          равных 1/4   базовой  ширины  символа.Базовая
                          ширина символа вычисляется из высоты и ширины
                          текущего     системного    шрифта;    функция
                          GetDialgBoxUnits  возвращает  базовую  ширину
                          символа в пикселях.  Это значение вычисляется
                          относительно    начала    координат   области
                          пользователя родительского окна.

             dtilY        Определяет координату Y верхнего левого  угла
                          элемента  панели диалога в единицах измерения
                          равных 1/8  базовой   высоты   символа.   Это
                          значение   вычисляется   относительно  начала
                          координат области пользователя  родительского
                          окна.

             dtilCX       Определяет  расширение ширины элемента панели
                          диалога,в  единицах  измерения   равных   1/4
                          базовой ширины    символа.   Базовая   ширина
                          символа  вычисляется  из  высоты   и   ширины
                          текущего системного      шрифта;      функция
                          GetDialgBoxUnits  возвращает  базовую  ширину
                          символа в пикселях.

             dtCY         Определяет высоту элемента панели  диалога  в
                          единицах   измерения   1/8   базовой   высоты
                          символа. Базовая  высота  символа вычисляется
                          из  высоты  и  ширины   текущего   системного
                          шрифта;  функция  GetDialgBoxUnits возвращает
                          базовую ширину символа в пикселях.

             dtilID       Определяет  идентификатор   элемента   панели
                          диалога.

             dtilStyle    Определяет тип элемента панели диалога.

             dtilClass[]  Определяет   оканчивающуюся   нулем   строку,
                          которая определяет  класс  блока  управления.
                          Может быть одним из следующих классов:

                          BUTTON
                          EDIT
                          STATIC
                          LISTBOX
                          SCROLLBAR
                          COMBOBOX

             dtilText[]   Определяет  текст  для  элемента. Это строка,

       Windows 3.0/Ref/6#7                                       = 45 =

                          оканчивающаяся нулем.

             dtilInfo     Определяет  количество  байт   дополнительных
                          данных,  которые следуют за описанием данного
                          элемента и предшествуют описанию следующего.

             dtilData     Определяет  дополнительные  данные,   которые
                          функция CreateWindow   получает   через  поле
                          lpCreateParams        структуры        данных
                          CREATESTRUCT. Это поле равно нулю если dtInfo
                          ноль.

        ───────────────────────────────────────────────────────────────
                DRAWITEMSTRUCT                                       [3.0]     

             Информация о выводе блока управления рисуемого владельцем

             Структура данных DRAWITEMSTRUCT  предоставляет  информацию
        владельцу, о  том  как  рисовать его блок управления.  Владелец
        блока  управления  получает  указатель  на  эту  структуру  как
        параметр lParam сообщения WM_DRAWITEM.

             typedef struct tagDRAWITEMSTRUCT
                {
                     WORD   CtlType;
                     WORD   CtlID;
                     WORD   itemID;
                     WORD   itemAction;
                     WORD   itemState;
                     HWND   hwndItem;
                     HDC    hDC;
                     RECT   rcItem;
                     DWORD  itemDate;
                } DRAWITEMSTRUCT;

             Поля DRAWITEMSTRUCT имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

            CtlType       Определяет тип блока управления. Эта величина
                          может принимать следующие значения:

                          Величина     Значение
                          ────────     ────────

                          ODT_BUTTON   Рисуемая владельцем клавиша.


                          ODT_COMBOBOX Рисуемая              владельцем
                                       комбинированная панель.


       Windows 3.0/Ref/6#7                                       = 46 =

                          ODT_LISTBOX  Рисуемая    владельцем    панель
                                       перечня.

                          ODT_MENU     Рисуемое владельцем меню.

             CtlID        Определяет идентификатор блока управления для
                          комбинированной  панели. Для меню это поле не
                          используется.

             itemID       Определяет идентификатор  элемента  меню  для
                          меню или индекс элемента в панели перечня или
                          в  комбинированной панели.  Для пустой панели
                          перечня или комбинированной панели,  это поле
                          должно   быть   равно   -1.   Это   позволяет
                          прикладной    программе    рисовать    только
                          прямоугольник   фокусировки   в   координатах
                          специфицированных полем rcItem,  даже если  в
                          блоке    управления    нет   элементов.   Это
                          показывает  пользователю  имеет   ли   панель
                          перечня     или     комбинированная    панель
                          фокусировку ввода.  Установка  битов  в  поле
                          itemAction  определяет  будет  ли  рисоваться
                          прямоугольник, как это было бы если бы панель
                          перечня  или  комбинированная панель имела бы
                          фокусировку ввода.

             itemAction   Определяет рисование требуемого действия. Это
                          будет  комбинация   одного   или   нескольких
                          следующих бит:

                          Величина     Описание
                          ────────     ────────

                          ODA_DRAWENTIRE Этот    бит    устанавливается
                                       тогда,когда     нужна     полная
                                       перерисовка блока управления.

                          ODA_FOCUS    Этот бит устанавливается  тогда,
                                       когда блок  управления  получает
                                       или    возвращает    фокусировку
                                       ввода.  Поле   itemState   будет
                                       проверено    имеет    ли    блок
                                       управления фокусировку ввода.

                          ODA_SELECT   Этот бит  устанавливается только
                                       тогда, когда          изменяется
                                       состояние     выборки.      Поле
                                       itemState  будет  проверено  для
                                       проверки    нового     состояния
                                       выборки.

             itemState    Определяет визуальное состояние объекта после
                          рисования.   То   есть   если   объект   меню

       Windows 3.0/Ref/6#7                                       = 47 =

                          перерисован серым цветом,  то состояние флага
                          ODS_GRAYED будет установлено в 1.  Существуют
                          следующие флаги состояния:

                          Величина     Описание
                          ────────     ────────

                          ODS_CHECKED  Этот  бит  устанавливается  если
                                       объект меню  помечен.  Этот  бит
                                       используется только в меню.

                          ODS_DISABLED Этот  бит  устанавливается  если
                                       объект нарисован как исключенный.

                          ODS_FOCUS    Этот  бит  устанавливается  если
                                       объект имеет фокусировку ввода.

                          ODS_GRAYED   Этот  бит  устанавливается  если
                                       объект перерисован серым цветом.
                                       Этот бит используется  только  в
                                       меню.

                          ODS_SELECTED Этот  бит  устанавливается  если
                                       объект выбран.

             hwndItem     Для комбинированных  панелей, панелей перечня
                          и клавиш это поле определяет дескриптор  окна
                          блока   управления;  для  меню  оно  содержит
                          дескриптор меню (HMENU), содержащее объект.

             hDC          Индентифицирует   контекст  устройства;  этот
                          контекст устройства должен  быть  использован
                          когда выполняется опeрация рисования в  блоке
                          управления.

             rcItem       Определяет     прямоугольник    в   контексте
                          устройства, указанного   полем  hDC,  которое
                          определяет   границы   нарисованного    блока
                          управления. Система   Windows   автоматически
                          вырезает все, что владелец рисует в контексте
                          устройства   для   комбинированных   панелей,
                          панелей перечня и клавиш,  но не делает этого
                          с  объектами  меню.  Когда  рисуются  объекты
                          меню, владелец должен быть уверен, что ничего
                          не рисуется   за   границами  прямоугольника,
                          определенного полем rcItem.

             itemDate     Для комбинированных панелей и панелей перечня
                          это поле содержит значение, которое поступило
                          в   панель   в  параметре  lParam  одного  из
                          следующих сообщений:

                          CB_ADDSTRING

       Windows 3.0/Ref/6#7                                       = 48 =


                          CB_INSERTSTRING

                          LB_ADDSTRING

                          LB_INSERTSTRING

                          Для меню это поле содержит значение  двойного
                          слова  (DWORD),   посланного   как   параметр
                          lpNewItem    функции    InsertMenu,   которая
                          вставляет объект меню. Для клавиш  содержимое
                          этого поля не определено.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 49 =

                                                                               
            HANDLTABLE

             Таблица дескрипторов окна

             Эта структура    данных    представляет    собой    массив
        дескрипторов, каждый из которых идентифицирует объект GDI.

             HANDLE objectHandle[1]

             Структура данных HANDLETABLE имеет следующее поле:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             objectHandle[1] Определяет массив дескрипторов.


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 50 =

                                         LOGBRUSH                              

             Информация об атрибутах логической кисти

             Структура данных  LOGBRUSH  определяет тип,  цвет и шаблон
        физической кисти, создаваемой функцией CreateBrushIndirect.

             typedef struct tagLOGBRUSH {
                     WORD      lbStyle;
                     COLORREF  lbColor;
                     short int lbHatch;
             } LOGBRUSH;

             Поля LOGBRUSH имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             lbStyle      Определяет  тип кисти.  Это  поле  может быть
                          равно одному из следующих значений:

                          BS_DIBPATTERN Задает       шаблон      кисти,
                                        определенный      спецификацией
                                        аппаратно-независимой растровой
                                        карты.

                          BS_HATCHED    Определяет штриховую кисть.

                          BS_HOLLOW     Определяет пустую кисть.

                          BS_PATTERN    Задает     шаблон        кисти,
                                        определенный растровой картой в
                                        памяти.

                          BS_SOLID      Определяет точную кисть.


             lbColor      Определяет цвет кисти . Если в ibStyle задано
                          BS_HOLLOW    или    BS_PATTERN, то   ibColor
                          проигнорируется.

                          Если lpStyle равно BS_DIBPATTERN, то  младшее
                          слово ibColor  определяет  содержит  ли  поле
                          bmiColors структуры  данных  BITMAPINFO точно
                          определенные  RGB  значения, или  индексы   в
                          текущей   логической  палитре.  Поле  ibColor
                          должно иметь одно из следующих значений:

                          Величина            Значение
                          ────────            ────────

                          DIB_PAL_COLORS      Таблица цветов содержащая

       Windows 3.0/Ref/6#7                                       = 51 =

                                              массив   16-ти    битовых
                                              индексов     в    текущую
                                              созданную палитру цветов.

                          DIB_RGB_COLORS      Таблица цветов содержащая
                                              точные RGB значения.

             lbHatch      Определяет  тип штриховки.  Значение  зависит
                          от типа   кисти.

                          Если значение     поля     lbStyle      равно
                          BS_DIBPATTERN,   то   поле  lbHatch  содержит
                          дескриптор упакованной  аппаратно-независимой
                          растровой    карты.   Для   получения   этого
                          дескриптора  прикладная  программа   вызывает
                          функцию   GlobalAlloc  для  размещения  блока
                          глобальной памяти и размещает  в  памяти  эту
                          растровую          карту.         Упакованная
                          аппаратно-независимая растровая карта состоит
                          из   структуры   BITMAPINFO  и  расположенным
                          непосредственно за  этой  структурой  массива
                          байт,  который  описывает пиксели в растровой
                          карте.

                          Если значение поля lbStyle равно  BS_HATCHED,
                          то  lbHatch определяет направление штрихующих
                          линий.  Это должно  быть  одно  из  следующих
                          значений:

                          Величина            Значение
                          ────────            ────────
                          HS_BDIAGONAL        Штриховка  под  углом  45
                                              градусов   сверху    вниз
                                              слева  направо  (обратная
                                              диагональ).

                          HS_CROSS            Штриховка горизонтальными
                                              и           вертикальными
                                              пересекающимися   линиями
                                              (перекрестная).

                          HS_DIAGCROSS        Штриховка пересекающимися
                                              линиями   под   углом  45
                                              градусов    (перекрестная
                                              диагональная).

                          HS_FDIAGONAL        Штриховка  под  углом  45
                                              градусов   снизу    вверх
                                              слева   направо   (прямая
                                              диагональ).

                          HS_HORIZONTAL       Горизонтальная штриховка.


       Windows 3.0/Ref/6#7                                       = 52 =

                          HS_VERTICAL         Вертикальная   штриховка.

                          Если значение  поля lbStyle равно BS_PATTERN,
                          то lbHatch должно быть дескриптором растровой
                          карты, определяющей шаблон.

                          Если значение поля lbStyle равно BS_SOLID или
                          BS_HOLLOW, то поле lbHatch игнорируется.

             Смотрите также описание функции CreatBrushIndirect в главе
        4, "Список функций", Справочного руководства, Том 1.

        ───────────────────────────────────────────────────────────────
                                          LOGFONT                              

             Дескриптор логического шрифта

             Структура данных  LOGFONT  определяет   атрибуты   шрифта.
        Шрифт -  это  графический  объект,  используемый  для  создания
        текста на поверхности отображения.


             typedef struct tagLOGFONT  {
                     short  int  lfHeight;
                     short  int  lfWidth;
                     short  int  lfEscapement;
                     short  int  lfOrientation;
                     short  int  lfWeight;
                     BYTE        lfItalic;
                     BYTE        lfUnderline;
                     BYTE        lfStrikeOut;
                     BYTE        lfCharSet;
                     BYTE        lfOutPrecision;
                     BYTE        lfClipPrecision;
                     BYTE        lfQuality;
                     BYTE        lfPitchAndFamily;
                     BYTE        lfFaceName[LF_FACESIZE];
             } LOGFONT;

             Поля LOGFONT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             lfHeight     Определяет   среднюю    высоту    шрифта    в
                          элементах  устройства.  Высота  шрифта  может
                          быть   определена   тремя   способами.   Если
                          значение поля  lfHеight  больше нуля,  то оно
                          преобразуется в  элементы  устройства  и  для
                          него   подбирается   подходящее   значение  в
                          соответствии     с     высотой     знакоместа
                          существующих шрифтов.  При равенстве значения

       Windows 3.0/Ref/6#7                                       = 53 =

                          поля lfHeight   нулю   высота   соответствует
                          значению по  умолчанию.  Если  значение  поля
                          lfHeight меньше  нуля,  оно  преобразуется  в
                          элементы  устройства  и  для  его абсолютного
                          значения подбирается  подходящее  значение  в
                          соответствии     с     высотой     знакоместа
                          существующих шрифтов.

             lfWidth      Определяет  среднюю  ширину символов шрифта в
                          элементах устройства.   Если   значение  поля
                          lfWidth  равно   нулю,   коэффициент   сжатия
                          устройства      будет      соотноситься     с
                          коэффициентами сжатия существующих шрифтов, в
                          поиске минимального абсолютного значения этой
                          разницы.

             lfEscapement Определяет угол в десятых долях градуса между
                          вектором   наклона   и   осью  x  поверхности
                          отображения.  Вектор  наклона  -  это  линия,
                          проходящая  через  исходные  точки  первого и
                          последнего  символов  строки. Угол измеряется
                          против часовой стрелки от оси x.

             lfOrientation Определяет  угол  в  десятых  долях  градуса
                          между базовой линией символа и осью  x.  Угол
                          измеряется против часовой стрелки от оси x.

             lfWeight     Определяет  яркость  шрифта.  Хотя  это может
                          быть  любое  целое  значение  от  0  до 1000,
                          обычными значениями являются:

                          400          Нормальный шрифт
                          700          Жирный шрифт

                          Это    приближенные    значения;     реальное
                          изоражение зависит от начертания шрифта. Если
                          значение поля lfWeight равно 0,  используется
                          значение по умолчанию.

             lfItalic     Устанавливает  курсив,  если  указан не нуль.

             lfUnderline  Устанавливает  подчеркивание,  если указан не
                          нуль.

             lfStrikeOut  Устанавливает  зачеркивание,  если  указан не
                          нуль.

             lfCharSet    Определяет  набор   символов шрифта. Это поле
                          может быть одним   из   следующих    значений:

                          ANSI_CHARSET

                          OEM_CHARSET

       Windows 3.0/Ref/6#7                                       = 54 =


                          SIMBOL_CHARSET

                          Набор       символов       OEM       является
                          системно-зависимым.

                          В системе может существовать шрифт и с другим
                          набором  символов.  Если прикладная программа
                          использует  шрифт   с   неизвестным   набором
                          символов, то она не должна пробовать первести
                          или    интерпритировать    строку,    которая
                          представлена этим шрифтом.

             OutPrecision      Устанавливает  точность  вывода  шрифта.
                          Точность  вывода  определяет, насколько точно
                          атрибуты   выводимого   изображения    должны
                          совпадать  с  запрошенными  высотой,  шириной
                          шрифта, ориентацией символов,  углом  наклона
                          строки  и  шагом.  По  умолчанию используется
                          значение OUT_DEFAULT_PRECIS.

             lfClipPrecision  Устанавливает   точность  отсечения  окна
                          шрифта.  Точность  отсечения  определяет, как
                          отсекать символы, которые частично выходят за
                          область отсечения. По умолчанию  используется
                          значение CLIP_DEFAULT_PRECIS.

             lfQuality    Устанавливает    качество   вывода    шрифта.
                          Качество   вывода    определяет,    насколько
                          тщательно GDI  должен   соотносить   атрибуты
                          логического  шрифта  с  атрибутами  реального
                          физического шрифта.  Это может быть  одно  из
                          следующих значений:

                          Величина            Значение
                          ────────            ────────

                          DEFAULT_QUALITY     Внешний  вид   шрифта  не
                                              имеет значения.

                          DRAFT_QUALITY       Внешний вид шрифта не так
                                              важен,      как       при
                                              PROOF_QUALITY.        Для
                                              шрифтов GDI     допустимо
                                              масштабирование,        в
                                              результате чего  доступно
                                              большее        количество
                                              шрифтов,   но    качество
                                              может      быть     хуже.
                                              Предоставляется       при
                                              необходимости   выделение
                                              яркостью,       курсивом,
                                              подчеркиванием          и

       Windows 3.0/Ref/6#7                                       = 55 =

                                              зачеркиванием.

                          PROOF_QUALITY       Качество символов  шрифта
                                              важнее,чем         точное
                                              следование      атрибутам
                                              логического  шрифта.  Для
                                              шрифтов GDI   отсутствует
                                              масштабирование         и
                                              выбирается       наиболее
                                              подходящий   по   размеру
                                              шрифт.   Хотя   выбранный
                                              размер     шрифта     при
                                              использовании
                                              PROOF_QUALITY       может
                                              отображаться не точно, но
                                              качество  шрифта высоко и
                                              ухудшение  внешнего  вида
                                              не            происходит.
                                              Предоставляется       при
                                              необходимости   выделение
                                              яркостью,       курсивом,
                                              подчеркиванием          и
                                              зачеркиванием.

             lfPitchAndFamily   Определяет   шаг  и  семейство  шрифта.
                          Младшие  два  бита  определяют  шаг   шрифта,
                          который может иметь следующие значения:

                          DEFAULT_PITCH
                          FIXED_PITCH
                          VARIABLE_PITCH

                          Четыре  старших  бита  определяют  семейство,
                          которое может иметь следующие значения:

                          FF_DECORATIVE
                          FF_DONTCARE
                          FF_MODERN
                          FF_ROMAN
                          FF_SCRIPT
                          FF_SWISS

                          Константы определены   таким   образом,   что
                          подходящее   значение   может  быть  получено
                          применением операции  OR  к  одной  константе
                          шага и к одной константе семейства.

                          Семейства шрифтов описывают общий внешний вид
                          шрифта.  Они  предназначены  для  определения
                          шрифтов,  когда  желаемое  точное  начертание
                          шрифта   не   доступно.   Значения   семейств
                          следующие:


       Windows 3.0/Ref/6#7                                       = 56 =

                          Величина            Значение
                          ────────            ────────

                          FF_DECOFATIVE       Нововведенные     шрифты.

                          FF_DONTCARE         Имя         генерируемого
                                              семейства.  Используется,
                                              когда информации о шрифте
                                              не     существует     или
                                              она безразлична.

                           FF_MODERN          Шрифты    с    постоянной
                                              шириной     штриха,     с
                                              засечками или без. Шрифты
                                              с     постоянным    шагом
                                              принадлежат   обычно    к
                                              семейству modern.

                           FF_ROMAN           Шрифты    с    переменной
                                              шириной      штриха ,   с
                                              засечками.

                           FF_SCRIPT          Шрифты,          подобные
                                              написанию   "от    руки".

                           FF_SWISS           Шрифты    с    переменной
                                              шириной            штриха
                                              (пропорционально
                                              пустотам),  без  засечек.

             lfFaceName[LF_FACESIZE]          Устанавливает имя шрифта.
                                              Это  должна  быть строка,
                                              оканчивающаяся     нулем.
                                              Если   lpFaceName   равно
                                              NULL,    GDI   использует
                                              значение  по   умолчанию.

             Смотрите также  описание  функции   CreateFontIndirect   в
         "Списке Функций",Справочного Руководства,том 1,глава 4.

        ───────────────────────────────────────────────────────────────
                LOGPALETTE                                           [3.0]     

             Информация о логической цветной палитре

             Структура данных  LOGPALETTE определяет логическую цветную
        палитру.

             typedef struct
              {
                     WORD          palVersion;
                     WORD          palNumEntries;
                     PALETTEENTRY  palPalEntry[];

       Windows 3.0/Ref/6#7                                       = 57 =

              } LOGPALETTE;

             Поля  LOGPALETTE  имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             palVersion   Определяет номер версии Windows для структуры
                          (текущий номер 0x300).

          palNumEntries   Определяет число элементов палитры.

          palPalEntry[]   Определяет     массив     структуры    данных
                          PALETTEENTRY, который   определяет   цвет   и
                          использование   каждого  элемента  логической
                          палитры.

             Комментарий

             Цвета в таблице  элементов  палитры  должны  появляться  в
        порядке возрастания.  Это  потому,  что  элементы расположенные
        раньше в логической палитре,  наиболее подходят к  тому,  чтобы
        быть размещенными в системной палитре.

             Эта структура данных передается  как  параметр  в  функцию
        CreatePalette.

        ───────────────────────────────────────────────────────────────
                                          LOGPEN                               

             Информация об атрибутах логического пера

             Структура данных  LOGPEN  определяет  тип,  толщину и цвет
        пера. Перо - это графический объект, используемый для рисования
        линий  и  окантовок.  Структура  LOGPEN  используется  функцией
        CreatePenIndirect.

          typedef struct  tagLOGPEN {
                  WORD     lopnStyle;
                  POINT    lopnWidth;
                  COLORREF lopnColor;
          } LOGPEN;

             Поля LOGPEN имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             lopnStyle    Определяет тип пера. Соответствующее значение
                          определяет тип создаваемой линии:


       Windows 3.0/Ref/6#7                                       = 58 =

                            Имя          Значение          Результат
                            ───          ────────          ─────────

                          PS_SOLID            0             ────────

                          PS_DASH             1             ─ ─ ─ ─

                          PS_DOT              2               ....

                          PS_DASHDOT          3             ──.──.──.

                          PS_DASHDOTDOT       4             ──..──..──

                          PS_NULL             5

                          PS_INSIDEFRAME      6             ─────────

                          Если  ширина  пера  больше, чем 1 и перо типа
                          PS_INSIDEFRAME,  то  линия  рисуется   внутри
                          фрейма     всех      примитивов,     исключая
                          многоугольники  и   ломанные;   перо   рисует
                          логическим   цветом,   если   цвет   пера  не
                          полностью соответсвует  допустимым  значениям
                          RGB. Тип   PS_INSIDEFRAME   идентичен    типу
                          PS_SOLID,  если  ширина пера меньше или равна
                          1.

             lopnWidth    Определяет    толщину   пера   в   логических
                          элементах. Если значение поля lopnWidth равно
                          0,  то толщина пера равна одному  пикселю  на
                          растровых устройствах.

             lopnColor    Определяет  цвет  пера.

             Комментарий

             Значение y    в   структуре   POINT   для   lopnWidth   не
        используется.

             Смотрите также  описание   функции   CreatePenIndirect   в
        "Списке Функций", Справочного Руководства,том 1,глава 4.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 59 =

            MDICREATESTRUCT                                         [3.0]      

             Структура создания дочернего окна MDI

             Структура  данных  MDICREATESTRUCT  содержит  информацию о
         классе,  заголовке,   владельце,   расположении   и   размерах
         дочернего окна MDI.

             typedef struct tagMDICREATESTRUCT
               {
                     LPSTR  szClass;
                     LPSTR  szTitle;
                     HANDLE hOwner;
                     int    x;
                     int    y;
                     int    cx;
                     int    cy;
                     LONG   style;
                     LONG   lParam;
               } MDICREATESTRUCT;


             Поля MDICREATESTRUCT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             szClass      Содержит  длинный  указатель  на определенный
                          прикладной  программой  класс  дочернего окна
                          MDI.

             szTitle      Содержит длинный указатель на заголовок  окна
                          дочернего окна MDI.

             hOwner       Это    дескриптор    экземпляра    прикладной
                          программы, создающей дочернее окно MDI.

             x            Определяет начальную левую позицию  дочернего
                          окна    MDI.   Если   использовано   значение
                          CW_USEDEFAULT, то дочернее окно MDI  получает
                          горизонтальную позицию по умолчанию.

             y            Определяет    начальную    верхнюю    позицию
                          дочернего   окна   MDI.   Если   использовано
                          значение  CW_USEDEFAULT, то дочернее окно MDI
                          получает вертикальную позицию по умолчанию.

             cx           Определяет начальную  ширину  дочернего  окна
                          MDI.      Если      использовано     значение
                          CW_USEDEFAULT, то дочернее окно MDI  получает
                          ширину по умолчанию.


       Windows 3.0/Ref/6#7                                       = 60 =

             cy           Определяет  начальную  высоту  дочернего окна
                          MDI.     Если      использовано      значение
                          CW_USEDEFAULT,  то дочернее окно MDI получает
                          высоту по умолчанию.

             style        Определяет добавочные типы для дочернего окна
                          MDI. Поле style может быть установлено в одно
                          из следующих значений:

                          Величина     Значение
                          ────────     ────────

                          WS_MINIMIZE  Дочернее окно  MDI  создается  в
                                       минимальном состоянии.

                          WS_MAXINIZE  Дочернее  окно  MDI  создается в
                                       максимальном состоянии.

                          WS_HSCROLL   Дочернее окно  MDI  создается  с
                                       горизонтальной           строкой
                                       прокрутки.

                          WS_VSCROOL   Дочернее окно  MDI  создается  с
                                       вертикальной строкой прокрутки.

             lParam       Это    программно-определенная  32-ух битовая
                          величина.

             Комментарий

             Когда дочернее  окно  MDI создано,  Windows посылает в это
        окно сообщение  WM_CREATE.  Параметр  lParam  этого   сообщения
        содержит  указатель  на  структуру  данных  CREATESTRUCT.  Поле
        lpCreateParams структуры данных CREATESTRUCT содержит указатель
        на структуру  данных  MDICREATESTRUCT  переданный  с сообщением
        WM_MDICREATE, которое создало дочернее окно MDI.

        ───────────────────────────────────────────────────────────────
                MEASUREITEMSTRUCT                                    [3.0]     

             Размерность блока управления рисуемого владельцем

             Структура  данных  MEASUREITEMSTRUCT информирует Windows о
        размерности   блока   управления,   рисуемого    владельцем.Это
        позволяет Windows   осуществлять   взаимодействие   с   блоками
        управления  корректно.  Владелец  блока  управления,  рисуемого
        пользователем  получает указатель на эту структуру как параметр
        lParam  сообщения  WM_MEASUREITEM  .Блок  управления   рисуемый
        пользователем  посылает  это сообщение окну его владельца,когда
        блок  управления  создается;  владелец  после  этого  заполняет
        соответсвующие поля в структуре для блока управления и передает
        управление. Эта  структура  данных  общая   для   всех   блоков
        управления, рисуемых пользователем.

       Windows 3.0/Ref/6#7                                       = 61 =


             typedef struct tagMEASUREITEMSTRUCT
               {
                     WORD   CtlType;
                     WORD   CtlID;
                     WORD   itemID;
                     WORD   itemWidth;
                     WORD   itemHeight;
                     DWORD  itemData;
               } MEASUREITEMSTRUCT;

             Поля MEASUREITEMSTRUCT имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             CtlType      Определяет  тип  блока  управления.  Значения
                          типов блоков управления показаны ниже:

                          Величина    Значение
                          ────────    ────────

                          ODT_BUTTON   Клавиша,  рисуемая   владельцем.

                          ODT_COMBOBOX Комбинированная          панель,
                                       рисуемая владельцем.

                          ODT_LISTBOX  Панель     перечня,     рисуемая
                                       владельцем.

                          ODT_MENU     Меню, рисуемое владельцем.

             CtlID        Определяет  ID    блока    управления     для
                          комбинированной панели,панели   перечня   или
                          клавиши.Это поле не используется для меню.

             itemID       Определяет ID элемента меню для  меню  или ID
                          элемента панели перечня для панели перечня  и
                          комбинированной  панели изменяемой высоты.Это
                          поле  не  используется  для   комбинированной
                          панели   или   панели  перечня  фиксированной
                          высоты, или клавиши.

             itemWidth    Определяет   ширину   элемента  меню.Владелец
                          элемента  меню,  рисуемого  владельцем должен
                          заполнить   это   поле   перед   возвращением
                          управления после обработки сообщения.

             itemHeight   Определяет  высоту   отдельного   элемента  в
                          панели перечня или меню.  Перед  возвращением
                          управления после обработки сообщения владелец
                          комбинированной  панели,панели  перечня   или

       Windows 3.0/Ref/6#7                                       = 62 =

                          элемента   меню,рисуемых  владельцем,  должен
                          заполнить это поле.

             itemData     Содержит значение, которое  было  передано  в
                          панель перечня или комбинированную  панель  в
                          параметре    lParam   одного   из   следующих
                          сообщений:

                          CB_ADDSTRING

                          CB_INSERTSTRING

                          LB_ADDSTRING

                          LB_INSERTSTRING

                          Содержит (DWORD)   величину,  переданную  как
                          параметр   lpNewItem   функций    AppendMenu,
                          InsertMenu или ModlfyMenu,  которые добавляют
                          или модифицируют элемент меню. Это содержимое
                          не определенно для клавиш.

             Комментарий

             Неудачно заполненные   поля   структуры  MEASUREITEMSTRUCT
        будут приводить к ложным операциям блока управления.

        ───────────────────────────────────────────────────────────────
                                     MENUITEMTEMPLATE                          

             Шаблон элемента меню

             Полный шаблон  меню  состоит  из  заголовка  и  одного или
        нескольких перечней элементов меню.  Ниже  приведена  структура
        заголовока шаблона меню:

             typedef struct {
                     WORD   versionNumber;
                     WORD   offset;
             } MENUITEMTEMPLATEHEADER;

             Поля MENUITEMTEMPLATEHEADER  имеют  следующее  назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             versionNumber Определяет номер версии. Должно  быть  равно
                           нулю.

             offset        Определяет смещение в байтах после заголовка
                           того места, где начинается список  элементов
                           меню.

       Windows 3.0/Ref/6#7                                       = 63 =


             Одна или  больше структур MENUITEMTEMPLATE комбинируются в
        форме списка объектов меню.

             typedef struct {
                     WORD    mtOption;
                     WORD    mtID;
                     LPSTR   mtString;
             } MENUITEMEPLATE;


             Поля  структуры MENUITEMEPLATE имеют следующее значение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             mtOption     Определяет   маску   одного   или  нескольких
                          встроенных     параметров    меню,    которые
                          специфицируют  внешний  вид  элементов  меню.
                          Существуют следующие параметры меню:

                          Величина     Значение
                          ────────     ────────

                          MF_CHECKED   Элемент    имеет     контрольную
                                       отметку сдудующую за ним.

                          MF_END       Элемент  должен  быть  определен
                                       как    последний    элемент    в
                                       накладываемом  или   статическом
                                       меню.

                          MF_GRAYED    Элемент  первоначально неактивен
                                       и изображается серым цветом.

                          MF_HELP      Элемент    имеет    вертикальный
                                       разделитель слева от него.

                          MF_MENUBARBREAK  Элемент  размещается в новом
                                       столбце. Старый и новый  столбцы
                                       разделяются линией.

                          MF_MENUBREAK Элемент   размещается   в  новом
                                       столбце.

                          MF_OWNERDRAW Владелец  меню  ответственен  за
                                       рисование всех видимых изменений
                                       объектов      меню,      включая
                                       подсветку,  пометку и неактивное
                                       состояние.  Этот   параметр   не
                                       разрешен   для   элементов  меню
                                       верхнего уровня.

       Windows 3.0/Ref/6#7                                       = 64 =


                          MF_POPUP     При выборе элемента отображается
                                       подсписок элементов меню.

             mtID         Определяет  код  для  идентификации  элемента
                          ненакладываемого меню. Структура данных
                          MENUITEMTEMPLATE для  накладываемых элементов
                          меню не содержит поля mtID.

             mtString     Указывает на заканчивающуюся нулем символьную
                          строку, которая определяет имя элемента меню.

             Смотрите также описание функции LoadMenuInderect в "Списке
        Функций", Справочного Руководства,том 1,глава 4.

        ───────────────────────────────────────────────────────────────
                                       METAFILEPICT                            

             Структура изображения метафайла

             Структура данных     METAFILEPICT     определяет    формат
        изображения  метафайла,   используемый   для   обмена   данными
        метафайла через системный буфер.

          typedef struct tagMETAFILEPICT {
                  int    mm;
                  int    xExt,  yExt;
                  HANDLE hMF;
          } METAFILEPICT;

             Поля структуры METAFILEPICT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             mm           Задает графический режим, в котором создается
                          изображение.

             xExt         Задает размер изображения метафайла для  всех
                          режимов, кроме MM_ISOTROPIC и MM_ANISOTROPIC.
                          Величина x определяет ширину  прямоугольника,
                          внутри    которого   создается   изображение.
                          Координаты     задаются     в      элементах,
                          соответствующих графическому режиму.

             yExt         Задает размер изображения метафайла для  всех
                          режимов, кроме MM_ISOTROPIC и MM_ANISOTROPIC.
                          Величина  y определяет высоту прямоугольника,
                          внутри   которого   создается    изображение.
                          Координаты      задаются     в     элементах,
                          соответствующих графическому режиму.


       Windows 3.0/Ref/6#7                                       = 65 =

                          Для режимов  MM_ISOTROPIC  и  MM_ANISOTROPIC,
                          которые допускают масштабирование,  поля xExt
                          и yExt содержат необязательный  "предлагаемый
                          размер"    в   элементах   MM_HIMETRIC.   Для
                          изображений MM_ANISOTROPIC   значения   полей
                          xExt   и   yExt   могут  равняться  0,  когда
                          отсутствует    предлагаемый    размер.    Для
                          изображений  MM_ISOTROPIC  должен  быть задан
                          коэффициент сжатия,  даже  когда  отсутствует
                          предлагаемый   размер.   (Если   предлагаемый
                          размер     задан,     коэффициент      сжатия
                          устанавливается  по  размеру.)  Чтобы  задать
                          коэффициент    сжатия    без     установления
                          предлагаемого  размера,  необходимо присвоить
                          полям xExt  и  yExt  отрицательные  значения,
                          отношение    которых   приблизительно   равно
                          коэффициенту сжатия.  Величина  отрицательных
                          значений полей   xExt  и  yExt  игнорируется;
                          используется только их отношение.

             hMF          Определяет метафайл в памяти.

        ───────────────────────────────────────────────────────────────
                                            MSG                                

             Структура данных сообщения

             Структура данных   MSG   содержит  информацию  из  очереди
        прикладной программы среды WINDOWS.

             typedef struct tagMSG {
                     HWND   hwnd;
                     WORD   message;
                     WORD   wParam;
                     LONG   lParam;
                     DWORD  time;
                     POINT  pt;
              } MSG;

             Поля MSG имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             hwnd          Определяет   дескриптор  окна,   получающего
                           сообщение.

             message       Указывает номер сообщения.

             wParam        Определяет     дополнительную   информацию о
                           сообщении.  Точное   значение   зависит   от
                           конкретного значения поля message.

       Windows 3.0/Ref/6#7                                       = 66 =


             lParam        Определяет дополнительную информацию о
                           сообщении.    Точный    смысл   зависит   от
                           конкретного значения поля message.

             time          Указывает время посылки сообщения.

             pt            Определяет  позицию  "мыши"  ( в координатах
                           экрана) в момент посылки сообщения.

        ───────────────────────────────────────────────────────────────
                                       МULTIKEYHELP                            

             Структура таблицы ключевых слов Windows Help

             Структура данных MULTIKEYHELP определяет таблицу  ключевых
         слов и связанное с ней ключевое слово, используемые программой
         Windows Help.

             typedef struct tagMULTIKEYHELP {
                     WORD   mkSize;
                     BYTE   mkKeylist;
                     BYTE   mkKeyphrase[];
             } MULTIKETHELP;

             Поля структуры MULTIKEYHELP имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             mkSize       Определяет  длину  структуры  MULTIKEYHELP  в
                          байтах.

             mkKeylist    Содержит единичный символ, который определяет
                          таблицу ключевых слов для поиска.

          mkKeyphrase[]   Содержит  строку   символов,   оканчивающуюся
                          нулем,которая определяет   ключевое    слово,
                          размещенное в таблице ключевых слов.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 67 =

                                         OFSTRUCT                              

             Структура открытого файла

             Структура данных  OFSTRUCT содержит информацию об открытом
        файле.

             typedef struct tagOFSTRUCT {
                     BYTE   cBytes;
                     BYTE   fFixedDisk;
                     WORD   nErrCode;
                     BYTE   reserved[4];
                     BYTE   szPathName[120];
              } OFSTRUCT;

             Поля структуры OFSTRUCT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             cBytes       Определяет   длину   ( в байтах)    структуры
                          данных OFSTRUCT.

             fFixedDisk   Определяет,  находится   ли  файл  на жестком
                          диске. Файл находится на жестком  диске, если
                          поле имеет ненулевое значение.

             nErrCode     Определяет   код  ошибки  DOS, если   функция
                          OpenFile возвращает -1.

             reserved[4]  Четыре     байта,     зарезервированные   для
                          использования в будущем.

         szPathName[120]  Определяет 120  байт,   содержащих полное имя
                          файла. Эта   строка   содержит   символы   из
                          набора символов OEM.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 68 =

                                        PAINTSTRUCT                            

             Информация о рисовании

             Структура данных  PAINTSTRUCT  содержит   информацию   для
         прикладной  программы,  которая  может  быть  использована для
         рисования  в  пользовательской  области  окна,  принадлежащего
         прикладной программе.

             typedef struct tagPAINTSTRUCT {
                     HDC     hdc;
                     BOOL    fErase;
                     RECT    rcPaint;
                     BOOL    fRestore;
                     BOOL    fIncUpdate;
                     BYTE    rgbReserved[16];
              } PAINTSTRUCT;

             Поля PAINTSTRUCT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             hdc          Определяет  контекст   отображения,   который
                          должен быть использован для рисования.

             fErase       Указывает, был ли перерисован заново фон. Фон
                          был перерисован, если значение fErase отлично
                          от нуля.

             rcPaint      Определяет  левый  верхний  и  правый  нижний
                          углы прямоугольника,  в котором запрашивается
                          рисование.

             fRestore     Зарезервированное поле.  Используется   самой
                          средой Windows.

             fIncUpdate   Зарезервированное поле.  Используется   самой
                          средой Windows.

         rgbReserved[16]  Определяет     резервный     блок     памяти,
                          используемый самой средой Windows.

        ───────────────────────────────────────────────────────────────
                PALETTEENTRY                                         [3.0]     

             Элемент логической цветовой палитры

             Структура данных    PALETTEENTRY    определяет   цвета   и
        применение элементов в  логической  палитре  цвета.  Логическая
        палитра определенна в структуре LOGPALETTE.


       Windows 3.0/Ref/6#7                                       = 69 =

             typedef struct
               {
                     BYTE  peRed;
                     BYTE  peGreen;
                     BYTE  peBlue;
                     BYTE  peFlags;
               } PALETTEENTRY;

             Поля структуры PALETTEENTRY имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             peRed        Определяет интенсивность красной составляющей
                          для цвета элемента палитры.

             peGreen      Определяет интенсивность зеленой составляющей
                          для цвета элемента палитры.

             peBlue       Определяет интенсивность голубой составляющей
                          для цвета элемента палитры.

             peFlags      Определяет  как   элемент палитры должен быть
                          использован. Поле    peFlags    может    быть
                          установлено в NULL или в  одну  из  следующих
                          величин:

                          Флаг             Значение
                          ────             ────────

                          PC_EXPLICIT      Определяет,что младшее слово
                                           элемента логической  палитры
                                           определяет индекс аппаратной
                                           палитры.Этот  флаг позволяет
                                           прикладной         программе
                                           показать          содержание
                                           аппаратной палитры.

                          PC_NOCOLLAPSE    Определяет, что  цвет  будет
                                           размещен в    неиспользуемом
                                           элементе, в        системной
                                           палитре   вместо   подобного
                                           существующего    цвета     в
                                           системной палитре.  Если нет
                                           неиспользуемого  элемента  в
                                           системной  палитре,  то цвет
                                           подбирается как обычно.

                                           Когда-то    этот    цвет   в
                                           системной палитре,  цвета  в
                                           других  логических  палитрах
                                           могут подойти к этому цвету.

       Windows 3.0/Ref/6#7                                       = 70 =


                          PC_RESERVED      Определяет,   что    элемент
                                           логической   палитры   будет
                                           использован              для
                                           мультипликации палитры;  это
                                           предотвратит  другие окна из
                                           подобранных цветов     этого
                                           элемента палитры    с   того
                                           момента как этот цвет  будет
                                           частично изменен.       Если
                                           неиспользуемый       элемент
                                           системной палитры  доступен,
                                           то этот цвет будет  размещен
                                           в  данном  элементе.Во  всех
                                           других случаях цвет не будет
                                           доступен для мультипликации.

        ───────────────────────────────────────────────────────────────
                                           POINT                               

             Структура данных точки

             Структура данных POINT определяет координаты x и y точки.

             typedef struct tagPOINT {
                     int    x;
                     int    y;
             } POINT;

             Поля структуры POINT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             x            Определяет значение x-координаты точки.

             y            Определяет значение y-координаты точки.

             Смотрите также   описание   функций  ChildWindowFromPoint,
         PtInRect  и  WindowFromPoint  в  "Списке  Функций",Справочного
         руководства, том 1, глава 4.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 71 =

                                           RECT                                

             Структура данных прямоугольника

             Структура данных   RECT   определяет   координаты   левого
         верхнего и правого нижнего углов прямоугольника.

              typedef struct tagRECT {
                      int    left;
                      int    top;
                      int    right;
                      int    bottom;
               } RECT;

             Поля структуры RECT имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             left         Определяет x-координату  левого верхнего угла
                          прямоугольника.

             top          Определяет y-координату  левого верхнего угла
                          прямоугольника.

             right        Определяет x-координату  правого нижнего угла
                          прямоугольника.

             bottom       Определяет y-координату  правого нижнего угла
                          прямоугольника.

             Комментарий

             Ширина прямоугольника,  определенная структурой  RECT,  не
        должна превышать 32768 единиц.

        ───────────────────────────────────────────────────────────────
                RGBQUAD                                              [3.0]     

             Структура RGB цвета

             Структура данных    RGBQUAD    описывает     относительные
        интенсивности красной, зеленой и синей составляющей цвета. Поле
        bmiColors структуры  данных  BITMAPINFO  состоит   из   массива
        структур RGBQUAD.

             typedef struct tagRGBQUAD {
                      BYTE   rgbBlue;
                      BYTE   rgbGreen;
                      BYTE   rgbRed;
                      BYTE   rgbReserved;
               } RGBQUAD;

       Windows 3.0/Ref/6#7                                       = 72 =


             Поля структуры RGBQUAD имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             rgbBluet     Определяет интенсивность голубой составляющей
                          цвета.

             rgbGreen     Определяет интенсивность зеленой составляющей
                          цвета.

             rgbRed       Определяет интенсивность красной составляющей
                          цвета.

             rgbReserved  Не используется и должно быть равно нулю.


        ───────────────────────────────────────────────────────────────
                RGBTRIPLE                                            [3.0]     

             Структура RGB цвета

             Структура данных    RGBTRIPLE    описывает   относительные
        интенсивности красной, зеленой и синей составляющей цвета. Поле
        bmciColors структуры  данных  BITMAPCOREINFO состоит из массива
        структур RGBTRIPLE.

              typedef struct tagRGBTROPLE {
                      BYTE   rgbtBlue;
                      BYTE   rgbtGreen;
                      BYTE   rgbtRed;
              } RGBTRIPLE;

             Поля структуры RGBTRIPLE имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             rgbtBluet    Определяет интенсивность голубой составляющей
                          цвета.

             rgbtGreen    Определяет интенсивность зеленой составляющей
                          цвета.

             rgbtRed      Определяет интенсивность красной составляющей
                          цвета.


        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 73 =

                                        TEXTMETRIC                             

             Основные параметры шрифта

             Структура данных TEXTMETRIC содержит основную информацию о
        физическом шрифте. Все размеры даны в логических единицах, т.е.
        зависят от текущего режима отображения.

           typedef struct tagTEXTMETRIC {
                     short  int tmHeight;
                     short  int tmAscent;
                     short  int tmDescent;
                     short  int tmInternalLeading;
                     short  int tmExternalLeading;
                     short  int tmAveCharWidth;
                     short  int tmMaxCharWidth;
                     short  int tmWeight;
                     BYTE       tmItalic;
                     BYTE       tmUnderlined;
                     BYTE       tmStruckOut;
                     BYTE       tmFirstChar;
                     BYTE       tmLastChar;
                     BYTE       tmDefaultChar;
                     BYTE       tmBreakChar;
                     BYTE       tmPitchAndFamily;
                     BYTE       tmCharSet;
                     short  int tmOverhang;
                     short  int tmDigitizedAspectX;
                     short  int tmDigitizedAspectY;
             } TEXTMETRIC;

          Поля TEXTMETRIC имеют следующие назначения:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             tmHeight     Определяет высоту  символов (подъем + спуск).

             tmAscent     Определяет подъем символов  (в  единицах  над
                          базовой линией).

             tmDescent    Определяет спуск  символов  (в  единицах  под
                          базовой линией).

             tmInternalLeading Определяет величину внутреннего  разрыва
                          в  пределах  границ,  установленных tmHeight.
                          Знаки   ударения   (тильда   и   др.)   могут
                          располагаться в этой области.  Это поле может
                          быть установлено в 0 по выбору разработчика.

             tmExternalLeading Определяет  величину  внешнего  разрыва,
                          который по требованию разработчика прикладная

       Windows 3.0/Ref/6#7                                       = 74 =

                          программа должна добавить между строками. Так
                          как   эта   область  расположена  вне  самого
                          шрифта,  она не содержит знаков ударения и не
                          будет  изменяться  вызовами  вывода  текста в
                          режиме OPAQUE или TRANSPARENT. Это поле может
                          быть установлено в 0 по выбору разработчика.

             tmAveCharWidth Определяет  среднюю  ширину символов шрифта
                          (приближенно определяется  как  ширина  буквы
                          "X"). Эта   величина   не   включает  выступа
                          требуемого   для   символов    жирного    или
                          наклонного типа.

             tmMaxCharWidth Определяет   максимальную  ширину  символов
                          шрифта.

             tmWeight     Определяет яркость шрифта.

             tmItalic     Устанавливает курсив, если задан не ноль.

             tmUnderlined Устанавливает подчеркивание,  если  задан  не
                          ноль.

             tmStruckOut  Устанавливает зачеркивание,  если  указан  не
                          ноль.

             tmFirstChar  Устанавливает значение    первого    символа,
                          определенного в шрифте.

             tmLastChar   Устанавливает значение   последнего  символа,
                          определенного в шрифте.

             tmDefaultChar Указывает  номер  символа,   который   будет
                          замещать символы, не определенные в шрифте.

             tmBreakChar  Устанавливает значение символа, который будет
                          использоваться  для  заполнения   промежутков
                          между словами при выравнивании текста.

             tmPitchAndFamily Определяет  шаг  и  семейство  выбранного
                          шрифта. Младший бит включен, если шрифт имеет
                          переменный шаг.  Четыре старших  бита  задают
                          семейство шрифта. Поле tmPitchAndFamily может
                          быть   скомбинировано   с   шестнадцатиричным
                          значением F0 с  помощью  поразрядного  AND  и
                          затем  сравнено  с  именами семейств шрифтов.
                          Подробно  семейства  шрифтов  рассмотрены   в
                          описании структуры данных LOGFONT.

             tmCharSet    Определяет набор символов шрифта.

             tmOverhang   Определяет  дополнительную построчную ширину,
                          которая  может  быть  добавлена  к  некоторым

       Windows 3.0/Ref/6#7                                       = 75 =

                          синтезированным шрифтам.  Во время построения
                          шрифтов с такими атрибутами, как жирный шрифт
                          или   курсив,   GDI   или   устройству  может
                          понадобиться увеличить ширину строки за  счет
                          увеличения  ширины  символов  и самой строки.
                          Например,   GDI   изменяет    строку    путем
                          расширения  внутрисимвольного  пространства и
                          утолщения,  а  также  приближения  шрифта   к
                          курсиву  путем  наклона  символов  строки.  В
                          любом случае имеет место  увеличение  размера
                          самой    строки.   Для   жирных   строк   это
                          расстояние,   на   которое   происходит    ее
                          расширение из-за утолщения. Для строк курсива
                          это величина, на которую верхняя часть шрифта
                          скашивается  относительно нижней.

                          Поле tmOverhang      позволяет     прикладной
                          программе  определить,  какая  часть   ширины
                          символа,  возвращаемой функцией GetTextExtent
                          для  одного  символа,  является   фактической
                          шириной  символа,  а  какая  - дополнительной
                          шириной   на   строку.   Фактическая   ширина
                          соответствует   возвращаемому   значению   за
                          вычетом величины превышения.

             tmDigitizedAspectX     Определяет вертикальный коэффициент
                          сжатия устройства, для которых этот шрифт был
                          создан.

             tmDigitizedAspectY           Определяет коэффициент сжатия
                          устройства, для  которого  шрифт  был создан.
                          Отношение значения поля tmDigitizedAspectY  к
                          значению    поля    tmDigitizedAspectX  - это
                          отношение  коэффициентов  сжатия  устройства,
                          для которого этот шрифт был создан.

             Смотрите также    описание    функций    GetDeviceCaps   и
        GetTextMetrics в  главе  4,   "Список   функций",   Справочного
        руководства, Том 1.

        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                       = 76 =

                                         WNDCLASS                              

             Структура данных класса окна

             Структура данных  WNDCLASS   содержит   атрибуты   класса,
        регистрируемые функцией RegisterClass.

             typedef struct   tagWNDCLASS {
                     WORD     style;
                     long     (FAR PASCAL *lpfnWndProc)   ();
                     int      cbClsExtra;
                     int      cbWndExtra;
                     HANDLE   hInstance;
                     HICON    hIcon;
                     HCURSOR  hCursor;
                     HBRUSH   hbrBackground;
                     LPSTR    lpszMenuName;
                     LPSTR    lpszClassName;
              } WNDCLASS;

             Поля WNDCLASS имеют следующее назначение:
        ───────────────────────────────────────────────────────────────

             Поле         Назначение
             ────         ──────────

             style        Oпределяет  тип  класса.  Эти   типы    могут
                          комбинироваться при    помощи     поразрядной
                          операции OR.  Это может быть любая комбинация
                          следующих значений:

                          Величина     Значение
                          ────────     ────────

                          CS_BYTEALIGNCLIENT       Выравнивание области
                                       пользователя на границу байта (в
                                       направлении  x).

                          CS_BYTEALIGNWINDOW    Выравнивание  окна   на
                                       границу байта (в направлении x).

                          CS_CLASSDC   Присвоить   классу    окна   его
                                       собственный контекст отображения
                                       (разделяемый экземплярами).

                          CS_DBLCLKS   Послать   сообщение   о  двойном
                                       нажатии кнопки "мыши".

                          CS_GLOBALCLASS  Определяет,   что класс  окна
                                       прикладной программы глобальный.
                                       Глобальный   класс    прикладной
                                       программы создается   прикладной
                                       программой  или  библиотекой   и

       Windows 3.0/Ref/6#7                                       = 77 =

                                       доступен всем         прикладным
                                       программам. Класс   разрушается,
                                       когда  прикладная  программа или
                                       библиотека,которая создала класс
                                       прекращает      работу;      это
                                       существенно так  как  все  окна,
                                       созданные  с  глобальным классом
                                       закрываются перед  тем  как  это
                                       произойдет.

                          CS_HREDRAW   Перерисовывает  все  окно,  если
                                       изменились        горизонтальные
                                       размеры.

                          CS_NOCLOSE   Заблокировать           параметр
                                       "Завершить"  в системном меню.

                          CS_OWNDC     Присвоить каждому окну экземпляр
                                       его собственного       контекста
                                       отображения. Заметьте,  хотя тип
                                       CS_OWNDC удобен, каждый контекст
                                       отображения занимает  около  800
                                       байт памяти,что       необходимо
                                       учитывать.

                          CS_PARENTDC  Присваивает родительскому   окну
                                       контекст отображения      класса
                                       окна.

                          CS_SAVEBITS  Сохраняет часть экрана,  которая
                                       закрыта окном;  система  Windows
                                       использует сохранение  растровой
                                       карты   окна,   при  воссоздании
                                       первоначального окна,когда  окно
                                       удаляется.   Windows  отображает
                                       растровую     карту     в     ее
                                       первоначальном  положении  и  не
                                       посылает   сообщение    WM_PAINT
                                       окну,   которое   было   закрыто
                                       окном,  если память используемая
                                       растровой    картой    не   была
                                       сброшена и если другое  экранное
                                       действие не изменяло сохраненный
                                       образ. Прикладная      программа
                                       должна  устанавливать  этот  бит
                                       только       для       маленьких
                                       окон,которые отображаются кратко
                                       и затем удаляются  перед  другим
                                       действием    экрана,   требующим
                                       место.Этот   установленный   бит
                                       увеличивает  количество времени,
                                       требуемое для  отображения  окна
                                       за  счет  времени требуемого для

       Windows 3.0/Ref/6#7                                       = 78 =

                                       размещения памяти для сохранения
                                       растровой карты.

                          CS_VREDRAW   Перерисовывает  все  окно,  если
                                       изменились вертикальные размеры.

             lpfnWndProc  Определяет функцию  окна.

             cbClsExtra   Определяет    количество    байт,     которые
                          необходимо разместить  после структуры класса
                          окна.

             cbWndExtra   Определяет    количество    байт,     которые
                          необходимо разместить     после     структуры
                          экземпляра  окна.Если  прикладная   программа
                          использует структуру   данных   WNDCLASS  для
                          регистрации  панели   диалога   созданной   с
                          директивой CLASS в файле сценария .RC, то это
                          поле    должно     быть     установлено     в
                          DLGWINDOWEXTRA.

             hInstance    Определяет  модуль  класса. Это  должен  быть
                          дескриптор экземпляра. Он  не   должен  иметь
                          значение NULL.

             hIcon        Определяет  икону   класса.  Это  должен быть
                          дескриптор ресурса  иконы.  Если  hIcon равен
                          NULL, то прикладная программа должна рисовать
                          икону каждый    раз,    когда    пользователь
                          закрывает окно прикладной программы.

             hCursor      Определяет курсор класса.  Это   должен  быть
                          дескриптор ресурса   курсора.   Если  hCursor
                          равен NULL,  прикладная программа должна явно
                          устанавливать   форму   курсора   при   любом
                          перемещении  "мыши"  внутрь  окна  прикладная
                          программа.

           hbrBackground  Определяет кисть фона  класса. Это может быть
                          или дескриптор       физической        кисти,
                          предназначенной  для  закрашивания фона,  или
                          значение цвета.  Если задано значение  цвета,
                          оно   должно   представлять   собой  один  из
                          стандартных системных  цветов,  перечисленных
                          ниже,   и  к  выбранному  цвету  должна  быть
                          добавлена  1  (например,   COLOR_BACKGROUND+1
                          определяет цвет системного фона). Если задано
                          значение цвета, оно должно быть преобразовано
                          к одному из следующих типов:

                          COLOR_ACTIVEBORDER

                          COLOR_ACTIVECAPTION

       Windows 3.0/Ref/6#7                                       = 79 =


                          COLOR_APPWORKSPASE

                          COLOR_BACKGROUND

                          COLOR_BTNFACE

                          COLOR_BTNSHADOW

                          COLOR_BTNTEXT

                          COLOR_CAPTIONTEXT

                          COLOR_GRAYTEXT

                          COLOR_HIGHLIGHT

                          COLOR_HIGHLIGHTTEXT

                          COLOR_INACTIVEBORDER

                          COLOR_INACTIVECAPTION

                          COLOR_MENU

                          COLOR_MENUTEXT

                          COLOR_SCROLLBAR

                          COLOR_WINDOW

                          COLOR_WINDOMFRAME

                          COLOR_WINDOWTEXT

                          Если значение поля hbrBacground  равно  NULL,
                          прикладная  программа  должна  рисовать  свой
                          собственный    фон    каждый    раз,    когда
                          запрашивается     рисование     в     области
                          пользователя.  Прикладная   программа   может
                          определить,   когда  необходимо  закрашивание
                          фона,     путем      обработки      сообщения
                          WM_ERASEBKGND,  или  с  помощью проверки поля
                          fErase    структуры    данных     PAINSTRUCT,
                          заполняемой функцией BeginPaint.

             lpszMenuName Указывает   на  оканчивающуюся  нулем  строку
                          символов, которая определяет имя ресурса меню
                          класса  (  как  это  имя  появляется  в файле
                          ресурса).   Если   для   идентификации   меню
                          использовано   целое   значение,   то   может
                          использоваться макрокоманда  MAKEINTRESOURSE.
                          Если  значение  поля lpszMenuName равно NULL,

       Windows 3.0/Ref/6#7                                       = 80 =

                          то окна, принадлежащие этому классу, не имеют
                          принятых по умолчанию меню.

             lpszClassName Указывает  на строку,  оканчивающуюся нулем,
                          которая определяет имя класса окна.

        ───────────────────────────────────────────────────────────────




       Windows 3.0/Ref/6#7                                       = 81 =

                        Глава 8. ОПЕРАТОРЫ ФАЙЛА ОПИСАНИЯ РЕСУРСОВ             
       ----------------------------------------------------------------

             Эта глава   описывает   операторы,  определяющие  ресурсы,
        которые компилятор ресурсов (RC) Microsoft Windows добавляет  к
        выполняемому файлу    прикладной   программы.   Информацию   по
        использованию компилятора ресурсов смотрите в "Инструментальных
        средствах".

             Эта глава   описывает   операторы   ресурсов  в  следующем
        порядке:

             - Однострочные операторы

             - Ресурсы определяемые пользователем

             - Оператор RCDATA

             - Оператор STRINGTABLE

             - Оператор ACCELERATORS

             - Операторы меню

             - Операторы панели диалога

             - Директивы





       Windows 3.0/Ref/6#7                                       = 82 =

                                8.1  Однострочные операторы                    
       ----------------------------------------------------------------

             Однострочные операторы    определяют    ресурсы,   которые
        содержатся в  отдельном  файле,  такие  как  курсоры,  иконы  и
        шрифты. Операторы сопоставляют имя файла, содержащего ресурс, с
        идентифицирующим  именем  или  номером.  Ресурс  добавляется  к
        выполняемому  файлу  во  время  создания прикладной программы и
        может быть извлечен во время выполнения при  помощи  ссылки  по
        имени или номеру.

             Ниже показана    общая   форма   для   всех   однострочных
        операторов:

          nameID resource-type [load-option] [mem-option] filename

          Поле nameID  определяет  уникальное  имя  или  целое   число,
        идентифицирующее ресурс.  Для ресурса шрифта FONT nameID должно
        быть числом и не может быть именем.

          Поле resourse-type  определяет  одно  из  следующих  ключевых
        слов, определяющих тип ресурса, который будет загружен.


             Ключевое слово       Тип ресурса
             ──────────────       ──────────

             CURSOR               Определяет     растровую       карту,
                                  определяющую форму курсора "мыши"  на
                                  экране дисплея.

             ICON                 Определяет     растровую       карту,
                                  определяющая форму   иконы,   которая
                                  будет   использоваться   для   данной
                                  прикладной программы.

             BITMAP               Определяет заказную  растровую карту,
                                  которую прикладная          программа
                                  собирается использовать при индикации
                                  экрана или как элемент меню.

             FONT                 Определяет  просто   файл, содержащий
                                  шрифт.



             Поле load-option  -  это  необязательное  ключевое  слово,
        которое определяет,  когда ресурс будет загружен.  Это ключевое
        слово должно быть одним из следующих:


       Windows 3.0/Ref/6#7                                       = 83 =

             Ключевое     Описание
                слово
             ────────     ────────
             PRELOAD      Ресурс  должен  быть  загружен немедленно.

             LOADONCALL   Ресурс загружается    во    время   вызова.По
                          умолчанию установлено значение LOADONCALL.

             Примечание

             Ресурсы курсора  и  иконы  могут  содержать  более  одного
        образа.Если ресурсы отмечены,  как PRELOAD,  Windows  загружает
        все образы в ресурс, когда прикладная программа выполняется.

             Необязательное поле   mem-option   состоит  из  следующего
        ключевого слова или ключевых слов,  определяющих,  является  ли
        ресурс   фиксируемым   или   перемещаемым   и  является  ли  он
        сбрасываемым:

             Ключевое     Описание
                слово
             ────────     ────────
             FIXED        Ресурс  остается  в  памяти  на фиксированном
                          месте.

             MOVEABLE     Ресурс может быть  перемещен, если необходимо
                          уплотнить память.

             DISCARDABLE  Ресурс  может  быть сброшен, если он долго не
                          используется.

             По умолчанию установлены значения MOVEABLE  и  DISCARDABLE
        для ресурсов  курсора,  иконы  и шрифта.  Для ресурса растровой
        карты по умолчанию установлено значение MOVEABLE.

             Полеfilename -  это строка в коде ASCII,  определяющая имя
        файла DOS, содержащего ресурс. Если файл находится не в текущем
        рабочем каталоге, необходимо указывать полный маршрут.

             Следующий пример   показывает   правильное   использование
        однострочных операторов:

             cursor CURSOR point.cur
             cursor CURSOR DISCARDABLE point.cur
             10     CURSOR custom.cur

             desk    ICON desk.ico
             desk    ICON DISCARDABLE desk.ico
             11      ICON custom.ico

             disk    BITMAP disk.bmp
             disk    BITMAP DISCARDABLE disk.bmp
             12      bitmap custom.bmp


       Windows 3.0/Ref/6#7                                       = 84 =

             5 FONT  CMROMAN.FON




       Windows 3.0/Ref/6#7                                       = 85 =

                         8.2  Ресурсы, определяемые пользователем              
       ----------------------------------------------------------------

             Прикладная программа   может   определять   также  и  свой
        собственный ресурс.  Это  могут  быть  любые  данные,   которые
        прикладная программа собирается использовать. Оператор ресурса,
        определяемого пользователем, имеет следующую форму:

             nameID typeID [load-option] [mem-option] {[filename] │
             [ BEGIN
               raw-data
               END ]}

             Поле nameID определяет уникальное  имя  или  целое  число,
        идентифицирующее ресурс.

             Поле typeID  определяет  уникальное  имя  или целое число,
        идентифицирующее тип  ресурса.  Если  используется  число,  оно
        должно  быть больше 255.  Числа от 1 до 255 зарезервированы для
        существующих и определяемых в будущем типов ресурсов.

             Поле load-option  -  это  необязательное  ключевое  слово,
        которое  определяет,  когда  ресурс будет загружен.  Оно должно
        быть одним из следующих:

             Ключевое     Описание
                слово
             ────────     ────────

             PRELOAD      Ресурс  должен  быть  загружен немедленно.

             LOADONCALL   Ресурс загружается    во    время   вызова.По
                          умолчанию установлено значение LOADONCALL.

             Необязательное поле   mem-option   состоит  из  следующего
        ключевого слова или ключевых слов,  определяющих,  является  ли
        ресурс   фиксируемым   или   перемещаемым   и  является  ли  он
        сбрасываемым:

             Ключевое     Описание
                слово
             ────────     ────────

             FIXED        Ресурс  остается  в  памяти  на фиксированном
                          месте.

             MOVEABLE     Ресурс может быть  перемещен, если необходимо
                          уплотнить память.

             DISCARDABLE  Ресурс  может  быть сброшен, если он долго не
                          используется.

             Необязательное поле  filename  -  это строка в коде ASCII,

       Windows 3.0/Ref/6#7                                       = 86 =

        определяющая имя  файла  DOS,  содержащего  ресурс.  Если  файл
        находится  не в текущем рабочем каталоге,  необходимо указывать
        полный маршрут.Не используйте поле falename, если вы указываете
        неструктурированные данные  между  необязательными  операторами
        BEGIN и END.

             В поле  raw-data  определяются  одно  или  несколько целых
        чисел и строк.  Целые числа задаются в десятичном, восьмеричном
        или шестнадцатиричном  формате.Не  используйте  поле raw-data и
        поля BEGIN и  END,если вы указали имя файла filename.

             Следующий пример   показывает   правильное   использование
        оператора ресурсов, определяемых пользователем:

             array        MYRES        data.res
             14           300          custom.res
             18           MYRES2
             BEGIN
                  "Это строка данных\0" , /*строка,оканчивается нулем*/
                   1024,                  /*целое                    */
                   0x029a,                /* шестнадцатиричное целое */
                   0o733,                 /*восьмеричное целое       */
                   "\07"                  /*восьмеричный байт        */
             END




       Windows 3.0/Ref/6#7                                       = 87 =

                                   8.3  Оператор RCDATA                        
       ----------------------------------------------------------------

             Синтаксис

             nameID RCDATA  [load-option] [mem-option]
             BEGIN
             raw-data
             END

             Оператор RCDATA     определяет    один    или    несколько
        неструктурированных ресурсов    для    прикладной    программы.
        Неструктурированные ресурсы дают возможность включать  двоичные
        данные непосредственно в выполняемый файл.

             Поле nameID определяет либо  уникальное  имя,  либо  целую
        величину, которые определяет ресурс.

             Поле load-option  -  это  необязательное  ключевое  слово,
        которое  определяет,  когда  ресурс будет загружен.  Оно должно
        быть одним из следующих:

             Значение     Описание
             ────────     ────────

             PRELOAD      Ресурс  должен  быть  загружен немедленно.

             LOADONCALL   Ресурс загружается    во    время   вызова.По
                          умолчанию установлено значение LOADONCALL.


             Необязательное поле   mem-option   состоит  из  следующего
        ключевого слова или ключевых слов,  определяющих,  является  ли
        ресурс   фиксируемым   или   перемещаемым   и  является  ли  он
        сбрасываемым:

             Ключевое     Описание
                слово
             ────────     ────────

             FIXED        Ресурс  остается  в  памяти  на фиксированном
                          месте.

             MOVEABLE     Ресурс может быть  перемещен, если необходимо
                          уплотнить память.

             DISCARDABLE  Ресурс  может  быть сброшен, если он долго не
                          используется.

             По умолчанию установлены значения MOVEABLE и DISCARDABLE.

             В поле  raw-data  определяются  одно  или  несколько целых
        чисел и строк.  Целые числа задаются в десятичном, восьмеричном

       Windows 3.0/Ref/6#7                                       = 88 =

        или шестнадцатиричном формате.

             Следующий пример   показывает   правильное   использование
        оператора RCDATA:

             resname RCDATA
             BEGIN
                  "Это строка данных\0" , /*строка,оканчивается нулем*/
                   1024,                  /*целое                    */
                   0x029a,                /* шестнадцатиричное целое */
                   0o733,                 /*восьмеричное целое       */
                   "\07"                  /*восьмеричный байт        */
             END



       Windows 3.0/Ref/6#7                                       = 89 =

                                 8.4  Оператор STRINGTABLE                     
       ----------------------------------------------------------------

             Синтаксис

             STRINGTABLE [load-option] [mem-option]
             BEGIN
             stringID string
             END

             Оператор STRINGTABLE   определяет   один   или   несколько
        строковых ресурсов для прикладной программы.  Строковые ресурсы
        -  это  простые  строки  в  коде ASCII,  заканчивающиеся нулем,
        которые при необходимости могут быть загружены из  выполняемого
        файла с помощью функции LoadString.


             Поле load-option  -  это  необязательное  ключевое  слово,
        которое  определяет,  когда  ресурс будет загружен.  Оно должно
        быть одним из следующих:

             Значение     Описание
             ────────     ────────

             PRELOAD      Ресурс  должен  быть  загружен немедленно.

             LOADONCALL   Ресурс загружается    во    время   вызова.По
                          умолчанию установлено значение LOADONCALL.


             Необязательное поле   mem-option   состоит  из  следующего
        ключевого слова или ключевых слов,  определяющих,  является  ли
        ресурс   фиксируемым   или   перемещаемым,  и  является  ли  он
        сбрасываемым:

             Ключевое     Описание
                слово
             ────────     ────────

             FIXED        Ресурс  остается  в  памяти  на фиксированном
                          месте.

             MOVEABLE     Ресурс может быть  перемещен, если необходимо
                          уплотнить память.

             DISCARDABLE  Ресурс  может  быть сброшен, если он долго не
                          используется.

             По умолчанию установлены значения MOVEABLE и DISCARDABLE.

             Поле stringID определяет целое число,  которое  определяет
        ресурс.


       Windows 3.0/Ref/6#7                                       = 90 =

             Поле string определяет одну  или  несколько  строк  ASCII,
        заключенные в двойные кавычки.  Строка должна быть не более 255
        символов и должна занимать  одну  линию  в  исходном  файле.Для
        добавления  символа  "возврат  каретки"  в  строку  используйте
        следующую последовательность   символов:   \012.Например,строка
        "Line   one\0122Line   two"   определенная  как  строка,  будет
        отображена следующим образом:

             Line one
             Line two

             Строки, сгруппированные в отдельных  сегментах,  позволяют
        все описанные   строки   читать   одновременно   и   сбрасывать
        вместе. Когда  возможно  прикладная  программа должна создавать
        таблицу перемещений и сброса.  Компилятор ресурсов размещает 16
        строк  в  сегменте  и  использует идентифицирующее значение для
        определения какой сегмент содержит строку. Строки с одинаковыми
        старшими  12  битами  в  их идентификаторах размещаются в одном
        сегменте.


             Следующий пример   показывает   правильное   использование
        оператора STRINGTABLE:

             #define IDS_HELLO    1
             #define IDS_GOODBYE  2

             STRINGTABLE
             BEGIN
                 IDS_HELLO,    "Hello"
                 IDS_GOODBYE,  "Goodbye"
             END



       Windows 3.0/Ref/6#7                                       = 91 =

                                8.5   Оператор ACCELERATORS                    
       ----------------------------------------------------------------

             Синтаксис

             acctablename ACCELERATORS
             BEGIN
             event,idvalue,[type] [NOINVERT] [ALT] [SHIFT] [CONTROL]
             .
             .
             .
             END


             Оператор ACCELERATORS   определяет   один   или  несколько
        ускорителей для прикладной программы. Ускоритель - это одно или
        несколько  нажатий  клавиш,  определяемых прикладной программой
        для того,  чтобы дать пользователю быстрый  путь  к  выполнению
        задачи.  Функция TranslateAccelerator используется для перевода
        сообщений ускорителя  из   очереди   прикладной   программы   в
        сообщения WM_COMMAND или WM_SYSCOMMAND.

              Поле acctablename содержит либо уникальное имя либо целое
        значение, которое определяет ресурс.

             Поле event  определяет  сочетание  клавиш,  которое  будет
        использоваться  как  ускоритель.   Типы   используемых   клавиш
        могут быть следующими:

             Символ       Описание
             ──────       ────────

             "символ"     Одиночный символ,   заключенный   в   двойные
                          кавычки.  Перед ним может стоять символ (^),
                          означающий, что это управляющий символ.

             Символ в коде
             ASCII        Целое значение,  представляющее символ в коде
                          ASCII.  Параметр  type  должен иметь значение
                          ASCII.

             символ
             виртуальной
             клавиши      Целое значение,  представляющее   виртуальную
                          клавишу.      Виртуальная     клавиша     для
                          буквенно-цифровой    клавиши    может    быть
                          определена  местоположением  заглавной  буквы
                          или цифры в двойных  кавычках  (например  "9"
                          или  "C").Параметр type должен иметь значение
                          VIRTKEY


             Поле idvalue это целое значение, определяющее ускоритель.

       Windows 3.0/Ref/6#7                                       = 92 =


             Поле type требуется только в том  случае,  когда  event  -
        символ в коде ASCII или символ виртуальной клавиши.  Тогда type
        имеет значение ASCII или VIRTKEY соответственно. Целое значение
        event интерпретируется соответственно.  Если VIRTKEY определено
        и поле event содержит строку,  то  поле  event  должно  быть  в
        верхнем регистре.

             Необязательное поле NOINVERT,  если оно задано,  означает,
        что  элемент  меню  верхнего  уровня  не подсвечивается,  когда
        используется  ускоритель.  Это  используется,  например,  когда
        определяется  ускоритель  для  таких  действий  как  прокрутка,
        которые не соответствуют  элементу  меню.  Если  флаг  NOINVERT
        опущен,  элемент  меню верхнего уровня будет подсвечиваться при
        использовании ускорителя, если это возможно.

             Необязательное поле SHIFT,  если оно задано, означает, что
        ускоритель   будет   срабатывать  только  если  нажата  клавиша
        <shift>.

             Необязательное поле CONTROL,  если оно  задано,  означает,
        что  символ является управляющим (ускоритель срабатывает только
        если нажата управляющая клавиша).  Это равноценно использованию
        символа (^) в поле event.

             Необязательное поле ALT,  если оно задано,  означает,  что
        ускоритель будет срабатывать только если нажата клавиша <alt>.

             Следующие примеры  демонстрируют  правильное использование
        ускорителей:

             1 ACCELERATORS
             BEGIN
               "^S",      IDDCLEAR                      ; control C
               "K",       IDDCLEAR                      ; shift K
               "k",       IDDELLIPSE, ALT               ; alt k
               98,        IDDRECT, ASCII                ; b
               66,        IDDSTAR, ASCII                ; B (shift b)
               "g"        IDDRECT                       ; g
               "G"        IDDSTAR                       ; G (shift g)
               VK_F1,     IDDCLEAR, VIRTKEY             ; F1
               VK_F1,     IDDSTAR, CONTROL, VIRTKEY     ; control F1
               VK_F1,     IDDELLIPSE, SHIFT, VIRTKEY    ; shift F1
               VK_F1,     IDDRECT, ALT, VIRTKEY         ; alt F1
               VK_F2,     IDDCLEAR, ALT, VIRTKEY        ; alt shift F2
               VK_F2,     IDDSTAR, CONTROL, SHIFT, VIRTKEY ; alt shift F2
               VK_F2,     IDDRECT, ALT, CONTROL,VIRTKEY ; alt control F2
             END



       Windows 3.0/Ref/6#7                                       = 93 =

                                     8.6 Оператор MENU                         
       ----------------------------------------------------------------

             Синтаксис

             menuID  MENU [load-option] [mem-option]
             BEGIN
             item-definitions
             END

             Оператор MENU определяет содержание ресурса  меню.  Ресурс
        меню - это совокупность информации,  которая определяет внешний
        вид и функции меню прикладной программы. Меню - это специальный
        инструмент   ввода,  который  позволяет  пользователю  выбирать
        команду из списка имен команд.

             Поле menuID  - это имя или номер, используемые для идентифи-
        кации ресурса меню.

             Поле load-option  -  это  необязательное  ключевое  слово,
        которое  определяет,  когда  ресурс будет загружен.  Оно должно
        быть одним из следующих:

             Значение     Описание
             ────────     ────────

             PRELOAD      Ресурс  должен  быть  загружен немедленно.

             LOADONCALL   Ресурс загружается    во    время   вызова.По
                          умолчанию установлено значение LOADONCALL.


             Необязательное поле   mem-option   состоит  из  следующего
        ключевого слова или ключевых слов,  определяющих,  является  ли
        ресурс   фиксируемым   или   перемещаемым,  и  является  ли  он
        сбрасываемым:

             Ключевое     Описание
                слово
             ────────     ────────

             FIXED        Ресурс  остается  в  памяти  на фиксированном
                          месте.

             MOVEABLE     Ресурс может быть  перемещен, если необходимо
                          уплотнить память.

             DISCARDABLE  Ресурс  может  быть сброшен, если он долго не
                          используется.

             По умолчанию установлены значения MOVEABLE и DISCARDABLE.

             Поле item-definitions - это специальные операторы ресурса,

       Windows 3.0/Ref/6#7                                       = 94 =

        которые определяют элементы меню.  Эти операторы определенны  в
        следующем параграфе.

             Ниже приведен пример полного оператора MENU:

             sample MENU
             BEGIN
                     MENUITEM "&Суп", 100
                     MENUITEM "С&алат",100
                     POPUP "&Жаркое"
                     BEGIN
                              MENUITEM "&Рыба", 200
                              MENUITEM "&Цыпленок", 201, CHECKED
                              POPUP "&Мясо"
                              BEGIN
                                    MENUITEM "&Бифштекс", 301
                                    MENUITEM "&Шницель", 302
                              END
                     END
                     MENUITEM"&Десерт",103

             END

                                                                               
            8.6.1  Операторы  определения  элементов
       ----------------------------------------------------------------

             Операторы MENUITEM   и   POPUP   используются    в    поле
        item-definition оператора MENU для определения имен и атрибутов
        элементов  меню.   Может   быть   задано   произвольное   число
        операторов,   причем   каждый  определяет  уникальный  элемент.
        Порядок операторов определяет порядок элементов меню.

             Операторы MENUITEM и POPUP могут быть использованы  только
        в поле item-definition оператора MENU.

                                     Оператор MENUITEM                         
       ----------------------------------------------------------------

             Синтаксис

             MENUITEM text, result,[optionlist]

             Этот необязательный оператор определяет элемент меню.

             Поле text - это строка в коде ASCII, заключенная в двойные
        кавычки, определяющая имя элемента меню.

             Эта строка может содержать спецсимволы /t и /a.  Символ /t
        вставляет табуляцию в отображаемую строку  и  используется  для
        выравнивания   текста  в  столбцах.  Символ  табуляции  следует
        использовать только  в  накладываемых  меню,  но  не  в  строке

       Windows 3.0/Ref/6#7                                       = 95 =

        основного меню. Символ /a вызывает выравнивание по правому краю
        всего последующего текста.

             Для того,  чтобы  вставить  в  текст  двойные кавычки ("),
        используйте две двойные кавычки ("").

             Для того,  чтобы  добавить  в  текстовую строку мнемонику,
        поместите амперсанд (&) перед буквой,  которую  хотите  сделать
        мнемонической. В этом случае буква будет на экране подчеркнутой
        и  будет  функционировать  как  мнемоника.  Для   того,   чтобы
        использовать  амперсанд(&)  внутри символьной строки,  вставьте
        два амперсанда подряд (&&).

             Поле result - это  целое  число,  определяющее  результат,
        получаемый при выборе пользователем элемента  меню.  Результаты
        элемента меню   (это   всегда  целые  числа)  посылаются  окну,
        которому принадлежит данное меню,  когда пользователь  выбирает
        имя элемента меню.

             Необязательное поле  optionlist  -  это одно или несколько
        предварительно определенных  ключевых  слов  меню,  разделенных
        запятыми   или   пробелами,   которые  определяют  внешний  вид
        элементов меню. Это следующие ключевые слова:

             Значение     Описание
             ────────     ────────

             CHECKED      Рядом  с  элементом стоит контрольная отметка
                          ("галочка").

             GRAYED       Имя  элемента   первоначально  не  активно  и
                          серого цвета.

             HELP         Элемент располагается  справа на строке меню,
                          с   вертикальным   разделителем    слева.

             INACTIVE     Имя  элемента   отображается,  но   не  может
                          быть выбрано.

             MENUBARBREAK Также   как   и   MF_MENUBREAK, кроме как для
                          накладываемых  меню.Элемент  располагается  в
                          новом    столбце.Старый   и   новый   столбец
                          разделяются чертой.

             MENUBREAK    Элемент     располагается   в   новой строке,
                          для статических   элементов   строки-меню.Для
                          накладываемых меню  элемент  распологается  в
                          новой колонке,  без  разделяющей  линии между
                          колонками.


             Ключевые слова INACTIVE и GRAYED не  могут  использоваться
             вместе.

       Windows 3.0/Ref/6#7                                       = 96 =


             Ниже показан пример  правильного  использования  оператора
        MENUITEM:

             MENUITEM "&Alpha", 1, CHECKED, GRAYED
             MENUITEM "&Beta", 2

                                      Оператор POPUP                           
       ----------------------------------------------------------------

             Синтаксис

             POPUP text,[optionlist]
             BEGIN
             item-definitions
             END

             Этот оператор  помечает  начало определения накладываемого
        меню. Накладываемое   меню   (которое   также   известно    как
        "раскрываемое вниз"  меню  )  -  это  подсписок элементов меню,
        отображаемый при выборе элемента меню верхнего уровня.

             Поле text - это строка в коде ASCII, заключенная в двойные
        кавычки, определяющая имя накладываемого меню.

             Необязательное поле  optionlist  -  это одно или несколько
        предварительно  определенных  ключевых   слов   меню,   которые
        определяют  внешний вид элементов меню.  Это следующие ключевые
        слова:

             Значение     Описание
             ────────     ────────

             CHECKED      Рядом  с  элементом стоит контрольная отметка
                          ("галочка").Эта опция   не   допустима    для
                          верхнего уровня накладываемого меню.

             GRAYED       Имя  элемента   первоначально  не  активно  и
                          серого цвета.

             HELP         Элемент располагается  справа на строке меню,
                          с   вертикальным   разделителем    слева.

             INACTIVE     Имя  элемента   отображается,  но   не  может
                          быть выбрано.

             MENUBARBREAK Также   как   и   MF_MENUBREAK, кроме как для
                          накладываемых  меню.Элемент  располагается  в
                          новом    столбце.Старый   и   новый   столбец
                          разделяются чертой.

             MENUBREAK    Элемент     располагается   в   новой строке,

       Windows 3.0/Ref/6#7                                       = 97 =

                          для статических   элементов   строки-меню.Для
                          накладываемых меню  элемент  распологается  в
                          новой колонке,  без  разделяющей  линии между
                          колонками.

             Ключевые слова    могут    комбинироваться    при   помощи
        поразрядной операции OR.  Ключевые слова INACTIVE и  GRAYED  не
        могут использоваться вместе.

             Поле item-definitions  может  содержать  любое  количество
        операторов MENUITEMS или POPUP.В результате любое накладываемое
        меню может отображать другое накладываемое меню.

             Следующий пример   показывает   правильное   использование
        накладываемого меню:

             chem MENU
             BEGIN

             POPUP "&Цвета"
             BEGIN
                      MENUITEM "&Синий", 200
                      MENUITEM "&Белый", 201, CHECKED
                      MENUITEM "&Красный", 202
                      MENUITEM "&Желтый", 203
                      MENUITEM "&Черный", 204

             END

             POPUP "&Компоненты"
             BEGIN

                      POPUP"&Сахар"
                      BEGIN
                         MENUITEM "&Глюкоза", 301
                         MENUITEM "&Сахароза", 302, CHECKED
                         MENUITEM "&Лактоза", 303, MENUBREAK
                         MENUITEM "&Фруктоза", 304
                      END

                      POPUP "&Кислота"
                      BEGIN
                             MENUITEM "&Гидрохлорид", 401
                             MENUITEM "&Сульфид", 402

                      END

             END

             END



       Windows 3.0/Ref/6#7                                       = 98 =

                                                                               
            Оператор MENUITEM SEPARATOR
       ----------------------------------------------------------------

             Синтаксис

             MENUITEM SEPARATOR

             Это специальная форма оператора MENUITEM,  которая создает
        неактивный  элемент  меню,  используемый  как разделитель между
        двумя  активными  элементами  накладываемого меню.

             Следующий пример   показывает   правильное   использование
        оператора MENUITEM SEPARATOR:

             MENUITEM    "&Курсив", 206
             MENUITEM    SEPARATOR
             MENUITEM    "&Просмотр", 301





       Windows 3.0/Ref/6#7                                       = 99 =

                                    8.7 Оператор DIALOG                        
       ----------------------------------------------------------------

             Оператор DIALOG   определяет  шаблон,  который  прикладная
        программа может использовать для создания панелей диалога.

             Синтаксис

             nameID DIALOG  [load-option][mem-option]  x,y,width,height
             [option-statements]
             BEGIN
             control-statements
             END

             Этот оператор  отмечает  начало  шаблона   DIALOG.   Здесь
        определяется  имя  панели  диалога,  ключевые  слова управления
        памятью и загрузкой,  начальное расположение панели  на  экране
        дисплея, ее ширина и высота.

             Поле nameID  определяет  любое  уникальное  имя  или целую
        величину, которая определяет ресурс.

             Поле load-option  это   необязательное   ключевое   слово,
        которое  определяет,  когда  ресурс будет загружен.  Оно должно
        быть одним из следующих:

             Параметр     Описание
             ────────     ────────

             PRELOAD      Ресурс должен быть загружен немедленно.

             LOADONCALL   Ресурс загружается  во  время   вызова.   Это
                          значение устанавливается по умолчанию.

             Необязательное поле  mem-option  состоит   из   следующего
        ключевого  слова или ключевых слов,  определяющих,  является ли
        ресурс  фиксируемым  или  перемещаемым,  и   является   ли   он
        сбрасываемым:

             Параметр     Описание
             ────────     ────────

             FIXED        Ресурс остается  в  памяти  на  фиксированном
                          месте.

             MOVEABLE     Ресурс может быть перемещен,  если необходимо
                          уплотнить память.        Это         значение
                          устанавливается по умолчанию.

             DISCARDABLE  Ресурс может  быть сброшен,  если он долго не
                          используется.

             Поля x и y это целые числа,  определяющие координаты x и y

       Windows 3.0/Ref/6#7                                      = 100 =

        верхнего  левого  угла  панели  диалога.  Единицы  измерения по
        горизонтали это 1/4 основной единицы  измерения  ширины;  а  по
        вертикали  1/8  высоты  единицы  измерения высоты.  Эти единицы
        измерения вычисляются из ширины и  высоты  текущего  системного
        шрифта.Функция  GetDialogBaseUnits  возвращает основную единицу
        измерения в пикселях.  Точное  значение  координат  зависит  от
        типа,  определенного  в  операторе STYLE.  Для дочерних панелей
        диалога   координаты   связаны   с   начальными    координатами
        родительского окна, в противном случае панель диалога имеет тип
        DS_ABSALIGN; тогда координаты связаны с начальными координатами
        экрана дисплея.

             Поля width и height это целые числа, определяющие ширину и
        высоту панели.  Единица  измерения  по  горизонтали  равна  1/4
        основной  единицы  измерения  ширины  ,  а единица измерения по
        вертикали 1/8 основной единицы измерения высоты.

             Параметры и  управляющие  операторы  описаны  в  следующих
        разделах.

             Ниже показано правильное использование оператора DIALOG:

             #include "WINDOWS.H"

             errmess DIALOG 10, 10, 300, 110
             STYLE WS_POPUP|WS_BORDER
             CAPTION "Error!"
             BEGIN
               CTEXT "Select one:", 1, 10, 10, 280, 12
               RADIOBUTTON "&Retry", 2, 75, 30, 60, 12
               RADIOBUTTON "&Abort", 3, 75, 50, 60, 12
               RADIOBUTTON "&Ignore", 4, 75, 80, 60, 12
             END

             Комментарий

             Вы не должны использовать тип WS_CHILD с модальной панелью
        диалога.  Функция DialogBox всегда блокирует родительское  окно
        или окно   владельца   вновь  созданной  панели  диалога.  Если
        родительское окно блокируется,  его  дочерние  окна  безусловно
        блокируются.  Так как родительское окно дочерней панели диалога
        блокируется, дочерняя панель диалога также блокируется.

             Если панель  диалога  имеет  тип  DS_ABSALIGN,  координаты
        панели   диалога  для  ее  верхнего  левого  угла  определяются
        относительно  начальных  координат   экрана   дисплея,   а   не
        относительно координат верхнего левого угла родительского окна.
        Этот тип обычно используется, когда вы предполагаете разместить
        панель диалога в определенной части экрана, независимо от того,
        где может быть размещено родительское окно.

             Имя DIALOG может также использоваться как  параметр  имени
        класса  в  функции  CreateWindow для создания окна с атрибутами
        панели диалога.

       Windows 3.0/Ref/6#7                                      = 101 =

                                                                               
            8.7.1  Операторы  параметров диалога
       ----------------------------------------------------------------

             Операторы  параметров    диалога,    задаваемые   в   поле
        option-statements  оператора  DIALOG,  определяют   специальные
        атрибуты панелей диалога,  такие, как их тип, заголовок и меню.
        Операторы  параметров  необязательны.  Если  они   не   заданы,
        используются   значения   по  умолчанию.  Операторы  параметров
        диалога включат следующие операторы:

             - STYLE

             - CAPTION

             - MENU

             - CLASS

             - FONT

             Операторы параметров    описаны   отдельно   в   следующих
        разделах.

                                      Оператор STYLE                           
       ----------------------------------------------------------------

             Синтаксис

             STYLE style

             Этот необязательный  оператор  определяет  тип окна панели
        диалога. Тип окна определяет,  является ли панель накладываемым
        или дочерним окном.По умолчанию тип имеет следующие атрибуты:

             WS_POPUP
             WS_BORDER
             WS_SYSMENU

             Поле style  это  целое  значение или предопределенное имя,
        определяющее  тип  окна.  Это  могут  быть  любые  типы   окон,
        представленные в таблице 8.1 "Типы окон".

             Комментарий

             Если используется  предопределенное   имя,   должна   быть
        использована директива #include для включения файла WINDOWS.H в
        описание ресурсов.

        Таблица 8.1  Типы окон

       Windows 3.0/Ref/6#7                                      = 102 =

        ───────────────────────────────────────────────────────────────
        Тип               Значение
        ───────────────────────────────────────────────────────────────

        DS_LOCALEDIT      Определяет, что      редактируемые      блоки
                          управления в     панели     диалога     будут
                          использовать   память   в   сегменте   данных
                          прикладной  программы.   По   умолчанию   все
                          редактируемые   блоки   управления  в  панели
                          диалога  используют   память   за   пределами
                          сегмента  данных  прикладной  программы.  Эта
                          особенность может быть подавлена  добавлением
                          флага DS_LOCALEDIT в команду STYLE для панели
                          диалога.  Если этот флаг не используется,  то
                          сообщения EM_GETHANDLE   и   EM_SETHANDLE  не
                          могут быть использованы после того как память
                          для блоков управления размещена не в сегменте
                          данных прикладной программы.  Эта особенность
                          не  будет  иметь  иметь  никакого эффекта для
                          блоков управления  созданных,   вне   панелей
                          диалога.

        DS_MODALFRAME     Создает панель  диалога  с  окном   модальной
                          панели диалога,    которая     может     быть
                          скомбинирована   со   строкой  заголовка  или
                          системным  меню   путем   определения   типов
                          WS_CAPTION и WS_SYSMENU.

        DS_NOIDELEMSG     Подавляет   сообщения  WM_ENTERIDLE,  которые
                          Windows будет  посылать  во  всех   остальных
                          случаях владельцу  панели  диалога до тех пор
                          пока отображается панель диалога.

        DS_SYSMODAL       Создает системно-модальную панель диалога.

        WS_BORDER         Создает окно, которое имеет окантовку.

        WS_CAPTION        Создает окно,  которое имеет строку заголовка
                          (подразумевается тип WS_BORDER).

        WS_CHILD          Создает дочернее    окно.   Не   может   быть
                          использовано с типом WS_POPUP.

        WS_CHILDWINDOW    Создает дочернее окно, имеющее тип WS_CHILD.

        WS_CLIPCHILDREN   Исключает область,    занимаемую    дочерними
                          окнами,  при  рисовании  внутри родительского
                          окна. Используется при создании родительского
                          окна.

        WS_CLIPSIBLINGS   Удаляет дочерние   окна   относительно   друг
                          друга;  т.е.  если  отдельное  дочернее  окно
                          получает  сообщение  WP_PAINT  для рисования,

       Windows 3.0/Ref/6#7                                      = 103 =

                          этот тип удаляет все  другие  перекрывающиеся
                          дочерние  окна  из  области  дочернего  окна,
                          которое должно быть скорректировано. (Если не
                          задан тип  WS_CLIPSIBLINGS  и  дочерние  окна
                          перекрываются,  то возможно при  рисовании  в
                          области  пользователя дочернего окна рисовать
                          и в области пользователя соседнего  дочернего
                          окна). Используется только с WS_CHILD.

        WS_DISABLED       Создает окно,      которое      первоначально
                          недоступно.

        WS_DLGFRAME       Создает окно  с фреймом   модальной    панели
                          диалога, но без заголовка.

        WS_GROUP          Определяет первый  блок  управления из группы
                          блоков  управления,  в  которой  пользователь
                          может    передвигаться    от   одного   блока
                          управления  к  другому  при   помощи   клавиш
                          управления  курсором.  Все  блоки управления,
                          определенные после первого блока управления с
                          типом  WS_GROUP,  принадлежат  той  же  самой
                          группе.  Следующий блок  управления  с  типом
                          WS_GROUP заканчивает первую группу и начинает
                          следующую  (т.е.  одна  группа  заканчивается
                          там, где   начинается  следующая).  Этот  тип
                          допустим только для блоков управления.

        WS_HSCROLL        Создает окно,  имеющее  горизонтальную строку
                          прокрутки.

        WS_ICONIC         Создает окно,      которое      первоначально
                          существует в виде иконы.  Используется только
                          с типом WS_OVERLAPPED.

        WS_MAXIMIZE       Создает окно максимального размера.

        WS_MAXIMIZEBOX    Создает окно , имеющее панель максимизации.

        WS_MINIMIZE       Создает окно минимального размера.

        WS_MINIMIZEBOX    Создает окно, имеющее панель  минимизации.

        WS_OVERLAPPED     Создает перекрывающееся окно. Перекрывающееся
                          окно имеет строку заголовка и рамку.

        WS_OVERLAPPEDWINDOW Создает перекрывающееся окно,  имеющее типы
                          WS_CAPTION,  WS_OVERLAPPED,  WS_THICKFRAME  и
                          WS_SYSMENU, WS_MINIMIZEBOX, WS_MAXIMIZEBOX.

        WS_POPUP          Создает накладываемое  окно.  Не  может  быть
                          использовано с типом WS_CHILD.


       Windows 3.0/Ref/6#7                                      = 104 =

        WS_POPUPWINDOW    Создает накладываемое  окно,   имеющее   типы
                          WS_POPUP,   WS_BORDER   и   WS_SYSMENU.   Тип
                          WS_CAPTION должен быть скомбинирован с  типом
                          WS_POPUPWINDOW,  что  бы  системное меню было
                          видимым.

        WS_SIZEBOX        Создает окно,  которое имеет панель  размера.
                          Используется   только  для  окон  со  строкой
                          заголовка или с вертикальной и горизонтальной
                          строками прокрутки.

        WS_SYSMENU        Создает окно, которое имеет панель системного
                          меню в   ее  строке  заголовка.  Используется
                          только для окон со  строкой  заголовка.  Если
                          используется  с  дочерним  окном,  то  вместо
                          панели  системного  меню   создается   панель
                          закрытия окна.

        WS_TABSTOP        Определяет некоторое число блоков управления,
                          через которые пользователь может перемещаться
                          при помощи  клавиши  TAB.  Клавиша  табуляции
                          перемещает  пользователя  к  следующему блоку
                          управления с типом WS_TABSTOP. Этот тип имеет
                          смысл только для блоков управления.

        WS_THICKFRAME     Создает окно с панелью размера,которая  может
                          быть использована   для   изменения  размеров
                          окна.

        WS_VISIBLE        Создает окно,  которое  первоначально видимо.
                          Добавляется к  перекрывающимся  и  налагаемым
                          окнам.    Для   перекрывающихся   окон,   эти
                          параметры используются как параметры  функции
                          ShowWindow.


        WS_VSCROLL        Создает окно,   имеющее  вертикальную  строку
                          прокрутки.

        ───────────────────────────────────────────────────────────────


                                                                               
            Оператор CAPTION
       ----------------------------------------------------------------

             Синтаксис

             CAPTION captiontext

             Этот необязательный оператор определяет  заголовок  панели
        диалога.  Заголовок  появляется в строке заголовка панели (если
        она его имеет).

       Windows 3.0/Ref/6#7                                      = 105 =


             По умолчанию заголовок пуст.

             Поле captiontext   определяет   строку   в   коде   ASCII,
        заключенную в двойные кавычки.

             Следующий пример   показывает   правильное   использование
        оператора CAPTION.

             CAPTION "Error!"

                                                                               
            Оператор MENU
       ----------------------------------------------------------------

             Синтаксис

             MENU menuname

             Этот необязательный  оператор   определяет   меню   панели
        диалога. Если этот оператор не  задан,  то  панель  диалога  не
        имеет меню.

             По умолчанию меню отсутствует.

             Параметр menuname   определяет   имя   ресурса  или  номер
        используемого меню.

             Следующий пример   показывает   правильное   использование
        оператора MENU.

             MENU errmenu

                                      Оператор CLASS                           
       ----------------------------------------------------------------

             Синтаксис

             CLASS class

             Этот необязательный  оператор  определяет   класс   панели
        диалога. По   умолчанию  будет  использован  стандартный  класс
        Windows панели диалога.

             Поле class определяет целое число или строку,  заключенную
        в двойные  кавычки,  определяющую  класс  панели диалога.  Если
        функция окна для класса не посылает сообщение  ему,  он  должен
        вызвать функцию DefDlgProc,  что бы убедится, что все сообщения
        правильно обработаны.  Собственный  класс  может   использовать
        DefDlgProc как  функцию  окна  по умолчанию.  Класс должен быть
        зарегестрирован с  полем cbWndExtra структуры данных WINDCLASS,
        установленным в значение DLGWINDOWEXTRA.

       Windows 3.0/Ref/6#7                                      = 106 =


             Следующий пример   показывает   правильное   использование
        оператора CLASS.

             CLASS "myclass"

             Комментарий

             Оператор CLASS  должен  быть использован в особых случаях,
        когда он заменяет нормальное работу  панели  диалога.  Оператор
        CLASS  переводит панель диалога в окно определенного класса;  в
        зависимости от класса это может дать  нежелательный  результат.
        Не   используйте   предопределенный   класс   блока  управления
        названный этим оператором.

                                                                               
            Оператор FONT
       ----------------------------------------------------------------

             FONT pointsize, typeface

             Этот необязательный  параметр  определяет  шрифт,  которым
        Windows будет  рисовать  текст  в панели диалога.  Шрифт должен
        быть предварительно загружен  или  из  WIN.INI  или  с  помощью
        вызова функции LoadFont.

             Поле pointsize  это  целая  величина,  которая  определяет
        размер шрифта в точках.

             Поле typreface   определяет   строку    ASCII    символов,
        заключенную  в  двойные  кавычки,  которая  содержит  имя  типа
        начертания.  Это имя должно совпадать с именем  определенным  в
        секции шрифта WIN.INI.

             Следующий пример   показывает   правильное   использование
        оператора FONT.

             FONT 12, "Helv"

                        8.7.2 Управляющие операторы панели диалога             
       ----------------------------------------------------------------

             Управляющие операторы,       заданные       в      разделе
        control-statements оператора DIALOG,  определяют атрибуты  окон
        блока управления,  которые появляются в панели диалога.  Панель
        диалога пуста,  если не задан один  или  несколько  управляющих
        операторов. Ниже описаны следующие управляющие операторы:

             - LTEXT

             - RTEXT


       Windows 3.0/Ref/6#7                                      = 107 =

             - CTEXT

             - CHECKBOX

             - PUSHBUTTON

             - LISTBOX

             - GROUPBOX

             - DEFPUSHBUTTON

             - RADIOBUTTON

             - EDITTEXT

             - ICON

             - SCROLLBAR

             - CONTROL

             Управляющие операторы  описаны  ниже,  каждый отдельно.Для
        получения дополнительной   информации   смотрите   таблицу  8.2
        "Классы  блоков  управления"  и  таблицу   8.3   "Типы   блоков
        управления".

                                      Оператор LTEXT                           
       ----------------------------------------------------------------

             Синтаксис

             LTEXT text,id,x,y,width,height,[style]

             Этот оператор  определяет  управление выравниванием текста
        по  левой  границе.   Содержащийся   в   прямоугольнике   текст
        выравнивается    по   левой   границе   прямоугольника.   Текст
        форматируется перед отображением.  Слова,  которые  выходят  за
        конец  строки,  автоматически  переносятся  на начало следующей
        строки.

             Поле text  - это строка в коде ASCII,  определяющая текст,
        который будет отображаться.  Строка  должна  быть  заключена  в
        двойные  кавычки.  Для того,  чтобы добавить в текстовую строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать  мнемонической.  В  этом  случае  буква будет на экране
        подчеркнутой и будет функционировать как мнемоника.  Для  того,
        чтобы   использовать  амперсанд(&)  внутри  символьной  строки,
        вставьте два амперсанда подряд (&&).

             Поле id - уникальное целое  число,  идентифицирующее  блок
        управления.

       Windows 3.0/Ref/6#7                                      = 108 =


             Поле x и y - это целые числа,  определяющие координаты x и
        y верхнего левого угла блока управления.  Координаты связаны  с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали  -  1/8  базовой  высоты символа.  Базовые единицы
        измерения вычисляются из ширины и  высоты  текущего  системного
        шрифта. Функция  GetDialogBaseUnits  возвращает базовые единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:


              - WS_TABSTOP

              - WS_GROUP

             Эти типы полностью описаны в  таблице  8.1,  "Типы  окон".
        Типы  могут  быть  скомбинированы  с использованием поразрядной
        операции OR.

             Комментарии

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для LTEXT   SS_LEFT  и  WS_GROUP.

             Следующий пример   показывает   правильное   использование
        оператора LTEXT:

             LTEXT "Введите имя:", 3, 10, 10, 40, 10

                                      Оператор RTEXT                           
       ----------------------------------------------------------------

             Синтаксис

             RTEXT text,id,x,y,width,height,[style]

             Этот оператор  определяет  управление выравниванием текста
        по  правой  границе.  Содержащийся   в   прямоугольнике   текст
        выравнивается   по   правой   границе   прямоугольника.   Текст
        форматируется перед отображением.  Слова,  которые  выходят  за
        конец  строки,  автоматически  переносятся  на начало следующей

       Windows 3.0/Ref/6#7                                      = 109 =

        строки.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавит в  текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поле width и height - это целые числа, определяющие ширину
        и высоту блока управления.  Единица  измерения  по  горизонтали
        равна 1/4   базовой   ширины   символа,  единица  измерения  по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

              - WS_TABSTOP

              - WS_GROUP

             Эти типы полностью описаны в таблице 8.1,"Типы окон". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.


             Комментарий

             В полях  x,  y,  width,  height  может  быть   использован
        оператор  сложения  (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для RTEXT   SS_RIGHT  и  WS_GROUP.

             Следующий пример   показывает   правильное   использование
        оператора RTEXT:

             RTEXT " Число сообщений :", 4, 30, 50, 100, 10


       Windows 3.0/Ref/6#7                                      = 110 =

                                      Оператор CTEXT                           
       ----------------------------------------------------------------

             Синтаксис

             CTEXT text,id,x,y,width,height,[style]

             Этот оператор определяет управление центрированием текста.
        Содержащийся  в  прямоугольнике   текст   центрируется.   Текст
        форматируется  перед  отображением.  Слова,  которые выходят за
        конец строки,  автоматически переносятся  на  начало  следующей
        строки.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:


              - WS_TABSTOP

              - WS_GROUP

             Эти типы  полностью  описаны  в таблице 8.1,  "Типы окон".
        Типы могут быть  скомбинированы  с  использованием  поразрядной
        операции OR.

             Комментарии

       Windows 3.0/Ref/6#7                                      = 111 =


             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для CTEXT  SS_CENTER  и  WS_GROUP.

             Следующий пример   показывает   правильное   использование
        оператора CTEXT:

             CTEXT "Заголовок",3,10,50,40,10

                                     Оператор CHECKBOX                         
       ----------------------------------------------------------------

             Синтаксис

             CHECKBOX text,id,x,y,width,height,[style]

             Этот оператор определяет блок управления панели  контроля,
        принадлежащий классу BUTTON. Он создает небольшой прямоугольник
        (панель  контроля),  который  подсвечивается   в   определенном
        режиме.    Текст   отображается   непосредственно   справа   от
        прямоугольника.  Блок  управления  подсвечивает  прямоугольник,
        когда  пользователь  нажимает  кнопку  "мыши",  курсор  которой
        находится внутри этого прямоугольника,  и снимает подсветку при
        последующем нажатии кнопки.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по

       Windows 3.0/Ref/6#7                                      = 112 =

        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_GROUP

             Эти типы  полностью  описаны  в таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        BUTTON, описанных в таблице 8.3, "Типы блоков управления". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по   умолчанию   для   CHECKBOX   есть  BS_CHECKBOX  и
             WS_TABSTOP.

             Следующий пример   показывает   правильное   использование
        оператора CHECKBOX:

             CHECKBOX "Курсив", 3, 10, 10, 40, 10

                                    Оператор PUSHBUTTON                        
       ----------------------------------------------------------------

             Синтаксис

             PUSHBUTTON text,id,x,y,width,height,[style]

             Этот оператор   определяет    прямоугольник,    содержащий
        заданный    текст.    Блок    управления   посылает   сообщение
        родительскому окну  каждый  раз,  когда  пользователь  нажимает
        кнопку "мыши", курсор которой находится внутри прямоугольника.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).


       Windows 3.0/Ref/6#7                                      = 113 =

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED

             - WS_GROUP

             Эти типы полностью описаны  в таблице  8.1,  "Типы  окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        BUTTON, описанных в таблице 8.3, "Типы блоков управления". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по  умолчанию  для  PUSHBUTTON  есть  BS_PUSHBUTTON  и
        WS_TABSTOP.

             Следующий пример   показывает   правильное   использование
        оператора PUSHBUTTON:

             PUSHBUTTON "Нет", 7, 10, 10, 20, 10

                                     Оператор LISTBOX                          
       ----------------------------------------------------------------

             Синтаксис

       Windows 3.0/Ref/6#7                                      = 114 =


             LISTBOX id,x,y,width,height,[style]

             Этот оператор  определяет  панель  перечня,  принадлежащую
        классу LISTBOX.  Он создает прямоугольник,  содержащий перечень
        строк (таких, как имена файлов), из которого пользователь может
        делать выборку.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_BORDER

             - WS_VSCROLL

             Эти типы  полностью  описаны   в таблице 8.1,"Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        LISTBOX, описанных в таблице  8.3,  "Типы  блоков  управления".
        Типы  могут  быть  скомбинированы  с использованием поразрядной
        операции OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть   использован
        оператор  сложения  (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для LISTBOX есть LBS_NOTIFY, WS_VSCROLL и
        WS_BORDER.

             Клавиши, рекомендованные   для   использования   в  блоках
        управления  панелей  перечня  описаны  в   System   Application
        Architecture,  Common  User  Access:  Advanced Interface Design
        Guide.

       Windows 3.0/Ref/6#7                                      = 115 =


            Следующий пример   показывает   правильное   использование
        оператора LISTBOX:

             LISTBOX 666, 10, 10, 50, 54

                                     Оператор GROUPBOX                         
       ----------------------------------------------------------------

             Синтаксис

             GROUPBOX  text,id,x,y,width,height,[style]

             Этот оператор   определяет  панель  группы,  принадлежащую
        классу BUTTON.  Он создает  прямоугольник,  который  объединяет
        другие  блоки  управления.  Блоки управления объединяются общей
        окантовкой и отображением  заданного  текста  в  левом  верхнем
        углу.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED


       Windows 3.0/Ref/6#7                                      = 116 =

             Эти типы  полностью  описаны  в таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        BUTTON, описанных в таблице 8.3, "Типы блоков управления". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по   умолчанию   для   GROUPBOX  есть  BS_GROUPBOX  и
        WS_TABSTOP.

             Следующий пример   показывает   правильное   использование
        оператора GROUPBOX:

             GROUPBOX "Вывод", 42, 10, 10, 30, 50

                                  Оператор DEFPUSHBUTTON                       
       ----------------------------------------------------------------

             Синтаксис

             DEFPUSHBUTTON text,id,x,y,width,height,[style]

             Этот оператор  определяет  принятый  по   умолчанию   блок
        управления альтернативной клавиши, принадлежащий классу BUTTON.
        Это небольшой прямоугольник с подсказкой,  который представляет
        собой   принятый   по   умолчанию   ответ  пользователя.  Текст
        отображается на клавишах.  Блок управления подсвечивает клавишу
        обычным  образом,  когда  пользователь  нажимает кнопку "мыши",
        курсор которой находится  внутри  мягкой  клавиши,  и  посылает
        сообщение родительскому окну.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с

       Windows 3.0/Ref/6#7                                      = 117 =

        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED

             - WS_GROUP

             Эти типы  полностью  описаны  в таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        BUTTON, описанных в таблице 8.3, "Типы блоков управления". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для DEFPUSHBUTTON есть BS_DEFPUSHBUTTON и
        WS_TABSTOP.

             Следующий пример   показывает   правильное   использование
        оператора DEFPUSHBUTTON:

             DEFPUSHBUTTON "Включено", 7, 10, 10, 20, 10

                                   Оператор RADIOBUTTON                        
       ----------------------------------------------------------------

             Синтаксис

             RADIOBUTTON text,id,x,y,width,height,[style]

             Этот оператор   определяет   блок    управления    клавиши
        установки,  принадлежащий классу BUTTON.  Это небольшой кружок,

       Windows 3.0/Ref/6#7                                      = 118 =

        который  имеет  заданный  текст,  отображаемый  непосредственно
        справа  от него.  Блок управления подсвечивает его поверхность,
        когда  пользователь  нажимает  кнопку  "мыши",  курсор  которой
        находится   внутри   этого   кружок,   и   посылает   сообщение
        родительскому  окну.  Блок  управления  снимает   подсветку   и
        посылает сообщение при повторном нажатии кнопки.

             Поле text - это строка в коде ASCII,  определяющая  текст,
        который  будет  отображаться.  Строка  должна  быть заключена в
        двойные кавычки.  Для того,  чтобы добавить в текстовую  строку
        мнемонику, поместите амперсанд (&) перед буквой, которую хотите
        сделать мнемонической.  В этом случае  буква  будет  на  экране
        подчеркнутой  и будет функционировать как мнемоника.  Для того,
        чтобы  использовать  амперсанд(&)  внутри  символьной   строки,
        вставьте два амперсанда подряд (&&).

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED

             - WS_GROUP

             Эти типы  полностью  описаны  в таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        BUTTON, описанных в таблице 8.3, "Типы блоков управления". Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть   использован

       Windows 3.0/Ref/6#7                                      = 119 =

        оператор  сложения  (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по умолчанию для  RADIOBUTTON  есть  BS_RADIOBUTTON  и
        WS_TABSTOP.

             Следующий пример   показывает   правильное   использование
        оператора RADIOBUTTON:

             RADIOBUTTON "АМ 101", 10, 10, 10, 40, 10


                                     Оператор EDITTEXT                         
       ----------------------------------------------------------------

             Синтаксис

             EDITTEXT id,x,y,width,height,[style]

             Этот оператор    определяет    блок    управления    EDIT,
        принадлежащий классу EDIT.  Он создает прямоугольник, в который
        пользователь   может   вводить   и  редактировать  текст.  Блок
        управления  отображает  курсор,  когда  пользователь   нажимает
        кнопку   "мыши",  находясь  в  нем.  Пользователь  может  затем
        использовать клавиатуру для  ввода  текста  или  редактирования
        существующего   текста.   К  редактирующим  клавишам  относятся
        клавиши пробела и удаления символа. "Мышь" может использоваться
        для выбора символа (или символов),  который должен быть удален,
        или выбора места для того, чтобы вставить новые символы.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP


       Windows 3.0/Ref/6#7                                      = 120 =

             - WS_DISABLED

             - WS_GROUP

             - SW_VSCROLL

             - WS_HSCROLL

             Эти типы  полностью  описаны  в  таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        EDIT, описанных в таблице 8.3,  "Типы блоков управления".  Типы
        могут быть скомбинированы с использованием поразрядной операции
        OR. Класс EDIT должен не конфликтовать со всеми другими.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по  умолчанию для EDITTEXT есть WS_TABSTOP,  ES_LEFT и
        WS_BORDER.

             Клавиши, рекомендованные  для   использования   в   блоках
        редактирования описаны  в  System   Application   Architecture,
        Common User Access: Advanced Interface Design Guide.

             Следующий пример   показывает   правильное   использование
        оператора EDITTEXT:

             EDITTEXT 3, 10, 10, 100, 10

                                     Оператор COMBOBOX                         
       ----------------------------------------------------------------

             Синтаксис

             COMBOBOX id,x,y,width,height,[style]

             Этот оператор определяет комбинированный блок  управления,
        принадлежащий классу COMBOBOX.  Комбинированный блок управления
        состоит из статических текстовых полей или редактируемых  полей
        совместно  с панелями перечня.Панель перечня может отображаться
        постоянно  или   выпадать   по   желанию   пользователя.   Если
        комбинированная панель содержит статическое поле текста, то оно
        отображает   всегда   выбор   в    области    панеля    перечня
        комбинированного    поля    управления.    Если    используется
        редактируемое поле,  то  пользователь  может  набрать  желаемый
        выбор; панель   перечня  подсвечивает  первый  элемент  который
        соответсвует тому  который  набрал  пользователь.  Пользователь

       Windows 3.0/Ref/6#7                                      = 121 =

        может затем  завершить  выбор  выбрав  подсвеченный  элемент  в
        панели перечня.  Кроме этого  комбинированный  блок  управления
        может быть  рисуемым  пользователем  и  иметь фиксированные или
        изменяемые размеры.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED

             - WS_GROUP

             - SW_VSCROLL


             Эти типы  полностью  описаны  в  таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        комбинированной панели,  описанных в таблице 8.3,  "Типы блоков
        управления".  Типы могут быть скомбинированы  с  использованием
        поразрядной операции OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по  умолчанию   для   COMBOBOX   есть   WS_TABSTOP   и
        CBS_SIMPLE.

             Клавиши, рекомендованные      для      использования     в
        комбинированных   блоках   описаны   в    System    Application

       Windows 3.0/Ref/6#7                                      = 122 =

        Architecture,  Common  User  Access:  Advanced Interface Design
        Guide.

             Следующий пример   показывает   правильное   использование
        оператора COMBOBOX:

             COMBOBOX 777,  10,  10,  50,  54, CBS_SIMPLE | WS_SCROLL |
                                                             WS_TABSTOP

                                       Оператор ICON                           
       ----------------------------------------------------------------

             Синтаксис

             ICON text,id,x,y,width,height,[style]

             Этот оператор    определяет    блок    управления   икона,
        принадлежащий классу STATIC.  Он создает икону,  отображаемую в
        панели диалога.

             Параметр text  является именем иконы (но не именем файла),
        которое определяется где-либо в файле описания ресурсов.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Для оператора  ICON параметры width и height игнорируются,
        причем для иконы автоматически устанавливаются  ее  собственные
        размеры.

             В необязательном  поле  style   допускается   только   тип
        SS_ICON.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по  умолчанию   для   ICON  есть  SS_ICON.

             Следующий пример   показывает   правильное   использование
        оператора ICON:

       Windows 3.0/Ref/6#7                                      = 123 =


             ICON " Икона", 901, 30, 30

                                    Оператор SCROLLBAR                         
       ----------------------------------------------------------------

             Синтаксис

             SCROLLBAR  id,x,y,width,height,[style]

             Этот оператор определяет строку  прокрутки,  принадлежащую
        классу SCROLLBAR.  Это  прямоугольник,  содержащий  бегунок   и
        стрелки  направления в обоих концах.  Строка прокрутки посылает
        уведомляющее сообщение родительскому  окну  каждый  раз,  когда
        пользователь нажимает   кнопку   "мыши"   в  блоке  управления.
        Родитель отвечает за корректировку позиции  бегунка,  если  это
        необходимо. Блоки управления данного класса могут располагаться
        в любом месте окна  и  использоваться  каждый  раз,  когда  это
        необходимо для обеспечения прокрутки введенной информации.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы
        измерения в пикселях.

             Поля width и height - это целые числа, определяющие ширину
        и  высоту  блока  управления.  Единица измерения по горизонтали
        равна 1/4  базовой  ширины  символа,   единица   измерения   по
        вертикали - 1/8 базовой высоты символа.

             Необязательное поле style может содержать любую комбинацию
        ( или не содержать совсем) следующих типов:

             - WS_TABSTOP

             - WS_DISABLED

             - WS_GROUP


             Эти типы  полностью  описаны  в  таблице 8.1, "Типы окон".

             В дополнение к этим  типам,  поле  style  может  содержать
        лыбую  комбинацию  (  или  не  содержать  совсем)  типов класса
        SCROLLBAR, описанных  в таблице 8.3,  "Типы блоков управления".

       Windows 3.0/Ref/6#7                                      = 124 =

        Типы могут быть  скомбинированы  с  использованием  поразрядной
        операции OR.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Тип по  умолчанию   для   SCROLLBAR есть  SBC_HORZ.

             Следующий пример   показывает   правильное   использование
        оператора SCROLLBAR:

             SCROLLBAR  999, 25, 30, 10, 100

                                     Оператор CONTROL                          
       ----------------------------------------------------------------
             Синтаксис

             CONTROL text,id,class,style,x,y,width,height

             Этот оператор  определяет  определяемое пользователем окно
        блока управления.

             Поле text  - это строка в коде ASCII,  определяющая текст,
        который будет отображаться.  Строка  должна  быть  заключена  в
        двойные кавычки.

             Поле id  -  уникальное целое число,  идентифицирующее блок
        управления.

             Поле class - предопределенное имя,  символьная строка  или
        целое число, определяющее класс. Это может быть один из классов
        блоков управления   (смотрите   таблицу   8.2   "Классы  блоков
        управления").  Если это  предопределенное  имя,  поддерживаемое
        прикладной  программой,  это должна быть строка символов в коде
        ASCII, заключенная в двойные кавычки.

             Поле style   -   предопределенное  имя  или  целое  число,
        определяющее тип заданного блока  управления.  Точное  значение
        style зависит  от  значения поля class.  В таблицах 8.2 "Классы
        блоков управления" и 8.3 "Типы  блоков  управления"  приводятся
        классы блоков управления и соответствующие типы.

             Поля x и y - это целые числа,  определяющие координаты x и
        y  верхнего левого угла блока управления.  Координаты связаны с
        начальными координатами  панели  диалога.Единица  измерения  по
        горизонтали равна 1/4 базовой ширины символа, единица измерения
        по вертикали - 1/8  базовой  высоты  символа.  Базовые  единицы
        измерения  вычисляются  из  ширины и высоты текущего системного
        шрифта.  Функция GetDialogBaseUnits возвращает базовые  единицы

       Windows 3.0/Ref/6#7                                      = 125 =

        измерения в пикселях.

             Поля width  и  height  содержат  целые  значения,  которые
        определяют ширину и высоту блока управления.  Единица измерения
        по  горизонтали  равна  1/4  базовой  ширины  символа,  единица
        измерения по вертикали - 1/8 базовой высоты символа.

             Комментарий

             В полях  x,  y,  width,  height  может  быть  использован
        оператор сложения   (+)  для  относительного  позиционирования.
        Например, в поле x может быть "15+6".

             Таблица 8.2 описывает шесть классов блоков управления:


             Таблица 8.2                       Классы блоков управления
        ───────────────────────────────────────────────────────────────
             Класс        Значение
        ───────────────────────────────────────────────────────────────

             BUTTON       Клавишный блок  управления  -  это  небольшое
                          прямоугольное дочернее окно в  виде  клавиши,
                          которую   пользователь   может  "нажимать"  и
                          "отпускать"  при  помощи  "мыши".   Клавишные
                          блоки   управления  могут  быть  использованы
                          отдельно  или  в  группе,   а   также   могут
                          помечаться    или   сопровождаться   текстом,
                          появляющимся вне клавишного блока управления.
                          Клавишные  блоки  управления  обычно изменяют
                          внешний вид при его "нажатии" пользователем

             COMBOBOX     Комбинированный блок  управления  состоит  из
                          поля  выбора,  подобного редактируемому блоку
                          управления,  и панели перечня. Панель перечня
                          может   отображаться   постоянно   или  может
                          "выбрасываться" когда  пользователь  выбирает
                          "кнопку сброса", находящуюся за полем выбора.

                          В зависимости от типа комбинированного  блока
                          управления  пользователь  может  или не может
                          редактировать содержимое  поля  выбора.  Если
                          панель перечня видимая,  набираемые символы в
                          блоке выбора  приводят  к  тому,  что  первый
                          совпадающий     элемент    панели    перечня,
                          совпадающий    с     набранными     символами
                          подсвечивается.  Выбираемый  элемент в панели
                          перечня отображают  выбранный  текст  в  поле
                          выбора.


             EDIT         Редактируемые блоки    управления    -    это
                          прямоугольное  дочернее   окно,   в   которое

       Windows 3.0/Ref/6#7                                      = 126 =

                          пользователь    может    вводить    текст   с
                          клавиатуры.   Пользователь   выбирает    блок
                          управления  и  настраивает его на ввод данных
                          при нажатии кнопок "мыши"  внутри  блока  или
                          попадая в  него при помощи клавиши табуляции.
                          Пользователь может вводить текст,  когда блок
                          управления  отображает мигающий псевдокурсор.
                          "Мышь" может использоваться  для  перемещения
                          курсора  и  выбора места расположения символа
                          или  позиционирования  курсора  для   вставки
                          символов.    Клавиша   пробела   может   быть
                          использована    для    удаления     символов.
                          Редактируемые   блоки  управления  используют
                          шрифт  с  фиксированным  шагом  и  отображают
                          символы   в  коде  ANSI.  Они  распространяют
                          символы  табуляции   на   необходимое   число
                          пробелов  для перемещения к следующей позиции
                          табуляции.   Предполагается,   что    позиции
                          табуляции  располагаются  через каждые восемь
                          символов.

             LISTBOX      Блоки управления  панелью  перечня состоят из
                          перечня   символьных   строк.    Этот    блок
                          управления используется   каждый  раз,  когда
                          прикладной программе  необходимо  представить
                          список имен,  таких как имена файлов, которые
                          пользователь  может  просмотреть  и   сделать
                          выбор. Пользователь может выбирать строки при
                          помощи "мыши",  указав на текстовую строку  и
                          нажав   кнопку   "мыши".   Выбранные   строки
                          подсвечиваются    и    родительскому     окну
                          посылается   уведомляющее  сообщение.  Строка
                          прокрутки может быть  использована  с  блоком
                          управления   панелью  перечня  для  прокрутки
                          списка,  если он слишком длинный или  широкий
                          для размещения в окне блока управления.

             SCROLLBAR    Блок управления     прокруткой     -      это
                          прямоугольник,  содержащий  бегунок и стрелки
                          направления в обоих концах.  Строка прокрутки
                          посылает уведомляющее сообщение родительскому
                          окну каждый раз,  когда пользователь нажимает
                          кнопку  "мыши"  в блоке управления.  Родитель
                          отвечает за  корректировку  позиции  бегунка,
                          если  это  необходимо.  Блок управления этого
                          класса имеет тот же внешний вид  и  выполняет
                          те  же  функции,  что  и  строка  прокрутки в
                          обычных окнах.  В отличии от строк прокрутки,
                          блоки   управления   данного   класса   могут
                          располагаться   в   любом   месте   окна    и
                          использоваться    каждый   раз,   когда   это
                          необходимо    для    обеспечения    прокрутки
                          введенной  информации.

       Windows 3.0/Ref/6#7                                      = 127 =


                          Класс Scrollbar    также    включает    блоки
                          управления  панелями   размера.   Этот   блок
                          управления - небольшой прямоугольник, который
                          пользователь может передвигать для  изменения
                          размеров окна.

             STATIC       Статические блоки  управления  -  это  просто
                          текстовые  поля,  панели  и   прямоугольники,
                          которые  могут быть использованы для отметки,
                          обрамления  или  разделения   других   блоков
                          управления.    Эти    блоки   управления   не
                          поддерживают ввод и не обеспечивают вывод.

        ───────────────────────────────────────────────────────────────

             Таблица 8.3 описывает типы блоков управления  для  каждого
        класса блоков управления:


             Таблица 8.3                        Типы блоков управления
        ───────────────────────────────────────────────────────────────
         Тип                  Значение
        ───────────────────────────────────────────────────────────────
         Класс BUTTON
        ───────────────────────────────────────────────────────────────

         BS_PUSHBUTTON        Небольшая эллиптическая          клавиша,
                              содержащая заданный текст (альтернативная
                              клавиша).    Блок   управления   посылает
                              сообщение родительскому окну всякий  раз,
                              когда пользователь нажимает клавишу.

         BS_DEFPUSHBUTTON     Небольшая мягкая   клавиша  эллиптической
                              формы     с      утолщенной      границей
                              (альтернативная  клавиша  по  умолчанию).
                              Эта    клавиша     представляет     ответ
                              пользователя по умолчанию. Внутри клавиши
                              индицируется  некоторый  текст.   Windows
                              посылает  сообщение  родительскому  окну,
                              когда пользователь нажимает на клавишу.

         BS_CHECKBOX          Небольшая прямоугольная мягкая клавиша  ,
                              которая   может   ставится   на  контроль
                              (панель контроля).  Ее граница становится
                              толще,  когда пользователь "нажимает" ее.
                              Справа от клавиши располагается некоторый
                              текст.

         BS_AUTOCHECKBOX      Идентично BS_CHECKBOX   за    исключением
                              того,  что  мягкая  клавиша автоматически
                              переключает   свое    состояние,    когда
                              пользователь нажимает на нее.

       Windows 3.0/Ref/6#7                                      = 128 =


         BS_RADIOBUTTON       Небольшая мягкая  клавиша  круглой  формы
                              (клавиша  установки),   граница   которой
                              утолщается, когда пользователь "нажимает"
                              ее.  Чтобы сделать границу толще, Windows
                              посылает      уведомляющее      сообщение
                              родительскому окну о том,  что  произошло
                              нажатие.  При следующем нажатии,  Windows
                              делает   границу   снова   нормальной   и
                              посылает другое сообщение.

         BS_AUTORADIOBUTTON   Идентично BS_ RADIOBUTTON, за исключением
                              того,  что  когда  клавиша  ставится   на
                              контроль,  прикладная  программа получает
                              уведомляющее сообщение BN_CLICKED,  и  со
                              всех  клавиш  установки  из данной группы
                              удаляются контрольные отметки.

         BS_LEFTTEXT          Текст располагается  на   левой   стороне
                              клавиши  установки  или  панели контроля.
                              Этот тип  используется совместно с типами
                              BS_CHECKBOX,      BS_RADIOBUTTON      или
                              BS_3STATE.

         BS_3STATE            Идентично BS_CHECKBOX,   за   исключением
                              того, что   мягкая   клавиша  может  быть
                              серой,    контролироваться     или     не
                              контролироваться.   Серый   цвет   обычно
                              используется для  того,  чтобы  показать,
                              что панель контроля запрещена.

         BS_AUTO3STATE        Идентично BS_3STATE, за исключением того,
                              что    мягкая    клавиша    автоматически
                              переключает  свое  состояние  каждый раз,
                              когда пользователь нажимает ее.

         BS_GROUPBOX          Прямоугольник, в   котором  сгруппированы
                              некоторые мягкие клавиши. В левом верхнем
                              углу прямоугольника индицируется текст.

         BS_OWNERDRAW         Мягкая клавиша,              определяемая
                              пользователем. Родительское окно получает
                              уведомление,  когда  нажимается  клавиша.
                              Уведомление включает  запрос  нарисовать,
                              инвертировать и уничтожить клавишу, когда
                              это необходимо.

        ───────────────────────────────────────────────────────────────
         Класс COMBOBOX
        ───────────────────────────────────────────────────────────────

         CBS_SIMPLE           Отображает панель перечня всегда. Текущий
                              выбор  в  панели  перечня  отображается в

       Windows 3.0/Ref/6#7                                      = 129 =

                              редактируемом блоке управления.

         CBS_DROPDOWN         То же  что  CBS_SIMPLE,   однако   панель
                              перечня не отображается если пользователь
                              не нажал "кнопку выброса",  следующую  за
                              полем выбора.

         CBS_DROPDOWNLIST     То же     что     CBS_DROPDOWN,    однако
                              редактируемый  блок  управления  содержит
                              статический   текст,  который  отображает
                              текущий выбор в панели перечня.

         CBS_OWNERDRAWFIXED   Определяет комбинированный           блок
                              управления     рисуемый     пользователем
                              фиксированной  высоты.  Владелец   панели
                              перечня  ответственен  за  рисование  его
                              содержимого;  элементы в  панели  перечня
                              все одинаковой высоты.

         CBS_OWNERDRAWVARIABLE     Определяет   комбинированный    блок
                              управления     рисуемый     пользователем
                              изменяемой    высоты.   Владелец   панели
                              перечня  ответственен  за  рисование  его
                              содержимого;  элементы  в  панели перечня
                              могут иметь различную высоту.

         CBS_AUTOHSCROLL      Прокручивает текст в редактируемом  блоке
                              управления   влево    когда  пользователь
                              набирает символ в конце строки. Если этот
                              тип  не  установлен,  то  допустим только
                              текст   который   вмещается   в   границы
                              прямоугольника.

         CBS_SORT             Сортирует строки   введенные   в   панели
                              перечня.

         CBS_HASSTRING        Определяет    комбинированный        блок
                              управления,    рисуемый    пользователем,
                              который   содержит   элементы  содержащие
                              строки.  Комбинированный блок  управления
                              поддерживает память и указатели для строк
                              таким образом,  что прикладная  программа
                              может  использовать  сообщение LB_GETTEXT
                              для  возвращения   текста   определенному
                              элементу.

         CBS_OEMCONVERT       Текст, введенный  в  редактируемом  блоке
                              комбинированного     блока    управления,
                              конвертируется  из  символьной  установки
                              ANSI  в  символьную установку OEM и затем
                              обратно  в  ANSI.   Этим   обеспечивается
                              правильное преобразование символов, когда
                              прикладная  программа  вызывает   функцию

       Windows 3.0/Ref/6#7                                      = 130 =

                              AnsiToOem  для преобразования ANSI строки
                              в комбинированной  панели  в OEM символы.
                              Этот  тип  в  основном   используется   в
                              комбинированных     блоках    управления,
                              содержащих имена файлов,  и  поддерживает
                              только  комбинированные  блоки управления
                              созданные   с   типами    CBS_SIMPLE    и
                              CBS_DROPDOWN.

        ───────────────────────────────────────────────────────────────
         Класс EDIT
        ───────────────────────────────────────────────────────────────

         ES_LEFT              Выравнивание текста по левой границе.

         ES_CENTER            Центрирование текста.  Этот  тип допустим
                              толко   в   многострочных   редактируемых
                              блоках.

         ES_RIGHT             Выравнивание текста  по  правой  границе.
                              Этот тип допустим толко  в  многострочных
                              редактируемых блоках.

         ES_LOWERCASE         Нижний регистр    редактируемого    блока
                              управления. Блок  редактирования  с  этим
                              типом  преобразует  все символы в символы
                              нижнего регистра,  когда они  вводятся  в
                              редактируемом блоке.

         ES_UPPERCASE         Верхний регистр    редактируемого   блока
                              управления. Блок  редактирования  с  этим
                              типом преобразует все символы  в  символы
                              верхнего  регистра,  когда они вводятся в
                              редактируемом блоке.

         ES_PASSWORD          Пароль редактируемого  блока  управления.
                              Блок    редактирования   с   этим   типом
                              преобразует   все   символы   в    символ
                              звездочка   (*),  когда  они  вводятся  в
                              редактируемом блоке.Прикладная  программа
                              может        использовать       сообщение
                              EM_SETPASSWORDCHAR     для      изменения
                              символов, которые отображены.

         ES_MULTILINE         Многострочный редактируемый          блок
                              управления.  (По  умолчанию одна строка.)
                              Если    задан     тип     ES_AUTOVSCROLL,
                              редактируемый  блок управления индицирует
                              столько  строк,   сколько   возможно,   и
                              осуществляет    вертикальную   прокрутку,
                              когда   пользователь   нажимает   клавишу
                              возврата   каретки.(На   самом  деле  это
                              символ  возврата  каретки,  который  блок

       Windows 3.0/Ref/6#7                                      = 131 =

                              редактирования  расширяет  до  комбинации
                              возврат каретки/перевод  строки.  Перевод
                              строки  выполняется  не  так  как возврат
                              каретки.)  Если  тип  BS_AUTOVSCROLL   не
                              задан, блок управления индицирует столько
                              строк,   сколько   возможно,   и   подает
                              звуковой сигнал,  если нажимается клавиша
                              возврата каретки, когда уже больше нельзя
                              индицировать следующую строку. Если задан
                              тип    ES_AUTOHSCROLL,    данный     блок
                              управления   автоматически   осуществляет
                              горизонтальную  прокрутку,  когда  символ
                              выходит    за    правую   границу   блока
                              управления.  Для  того,  чтобы  начать  с
                              новой строки,  пользователь должен нажать
                              клавишу    возврата     каретки.     Если
                              ES_AUTOHSCROLL не задан,  блок управления
                              автоматически переносит слово,  когда это
                              необходимо; пользователь может перейти на
                              новую строку и с помощью нажатия  клавиши
                              возврата   каретки.  Позиция,  с  которой
                              переносится слово,  определяется размером
                              окна.   Если   размер   окна  изменяется,
                              изменяется   и   позиция,    с    которой
                              переносится  слово  и  текст индицируется
                              заново.  Многострочный редактируемый блок
                              управления  может иметь строки прокрутки.
                              Редактируемый блок управления со строками
                              прокрутки  обрабатывает  свои собственные
                              сообщения о прокрутке. Редактируемый блок
                              управления     без     строк    прокрутки
                              осуществляет прокрутку как описано  выше,
                              и    посылает   сообщения   о   прокрутке
                              родительскому окну.

         ES_AUTOVSCROLL       Текст автоматически   прокручивается   на
                              одну страницу вперед,  когда пользователь
                              нажимает   клавишу   возврата    каретки,
                              находясь на последней строке.

         ES_AUTOHSCROLL       Текст автоматически   прокручивается   на
                              десять     символов     вправо,     когда
                              пользователь   вводит   символ   в  конце
                              строки. Когда    пользователь    нажимает
                              клавишу возврата каретки, блок управления
                              прокручивает  весь  текст назад к позиции
                              0.

         ES_NOHIDESEL         Обычно редактируемый    блок   управления
                              делает невидимой выборку, когда снимается
                              настройка  на ввод и инвертирует выборку,
                              когда  настраивается  на   ввод   данных.
                              Спецификация  ES_NOHIDESEL  подавляет это

       Windows 3.0/Ref/6#7                                      = 132 =

                              действие, принятое по умолчанию.

         ES_OEMCONVERT        Текст, введенный  в  редактируемом  блоке
                              конвертируется из  символьной   установки
                              ANSI  в  символьную установку OEM и затем
                              обратно  в  ANSI.   Этим   обеспечивается
                              правильное преобразование символов, когда
                              прикладная  программа  вызывает   функцию
                              AnsiToOem  для преобразования ANSI строки
                              вкомбинированной панели  в  OEM  символы.
                              Этот   тип   в  основном  используется  в
                              редактируемых     блоках      управления,
                              содержащих имена файлов.

        ───────────────────────────────────────────────────────────────
         Класс LISTBOX
        ───────────────────────────────────────────────────────────────

         LBS_STANDART         Строки в панели перечня  отсортированы  в
                              алфавитном порядке  и  родительское  окно
                              получает     сообщение     ввода    когда
                              пользователь нажимает один или  два  раза
                              кнопку "мыши" находясь на строке.  Панель
                              перечня имеет рамку со всех сторон.

         LBS_EXTENDEDSEL      Пользователь может    выбрать   несколько
                              элементов  используя  "мышь"  с  клавишей
                              SHIFT   и   (или)  клавишей  CONTROL  или
                              специальную комбинацию клавиш.

         LBS_HASSTRING        Определяет панель    перечня,    рисуемую
                              пользователем,  которая содержит элементы
                              содержащие   строки.    Панель    перечня
                              управления    поддерживает    память    и
                              указатели для строк  таким  образом,  что
                              прикладная  программа  может использовать
                              сообщение  LB_GETTEXT   для   возвращения
                              текста определенному элементу.

         LBS_NOTIFY           Родительское окно    получает   сообщение
                              ввода  каждый  раз,  когда   пользователь
                              нажимает   или   дважды  нажимает  кнопку
                              "мыши", находясь на строке.

         LBS_MULTIPLESEL      Выбор строки происходит каждый раз, когда
                              пользователь нажимает или дважды нажимает
                              кнопку "мыши",  находясь на строке. Может
                              быть выбрано любое количество строк.

         LBS_MULTICOLUMN      Панель перечня     содержит     несколько
                              колонок.     Панель     перечня     может
                              прокручиваться  горизонтально.  Сообщение
                              LB_SETCOLUMNWIDTH  устанавливает   ширину

       Windows 3.0/Ref/6#7                                      = 133 =

                              колонок.


         LBS_NOINTEGRALHEIGHT  Размер панели  перечня  точно  определен
                              прикладной программой при создании панели
                              перечня.  Обычно  Windows   устанавливает
                              размеры  панелей перечня так,  что панель
                              перечня не отображает часть элементов.

         LBS_SORT             Строки  в  панели  перечня сортируются по
                              алфавиту.

         LBS_NOREDRAW         Отображение панели       перечня       не
                              корректируется, когда делаются изменения.
                              Этот тип может быть изменен в любое время
                              при     помощи     посылки      сообщения
                              WM_SETREDRAW.

         LBS_OWNERDRAWFIXED   Определяет  панель    перечня    рисуемую
                              пользователем    фиксированной    высоты.
                              Владелец панели перечня  ответственен  за
                              рисование ее  содержимого;   элементы   в
                              панели перечня все одинаковой высоты.

         LBS_OWNERDRAWVARIABLE  Определяет  панель   перечня   рисуемую
                              пользователем изменяемой высоты. Владелец
                              панели перечня ответственен за  рисование
                              ее содержимого; элементы в панели перечня
                              могут иметь различную высоту.

         LBS_USETABSTOPS      Панель перечня   может   распознавать   и
                              расширять    символы   табуляции,   когда
                              отображаются  ее  строки.  По   умолчанию
                              позиции  табуляции устанавливаются каждые
                              32   единицы   панели    диалога.(Единица
                              измерения      панели     диалога     это
                              горизонтальная и вертикальная  дистанция.
                              Одна диалоговая единица равна 1/4 текущей
                              диалоговой  базовой  единицы   измерения.
                              Базовая  единица измерения вычисляется из
                              ширины  и  высоты   текущего   системного
                              шрифта.     Функция    GetDialogBaseUnits
                              возвращает   размер    базовой    единицы
                              измерения в пикселях.)

         LBS_WANTKEYBOARDINPUT  Владелец панели     перечня    получает
                              сообщения WM_VKEYTOITEM или WM_CHARTOITEM
                              всегда,   когда   пользователь   нажимает
                              клавишу,  находясь в панели перечня.  Это
                              позволяет  прикладной программе выполнять
                              специальные   действия   при   вводе    с
                              клавиатуры.


       Windows 3.0/Ref/6#7                                      = 134 =

        ───────────────────────────────────────────────────────────────
         Класс SCROLLBAR
        ───────────────────────────────────────────────────────────────

         SBS_VERT             Вертикальная строка  прокрутки.  Если  не
                              специфицировано  ни  SBS_RIGHTALIGN,   ни
                              SBS_LEFTALIGN,   строка  прокрутки  имеет
                              высоту, ширину и расположение, заданные в
                              функции CreateWindow.

         SBS_RIGHTALIGN       Используется с  SBS_VERT.  Правая граница
                              строки прокрутки выравнивается по  правой
                              границе   прямоугольника,   определяемого
                              параметрами X, Y, nWidth, nHeight функции
                              CreateWindow.    Строка    прокрутки   по
                              умолчанию имеет  ширину  системных  строк
                              прокрутки.

         SBS_LEFTALIGN        Используется с  SBS_VERT.  Левая  граница
                              строки прокрутки выравнивается  по  левой
                              границе   прямоугольника,   определяемого
                              параметрами X, Y, nWidth, nHeight функции
                              CreateWindow.    Строка    прокрутки   по
                              умолчанию имеет  ширину  системных  строк
                              прокрутки.

         SBS_HORZ             Горизонтальная строка прокрутки.  Если не
                              специфицировано ни        SBS_BOTTOMALIGN
                              SBS_TOPALIGN,  строка   прокрутки   имеет
                              высоту, ширину и расположение, заданные в
                              функции CreateWindow.

         SBS_TOPALIGN         Используется с SBS_HORZ.  Верхняя граница
                              строки прокрутки выравнивается по верхней
                              границе   прямоугольника,   определяемого
                              параметрами X, Y, nWidth, nHeight функции
                              CreateWindow.    Строка    прокрутки   по
                              умолчанию имеет  высоту  системных  строк
                              прокрутки.

         SBS_BOTTOMALIGN      Используется с  SBS_HORZ.  Нижняя граница
                              строки прокрутки выравнивается по  нижней
                              границе   прямоугольника,   определяемого
                              параметрами X, Y, nWidth, nHeight функции
                              CreateWindow.    Строка    прокрутки   по
                              умолчанию имеет  высоту  системных  строк
                              прокрутки.

         SBS_SIZEBOX          Панель размера.  Если  не специфицировано
                              ни    SBS_SIZEBOXBOTTOMRIGHTALIGN,     ни
                              SBS_SIZEBOXTOPLEFTALIGN,  панель  размера
                              имеет  высоту,  ширину  и   расположение,
                              заданные в вызове функции CreateWindow.

       Windows 3.0/Ref/6#7                                      = 135 =


         SBS_SIZEBOXBOTTOM-   Используется с SBS_SIZEBOX. Нижний правый
                RIGHTALIGN    угол  панели  размера  выравнивается   по
                              нижнему   правому   углу  прямоугольника,
                              определяемого параметрами X,  Y,  nWidth,
                              nHeight   функции   CreateWindow.  Панель
                              размера   по   умолчанию   имеет   размер
                              системных панелей размера.

         SBS_SIZEBOXTOP-      Используется с SBS_SIZEBOX. Верхний левый
                LEFTALIGN     угол  панели  размера  выравнивается   по
                              верхнему   левому   углу  прямоугольника,
                              определяемого параметрами X,  Y,  nWidth,
                              nHeight   функции   CreateWindow.  Панель
                              размера   по   умолчанию   имеет   размер
                              системных панелей размера.

        ───────────────────────────────────────────────────────────────
         Класс STATIC
        ───────────────────────────────────────────────────────────────

         SS_LEFT              Простой прямоугольник   с  индицированным
                              текстом, выравненным  по  левой  границе.
                              Текст форматируется перед индицированием.
                              Слова,  которые выходят за конец  строки,
                              автоматически    переносятся   в   начало
                              следующей строки.

         SS_CENTER            Простой прямоугольник   с  индицированным
                              центрированным текстом.             Текст
                              форматируется    перед    индицированием.
                              Слова,  которые  выходят за конец строки,
                              автоматически   переносятся   в    начало
                              следующей строки.

         SS_RIGHT             Простой прямоугольник  с   индицированным
                              текстом, выравненным по  правой  границе.
                              Текст форматируется перед индицированием.
                              Слова,  которые выходят за конец  строки,
                              автоматически    переносятся   в   начало
                              следующей строки.

         SS_LEFTNOWORDWRAP    Простой прямоугольник  с   индицированным
                              текстом, выравненным  по  левой  границе.
                              Табуляция есть,  но слова не переносятся.
                              Слова,  которые выходят за конец  строки,
                              отрезаются.

         SS_SIMPLE            Простой прямоугольник  с  индицированнной
                              одной   строкой  текста,  выравненной  по
                              левой границе.  Строка  текста  не  может
                              укорачиваться  или  изменяться каким-либо
                              способом.   (Родительское   окно    блока

       Windows 3.0/Ref/6#7                                      = 136 =

                              управления  или  панель диалога не должна
                              обрабатывать сообщение WM_CTLCOLOR).

         SS_NOPREFIX          Если этот  тип не определен Windows будет
                              интерпретировать  любой  символ   "&"   в
                              тексте   блока  управления,  как  префикс
                              символа ускорителя.  В этом случае символ
                              "&"   опускается  и  следующий  символ  в
                              строке подчеркивается.  Если  статический
                              блок  управления содержит текст,  где это
                              не желательно,  то тип SS_NOPREFIX должен
                              быть добавлен.  Этот тип блока управления
                              может быть включен с любыми определенными
                              статическими блоками управления.

                              Вы можете   комбинировать  SS_NOPREFIX  с
                              другими типами  при  помощи   поразрядной
                              операции   OR.   Этот   тип   в  основном
                              используется,  когда  имена  файлов   или
                              другие   строки  могут  содержать  "&"  и
                              должны  быть  отображены  в   статическом
                              блоке управления в панели диалога.

         SS_ICON              Икона, индицируемая   в  панели  диалога.
                              Заданный текст - имя  иконы  (но  не  имя
                              файла),  определяемое  в  файле  описания
                              ресурсов.  Для оператора  ICON  параметры
                              nWidth  и  nHeight  функции  CreateWindow
                              игнорируются;  размеры   иконы   задаются
                              автоматически.

         SS_BLACKRECT         Прямоугольник, заполненный        цветом,
                              используется  для  рисования  окон.  Этот
                              цвет черный по умолчанию в цветовой схеме
                              Windows.

         SS_GRAYRECT          Прямоугольник, заполненный        цветом,
                              используется  для фона экрана.  Этот цвет
                              серый  по  умолчанию  в  цветовой   схеме
                              Windows.

         SS_WHITERECT         Прямоугольник, заполненный        цветом,
                              используется  для  фона  окна.  Этот цвет
                              белый  по  умолчанию  в  цветовой   схеме
                              Windows.

         SS_BLACKFRAME        Панель с рамкой,  рисуемой тем же  цветом
                              что и окно. Этот цвет черный по умолчанию
                              в цветовой схеме Windows.

         SS_GRAYFRAME         Панель с рамкой,  рисуемой тем же  цветом
                              что  и  фон  экрана.  Этот  цвет серый по
                              умолчанию в цветовой схеме Windows.

       Windows 3.0/Ref/6#7                                      = 137 =


         SS_WHITEFRAME        Панель с рамкой,  рисуемой тем же  цветом
                              что  и  фон  окна.  Этот  цвет  белый  по
                              умолчанию в цветовой схеме Windows.

         SS_USERITEM          Элемент, определяемый пользователем.

        ───────────────────────────────────────────────────────────────




       Windows 3.0/Ref/6#7                                      = 138 =

                                                                               
            8.8 Директивы
       ----------------------------------------------------------------

             Директивы ресурсов - это  специальные  операторы,  которые
        определяют действия,  выполняемые над файлом описания перед его
        компиляцией.  Директивы  могут  присваивать  значения   именам,
        включать   содержимое  файлов  и  управлять  компиляцией  файла
        описания.

             Директивы ресурсов  идентичны  директивам,  используемым в
        языке  программирования  Си.   Они   полностью   определены   в
        документации по  языку программирования Си Microsoft C Language
        Reference.
                                 8.8.1  Оператор #include                      
       ----------------------------------------------------------------

             Синтаксис

             #include filename

             Эта директива       копирует       содержимое       файла,
        специфицированного  в filename,  в описание ресурсов перед тем,
        как компилятор  ресурсов  обработает  описание.   Он   заменяет
        директиву rcinclude в версиях Windows до 3.0.

             Поле filename - строка в коде ASCII, заключенная в двойные
        кавычки, определяющая  имя  DOS-файла,  который подсоединяется.
        Параметр   filename   рассматривается   как   строка   Си    и,
        следовательно,  две  обратные  косые  черты  должны быть заданы
        каждый раз, когда в названии маршрута встречается одна обратная
        косая   черта   (например,  "root\\sub").  Вместо  этого  можно
        использовать    одну    прямую    косую    черту     (например,
        "root/sub").Если  файл  имеет  расширение .H или .C,  то только
        директивы препроцессора в  файле  обрабатываются.  В  противном
        случае эти директивы выполняются на всем протяжении файла.

             Следующий пример    показывает   правильное  использование
        оператора #include:

             #include "WINDOWS.H"

             PenSelect  MENU
             BEGIN
                  MENUITEM "&Черное перо", BLACK_PEN
             END

                                                                               
            8.8.2  Оператор #define
       ----------------------------------------------------------------

             Синтаксис


       Windows 3.0/Ref/6#7                                      = 139 =

             #define name value

             Эта директива  присваивает  заданное  значение value имени
        name. Все последующие вхождения name замещаются на value.


             Поле name   -  любая  комбинация  букв,  цифр  или  знаков
        пунктуации.

             Поле value - любое  целое  число,  символьная  строка  или
        строка текста.

             Следующий пример    показывает   правильное  использование
        оператора #define:

             #define     nonzero       1
             #define     USERCLASS    "MyControlClass"

                                                                               
            8.8.3  Оператор #undef
       ----------------------------------------------------------------

             Синтаксис

             #undef name

             Эта директива отменяет текущее определение имени name. Все
        последующие вхождения name обрабатываются без замены.

             Поле name  -  любая  комбинация  букв,  цифр  или   знаков
        пунктуации.

             Следующий пример    показывает   правильное  использование
        оператора #undef:

             #undef     nonzero
             #undef     USERCLASS

                                  8.8.4  Оператор #ifdef                       
       ----------------------------------------------------------------

             Синтаксис

             #ifdef name

             Эта директива выполняет условную компиляцию файла ресурсов
        при помощи контроля определения  имени  name.  Если  name  было
        определено с использованием директивы #define, директива #ifdef
        указывает компилятору ресурсов продолжить работу  с  оператора,
        следующего   непосредственно   за   ней.   Если  name  не  было
        определено,  #ifdef  указывает   компилятору   пропустить   все
        операторы до следующей директивы #endif.

       Windows 3.0/Ref/6#7                                      = 140 =



             Поле name - имя, которое будет проверяться директивой.

             Следующий пример    показывает   правильное  использование
        оператора #ifdef:

             #ifdef   Debug
             errbox   BITMAP  errbox.bmp
             #endif

                                  8.8.5  Оператор #ifndef                      
       ----------------------------------------------------------------

             Синтаксис

             #ifndef name

             Эта директива выполняет условную компиляцию файла ресурсов
        при  помощи контроля определения имени name.  Если name не было
        определено  или  его  определение  было  отменено  при   помощи
        директивы   #undef,  директива  #ifndef  указывает  компилятору
        ресурсов продолжить обработку операторов до следующей директивы
        #endif,  #else  или  #elif,  затем обрабатывать операторы после
        последнего  соответствующего  #endif.  Если  name   определено,
        #ifndef  указывает  компилятору  пропустить  все  операторы  до
        следующей директивы #endif, #else или #elif.

             Поле name - имя, которое будет проверяться директивой.

             Следующий пример    показывает   правильное  использование
        оператора #ifndef:

             #ifndef  Optimize
              errbox  BITMAP  errbox.bmp
             #endif

                                    8.8.6  Оператор #if                        
       ----------------------------------------------------------------

             Синтаксис

             #if constant-expression

             Эта директива выполняет условную компиляцию файла ресурсов
        при   помощи   контроля   определения   константного  выражения
        constant-expression.  Если константное выражение не равно нулю,
        #if   указывает   компилятору   ресурсов  продолжить  обработку
        операторов до следующей  директивы  #endif,  #else  или  #elif,
        затем  обрабатывать операторы после последнего соответствующего
        #endif.  Если константное выражение равно нулю,  директива  #if

       Windows 3.0/Ref/6#7                                      = 141 =

        указывает  компилятору  пропустить  все  операторы до следующей
        директивы #endif, #else или #elif.


             Поле constant-expression    -    константное    выражение:
        определенное имя,  целая константа или выражение,  состоящее из
        имен, целых, арифметических операций и операций сравнения.

             Следующий пример    показывает   правильное  использование
        оператора #if:

             #if Version<3
             errbox   BITMAP  errbox.bmp
             #endif

                                   8.8.7  Оператор #elif                       
       ----------------------------------------------------------------

             Синтаксис

             #elif constant-expression

             Эта директива  помечает  необязательные  опрераторы  блока
        условной компиляции,  определяемого директивами #ifdef, #ifndef
        или #if. Директивы выполняют условную компиляцию файла ресурсов
        посредством контроля определения константного  выражения.  Если
        константное   выражение   не   равно   нулю,   #elif  указывает
        компилятору  ресурсов  продолжить   обработку   операторов   до
        следующей директивы #endif,  #else или #elif,  затем пропустить
        операторы  до   соответствующего   #endif.   Если   константное
        выражение  равно  нулю,  директива  #elif указывает компилятору
        пропустить все операторы до следующей директивы  #endif,  #else
        или #elif.  В блоке условной компиляции может быть использовано
        любое число директив #elif.

             Поле constant-expression    -    константное    выражение:
        определенное имя,  целая константа или выражение,  состоящее из
        имен, целых, арифметических операций и операций сравнения.

             Следующий пример    показывает   правильное  использование
        оператора #elif:

             #if Version<3
             errbox   BITMAP  errbox.bmp
             #elif Version<7
             errbox   BITMAP  userbox.bmp
             #endif



       Windows 3.0/Ref/6#7                                      = 142 =

                                                                               
            8.8.8  Оператор #else
       ----------------------------------------------------------------

             Синтаксис

             #else

             Эта директива помечает необязательные  операторы  в  блоке
        условной компиляции,  определяемом директивами #ifdef,  #ifndef
        или #if. Директива #else должна быть последней директивой перед
        #endif.

             Следующий пример    показывает   правильное  использование
        оператора #else:

             #ifdef Dedug
             errbox   BITMAP  errbox.bmp
             #else
             errbox   BITMAP  userbox.bmp
             #endif
                                                                               
            8.8.9  Оператор #endif
       ----------------------------------------------------------------

             Синтаксис

             #endif

             Эта директива  отмечает  конец  блока условной компиляции,
        определенного директивой #ifdef.  Для каждой  директивы  #ifdef
        требуется одна директива #endif.


       Windows 3.0/Ref/6#7                                      = 143 =

                                      8.9 Заключение                           
       ----------------------------------------------------------------

             Операторы файла  описания  ресурсов   определяют   ресурсы
        которые компилятор  ресурсов  добавляет  к  выполняемому  файлу
        прикладной программы.   Прикладная   программа   может    затем
        подгружать эти  ресурсы во время выполнения,  когда нужно.  Для
        дополнительной информации  о  темах  связанных  с  компилятором
        ресурсов смотрите следующие разделы:

             Тема                      Руководство
             ────                      ───────────

             Общая информация по       Руководство программиста:Глава 1
             программированию          "Обзор окружения Windows".

             Меню                      Руководство программиста:Глава 7
                                       "Меню".

             Блоки управления и        Руководство программиста:Глава 8
             панели диалога            "Блоки управления" и Глава 9
                                       "Панели диалога".

             Использование             Tools:  Глава 3, "Компилирование
             компилятора ресурсов      ресурсов: Компилятор ресурсов".

             Описание панелей диалога  Tools: Глава 5,"Описание панелей
                                       диалога: Панели диалога".




       Windows 3.0/Ref/6#7                                      = 144 =

                                                                               
            Глава 9. ФОРМАТЫ ФАЙЛОВ
       ----------------------------------------------------------------

             В данном разделе описаны форматы файлов,  используемых для
        создания,  выполнения  и  подачи  данных  прикладных   программ
        Microsoft Windows. Существуют следующие типы файлов:

             - Файлы растровых карт

             - Файлы ресурса икон

             - Файлы ресурса курсора

             - Файлы системного буфера

             - Метафайлы




       Windows 3.0/Ref/6#7                                      = 145 =

                            9.1  Форматы файла растровой карты                 
       ----------------------------------------------------------------

             Файлы растровых  карт  Windows версии 3.0 хранят растровую
        карту в  аппаратно-независимом   формате,   который   позволяет
        Windows отображать растровую карту на любом устройстве.  В этом
        случае выражение    "аппаратно-независимая"    означает,    что
        растровая карта  определяет цвет пикселя в форме независимой от
        метода, используемого   любым   конкретным   устройством    для
        представления цвета.   Допустимое   файловое  расширение  файла
        аппаратно-независимой растровой карты Windows есть .BMP.

             Каждый файл  растровой  карты  содержит  структуру  данных
        BITMAPFILEHEADER,   непосредственно  за  которой  следует  одна
        аппаратно-независимая растровая карта,  состоящая из  структуры
        данных  BITMAPINFO  и  массива байтов,  который определяет биты
        растровой карты.

             Windows версии 3.0 также читает  файлы  растровых  карт  в
        формате чтения  Microsoft OS/2 Presentation Manager версии 1.2.
        Эти файлы  состоят  из   структуры   данных   BITMAPFILEHEADER,
        непосредственно    за    которой   следует   структура   данных
        BITMAPCOREINFO.  За  этой  структурой  данных  следует   массив
        байтов, который определяет биты растровой карты.

             Смотрите Главу 7,  "Типы данных и структур", для получения
        информации о      структурах      данных      BITMATFILEHEADER,
        BITMAPCOREINFO и BITMAPINFO.




       Windows 3.0/Ref/6#7                                      = 146 =

                               9.2 Формат файла ресурса икон                   
       ----------------------------------------------------------------

             Файл ресурса   икон   (с   расширением  .ICO)  может  быть
        аппаратно-независим как по цвету, так и по разрешению.

             Файл ресурса    икон     может     содержать     несколько
        аппаратно-независимых растровых карт, определяющих образ иконы,
        по одной для каждого типа разрешения устройства вывода. Windows
        определяет  разрешение  текущего  изображения  и  подбирает ему
        соответствующие  значения  размеров   x   и   y   в   пикселях,
        определенные   для  каждого  образа.  Если  Windows  обнаружила
        соответствие между образом иконы  и  текущим  устройством,  она
        будет использовать подходящий образ;  во всех остальных случаях
        она выбирает ближайший подходящий,  и изменяет его  до  нужного
        размера.

             Если файл  ресурса  икон  содержит более одного образа для
        конкретного разрешения, Windows использует образ иконы наиболее
        соответствующий цветовым   возможностям   текущего   устройства
        отображения. Если нет образа который соответствует возможностям
        устройства, Windows  выбирает  образ,  который имеет наибольшее
        число цветов,  но  не  превышающее  число   цветов   устройства
        отображения. Если  все  образы  превышаю  цветовые  возможности
        текущего устройства отображения, тогда Windows использует образ
        иконы с наименьшим числом цветов.

             Файл ресурса  икон  содержит  структуру заголовка в начале
        файла, которая   определяет   тип   и   число   образов   икон,
        содержащихся в файле. Ниже приведен формат этого заголовка:

             Поле             Тип      Описание
             ────             ───      ────────
             icoReserved      WORD     Зарезервированно и  должно  быть
                                       равно нулю.

             icoResourceType  WORD     Определяет тип           ресурса
                                       содержащегося   в   файле.   Для
                                       ресурса   икон    должно    быть
                                       установлено в 1.

             icoResourceCount WORD     Определяет     число    образов,
                                       содержащихся в файле.

             За заголовком  следует  список  ресурсов.  Список ресурсов
        состоит из одного или нескольких массивов дескрипторов ресурса.
        Поле icoResourceCount определяет количество этих массивов. Ниже
        приведен формат этого массива:

       Windows 3.0/Ref/6#7                                      = 147 =

             Поле             Тип      Описание
             ────             ───      ────────

             Width            BYTE     Определяет ширину   в   пикселях
                                       данной   формы   образа   иконы.
                                       Допустимы значения:  16, 32, или
                                       64.

             Height           BYTE     Определяет высоту   в   пикселях
                                       данной  формы   образа    иконы.
                                       Допустимы значения:  16, 32, или
                                       64.

             ColorCount       BYTE     Определяет число цветов в данной
                                       форме  образа  иконы.  Допустимы
                                       значения: 2, 8, или 16.

             Reserved         BYTE     Зарезервировано              для
                                       использования в будущем.

             Reserved         WORD     Зарезервировано              для
                                       использования в будущем.

             Reserved         WORD     Зарезервировано              для
                                       использования в будущем.

             icoDIBSize       DWORD    Определяет  в  байтах     размер
                                       массива пикселей    для   данной
                                       формы образа иконы.

             icoDIBOffset     DWORD    Определяет в байтах смещение  от
                                       начала         файла          до
                                       аппаратно-независимой  растровой
                                       карты для данной формы.

             Икона может  быть  цветной.  Для  достижения прозрачности,
        аппаратно-независимая растровая карта для  каждой  иконы  будет
        состоять из двух частей:

             1. Первая  часть  это  цветная  растровая  карта,  которая
        определяет маску XOR для иконы.

             2. Вторая часть это монохромная растровая  карта,  которая
        обеспечивает  маску  AND,  которая  определяет прозрачную часть
        иконы.

             Одноцветная растровая   карта   не   содержит    заголовка
        аппаратно-независимой растровой     карты,    но    расположена
        непосредственно за цветной растровой картой.  Она должна  иметь
        ту же самую высоту пикселя, что и цветная растровая карта.




       Windows 3.0/Ref/6#7                                      = 148 =

                             9.3 Формат файла ресурса курсора.                 
       ----------------------------------------------------------------

             Так же  как  и файл ресурса икон,  файл ресурса курсора (с
        расширением  .CUR)  может  содержать  несколько   образов   для
        соответствующих типов    разрешающей   способности   устройства
        отображения. В случае нескольких  курсора,  Windows  определяет
        наиболее   соответствующий   конкретному   драйверу  устройства
        отображения, путем сравнивания ширины и высоты образа курсора.


             Файл ресурса курсора содержит структуру заголовка в начале
        файла, которая  определяет  тип  и  число   образов   ресурсов,
        содержащихся в файле. Ниже приведен формат этого заголовка:

             Поле             Тип      Описание
             ────             ───      ────────

             curReserved      WORD     Зарезервированно и  должно  быть
                                       равно нулю.

             curResourceType  WORD     Определяет тип           ресурса
                                       содержащегося   в   файле.   Для
                                       ресурса курсора    должен    быть
                                       установлено в 2.

             curResourceCount WORD     Определяет число         образов
                                       содержащихся в файле.

             За заголовком  следует  список  ресурсов.  Список ресурсов
        состоит из одного или нескольких массивов дескрипторов ресурса.
        Поле curResourceCount определяет количество этих массивов. Ниже
        приведен формат этого массива:

             Поле             Тип      Описание
             ────             ───      ────────

             curWidth         BYTE     Определяет  в   пикселях  ширину
                                       данной формы образа курсора.

             curHeight        BYTE     Определяет  в   пикселях  высоту
                                       данной формы образа курсора.

             ColorCount       BYTE     Определяет число цветов  в  этой
                                       форме образа курсора.  Допустимы
                                       значения: 2, 8, или 16.

             Reserved         BYTE     Зарезервировано              для
                                       использования в будущем.

             curXHotspot      WORD     Определяет     в        пикселях
                                       горизонтальную позицию "пятна".


       Windows 3.0/Ref/6#7                                      = 149 =

             curYHotspot      WORD     Определяет      в       пикселях
                                       вертикальную  позицию "пятна".

             curDIBSize       DWORD    Определяет  в   байтах    размер
                                       массива пикселей    для   данной
                                       формы образа курсора.

             curDIBOffset     DWORD    Определяет  в байтах смещение от
                                       начала        файла           до
                                       аппаратно-независимой  растровой
                                       карты для данной формы.


       Windows 3.0/Ref/6#7                                      = 150 =


             Курсоры бывают  только  монохромными.  Растровая карта для
        каждого курсора состоит из двух частей; первая половина это XOR
        маска определяющая видимую часть образа,  и вторая половина это
        AND маска,  определяющая прозрачную часть образа  курсора.  Эти
        две  части должны быть идентичы по ширине и высоте.  Комбинируя
        значения в  передаваемых  битовых  масках,  Windows  определяет
        является ли пиксель черным, белым или прозрачным.

             Таблица 9.1 показывает какие значения нужно передать,  что
        бы иметь желаемый цвет.

             Таблица 9.1 Результаты битовых масок.

        ───────────────────────────────────────────────────────────────
                    Значение       Значение       Значене     Значение
        ───────────────────────────────────────────────────────────────
        AND маска   0              0              1           1
        XOR маска   0              1              0           1
        Результат   Черный         Белый          Прозрачный  Инверсный
        ───────────────────────────────────────────────────────────────


             Рисунок 9.1 показывает две растровые карты, представляющие
        маску AND  и  маску XOR для курсора.  Биты установленые в обоих
        растровых картах  создают черный, крестообразный курсор.

             Маска AND           Маска XOR                 Курсор
            ┌───┬───┬───┐      ┌───┬───┬───┐               ┌────┐
            │ 1 │ 0 │ 1 │      │ 0 │ 0 │ 0 │               │    │
            ├───┼───┼───┤      ├───┼───┼───┤          ┌────┘    └────┐
            │ 0 │ 0 │ 0 │      │ 0 │ 0 │ 0 │   ---->  │              │
            ├───┼───┼───┤      ├───┼───┼───┤          └────┐    ┌────┘
            │ 0 │ 0 │ 0 │      │ 0 │ 0 │ 0 │               │    │
            └───┴───┴───┘      └───┴───┴───┘               └────┘

             Рисунок 9.1 Установка и конечный курсор.




       Windows 3.0/Ref/6#7                                      = 151 =

                            9.4 Формат файла системного буфера                 
       ----------------------------------------------------------------

             Системный буфер   Windows   сохраняет   и   читает  данные
        системного буфера в  файлы  с  расширением  .CLP.  Файл  данных
        системного буфера содержит величину, которая определяет его как
        файл данных системного  буфера,  одну  или  несколько  структур
        данных, определяющих  формат,  размер  и  расположение   данных
        системного буфера, и один или несколько блоков самих данных.

             Файл данных  системного  буфера  начинается  с  заголовка,
        состоящего из двух полей. Ниже описаны эти поля:

             Поле         Тип          Описание
             ────         ───          ─────────

             FileIdentifier WORD       Определяет файл, как файл данных
                                       системного буфера.    Это   поле
                                       должно быть установлено в CLP_ID.

             FormatCount WORD          Определяет    число     форматов
                                       системного буфера,  содержащихся
                                       в файле.


             За этим  заголовком  следует  одна  или несколько структур
        данных, каждая из которых определяет формат,  размер и смещение
        блока данных  системного  буфера.  Ниже  показаны   поля   этих
        структур данных:

             Поле         Тип          Описание
             ────         ───          ────────

             FormatID     WORD         Определяет ID  формата    данных
                                       системного буфера.      Смотрите
                                       описание                 функции
                                       SetClipboardData     в     Главе
                                       4,"Список  функций",  Справочное
                                       руководство, том 1 для получения
                                       информации по форматам системных
                                       буферов.

             LenData      DWORD        Определяет в байтах длину данных
                                       системного буфера.

             OffData      DWORD        Определяет  в  байтах   смещение
                                       блока данных  системного буфера.
                                       Смещение   берется   от   начала
                                       файла.

             Name                      Это   79 - символьный    массив,
                                       определяющий имя   формата   для
                                       собственного  формата системного

       Windows 3.0/Ref/6#7                                      = 152 =

                                       буфера.


             Первый блок  данных системного буфера следует за последней
        из этих структур. Для растровых карт и метафайлов, биты следуют
        непосредственно  после  заголовка  растровой карты или структур
        данных METAFILEPICT.




       Windows 3.0/Ref/6#7                                      = 153 =

                                   9.5 Формат метафайла                        
       ----------------------------------------------------------------

             Метафайл состоит из набора функций интерфейса графического
        устройства  (GDI),   создающих   на   устройстве   изображения.
        Метафайлы  обеспечивают удобное хранение образов,  неоднократно
        появляющихся в  прикладной  программе,   и   дают   возможность
        использовать системный буфер  для  обмена  изображениями  между
        прикладными программами.

             Образы хранятся в метафайлах в виде  набора  функций  GDI.
        После  того,  как  набор  функций создан,  прикладная программа
        используют метафайл для генерации изображений на устройстве.

             Когда объект создается во время  использования  метафайла,
        GDI добавляет   дескриптор  объекта  в  первое  доступное  поле
        таблицы дескрипторов  метафайла.  GDI  очищает  поле   таблицы,
        соответствующее объекту,    который    удаляется    во    время
        использования, это поле таблицы может быть использовано,  когда
        создается другой элемент таблицы.

             Примечание: Функции,  описанные  в  этой главе,  обсуждены
        более детально в главе 4, "Список функций", Руководство, Том 1.

             Метафайл имеет две части:  заголовок и  перечень  записей.
        Заголовок  содержит  описание  размера  (в  словах) метафайла и
        число  используемых  объектов   рисования.   Перечень   записей
        содержит  функции  GDI.  Объектами  рисования могут быть перья,
        кисти или растровые карты.

                                9.5.1. Заголовок метафайла                     
       ----------------------------------------------------------------

             Следующая структура показывает формат заголовка метафайла:

             struct {
                    WORD  mtType;
                    WORD  mtHeaderSize;
                    WORD  mtVersion;
                    DWORD mtSize;
                    WORD  mtNoObjects;
                    DWORD mtMaxRecord;
                    WORD  mtNoParameters;
                   }


             Заголовок метафайла содержит следующие поля:

             Поле                      Описание
             ────                      ────────

             mtType                    Определяет находится ли метафайл

       Windows 3.0/Ref/6#7                                      = 154 =

                                       в памяти или записан в  дисковый
                                       файл.Это одна    из    следующих
                                       величин:

                                       Величина    Значение
                                       ────────    ────────
                                         1         Метафайл в памяти

                                         2         Метафайл в файле на
                                                   диске

             mtHeaderSize              Определяет   в    словах  размер
                                       заголовка метафайла.

             mtVersion                 Определяет номер версии Windows.
                                       Номер версии   для  Windows  3.0
                                       есть 0x300.

             mtSize                    Определяет размер файла в словах.

             mtNoObjects               Определяет максимальное    число
                                       объектов, входящих  в   метафайл
                                       одновременно.

             mtMaxRecord               Определяет    в   словах  размер
                                       наибольшей записи метафайла.

             mtNoParameters            Это поле не используется.


                                  9.5.2. Записи метафайла                      
       ----------------------------------------------------------------

             За заголовком  метафайла  следует  набор  записей.  Записи
        метафайла  описывают  функции  GDI.  Большинство  функций  GDI,
        которые  могут  быть  использованы  для  создания   метафайлов,
        хранятся в    типичных   записях.   Раздел   "Типичная   запись
        метафайла", приведенный ниже, показывает формат типичной записи
        метафайла.  Перечень  функций,  используемых  в типичной записи
        метафайла приведен в таблице 9.2,"Функции GDI и их значения".

             Остальные функции,   имеющие   более   сложную   структуру
        записей, приведены в подразделе "Записи специальных функций".

             В некоторых   случаях   существует   две   версии   записи
        метафайла.  Одна версия представляет запись  созданную  Windows
        версий  до 3.0,  а вторая представляет запись созданную Windows
        версий  3.0  и  позже.  Windows  3.0  использует   все   версии
        метафайлов,  но сохраняет только 3.0 версию.  Windows версий до
        3.0 не могут использовать метафайл, записанный Windows 3.0.



       Windows 3.0/Ref/6#7                                      = 155 =


        Таблица 9.2                           Функции GDI и их значения
        ───────────────────────────────────────────────────────────────
             Функция                        Значение
        ───────────────────────────────────────────────────────────────
             Arc                            0817H
             Chord                          0830H
             Ellipse                        0418H
             ExcludeClipRect                0415H
             FloodFill                      0419H
             IntersectClipRect              0416H
             LineTo                         0213H
             MoveTo                         0214H
             OffsetClipRgn                  0220H
             OffsetViewportOrg              0211H
             OffsetWindowOrg                020FH
             PatBlt                         061DH
             Pie                            081AH
             RealizePalette(3.0 и выше)     0035H
             Rectangle                      041BH
             ResizePalette(3.0 и выше)      0139H
             RestoreDC                      0127H
             RoundRect                      061CH
             SaveDC                         001EH
             ScaleViewportExt               0412H
             ScaleWindowExt                 0400H
             SetBkColor                     0201H
             SetBkMode                      0102H
             SetMapMode                     0103H
             SetMapperFlags                 0231H
             SetPixel                       041FH
             SetPolyFillMode                0106H
             SetROP2                        0104H
             SetStretchBltMode              0107H
             SetTextAlign                   012EH
             SetTextCharExtra               0108H
             SetTextColor                   0209H
             SetTextJustification           020AH
             SetWindowExt                   020CH
             SetWindowOrg                   020BH
             SetViewportExt                 020EH
             SetViewportOrg                 020DH
        ───────────────────────────────────────────────────────────────


             Типичная запись метафайла
             ─────────────────────────

             Следующая структура  показывает  формат  типичной   записи
        метафайла:

             struct {
                    DWORD rdSize;

       Windows 3.0/Ref/6#7                                      = 156 =

                    WORD  rdFunction;
                    WORD  rdParm[];
                    }

             В типичной записи метафайла содержатся следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет  размер записи в словах.

             rdFunction   Определяет номер функции.

             rdParm[]     Массив слов,  содержащих параметры функции, в
                          порядке,  обратном   тому,  в   котором   они
                          передаются в функцию.


             Записи специальных функций
             ──────────────────────────

             Некоторые записи  метафайла  содержат  структуры  данных в
        поле параметров. Этот раздел содержит описание для этих записей.

                Запись AnimatePalette                                [3.0]     
             ──────────────────────────────────────────────────────────

             Запись AnimatePalette имеет следующий формат:

             struct {
                    DWORD rdSize;
                    WORD  rdFunction;
                    WORD  rdParm[];
                    }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0436.

             rdParm[]     Cодержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          start        Первый элемент будет"оживлятся".

                          numentries   Количество   элементов,  которые

       Windows 3.0/Ref/6#7                                      = 157 =

                                       будут "оживленны".

                          entries      Блоки PALETTEENTRY.

                Запись BitBlt                                   ( до 3.0 )     
             ──────────────────────────────────────────────────────────

             Запись BitBlt,  записанная Windows версии до 3.0, содержит
        аппаратно-зависимую растровую карту, которая может не подходить
        для использования на всех  устройствах.  Далее  показан  формат
        этой записи:

             struct {
                    DWORD rdSize;
                    WORD  rdFunction;
                    WORD  rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0922.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          raster op    Старшее     слово      растровой
                                       операции.

                          SY           Координата     Y      начального
                                       положения устройства-источника.

                          SX           Координата     X      начального
                                       положения устройства-источника.

                          DYE          Размер устройства-получателя  по
                                       оси Y.

                          DXE          Размер устройства-получателя  по
                                       оси X.

                          DY           Координата     Y      начального
                                       положения устройства-получателя.

                          DX           Координата     X      начального
                                       положения устройства-получателя.

       Windows 3.0/Ref/6#7                                      = 158 =


                          bmWidth      Ширина   растровой   карты   ( в
                                       пикселях).

                          bmHeight     Высота    растровой   карты  ( в
                                       строках растра).

                          bmWidthBytes Число   байтов в  каждой  строке
                                       растра.

                          bmPlanes     Число    цветовых    планов    в
                                       растровой карте.

                          bmBitsPixel  Число смежных цветовых битов.

                          bits         Реальные                    биты
                                       аппаратно-зависимой    растровой
                                       карты.

                Запись BitBlt                                        [3.0]     
             ──────────────────────────────────────────────────────────

             Запись BitBlt,  записанная  Windows  версии  3.0  и  выше,
        содержит   аппаратно-независимую   растровую   карту,   которая
        подходит для использования на всех устройствах.  Далее  показан
        формат этой записи:

             struct {
                    DWORD rdSize;
                    WORD  rdFunction;
                    WORD  rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0940.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────


                          raster op    Старшее     слово      растровой
                                       операции.

                          SY           Координата     Y      начального

       Windows 3.0/Ref/6#7                                      = 159 =

                                       положения устройства-источника.

                          SX           Координата     X      начального
                                       положения устройства-источника.

                          DYE          Размер устройства-получателя  по
                                       оси Y.

                          DXE          Размер устройства-получателя  по
                                       оси X.

                          DY           Координата     Y      начального
                                       положения устройства-получателя.

                          DX           Координата     X      начального
                                       положения устройства-получателя.

                          BitmapInfo   Структура данных BITMAPINFO.

                          bits         Реальные                    биты
                                       аппаратно-независимой  растровой
                                       карты.

                                                                               
            Запись CreateBrushIndirect
             ──────────────────────────────────────────────────────────

             Запись CreateBrushIndirect имеет следующий формат:

             struct {
                    DWORD     rdSize;
                    WORD      rdFunction;
                    LOGBRUSH  rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x02FC.

             rdParm       Определяет логическую кисть.

                                                                               
            Запись CreateFontIndirect
             ──────────────────────────────────────────────────────────

             Запись CreateFontIndirect имеет следующий формат:

             struct {

       Windows 3.0/Ref/6#7                                      = 160 =

                    DWORD     rdSize;
                    WORD      rdFunction;
                    LOGFONT   rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x02FB.

             rdParm       Определяет логический шрифт.

                                                                               
            Запись CreatePalette                                 [3.0]
             ──────────────────────────────────────────────────────────

             Запись CreatePalette имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    LOGPALETTE rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x00F7.

             rdParm       Определяет логическую палитру.

                Запись CreatePatternBrush                       ( до 3.0 )     
             ──────────────────────────────────────────────────────────

             Запись CreatePatternBrush,  сохраненная Windows версии  до
        3.0, содержит   аппаратно-зависимую  растровую  карту,  которая
        может не подходить для использования на всех устройствах. Далее
        показан формат этой записи:


             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];

       Windows 3.0/Ref/6#7                                      = 161 =

             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x01F9.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          bmWidth      Ширина   растровой   карты.

                          bmHeight     Высота    растровой   карты.

                          bmWidthBytes Число   байтов в  каждой  строке
                                       растровой карты.

                          bmPlanes     Число цветовых  планов растровой
                                       карты.

                          bmBitsPixel  Число  смежных  цветовых  битов,
                                       которые определяют пиксель.

                          bmBits       Указатель на значения бита.

                          bits         Реальные биты шаблона.

                Запись CreatePatternBrush                            [3.0]     
             ──────────────────────────────────────────────────────────

             Запись CreatePatternBrush,  сохраненная Windows версии 3.0
        и выше, содержит аппаратно-независимую растровую карту, которая
        подходит  для использования на всех устройствах.  Далее показан
        формат этой записи:


             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:


       Windows 3.0/Ref/6#7                                      = 162 =

             Поле         Описание
             ────         ────────
             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0142.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          type         Тип  растровой  карты. Это  поле
                                       может быть  одной  из  следующих
                                       2 - ух величин:

                                       - BS_PATTERN - Шаблон  определен
                                       аппаратно-зависимой    растровой
                                       картой   через   вызов   функции
                                       CreatePatternBrush.

                                       - BS_DIBPATTERN -         Шаблон
                                       определен  аппаратно-независимой
                                       растровой картой   через   вызов
                                       функции CreateDIBPatternBrush.

                          Usage        Определяет   содержит  ли   поле
                                       bmiColors[]   структуры   данных
                                       BITMAPINFO явные   величины  RGB
                                       или индексы в текущей логической
                                       палитре. Это   поле  может  быть
                                       одной из следующих величин:

                                       - DIB_RGB_COLORS    -    Таблица
                                       цветов содержит значения RGB.

                                       - DIB_PAL_COLORS    -    Таблица
                                       цветов   состоит   из    массива
                                       индексов  в  текущей  логической
                                       палитре.

                          BitmapInfo   Структура данных BITMAPINFO.

                          bits         Реальные                    биты
                                       аппаратно-независимой  растровой
                                       карты.

                                                                               
            Запись CreatePenIndirect
             ──────────────────────────────────────────────────────────

             Запись CreatePenIndirect имеет следующий формат:

             struct {

       Windows 3.0/Ref/6#7                                      = 163 =

                    DWORD      rdSize;
                    WORD       rdFunction;
                    LOGPEN     rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x02FA.

             rdParm       Определяет логическое перо.

                                                                               
            Запись Create Region
             ──────────────────────────────────────────────────────────

             Запись Create Region имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x06FF.

             rdParm       Определяет область, которая должна быть
                          создана.
                                                                               
            Запись DeleteObject                                  [3.0]
             ──────────────────────────────────────────────────────────

             Запись DeleteObject имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm;
             }

             Эта запись содержит следующие поля:


       Windows 3.0/Ref/6#7                                      = 164 =

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x01F0.

             rdParm       Определяет  в  таблице   дескрипторов  индекс
                          объекта который должен быть удален.

                                      Запись DrawText                          
             ──────────────────────────────────────────────────────────

             Запись DrawText имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x062F.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          format       Определяет метод форматирования.

                          count        Количество байтов в строке.

                          rectangle    Прямоугольник ,     определяющий
                                       область,  где   будет  находится
                                       текст.

                          string       Массив    байтов,     содержащий
                                       строку.    Массив         длиной
                                       ((count  + 1) >> 1) слов.

                                       Запись Escape                           
             ──────────────────────────────────────────────────────────

             Запись Escape имеет следующий формат:

       Windows 3.0/Ref/6#7                                      = 165 =


             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0626.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          escape number  Номер,        идентифицирующий
                                       отдельную            управляющую
                                       последовательность.

                          count        Количество байтов информации.

                          input data    Поле   переменной         длины
                                        (((count + 1) / >> 1)).

                                     Запись ExtTextOut                         
             ──────────────────────────────────────────────────────────

             Запись ExtTextOut имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0A32.

             rdParm[]     Содержит следующие элементы:


       Windows 3.0/Ref/6#7                                      = 166 =

                          Элемент      Описание
                          ───────      ────────

                             y         Логическое  значение   начальной
                                       точки строки по оси y.

                             x         Логическое  значение   начальной
                                       точки строки по оси x.

                          count        Длина строки.

                          options      Тип прямоугольника.

                          rectangle    Структура   RECT,   определяющая
                                       прямоугольник ExtTextOut,   если
                                       поле  options  не  равно  0;  не
                                       существует, если поле options
                                       равно 0.

                          string       Массив       байт      (длиной (
                                       (count + 1)>> 1)слов),содержащий
                                       строку.

                          dxarray      Необязательный    массив    слов
                                       межсимвольных расстояний.

                                      Запись Polygon                           
             ──────────────────────────────────────────────────────────

             Запись Polygon имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────
             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0324.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────
                          count        Число точек.

                          list of points  Перечень отдельных точек.

       Windows 3.0/Ref/6#7                                      = 167 =


                                    Запись PolyPolygon                         
             ──────────────────────────────────────────────────────────

             Запись PolyPolygon имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0538.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          count        Общее число точек.

                          list of polygon
                          count        Перечень количества точек для
                                       каждого многоугольника.

                          list of points Перечень отдельных точек.

                                      Запись Polyline                          
             ──────────────────────────────────────────────────────────

             Запись Polyline имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:


       Windows 3.0/Ref/6#7                                      = 168 =

             Поле         Описание
             ────         ────────
             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0325.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────
                          count        Число точек.

                          list of points Перечень отдельных точек.

                                                                               
            Запись SelectClipRegion
             ──────────────────────────────────────────────────────────

             Запись SelectClipRegion имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x012C.

             rdParm       Определяет в таблице дескрипторов индекс,
                          соответствующий выбираемой области.

                                                                               
            Запись SelectObject
             ──────────────────────────────────────────────────────────

             Запись SelectObject имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm;
             }

             Эта запись содержит следующие поля:


       Windows 3.0/Ref/6#7                                      = 169 =

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x012D.

             rdParm       Определяет в таблице дескрипторов индекс,
                          соответствующий выбираемому объекту.

                Запись SelectPalette                                 [3.0]     
             ──────────────────────────────────────────────────────────

             Запись SelectPalette имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm;
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0234.

             rdParm       Определяет   в   таблице дескрипторов индекс,
                          соответствующий      выбираемой    логической
                          палитре.

                Запись SetDlBitsToDevice                             [3.0]     
             ──────────────────────────────────────────────────────────

             Запись SetDlBitsToDevice имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.


       Windows 3.0/Ref/6#7                                      = 170 =

             rdFunction   Определяет номер функции 0x0D33.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          wUsage       Флаг, показывающий, содержит  ли
                                       цветовая таблица растровой карты
                                       значения  RGB  или   индексы   в
                                       текущей логической палитре.

                          numscans     Число строк сканирования в карте
                                       растра.

                          startscan    Первая   строка   сканирования в
                                       растровой карте.

                          srcY         Координата Y  начала источника в
                                       растровой карте.

                          srcX         Координата X начала источника  в
                                       растровой карте.

                          extY         Высота  источника  в   растровой
                                       карте.

                          extX         Ширина  источника  в   растровой
                                       карте.

                          destY        Координата          Y     начала
                                       прямоугольника  - приемника.

                          destX        Координата        X       начала
                                       прямоугольника  - приемника.

                          BitmapInfo   Структура данных BITMAPINFO.

                          bits         Реальные                    биты
                                       аппаратно-независимой  растровой
                                       карты.

                Запись SetPaletteEntries                             [3.0]     
             ──────────────────────────────────────────────────────────

             Запись SetPaletteEntries имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

       Windows 3.0/Ref/6#7                                      = 171 =


             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0037.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          start        Первый  элемент, который  должен
                                       быть установлен в палитре.

                          numentries   Число элементов, которые  должны
                                       быть установлены в палитре.

                          entries      Блоки PALETTEENTRY.

                Запись StretchBlt                               ( до 3.0 )     
             ──────────────────────────────────────────────────────────

             Запись StretchBlt,   записанная  Windows  версии  до  3.0,
        содержит аппаратно-зависимую растровую карту,  которая может не
        подходить для использования на всех устройствах.  Далее показан
        формат этой записи:


             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0B23.

             rdParm[]     Содержит следующие элементы:


       Windows 3.0/Ref/6#7                                      = 172 =

                          Элемент      Описание
                          ───────      ────────
                          raster op    Младшее     слово      растровой
                                       операции.

                          raster op    Старшее     слово      растровой
                                       операции.

                          SYE          Размер устройства-источника   по
                                       оси Y.

                          SXE          Размер устройства-источника   по
                                       оси X.

                          SY           Координата     Y      начального
                                       положения устройства-источника.

                          SX           Координата     X      начального
                                       положения устройства-источника.

                          DYE          Размер устройства-получателя  по
                                       оси Y.

                          DXE          Размер устройства-получателя  по
                                       оси X.

                          DY           Координата     Y      начального
                                       положения устройства-получателя.

                          DX           Координата     X      начального
                                       положения устройства-получателя.

                          bmWidth      Ширина   растровой   карты.

                          bmHeight     Высота    растровой   карты.

                          bmWidthBytes Число   байтов в  каждой  строке
                                       растровой карты.

                          bmPlanes     Число цветовых  планов растровой
                                       карты.

                          bmBitsPixel  Число смежных цветовых битов.

                          bits         Действительные  биты   растровой
                                       карты.
                Запись StretchBlt                                    [3.0]     
             ──────────────────────────────────────────────────────────

             Запись StretchBlt,  записанная  Windows версии 3.0 и выше,
        содержит аппаратно-независимую растровую карту,  подходящую для
        использования на всех устройствах.  Далее показан  формат  этой
        записи:

       Windows 3.0/Ref/6#7                                      = 173 =


             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0B41.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          raster op    Младшее     слово      растровой
                                       операции.

                          raster op    Старшее     слово      растровой
                                       операции.

                          SYE          Размер устройства-источника   по
                                       оси Y.

                          SXE          Размер устройства-источника   по
                                       оси X.

                          SY           Координата     Y      начального
                                       положения устройства-источника.

                          SX           Координата     X      начального
                                       положения устройства-источника.

                          DYE          Размер устройства-получателя  по
                                       оси Y.

                          DXE          Размер устройства-получателя  по
                                       оси X.

                          DY           Координата     Y      начального
                                       положения устройства-получателя.

                          DX           Координата     X      начального
                                       положения устройства-получателя.

                          BitmapInfo   Структура данных BITMAPINFO.


       Windows 3.0/Ref/6#7                                      = 174 =

                          bits         Реальные                    биты
                                       аппаратно-независимой  растровой
                                       карты.

                Запись StretchDlBits                                 [3.0]     
             ──────────────────────────────────────────────────────────

             Запись StretchDlBits имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0F43.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          dwRop        Растровая   операция,    которая
                                       должна быть выполнена.

                          wUsage       Флаг, показывающий, содержит  ли
                                       цветовая таблица растровой карты
                                       значения  RGB  или   индексы   в
                                       текущей логической палитре.

                          srcYExt      Высота    источника в  растровой
                                       карте.

                          srcXExt      Ширина   источника  в  растровой
                                       карте.

                          srcY         Координата Y начала  источника в
                                       растровой карте.

                          srcX         Координата X начала  источника в
                                       растровой карте.

                          dstYExt      Высота прямоугольника-приемника.

                          dstXExt      Ширина прямоугольника-приемника.

       Windows 3.0/Ref/6#7                                      = 175 =


                          dstY         Координата       Y        начала
                                       прямоугольника - приемника.

                          dstX         Координата      X         начала
                                       прямоугольника - приемника.

                          BitmapInfo   Структура данных BITMAPINFO.

                          bits         Действительные              биты
                                       аппаратно-независимой  растровой
                                       карты.

                                      Запись TextOut                           
             ──────────────────────────────────────────────────────────

             Запись TextOut имеет следующий формат:

             struct {
                    DWORD      rdSize;
                    WORD       rdFunction;
                    WORD       rdParm[];
             }

             Эта запись содержит следующие поля:

             Поле         Описание
             ────         ────────

             rdSize       Определяет размер записи в словах.

             rdFunction   Определяет номер функции 0x0521.

             rdParm[]     Содержит следующие элементы:

                          Элемент      Описание
                          ───────      ────────

                          count        Длина строки.

                          string       Действительная строка.

                          y-value      Логическое  значение   начальной
                                       точки строки по оси y.

                          x-value      Логическое  значение   начальной
                                       точки строки по оси x.



       Windows 3.0/Ref/6#7                                      = 176 =

                        9.5.3. Пример программы работы с метафайлом            
       ----------------------------------------------------------------
             Этот раздел  показывает  создание  метафайла   с   помощью
        простой программы.

             Эта простая   прикладной   программы   создает   небольшой
        метафайл,  в котором  рисуется  темно-красный  прямоугольник  с
        зеленой границей и со словами "Привет, ребята!" внутри.

        MakeMetaFile(hDC)
        HDC hDC;
        {
            HPEN     hMetaGreenPen;
            HBRUSH   hMetaVioletBrush;
            HDC      hDCMeta;
            HANDLE   hMeta;

            /* создание метафайла с выводом информации на диск */

            hDCMeta = CreateMetaFile((LPSTR) "sample.met");
            hMetaGreenPen = CreatePen(0, 0, (DWORD) 0x0000FF00);

            SelectObject(hDCMeta, hMetaGreenPen);
            hMetaVioletBrush = CreateSolidBrush((DWORD) 0x00FF00FF);
            SelectObject(hDCMeta, hMetaVioletBrush);

            Rectangle(hDCMeta, 0, 0, 150, 70);

            TextOut(hDCMeta, 10, 10, (LPSTR) "Привет, ребята!", 15);

            /* закончить построение метафайла */
            hMeta = CloseMetaFile(hDCMeta);

            /* использовать созданный метафайл */
            PlayMetaFile(hDC, hMeta);
        }

             Результирующий двоичный  файл  SAMPLE.MET  будет выглядеть
        следующим  образом:

        0001                      mtType...  дисковый  метафайл
        0009                      mtSize...
        0100                      mtVersion
        0000 0036                 mtSize
        0002                      mtNoObject
        0000 000C                 mtMaxRecord
        0000                      mtNoParametrs

        0000 0008                 rdSize
        02FA                      rdFunction (вызов функции CreatePen )
        0000 0000 0000 0000 FF00  rdParm     (   структура      LOGPEN,
                                              определяющая перо)


       Windows 3.0/Ref/6#7                                      = 177 =

        0000 0004                rdSize
        012D                     rdFunction (SelectObject)
        0000                     rdParm (индекс объекта #0...
                                          - вышеописанного пера)

        0000 0007                rdSize
        02FC                     rdFunction (CreateBrush)
        0000 00FF 00FF 0000      rdParm    (   структура      LOGBRUSH,
                                             определяющая кисть)

        0000 0004                rdSize
        012D                     rdFunction (SelectObject)
        0001                     rdParm (индекс объекта #1... - кисти )

        0000 0007                rdSize
        041B                     rdFunction (Rectangle)
        0046 0096 0000 0000      rdParm (параметры, посылаемые функции
                                           Rectangle...  в    обратном
                                              порядке)

        0000 000C                rdSize
        0521                     rdFunction (TextOut)
                                 rdParm

        000C                     count
                                 string
        8F E0 A8 A2 A5 E2 2C 20 E0 A5 A1 EF E2 A0 21  "Привет, ребята!"
        000A                     y-value
        000A                     x-value





       Windows 3.0/Ref/6#7                                      = 178 =

                                      9.6 Заключение                           
       ----------------------------------------------------------------

             Файлы Windows  хранят  информацию необходимую для создания
        прикладных программ  Windows  также,  как  данные   необходимые
        системе Windows   и  прикладным  программам  Windows  во  время
        выполнения. Для дополнительной информации по темам, связанным с
        файлами Windows смотрите следующие разделы:

             Раздел                    Руководство
             ──────                    ───────────

             Функции метафайла         Руководство,   Том 1:   Глава 1,
                                       "Функции системы      управления
                                       окнами"  и  Глава   4,   "Список
                                       функций".

             Аппаратно-независимые     Руководство        программиста:
             растровые карты           Глава 11, "Растровые карты".

             Системный буфер Windows   Руководство        программиста:
                                       Глава 13, "Системный буфер".

             Создание икон и курсоров  Tools:Глава 4,"Designing images:
                                       SDKPaint".





       Windows 3.0/Ref/6#7                                      = 179 =

                          Глава 10. ОПЕРАТОРЫ ОПРЕДЕЛЕНИЯ МОДУЛЯ               
       ----------------------------------------------------------------

             Эта глава  содержит  описание  операторов,  содержащихся в
        файле  определения  модуля,  который  определяет  содержимое  и
        системные  требования  прикладной программы для программы LINK.
        LINK компанует откомпилированный исходный файл  с  библиотеками
        Microsoft   Windows   и   другими   библиотеками  для  создания
        прикладной программы выполняемой в среде Windows. Для получения
        дополнительной информации     о     работе    LINK,    смотрите
        "Инструментальные средства".

             Файл определения  модуля  содержит  один   или   несколько
        следующих операторов определения модуля:

             CODE         Атрибуты кодового сегмента

             DATA         Атрибуты сегмента данных

             DESCRIPTION  Однострочное описание модуля

             EXETYPE      Тип .EXE заголовка (Windows или OS/2)

             EXPORTS      Эспортируемые функции

             HEAPSIZE     Размер локальной  динамической области памяти
                          в байтах

             IMPORTS      Импортируемые функции

             LIBRARY      Имя библиотеки

             NAME         Имя модуля

             SEGMENTS     Дополнительный кодовый сегмент

             STACKSIZE    Размер локального стека в байтах

             STUB         Выполняемая программа старого типа

             Эта глава  описывает   выше   упомянутые   операторы,   их
        синтаксис, обязательные    и    необязательные    параметры   и
        их применение.

        ───────────────────────────────────────────────────────────────
                                           CODE                                

             Синтаксис:   CODE  [FIXED|MOVEABLE] [DISCARDABLE]
                                                  [\PRELOAD|LOADONCALL]


             Этот оператор определяет  атрибуты  стандартного  кодового
        сегмента.  Стандартный кодовый сегмент - это сегмент прикладной

       Windows 3.0/Ref/6#7                                      = 180 =

        программы ,  имеющий имя _TEXT и принадлежащий классу  CODE.  В
        прикладных  программах,  написанных  на  языке Си,  стандартный
        сегмент  данных  создается  автоматически,   если   не   задано
        специальное имя сегмента в строке команд Си - компилятора.

             Если задается параметр FIXED, то это означает, что сегмент
        остается в памяти на  фиксированном  месте.  Параметр  MOVEABLE
        означает,  что  сегмент  может быть перемещен,  если необходимо
        уплотнить память.

             Если задается параметр DISCARDABLE,  то это означает,  что
        сегмент может быть сброшен, если он долго не используется.

             Если задается  параметр  PRELOAD,  то  это  означает,  что
        сегмент загружается   во   время   первой  загрузки  программы;
        параметр LOADONCALL означает,  что сегмент загружается во время
        обращения к нему.


             Коментарий:

             Атрибута для кодового сегмента по умолчанию не существует.
        Файл .DEF  должен  всегда  точно  определять  атрибут  кодового
        сегмента.

             Если указаны противоречащие друг другу операторы , то LINK
        использует отменяющий  параметр  определения атрибута сегмента.
        Ниже  приведен  список  параметров  отменяющих   противоречащие
        параметры:

             MOVEABLE отменяет  FIXED

             PRELOAD отменяет LOADONCALL

             Пример:

             CODE MOVEABLE LOADONCALL

             В этом   примере,  загрузчик  принудительно  загрузит  все
        фиксированные и перемещаемые ( но  не  сбрасываемые  )  данные.
        Библиотеки не могут иметь перемещаемый но не сбрасываемый код.

        ───────────────────────────────────────────────────────────────
                                           DATA                                

             Синтаксис:   DATA  [NONE|SINGLE|MULTIPLE] [FIXED|MOVEABLE]

             Этот оператор  определяет  атрибуты  стандартного сегмента
        данных.  Стандартный  сегмент  данных  -   это   все   сегменты
        прикладной  программы  принадлежащие  группе  DSGROUP  и классу
        DATA. Для   прикладных   программ,   написанных   на  языке  Си
        стандартный сегмент  данных  создается  автоматически.  Сегмент
        данных всегда загружается при первой инициализации программы.

       Windows 3.0/Ref/6#7                                      = 181 =


             Если задается параметр NONE, то это означает, что сегмента
        данных  нет.  Этот  параметр  должен  быть   только   атрибутом
        сегмента. Этот параметр разрешен только для библиотек.

             Если задается   параметр   SINGLE,   то   это    означает,
        единственный   сегмент  будет  разделяться  всеми  экземплярами
        модуля. Используется только для библиотечных модулей.

             Параметр MULTIPLE означает,  что  для  каждого  экземпляра
        существует свой   сегмент,   и  разрешен  только  в  прикладных
        программах.

         Параметры NONE, SINGLE и  MULTIPLE являются взаимоисключающими.

             Если задается параметр FIXED, то это означает, что сегмент
        остается в памяти на  фиксированном  месте.  Параметр  MOVEABLE
        означает,  что  сегмент  может быть перемещен,  если необходимо
        уплотнить память.


             Коментарий:

             Атрибута для  сегмента  данных по умолчанию не существует.
        Файл .DEF  должен  всегда  точно  определять  атрибут  сегмента
        данных.

             Сегмент данных всегда загружается при первой инициализации
        программы.

             Если указаны противоречащие друг другу операторы , то LINK
        использует отменяющий  параметр  определения атрибута сегмента.
        Ниже  приведен  список  параметров  отменяющих   противоречащие
        параметры:

             MULTIPLE отменяет NONE

             SINGLE отменяет NONE

             MOVEABLE отменяет  FIXED

             Пример:

             DATE MOVEABLE SINGLE

             Этот пример  сообщает компоновщику,  что этот модуль имеет
        единственный и перемещаемый сегмент данных.

        ───────────────────────────────────────────────────────────────
                                                                               
            DESCRIPTION

             Синтаксис:   DESCRIPTION 'text'


       Windows 3.0/Ref/6#7                                      = 182 =

             Этот оператор   вставляет   текст   в   модуль  прикладной
        программы. Это  полезно  для  всестороннего  контроля  исходной
        программы или для информации об авторских правах.

             Параметр     Описание
             ────────     ────────

             text         Один или несколько  символов  в  коде  ASCII.
                          Строка  должна  быть  заключена  в  одинарные
                          кавычки.

             Пример:

             DESCRIPTION  'Microsoft Windows Template Application'

             Этот пример  показывает,  что  текст  'Microsoft   Windows
        Template Application'   будет   вставлен  в  модуль  прикладной
        программы.

        ───────────────────────────────────────────────────────────────
                                                                               
            EXETYPE

             Синтаксис:    EXETYPE headertype

             Этот оператор    определяет    тип    заголовка   текущего
        выполняемого файла (.EXE) (Windows или OS/2). Он обязателен для
        любой прикладной программы Windows.

             Параметр     Описание
             ────────     ────────

             headertype    Определяет тип  заголовка.  Если  прикладная
                           программа создается   для   работы  в  среде
                           Windows,  вы должны придать этому  параметру
                           значение "WINDOWS".  Для прикладных программ
                           OS/2,  установите этот параметр  в  значение
                           "OS/2".

             Пример:

             EXETYPE WINDOWS

        ───────────────────────────────────────────────────────────────
                                          EXPORTS                              

             Синтаксис:    EXPORTS exportname [ordinal-option]
                                          [\res-option] [data-option]
                                                     [parameter-option]

             Этот оператор   определяет   имена   и  атрибуты  функций,
        экспортируемых в другие прикладные  программы.  Ключевое  слово
        EXPORTS  отмечает  начало  определений.  Далее  может следовать
        любое число определений, каждое на отдельной строке.

       Windows 3.0/Ref/6#7                                      = 183 =


             Параметр     Описание
             ────────     ────────

             exportname   Один или несколько  символов  в  коде  ASCII,
                          определяющих имя функции. Этот параметр имеет
                          форму:

                          <entryname> = [internalname]


                          где entryname   -    имя,    которое    будет
                          использоваться   другими  ПП  для  доступа  к
                          экспортируемой   функции.   internalname    -
                          необязательный  параметр,  который определяет
                          действительное имя функции, если entryname им
                          не является.

             ordinal-option  Необязательный    параметр,   определяющий
                          порядковый номер функции. Имеет форму:

                          @ordinal

                          где ordinal  -  целое   число,   определяющее
                          порядковый  номер  функции.  Порядковый номер
                          определяет  расположение  имени   функции   в
                          таблице строк    прикладных   программ.(Когда
                          функция экспортируется из  библиотеки,  лучше
                          использовать   порядковый   номер,  чем  имя;
                          использование номеров экономит пространство.)

             res-option   Необязательное ключевое  слово  RESIDENTNAME,
                          определяющее,  что имя  функции  должно  быть
                          резидентным всегда.

             data-option  Необязательное ключевое     слово     NODATA,
                          определяющее,  что  функция  не  связана   со
                          специальным   сегментом  данных.  При  вызове
                          функция использует текущий сегмент данных.

             parameter-option  Необязательное целое число, определяющее
                          число слов,  ожидаемых  функцией  в  качестве
                          параметров.

             Пример:

             EXPORTS
                     SampleRead=read2bin @1 8
                     StringIn=str1 @2 4
                     CharTest NODATA

             Этот пример  экспортирует  функции  SampleRead,StringIn  и
        CharTest так, что другие прикладные программы или Windows могут

       Windows 3.0/Ref/6#7                                      = 184 =

        вызывать их.

        ───────────────────────────────────────────────────────────────
                                         HEAPSIZE                              

             Синтаксис:   HEAPSIZE bytes

             Этот оператор    определяет    число   байт,   необходимых
        прикладной программе для локальной динамической области памяти.
        Прикладная  программа использует локальную динамическую область
        памяти каждый раз, когда она распределяет локальную память.

             По умолчанию размер локальной динамической области  памяти
        равен 0.  Минимальный размер - 256 байт.  Для любой  прикладной
        программы  размер  локальной динамической памяти должен быть по
        крайней мере достаточен для хранения текущего окружения.

             Параметр     Описание
             ────────     ────────

             bytes        Целое число,  определяющее  размер  локальной
                          динамической области памяти в байтах.  Оно не
                          должно   превышать   65  536  (размер  одного
                          физического сегмента).
             Пример:

             HEAPSIZE 4096

             Этот пример устанавливает  размер  локальной  динамической
        памяти прикладной программы 4096 байт.

        ───────────────────────────────────────────────────────────────
                                          IMPORTS                              

             Синтаксис:   IMPORTS [internal-option] modulename
                                                         [entry-option]

             Этот оператор  определяет  имена   и   атрибуты   функций,
        импортируемых  из  других  прикладных программ.  Ключевое слово
        IMPORTS отмечает  начало  определений.  Далее  может  следовать
        любое количество определений, каждое на отдельной строке.

             Параметр     Описание
             ────────     ────────

             internal-option   Определяет имя,    которое    прикладная
                          программа  будет  использовать   для   вызова
                          функции. Имеет форму:

                          internal-name =

                          где internal-name  -   один   или   несколько
                          символов  в  коде ASCII.  Это имя должно быть

       Windows 3.0/Ref/6#7                                      = 185 =

                          уникальным.

             modulename   Определяет один или несколько символов  ASCII
                          верхнего  регистра,  которые  определяют  имя
                          выполняемого модуля,  содержащего функцию.Имя
                          модуля   должно  быть  таким  же  как  и  имя
                          выполняемого   файла.   Например   прикладная
                          программа  с именем SAMPLE.DLL имеет модуль с
                          именем  "SAMPLE".Выполняемые   файлы   должны
                          иметь имя с расширением .DLL.

             entry-option Определяет  импортируемую  функцию. Он  может
                          быть одним из следующих:

                          .entryname

                          .entryordinal

                          где entryname -  действительное  имя функции;
                          entryordinal  - порядковый номер функции.

             Пример:

             IMPORTS
                    Sample.SampleRead
                    write2hex=Sample.SampleWrite
                    Read.l

             Примечание:

             Вместо списка функций DLL в операторе IMPORTS,  вы  можете
        определять "импортируемую библиотеку" для DLL в вашей командной
        строке LINK.  Это  также  сохраняет  пространство  при  импорте
        обычным способом.

        ───────────────────────────────────────────────────────────────
                                          LIBRARY                              

             Синтаксис:   LIBRARY libraryname

             Этот оператор   определяет   имя   библиотечного   модуля.
        Библиотечные модули - это  модули  ресурсов,  которые  содержат
        код, данные  и другие ресурсы,  но не являются выполняемыми как
        независимые программы.  Как и имя модуля прикладной  программы,
        имя модуля библиотеки должно быть таким же как имя выполняемого
        файла. К примеру библиотека USER.EXE имеет имя модуля "USER".


             Параметр     Описание
             ────────     ────────

             libraryname  Один  или несколько  символов в  коде  ASCII,
                          определяющих имя библиотечного модуля.

       Windows 3.0/Ref/6#7                                      = 186 =



             Комментарий:

             Это необязательный   параметр.Если   параметр   не  задан,
        компоновщик использует имя выполняемого файла (без расширения).

             Начальный адрес модуля устанавливается объектными файлами.
        Это внутренне определяемая функция.

             Если .DEF файл не включает, ни оператор NAME,  ни оператор
        LABRARY, LINK предполагает,  что оператор  NAME  требуется  без
        параметра modulename.

             Пример:

             LIBRARY  Utilities

             Этот пример присваивает библиотеке имя модуля "Utilities".

        ───────────────────────────────────────────────────────────────
                                           NAME                                

             Синтаксис:   NAME modulename

             Этот оператор    определяет    имя   выполняемого   модуля
        прикладной программы. Имя используется для идентификации модуля
        при экспортировании функций.

             Параметр     Описание
             ────────     ────────

             modulename   Определяет один    или   несколько   символов
                          верхнего регистра  в  коде   ASCII,   которые
                          определяют имя   выполняемого   модуля.   Имя
                          модуля должно  быть  таким  же  как   и   имя
                          выполняемого файла.    Например    прикладная
                          программа SAMPLE.EXE имеет  модуль  с  именем
                          "SAMPLE".


             Комментарий:

             Это необязательный  параметр.Если   параметр   не   задан,
        компоновщик    использует    имя    выполняемого   файла   (без
        расширения).Например если вы не определили  имя  модуля  и  имя
        выполняемого  файла  MYAPP.EXE,  LINK полагает,  что имя модуля
        "MYAPP.EXE".

             Если в файле определения не заданы ни  оператор  NAME,  ни
        оператор LIBRARY,  компоновщик полагает, что требуется оператор
        NAME без параметра modulename.


       Windows 3.0/Ref/6#7                                      = 187 =

             Пример:

             NAME Calendar

             Этот пример  присваивает  модулю  прикладной программы имя
        "Calendar".

        ───────────────────────────────────────────────────────────────
                                         SEGMENTS                              

             Синтаксис:    SEGMENTS segmentname [CLASS 'class-name']
                            [minalloc] \ [FIXED|MOVEABLE] [DISCARDABLE]
                                 [SHARED|NONSHARED][PRELOAD|LOADONCALL]

             Этот оператор    определяет    атрибуты    сегмента    для
        дополнительных кодовых сегментов и сегментов данных.

             Если включен  необязательный параметр FIXED,  это означает
        что   сегмент    остается    в    памяти    на    фиксированном
        месте. Необязательный  параметр  MOVEABLE,  это  означает,  что
        сегмент может быть перемещен, если необходимо уплотнить память.

             Если включен  необязательный  параметр  DISCARDABLE,   это
        означает,  что  сегмент  может  быть сброшен,  если он долго не
        используется.

             Если включен необязательный параметр PRELOAD ,  то сегмент
        должен   быть   загружен  немедленно.  Необязательный  параметр
        LOADONCALL означает,  что сегмент загружается во время когда он
        доступен  или  вызван.  Компилятор ресурсов может отменить этот
        необязательный параметр. Для дополнительной информации смотрите
        "Инструментальные средства".


             Примечание переводчика:  Описание  параметров   SHARED   и
        NONSHARED  приводится  по документации Windows версии 2.0,  так
        как в данной документации они отсуствуют.

             Если включен необязательный параметр SHARED, это означает,
        что сегмент  может  быть  разделяемым.  Если  - NONSHARED,  это
        означает, что сегмент не может быть разделяемым.

             Параметр     Описание
             ────────     ────────

             segmentname Символьная строка,  именующая  новый  сегмент.
                         Это может быть любое имя,  включая стандартные
                         имена  сегментов  _TEXT  или  _DATA,   которые
                         представляют  стандартные  кодовые  сегменты и
                         сегменты данных.

             CLASS 'class-name'    Необязательное    ключевое    слово,
                         определяющее имя  класса  заданного  сегмента.

       Windows 3.0/Ref/6#7                                      = 188 =

                         Если имя класса не задано,  LINK  предполагает
                         по умолчанию имя класса CODE.

             minalloc    Это  необязательное  целое число, определяющее
                         минимальный размер  памяти,   выделяемый   для
                         данного   сегмента.

             Комментарий:

             Для дополнительных сегментов  атрибутов  по  умолчанию  не
        существует.  Файл  .DEF  должен всегда явно определять атрибуты
        дополнительных сегментов.

             Если взаимоисключающие    параметры   включены   в   одном
        операторе, LINK использует параметр, имеющий старший приоритет,
        для определения атрибутов сегмента:


             MOVEABLE  имеет старший приоритет, чем FIXED.

             PRELOAD имеет старший приоритет, чем  LOADONCALL.


             Пример:

             SEGMENTS
                    _TEXT FIXED
                    _INIT PRELOAD MOVEABLE DISCARDABLE
                    _RES  CLASS 'DATA' PRELOAD  DISCARDABLE

        ───────────────────────────────────────────────────────────────
                                         STACKSIZE                             

             Синтаксис:   STACKSIZE bytes

             Этот оператор    определяет    число   байт,   необходимых
        прикладной программе  для  ее  локального   стека.   Прикладная
        программа использует  локальный  стек  каждый  раз,  когда  она
        вызывает свои собственные  функции.

             По умолчанию   размер   стека  равен  0,  если  прикладная
        программа не вызывает функций.  Если ваша прикладная  программа
        вызывает  функции  и  вы установили размер стека меньше чем 5K,
        Windiws устанавливает размер стека 5K автоматически.


             Параметр     Описание
             ────────     ────────

             bytes        Целое  число,  определяющее  размер  стека  в
                          байтах.

             Комментарий:

       Windows 3.0/Ref/6#7                                      = 189 =


             Не используйте        оператор        STACKSIZE        для
        динамически-компануемых  библиотек.

             Пример:

             STACKSIZE 6144

             Этот пример устанавливает стек прикладной программы в 6144
        байт.

        ───────────────────────────────────────────────────────────────
                                           STUB                                

             Синтаксис:   STUB 'filename'

             Этот оператор подсоединяет специальный  выполняемый  файл,
        заданный  именем  filename,  в начало модуля.  Этот выполняемый
        файл будет индицировать предупреждающее сообщение  и  завершать
        работу,   если   пользователь  пытается  выполнить  модуль  без
        предварительной загрузки среды Windows. По умолчанию может быть
        использован   файл   WINSTUB.EXE,   если  не  требуется  других
        действий.


             Параметр     Описание
             ────────     ────────

             filename     Определяет    имя     выполняемого     файла,
                          добавляемого к   модулю.   Имя  должно  иметь
                          формат имени файла DOS.

             Комментарий:

             Если файл,  указанный параметром filename,  не находится в
        текущем   каталоге,   компоновщик   ищет   его   в   каталогах,
        определенных переменной окружения PATH.

             Пример:

             STUB         'WINSTAB.EXE'

             Этот пример определяет выполняемый  файл  WINSTUB.EXE  как
        программу  проверки  прикладной  программы.  Если  пользователь
        пытается запустить эту прикладную  программу  в  DOS  окружении
        раньше,  чем Windows,  программа WINSTUB.EXE запускается вместо
        нее.

        ───────────────────────────────────────────────────────────────





       Windows 3.0/Ref/6#7                                      = 190 =

                                                                               
            Глава 11. ДВОИЧНЫЕ И ТРОИЧНЫЕ КОДЫ РАСТРОВЫХ ОПЕРАЦИЙ
       ----------------------------------------------------------------

             В данном  приложении представлены двоичные и троичные коды
        растровых  операций,   используемые   интерфейсом   графических
        устройств(GDI).  Бинарная  растровая  операция  использует  два
        операнда:  перо и растр приемника.  Троичная растровая операция
        использует   три  операнда:  растр  источника,  кисть  и  растр
        приемника.  Обе  растровые  операции  (двоичная   и   троичная)
        используют булевские знаки операций.




       Windows 3.0/Ref/6#7                                      = 191 =

                             11.1 Бинарные растровые операции                  
       ----------------------------------------------------------------

             В данном подразделе перечисляются коды бинарных  растровых
        операций,   используемых  функциями  GetROP2  и  SetROP2.  Коды
        растровых операций определяют,  каким  образом  GDI  объединяет
        биты выбранного пера с битами растра приемника.

             Каждый код растровой операции представляет собой булевскую
        операцию,  в  которой  указываются  выбранное  перо   и   растр
        приемника. В этих операциях используются два операнда:

             P - выбранное перо

             D - растр приемника


             В этих   операциях   используются   следующие    булевские
        операции:

             o - поразрядное OR

             x - поразрядное исключающее OR

             a - поразрядное AND

             n - поразрядное NOT (инверсия)


             Все булевские операции представлены  в  обратной  Польской
        записи.   Например,   приведенная  ниже  операция  представляет
        объединение выбранного пера с приемником:

             DPo

             Каждый код   растровой   операции    представляет    собой
        32-битовое целое значение, в котором старшее слово - это индекс
        булевской операции,  а младшее слово - код операции. 16-битовый
        индекс  операции  -  это  дополненное  нулями  8-битовое целое,
        представляющее собой результат  булевской  операции  над  ранее
        определенными  значениями пера и приемника.  Например,  индексы
        операции для DPo и DPan показаны в таблице 11.1:

             Таблица 11.1              Индексы операции для DPo и DPan
        ───────────────────────────────────────────────────────────────
             P    D              DPo          DPan
        ───────────────────────────────────────────────────────────────
             0    0               0            1
             0    1               1            1
             1    0               1            1
             1    1               1            0
        ───────────────────────────────────────────────────────────────


       Windows 3.0/Ref/6#7                                      = 192 =

             В следующем  списке   перечислены   режимы   рисования   и
        булевские операции, которые они представляют.

             Растровая операция         Булевская операция
             ──────────────────         ──────────────────

              R2_BLACK                   0

              R2_COPYPEN                 P

              R2_MASKNOTPEN              DPna

              R2_MASKPEN                 DPa

              R2_MASKPENNOT              PDna

              R2_MERGENOTPEN             DPno

              R2_MERGEPEN                DPo

              R2_MERGEPENNOT             PDno

              R2_NOP                     D

              R2_NOT                     Dn

              R2_NOTCOPYPEN              Pn

              R2_NOTMASKPEN              DPan

              R2_NOTMERGEPEN             DPon

              R2_NOTXORPEN               DPxn

              R2_WHITE                   1

              R2_XORPEN                  DPx


             Если используется монохромное устройство,  GDI преобразует
        нулевое значение в черный цвет и значение  1  в  белый.  Данная
        прикладная программа  которая пытается рисовать черным пером на
        белом фоне (приемник),  используя доступные бинарные  растровые
        операции,   может   получить  один  из  следующих  результатов,
        перечисленных ниже:


             Растровая операция        Результат
             ──────────────────        ─────────

               R2_BLACK                Видимая черная линия

               R2_COPYPEN              Видимая черная линия

       Windows 3.0/Ref/6#7                                      = 193 =


               R2_MASKNOTPEN           Невидимая линия

               R2_MASKPEN              Видимая черная линия

               R2_MASKPENNOT           Видимая черная линия

               R2_MERGENOTPEN          Невидимая линия

               R2_MERGEPEN             Видимая черная линия

               R2_MERGEPENNOT          Видимая черная линия

               R2_NOP                  Невидимая линия

               R2_NOT                  Видимая черная линия

               R2_NOTCOPYPEN           Невидимая линия

               R2_NOTMASKPEN           Невидимая линия

               R2_NOTMERGEPEN          Видимая черная линия

               R2_NOTXORPEN            Видимая черная линия

               R2_WHITE                Невидимая линия

               R2_XORPEN               Невидимая линия


             Если применяется   цветное   устройство,   GDI  использует
        значения  RGB  для  представления  цветов  пера  и   приемника.
        Значение  RGB-цвета  - это длинный указатель,  который содержит
        красное,  зеленое и  голубое  поля  цвета,  каждое  из  которых
        определяет    интенсивность    данного   цвета.   Интенсивность
        изменяется от 0 до 255.  Значения упаковываются в трех  младших
        байтах  длинного целого.  Цвет пера - это всегда сплошной цвет,
        а  цвет приемника может быть комбинацией  любого  из  двух  или
        трех цветов.  Данная  прикладная  программа,  которая  пытается
        рисовать белым пером  на  голубом  фоне  (приемник),  используя
        доступные  бинарные  растровые  операции может получить один из
        следующих результатов, перечисленных ниже:


             Растровая операция        Результат
             ──────────────────        ─────────

              R2_BLACK                 Видимая черная линия

              R2_COPYPEN               Видимая белая линия

              R2_MASKNOTPEN            Видимая черная линия


       Windows 3.0/Ref/6#7                                      = 194 =

              R2_MASKPEN               Невидимая голубая линия

              R2_MASKPENNOT            Видимая красная/зеленая
                                       линия

              R2_MERGENOTPEN           Невидимая голубая линия

              R2_MERGEPEN              Видимая белая линия

              R2_MERGEPENNOT           Видимая белая линия

              R2_NOP                   Невидимая голубая линия

              R2_NOT                   Видимая красная/зеленая
                                       линия

              R2_NOTCOPYPEN            Видимая черная линия

              R2_NOTMASKPEN            Видимая красная/зеленая
                                       линия

              R2_NOTMERGEPEN           Видимая черная линия

              R2_NOTXORPEN             Невидимая голубая линия

              R2_WHITE                 Видимая белая линия

              R2_XORPEN                Видимая красная/зеленая
                                       линия




       Windows 3.0/Ref/6#7                                      = 195 =

                             11.2 Троичные растровые операции                  
       ----------------------------------------------------------------

             В данном  подразделе перечисляются коды троичных растровых
        операций,  используемых функциями PatBlt,BitBlt  и  StretchBlt.
        Эти  коды определяют,  каким образом GDI объединяет биты растра
        источника с битами растра приемника.

             Каждый код растровой операции представляет собой булевскую
        операцию,  в  которой  указывается источник,  выбранная кисть и
        растр приемника. В этих операциях используются три операнда:

             S - растр источника

             P - текущая выбранная кисть (также называемая шаблоном)

             D - растр приемника

             Булевские операции, используемые в этих выражениях:

             o - поразрядное OR

             x - поразрядное исключающее OR

             a - поразрядное AND

             n - поразрядное NOT (инверсия)


             Все булевские  операции  представлены  в обратной Польской
        записи.  Например,  приведенная ниже операция заменяет приемник
        объединением источника и кисти:

             PSo

             Следующая операция   объединяет   источник   и   кисть   с
        приемником.  Заметим,  что существуют альтернативные  написания
        одной и той же функции,  и хотя некоторые написания операций не
        приведены в списке, они имеют эквивалентную форму.

             DPSoo

             Каждый код   растровой   операции    представляет    собой
        32-битовое целое значение, в котором старшее слово - это индекс
        булевской операции,  а младшее слово - код операции. 16-битовый
        индекс  операции  -  это  дополненное  нулями  8-битовое целое,
        представляющее собой результат  булевской  операции  над  ранее
        определенными  значениями  битов  кисти,  растров  источника  и
        приемника. Например, индексы операции для выражений PSo и DPSoo
        представлены в таблице 11.2:


       Windows 3.0/Ref/6#7                                      = 196 =

             Таблица 11.2             Индексы операции для  PSo и DPSoo
        ───────────────────────────────────────────────────────────────
             P   S   D                PSo          DPSoo
        ───────────────────────────────────────────────────────────────

             0   0   0                 0             0
             0   0   1                 0             1
             0   1   0                 1             1
             0   1   1                 1             1
             1   0   0                 1             1
             1   0   1                 1             1
             1   1   0                 1             1
             1   1   1                 1             1

           Индекс операции:           00FC          00FE
        ───────────────────────────────────────────────────────────────

             В этом  случае  PSo  имеет  индекс операции 00FC (читается
        снизу вверх ); DPSoo имеет индекс 00FE. Эти значения определяют
        местоположение  соответствующих кодов растровой операции в ниже
        приведенной табл.  4. Операция PSo находится в строке с номером
        252  (FC  шестнадцатеричное);  DPSoo  -  на  254-ой  строке (FE
        шестнадцатеричное ).

             Наиболее часто используемым растровым операциям  присвоены
        специальные  имена во включаемом файле WINDOWS.H среды Windows.
        Программисты могут, при необходимости, использовать эти имена в
        своих прикладных программах.

             При монохромных  источнике  и  приемнике  нулевое значение
        бита  преобразуется  в  черный  пиксель,  а  значение  бита   1
        преобразуется   в   белый  пиксель.  При  цветном  источнике  и
        приемнике их цвета преобразуются в соответствии  со  значениями
        RGB.Для дополнительной  информации  о  величинах  RGB  смотрите
        структуру RGB в главе 7 "Типы и структуры данных".


       Windows 3.0/Ref/6#7                                      = 197 =


             Коды растровых операций приведены в таблице 11.3:

             Таблица 11.3                       Коды растровых операций
        ───────────────────────────────────────────────────────────────

            Логическая    Шестнадца-   Логическая      Общее
            функция в     теричный     функция в       имя
            шестнадца-    код          обратной
            теричном      операции     Польской записи
            представлении
        ───────────────────────────────────────────────────────────────

                00        00000042      0             BLACKNESS
                01        00010289      DPSoon           -
                02        00020C89      DPSona           -
                03        000300AA      PSon             -
                04        00040C88      SDPona           -
                05        000500A9      DPon             -
                06        00060865      PDSxnon          -
                07        000702C5      PDSaon           -
                08        00080F08      SDPnaa           -
                09        00090245      PDSxon           -
                0A        000A0329      DPna             -
                0B        000B0B2A      PSDnaon          -
                0C        000C0324      SPna             -
                0D        000D0B25      PDSnaon          -
                0E        000E08A5      PDSonon          -
                0F        000F0001      Pn               -
                10        00100C85      PDSona           -
                11        001100A6      DSon          NOTSRCCOPY
                12        00120868      SDPxnon          -
                13        001302C8      SDPaon           -
                14        00140869      DPSxnon          -
                15        001502C9      DPSaon           -
                16        00165CCA      PSDPSanaxx       -
                17        00171D54      SSPxDSxaxn       -
                18        00180D59      SPxPDxa          -
                19        00191CC8      SDPSanaxn        -
                1A        001A06C5      PDSPaox          -
                1B        001B0768      SDPSxaxn         -
                1C        001C06CA      PSDPaox          -
                1D        001D0766      DSPDxaxn         -
                1E        001E01A5      PDSox            -
                1F        001F0385      PDSoan           -
                20        00200F09      DPSnaa           -
                21        00210248      SDPxon           -
                22        00220326      DSna             -
                23        00230B24      SPDnaon          -
                24        00240D55      SPxDSxa          -
                25        00251CC5      PDSPanaxn        -
                26        002606C8      SDPSaox          -
                27        00271868      SDPSxnox         -

       Windows 3.0/Ref/6#7                                      = 198 =

                28        00280369      DPSxa            -
                29        002916CA      PSDPSaoxxn       -
                2A        002A0CC9      DPSana           -
                2B        002B1D58      SSPxPDxaxn       -
                2C        002C0784      SPDSoax          -
                2D        002D060A      PSDnox           -
                2E        002E064A      PSDPxox          -
                2F        002F0E2A      PSDnoan          -
                30        0030032A      PSna             -
                31        00310B28      SDPnaon          -
                32        00320688      SDPSoox          -
                33        00330008      Sn               -
                34        003406C4      SPDSaox          -
                35        00351864      SPDSxnox         -
                36        003601A8      SDPox            -
                37        00370388      SDPoan           -
                38        0038078A      PSDPoax          -
                39        00390604      SPDnox           -
                3A        003A0644      SPDSxox          -
                3B        003B0E24      SPDnoan          -
                3C        003C004A      PSx              -
                3D        003D18A4      SPDSonox         -
                3E        003E1B24      SPDSnaox         -
                3F        003F00EA      PSan             -
                40        00400F0A      PSDnaa           -
                41        00410249      DPSxon           -
                42        00420D5D      SDxPDxa          -
                43        00431CC4      SPDSanaxn        -
                44        00440328      SDna          SRCERASE
                45        00450B29      DPSnaon          -
                46        004606C6      DSPDaox          -
                47        0047076A      PSDPxaxn         -
                48        00480368      SDPxa            -
                49        004916C5      PDSPDaoxxn       -
                4A        004A0789      DPSDoax          -
                4B        004B0605      PDSnox           -
                4C        004C0CC8      SDPana           -
                4D        004D1954      SSPxDSxoxn       -
                4E        004E0645      PDSPxox          -
                4F        004F0E25      PDSnoan          -
                50        00500325      PDna             -
                51        00510B26      DSPnaon          -
                52        005206C9      DPSDaox          -
                53        00530764      SPDSxaxn         -
                54        005408A9      DPSonon          -
                55        00550009      Dn               -
                56        005601A9      DPSox            -
                57        00570389      DPSoan           -
                58        00580785      PDSPoax          -
                59        00590609      DPSnox           -
                5A        005A0049      DPx           PATINVERT
                5B        005B18A9      DPSDonox         -
                5C        005C0649      DPSDxox          -

       Windows 3.0/Ref/6#7                                      = 199 =

                5D        005D0E29      DPSnoan          -
                5E        005E1B29      DPSDnaox         -
                5F        005F00E9      DPan             -
                60        00600365      PDSxa            -
                61        006116C6      DSPDSaoxxn       -
                62        00620786      DSPDoax          -
                63        00630608      SDPnox           -
                64        00640788      SDPSoax          -
                65        00650606      DSPnox           -
                66        00660046      DSx           SRCINVERT
                67        006718A8      SDPSonox         -
                68        006858A6      DSPDSonoxxn      -
                69        00690145      PDSxxn           -
                6A        006A01E9      DPSax            -
                6B        006B178A      PSDPSoaxxn       -
                6C        006C01E8      SDPax            -
                6D        006D1785      PDSPDoaxxn       -
                6E        006E1E28      SDPSnoax         -
                6F        006F0C65      PDSxnan          -
                70        00700CC5      PDSana           -
                71        00711D5C      SSDxPDxaxn       -
                72        00720648      SDPSxox          -
                73        00730E28      SDPnoan          -
                74        00740646      DSPDxox          -
                75        00750E26      DSPnoan          -
                76        00761B28      SDPSnoax         -
                77        007700E6      DSan             -
                78        007801E5      PDSax            -
                79        00791786      DSPDSoaxxn       -
                7A        007A1E29      DPSDnoax         -
                7B        007B0C68      SDPxnan          -
                7C        007C1E24      SPDSnoax         -
                7D        007D0C69      DPSxnan          -
                7E        007E0955      SPxDSxo          -
                7F        007F03C9      DPSaan           -
                80        008003E9      DPSaa            -
                81        00810975      SPxDSxon         -
                82        00820C49      DPSxna           -
                83        00831E04      SPDSnoaxn        -
                84        00840C48      SDPxna           -
                85        00851E05      PDSPnoaxn        -
                86        008617A6      DSPDSoaxx        -
                87        008701C5      PDSaxn           -
                88        008800C6      DSa           SRCAND
                89        00891B08      SDPSnoaxn        -
                8A        008A0E06      DSPnoa           -
                8B        008B0666      DSPDxoxn         -
                8C        008C0E08      SDPnoa           -
                8D        008D0668      SDPSxoxn         -
                8E        008E1D7C      SSDxPDxax        -
                8F        008F0CE5      PDSanan          -
                90        00900C45      PDSxna           -
                91        00911E08      SDPSnoaxn        -

       Windows 3.0/Ref/6#7                                      = 200 =

                92        009217A9      DPSDPoaxx        -
                93        009301C4      SPDaxn           -
                94        009417AA      PSDPSoaxx        -
                95        009501C9      DPSaxn           -
                96        00960169      DPSxx            -
                97        0097588A      PSDPSonoxx       -
                98        00981888      SDPSonoxn        -
                99        00990066      DSxn             -
                9A        009A0709      DPSnax           -
                9B        009B07A8      SDPSoaxn         -
                9C        009C0704      SPDnax           -
                9D        009D07A6      DSPDoaxn         -
                9E        009E16E6      DSPDSoaxx        -
                9F        009F0345      PDSxan           -
                A0        00A000C9      DPa              -
                A1        00A11B05      PDSPnaoxn        -
                A2        00A20E09      DPSnoa           -
                A3        00A30669      DPSDxoxn         -
                A4        00A41885      PDSPonoxn        -
                A5        00A50065      PDxn             -
                A6        00A60706      DSPnax           -
                A7        00A707A5      PDSPoaxn         -
                A8        00A803A9      DPSoa            -
                A9        00A90189      DPSoxn           -
                AA        00AA0029      D                -
                AB        00AB0889      DPSono           -
                AC        00AC0744      SPDSxax          -
                AD        00AD06E9      DPSDaoxn         -
                AE        00AE0B06      DSPnao           -
                AF        00AF0229      DPno             -
                B0        00B00E05      PDSnoa           -
                B1        00B10665      PDSPxoxn         -
                B2        00B21974      SSPxDSxox        -
                B3        00B30CE8      SDPanan          -
                B4        00B4070A      PSDnax           -
                B5        00B507A9      DPSDoaxn         -
                B6        00B616E9      DPSDPaoxx        -
                B7        00B70348      SDPxan           -
                B8        00B8074A      PSDPxax          -
                B9        00B906E6      DSPDaoxn         -
                BA        00BA0B09      DPSnao           -
                BB        00BB0226      DSno          MERGEPAINT
                BC        00BC1CE4      SPDSanax         -
                BD        00BD0D7D      SDxPDxan         -
                BE        00BE0269      DPSxo            -
                BF        00BF08C9      DPSano           -
                C0        00C000CA      PSa           MERGECOPY
                C1        00C11B04      SPDSnaoxn        -
                C2        00C21884      SPDSonoxn        -
                C3        00C3006A      PSxn             -
                C4        00C40E04      SPDnoa           -
                C5        00C50664      SPDSxoxn         -
                C6        00C60708      SDPnax           -

       Windows 3.0/Ref/6#7                                      = 201 =

                C7        00C707AA      PSDPoaxn         -
                C8        00C803A8      SDPoa            -
                C9        00C90184      SPDoxn           -
                CA        00CA0749      DPSDxax          -
                CB        00CB06E4      SPDSaoxn         -
                CC        00CC0020      S             SRCCOPY
                CD        00CD0888      SDPono           -
                CE        00CE0B08      SDPnao           -
                CF        00CF0224      SPno             -
                D0        00D00E0A      PSDnoa           -
                D1        00D1066A      PSDPxoxn         -
                D2        00D20705      PDSnax           -
                D3        00D307A4      SPDSoaxn         -
                D4        00D41D78      SSPxPDxax        -
                D5        00D50CE9      DPSanan          -
                D6        00D616EA      PSDPSaoxx        -
                D7        00D70349      DPSxan           -
                D8        00D80745      PDSPxan          -
                D9        00D906E8      SDPSaoxn         -
                DA        00DA1CE9      DPSDanax         -
                DB        00DB0D75      SPxDSxan         -
                DC        00DC0B04      SPDnao           -
                DD        00DD0228      SDno             -
                DE        00DE0268      SDPxo            -
                DF        00DF08C8      SDPano           -
                E0        00E003A5      PDSao            -
                E1        00E10185      PDSoxn           -
                E2        00E20746      DSPDxax          -
                E3        00E306EA      PSDPaoxn         -
                E4        00E40748      SDPSxax          -
                E5        00E506E5      PDSPaoxn         -
                E6        00E61CE8      SDPSanax         -
                E7        00E70D79      SPxPDxan         -
                E8        00E81D74      SSPxDSxax        -
                E9        00E95CE6      DSPDSanaxxn      -
                EA        00EA02E9      DPSao            -
                EB        00EB0849      DPSxno           -
                EC        00EC02E8      SDPao            -
                ED        00ED0848      SDPxno           -
                EE        00EE0086      DSo           SRCPAINT
                EF        00EF0A08      SDPnoo           -
                F0        00F00021      P             PATCOPY
                F1        00F10885      DPSono           -
                F2        00F20B05      DPSnao           -
                F3        00F3022A      PSno             -
                F4        00F40B0A      PSDnao           -
                F5        00F50225      PDno             -
                F6        00F60265      PDSxo            -
                F7        00F708C5      PDSano           -
                F8        00F802E5      PDSao            -
                F9        00F90845      PDSxno           -
                FA        00FA0089      DPo           PATPAINT
                FB        00FB0A09      DPSnoo           -

       Windows 3.0/Ref/6#7                                      = 202 =

                FC        00FC008A      PSo              -
                FD        00FD0A0A      PSDnoo           -
                FE        00FE02A9      DPSoo            -
                FF        00FF0062      1             WHITENESS
        ───────────────────────────────────────────────────────────────



       Windows 3.0/Ref/6#7                                      = 203 =

                                      11.3 Заключение                          
       ----------------------------------------------------------------

             Коды растровых операций определяются  как  GDI  комбинации
        битов исходной  растровой  карты  и  битов  приемной  растровой
        карты. Для  дополнительной  информации,  связанной   с   кодами
        растровой операции смотрите следующие разделы:

             Тема                      Раздел
             ────                      ──────

             Использование кодов       Справочное   руководство, Том 1:
             растровых операций        Глава 2,"Функции GDI" и Глава 4,
             с функциями GDI           "Список функций"

             Установка текущего        Справочное   руководство, Том 1:
             режима рисования          Глава 4,"Список функций"
             с помощью SetROP2
                                       Руководство программиста:Глава 6
                                       "Курсор,"мышь" и клавиатура"

             Растровые карты и         Руководство программиста:Глава11
             растровые операции        "Растровые карты"


