{\rtf1\ansi \deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\froman Symbol;}{\f2\fswiss Helv;}{\f3\fmodern Courier;}{\f4\fmodern elite;}{\f5\fmodern prestige;}{\f6\fmodern lettergothic;}{\f7\fmodern gothicPS;}{\f8\fmodern cubicPS;}
{\f9\fmodern LinePrinter;}{\f10\fswiss Helvetica;}{\f11\fmodern avantegarde;}{\f12\fmodern spartan;}{\f13\fmodern metro;}{\f14\fmodern presentation;}{\f15\fmodern APL;}{\f16\fmodern OCRA;}{\f17\fmodern OCRB;}{\f18\froman emperorPS;}
{\f19\froman madaleine;}{\f20\froman zapf humanist;}{\f21\froman classic;}{\f22\froman roman f;}{\f23\froman roman g;}{\f24\froman roman h;}{\f25\froman timesroman;}{\f26\froman century;}{\f27\froman palatino;}{\f28\froman souvenir;}
{\f29\froman garamond;}{\f30\froman caledonia;}{\f31\froman bodini;}{\f32\froman university;}{\f33\fscript Script;}{\f34\fscript scriptPS;}{\f35\fscript script c;}{\f36\fscript script d;}{\f37\fscript commercial script;}{\f38\fscript park avenue;}
{\f39\fscript coronet;}{\f40\fscript script h;}{\f41\fscript greek;}{\f42\froman kana;}{\f43\froman hebrew;}{\f44\froman roman s;}{\f45\froman russian;}{\f46\froman roman u;}{\f47\froman roman v;}{\f48\froman roman w;}{\f49\fdecor narrator;}
{\f50\fdecor emphasis;}{\f51\fdecor zapf chancery;}{\f52\fdecor decor d;}{\f53\fdecor old english;}{\f54\fdecor decor f;}{\f55\fdecor decor g;}{\f56\fdecor cooper black;}{\f57\fnil linedraw;}{\f58\fnil math7;}{\f59\fnil math8;}{\f60\fnil bar3of9;}
{\f61\fnil EAN;}{\f62\fnil pcline;}{\f63\fnil tech h;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}
{\stylesheet{\fs20 \snext0 Normal;}}{\info{\title TrueType White Paper}{\author George Moore}{\operator George Moore}{\creatim\yr1991\mo10\dy14\hr20\min8}{\revtim\yr1991\mo10\dy14\hr21\min20}{\printim\yr1991\mo10\dy14\hr21\min15}{\version4}{\edmins14}
{\nofpages0}{\nofwords0}{\nofchars32770}{\vern8368}}\margr1440\margt1800\widowctrl\ftnbj\ftnrestart \sectd \pgnrestart\pgnlcrm\linex5199\footery984\endnhere\titlepg {\header \pard\plain \qc\sa120\sl288\tqc\tx4320\tqr\tx8640 \fs20 {\fs22 
\par }}{\footer \pard\plain \qc\sa120\sl288\tqc\tx4320\tqr\tx8640 \fs20 {\field{\*\fldinst {\fs22 page}}{\fldrslt {\fs22 v}}}{\fs22 
\par }}\pard\plain \sl288 \fs20 {\fs22 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc\sl288 {\b\fs36 TrueType Font Technology\line in Microsoft Windows Environment
\par }\pard \qc\sl288 {\b\fs28 
\par }\pard \qc\sl288 {\b\fs32 August 1991}{\b\fs26 
\par }\pard \qc\sl288 {\plain 
\par }{\fs22 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard \qc\sl288\tqc\tlul\tx7200 {\fs22 
\par 
\par 
\par }\pard \li5400\sl288 {\fs22 
\par 
\par 
\par 
\par 
\par }\pard \qc\sa120\sl240\tqr\tldot\tx8640 {\fs22 \page }{\fs26 
\par }\pard \qc\sa120\sl288\tqr\tldot\tx8640 {\b\fs26 Contents
\par }\pard \tx7920\tqr\tldot\tx8640 {\b\f25\fs26 Preface}{\f25\fs26 \tab iii
\par }\pard \sl240\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Setting the Stage: Developments in Digital Fonts\tab iii
\par \tab WYSIWYG Concerns\tab iii
\par \tab Outline Fonts vs. Bitmap Fonts\tab iv
\par }\pard \sl360\tx7920\tqr\tldot\tx8640 {\b\f25\fs26 Introduction}{\f25\fs26 \tab 1}{\b\f25\fs26 
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Fonts Under the Windows Environment Version 3.0\tab 2
\par }\pard \tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Interactions Between Windows, Applications and Fonts\tab 2
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Third-party Type Managers and Downloadable Fonts\tab 3
\par }\pard \sl360\tx7920\tqr\tldot\tx8640 {\b\f25\fs26 About TrueType}{\f25\fs26 \tab 5
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab How TrueType Works\tab 5
\par }\pard \tx450\tqr\tldot\tx8640 {\f25\fs26 \tab Why Microsoft Selected TrueType Over Other Outline
\par }\pard \tx630\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Font Technologies\tab 6
\par }\pard \tx450\tqr\tldot\tx8640 {\f25\fs26 \tab Key Technical Differences Between TrueType and Other
\par }\pard \tx630\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Outline Font Technologies\tab 7
\par }\pard \tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Intelligence in the Hints\tab 7
\par \tab Support for Virtually any Hinting Technology\tab 7
\par \tab Storage of Metrics With the Fonts\tab 8
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Third-party TrueType Support\tab 8
\par }\pard \sl360\tx7920\tqr\tldot\tx8640 {\b\f25\fs26 How Fonts Will Work in Windows 3.1}{\f25\fs26 \tab 10
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Storage Requirements\tab 10
\par }\pard \tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Integration with the Operating Environment\tab 10
\par \tab Execution Speed\tab 11
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab WYSIWYG Performance\tab 11
\par }\pard \sl360\tx7920\tqr\tldot\tx8640 {\b\f25\fs26 Printing from the Windows Environment Version 3.1}{\f25\fs26 \tab 13
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab Dot-Matrix and Ink-jet Printers\tab 13
\par }\pard \tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab PCL Laser Printers\tab 13
\par \tab PostScript Laser Printers\tab 14
\par }\pard \sl360\tx450\tx7920\tqr\tldot\tx8640 {\f25\fs26 \tab TrueImage Laser Printers\tab 15
\par }{\b\f25\fs26 Conclusion}{\f25\fs26 \tab 16
\par }\pard \qc\sa288\sl360\keepn {\plain \f25 \page }{\b\fs26 Preface:\line Key Font Issues Facing Personal Computer Users Today
\par }\pard \ri270\sa120\sl288\tx9540 {\fs22 
Two font-related issues have a direct bearing on Microsoft's decision to incorporate TrueType font technology into the Windows environment.  One is end users' desire for an increasingly high level of WYSIWYG (what you see is what you get), so that screen 
display matches the printed output as closely as possible.  The other is the advent of outline font technology, which offers far more flexibility than bitmap fonts.  This preface presents a brief 
overview of both issues.  If you are already familiar with them, you can skip this section and go straight to the body of the document.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b WYSIWYG Concerns 
\par }\pard \sa120\sl288 {\fs22 If users are working in a graphical environment with a WYSIWYG-oriented applica\-tion, what they see on their screen will look exactly the same as what they see on the printed page, right?  Well, not quite.
\par }\pard \sa120\sl288 {\fs22 First, a screen display will never perfectly match a printer display because screens have lower resolution than printers.  With fewer pixels availabl
e to represent a character of a given size, screen representations will always look coarser than printer representations.  Users, however, have learned to live with this inherent hardware discrepancy.
\par }\pard \sa120\sl288 {\fs22 A larger issue for users is differences between }{\i\fs22 screen fonts}{\fs22 , used to display characters on the screen, and }{\i\fs22 printer fonts}{\fs22 
, used in the printer.  Screen fonts have traditionally been supplied as part of the operating environment; printer fonts are usually supplied by the printer manufacturer.  Since the two ma
y differ in both character set (e.g., inclusion of symbols beyond the basic alphabet) and metrics (height, width, line width), the screen display generally deviates to some degree from the printed output.  WYSIWYG-oriented applications work hard to adjust
 the appearance of fonts on the screen to make them match the printed page as closely as possible.  However, for users who need precise control over the page layout, the results may not be close enough.
\par }\pard \sa120\sl288 {\fs22 Until recently, there were only two ways to achieve a
 level of WYSIWYG high enough to satisfy these users.  One was to purchase third-party type managers, which provide screen fonts to match the printer fonts; the other was to purchase downloadable fonts for both screen and printer (if the printer supports 
download\-able fonts).  These solutions not only can be expensive, but also can involve installation difficulties that may complicate the printing process.  What's more, because these type solu\-tions are not integrated with the }{\f25\fs22 
operating environment, they }{\fs22 may need to be updated to work with later versions of the environment.
\par }\pard \sa120\sl288 {\fs22 \page 
So, while great strides have been made in recent years in improving the level of WYSIWYG between screen and printer, layout-oriented end users are asking for still more WYSIWYG.  An ideal solution would be a font technology that:
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab O}{\f25\fs22 ffers high }{\fs22 flexibility}{\f25\fs22 , speed, legibility and ease of use
\par }{\f1\fs22 \'95}{\fs22 \tab I}{\f25\fs22 s integrated with the operating environment
\par }{\f1\fs22 \'95}{\fs22 \tab M}{\f25\fs22 aintains }{\fs22 compatibility}{\f25\fs22  with existing font }{\fs22 technologies
\par }\pard \sa120\sl288 {\fs22 Outline font technology in general meets many of these }{\f25\fs22 requirements, and }{\fs22 TrueType outline font technology meets all of them.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Outline Fonts vs. Bitmap Fonts
\par }\pard \sa120\sl288 {\fs22 While bitmap fonts used to be the only choice available for }{\f25\fs22 personal computers, today}{\fs22  users can choose between two types of font technology:  bitmap and outline.
\par }\pard \sa120\sl288 {\fs22 
Bitmap fonts create characters by arranging bits (or pixels) in specific patterns.  Because there is no good way to extrapolate between one font size and another, bitmap fonts have to be purchased and stored separately for each point size.
\par }\pard \sa120\sl288 {\fs22 
Outline font technologies, in contrast, use mathematical descriptions of characters that represent each character as an outline, consisting of a series of points.  These mathematical descriptions can easily be scaled up or down to a wide range of sizes by
 simply multiplying or dividing them by the appropriate scaling factor.  Similarly, other computations can be applied to slant, rotate, or fill characters.  Consequently, with outline fonts users need to purchase and store each font only once to ob
tain it in a wide range of sizes and orientations.
\par Bitmap fonts can be output to the screen or printer in the same form in which they are stored.  Outline fonts, however, must go through some additional steps before they can be displayed or printed.  To begin with, after scaling, outline characters must b
e converted to bitmap form - a process known as }{\i\fs22 scan conversion}{\fs22 .  This step is necessary because most screens and printers are raster devices; that is, they display characters by turning specific pixels on
.  Scan conversion turns on each of the pixels contained within the boundaries of the character's outline.
\par }\pard \sa120\sl288 {\fs22 If outline forms were simply converted to bitmap characters without any additional action, how\-
ever, curves and diagonal lines would look rough.  This is because parts of these lines pass through only a fraction of a pixel.  If the pixel is turned on in s
uch a case, that part of the curve will be wider than the original outline; if it is left off, it will be narrower.  To solve this problem, most font technologies use }{\i\fs22 hints}{\fs22 
:  algorithms that systematically distort a scaled outline to yield a better-looking bitmap.  Since the actions taken by hints are dependent on the pixel grid (i.e., on the resolution of}{\f25\fs22  }{\fs22 
the device), the hinting process is also known as }{\i\fs22 grid-fitting}{\fs22 .
\par }\pard \sa120\sl288 {\fs22 \page Hints are especially important for characters in smaller point sizes because fewer pixels are avail\-
able to represent the character.  That is, if a character feature (such as a serif) is only two pixels wide, the decision of whether to turn a particular pixel on or off will make a much bigger differ\-
ence than if the feature is 10 pixels wide.  For the same reason, hints are more important at low reso\-lutions than at high ones.  For example, at 72 dots per inch (dpi), an uppercase 12-point char\-
acter has 8 pixels available from the baseline to the top of the character.  At 300 dpi, }{\i\fs22 the same 12-point character has 33 pixels available}{\fs22  - a significant difference.
\par }\pard \sa120\sl288 {\fs22 But even hints may not be enough to create the necessary degree of smoothness i
n a character.  Occasionally, because of the way a character fits within the pixel grid, one or more pixels that should have been turned on are turned off, resulting in a hole, or }{\i\fs22 dropout}{\fs22 
, in the character.  In Figure 1, for example, the way the curves of the "m" outline intersect with the pixel grid has resulted in two dropouts.  To solve this problem, some screen and printer rasterizers perform }{\i\fs22 continuity checks}{\fs22 
, looking for and turning on the pixels that were inadvertently dropped. 
\par }\pard \qc\sa240\sl288\phmrg\posyt\absw3600\dxfrtext504 {\i\fs22 
\par }\pard \sa480\sl240\pvpg\phmrg\posy6667\absw3600\dxfrtext504 {\i\fs22 Figure 1.  Rasterizers that perform continuity checks look for and correct "dropouts."
\par }\pard \sa120\sl288 {\fs22 
The key benefit of outline fonts is the flexibility they provide.  Users gain access to a full range of point sizes in the selected fonts without having to plan ahead and purchase every point size they might ever need.  For users who work with a wide rang
e of point sizes or output devices, a second benefit is smaller storage space requirements, since outline font technology can create different point sizes and resolutions from a single fo
nt file.  That is, for each typeface (such as Times or Helvetica) you need to store only the various faces (regular, bold, italic, bold italic), rather than having to store each face at each size.  On the other hand, a potential tradeoff is that bitmap fo
nts print slightly faster, because they don't have to go through scaling, hinting, and scan-conversion steps.
\par }\pard \sa120\sl288\tqr\tldot\tx8640 {\fs22 \sect }\sectd \pgnrestart\pgnstarts0\linex5199\footery984\endnhere {\header \pard\plain \qc\sa120\sl288\tqc\tx4320\tqr\tx8640 \fs20 {\fs22 
\par }}{\footer \pard\plain \qc\sa120\sl288\tqc\tx4320\tqr\tx8640 \fs20 {\field{\*\fldinst {\fs22 page}}{\fldrslt {\fs22 5}}}{\fs22 
\par }}\pard\plain \qc\sa288\sl288\keepn \fs20 {\plain \f25 \page }{\b\fs26 Introduction
\par }\pard \ri270\sa120\sl288\tx9540 {\fs22 Microsoft Windows graphical environment version 3.1 will ship with a new outline font tech\-nology called TrueType, which Microsoft
 has licensed from Apple Computer.  TrueType will provide end users with instant access to fonts in any point size on all output devices supported by the Windows envi\-
ronment.  It will also give them instant WYSIWYG capabilities - not only on all printers
 supported by the Windows environment but also on Apple Macintosh systems.  And because this font technology is being integrated into the Windows environment, users are assured that TrueType will continue to work with future versions of that envi\-ron\-
ment.
\par }\pard \ri270\sa120\sl288\tx9540 {\fs22 The purpose of this document is to explain why Microsoft chose to incorporate outline font technology into the Windows environment, why it chose TrueType over other outline font tech\-
nologies and how end users will benefit.  The document first explains how fonts work under the Windows environment version 3.0.  It then presents the TrueType font technology, explain\-
ing what is and how it works.  The document concludes with discussions of how fonts and printing will work under the Windows environ\-ment version 3.1 with TrueType.
\par }\pard \qc\sa288\sl288\keepn {\plain \f25 \page }{\b\fs26 Fonts Under the Windows Environment Version 3.0
\par }\pard \ri-144\sa120\sl288 {\fs22 The Windows environment ships with bitmap screen fonts in 8, 10, 12, 14, 18, and 24 points.  These come in a standard serif font (such as Times), sans serif font (such as Helvetica), and Sym\-
bol font.  In addition, Courier bitmaps are provided in 10, 12, and 15 points.  They are available for a wide variety of screen resolutions and for two dot-matrix printer resolutions (60 and 120 dpi).  The fonts are  installed by the Windows Setup p
rogram, so the user automatically has access to them.  However, screen fonts cannot be downloaded to print\-
ers, and the wide range of printers used with the Windows environment makes it prohibitive to include downloadable fonts for laser printers.  Consequently, most users end up with screen fonts that are different from their printer fonts.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Interactions Between Windows, Applications and Fonts
\par }\pard \ri-216\sa120\sl288 {\fs22 In comparison with character environments, graphical environments such as Microsoft Windows make it much easier for applications to provide a WYSIWYG display.  First, the }{\f25\fs22 
graphical nature of the environment provides more }{\fs22 flexibility in the way characters are displayed on the screen.  Second, the }{\f25\fs22 environment provides}{\fs22 
 information about printer fonts that applications can use to adjust character spacing on the screen.  As a result, applications can usually make word positions and line endings on the screen match those on the printed page, even when screen and printer f
onts differ.
\par }\pard \sa120\sl288 {\fs22 WYSIWYG-oriented applications - such as Aldus PageMaker, Microsoft Word for Win\-dows, Ami Professional and Microsoft PowerPoint - take advantage of these }{\f25\fs22 graphical }{\fs22 
capabilities, using the information provided by the Windows environment to adjust the screen display to match the printed output as closely as possible.  Initially, the applications query Windows to determine which fonts are available to the target printe
r.  They then allow the user to select from only those fonts.  Once the user selects a font, the applications again query Windows to
 find out which fonts are available for screen display, so they can pick the one that most closely matches the selected printer font.  They also query Windows to find out the metrics of the selected printer font, so they can adjust character height, width
, line spacing, and other font-related characteristics on the screen to match those of the printed output as closely as possible.  In this way, they ensure that line endings, page breaks, and line-wraps around graphics will appear the same on the screen a
s on the printed document.
\par }\pard \sa120\sl288 {\fs22 Because of resolution differences between the screen and printer, however, as well as differences in metrics between screen and printer fonts, the resulting screen display may be somewhat diffi\-
cult to read.  In addition, if the application doesn't have a
 set of screen bitmap fonts available in the exact size specified by the user, it will either alter the closest existing bitmap font, resulting in distorted characters, or use vector fonts (similar to unfilled and unhinted outlines).   Both solu\-
tions, while achieving a level of WYSI\-WYG, further decrease the legibility of the display.
\par }\pard \sa120\sl288 {\fs22 In an effort to improve }{\f25\fs22 legibility}{\fs22 
, some applications offer a draft mode of display in addition to the normal mode.  This draft mode improves legibility by not enforcing the line endings dictated by printer font metrics.  Users thus have a choice between a less legible but more WYSIWYG di
splay and a more legible but non-WYSIWYG display.
\par }\pard \sa120\sl288 {\fs22 If the user switches target printers,}{\f25\fs22  however, the appear\-ance of the }{\fs22 
document may change significantly despite all the efforts of both the application and the Windows environment.  (For example, it might have different line endings and page breaks.)  This happens because many printers have their own proprietary font techno
logy and font metrics.  As a consequence, users who do their original formatting and proofing on one printer and their final output on another may have extra work to do when they print the final version.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Third-Party Type Managers and Downloadable Fonts
\par }\pard \sa120\sl288 {\fs22 
To get around the differences between screen and printer fonts, users take one of two approaches.  Either they purchase third-party type managers, which provide screen fonts to match the printer fonts, or else they purchase prebuilt down\-
loadable printer fonts with matching screen fonts.
\par }\pard \sa120\sl288 {\fs22 Third-party type managers fall into two classes:  those that use outline font technology to generate bitmaps for the user's screen and printer (for example, Fontware and Type Director) and those that scale outlines and
 create bitmaps on the fly at whatever size and resolution the user requires (for example, Adobe Type Manager, Facelift, and Intellifont for Windows). 
\par }\pard \sa120\sl288 {\fs22 Bitmaps created by the first method are stored on the user's hard disk and installed into the Win\-
dows environment either by the type manager or through the Windows Control Panel.  This approach requires the forethought to determine in advance which point
 sizes will be needed as well as a considerable amount of time to create the fonts.  It can also require a substantial amount of disk space to store the bitmaps (depending on the number of different point sizes needed).  How\-
ever, once the fonts are created, stored and installed, they are immediately available for display or printing, just like any other Windows bitmap font.
\par }\pard \sa120\sl288 {\fs22 
 On-the-fly font scalers, in contrast, must be installed into the Windows environment in a way that allows them to intercept requests for fonts and supply their own instead of the standard Windows bitmaps.  In other words, they take over
 the font-management function from the Windows envi\-
ronment.  The advantage of this approach is that users don't have to anticipate their font needs in advance.  In addition, depending on the number of different point sizes and resolutions needed, fonts m
ay take up less storage space than with the first approach, since there is no need to store each point size and resolution separately.  However, printing can take longer with this approach because of the need to create fonts on the fly.  In addition, thes
e third-party font scalers use undocumented techniques to hook into the Windows environment.  As a result, they may need to be upgraded to continue to work with future versions of the environment.
\par }\pard \sa120\sl288 {\fs22 
Downloadable fonts are available in both bitmap and outline form.  Downloadable bitmap fonts have some of the same disadvantages as bitmap fonts in general:  They must be purchased in specific point sizes and resolutions, which limits the range of type si
zes and output devices avail\-able to the user; and they can take up a fair amount of storage space, since each point size and resolution must be stored separately.  And both bitmap and outline fonts have to be installed sepa\-
rately for each type of printer, since each printer has its own proprietary font technology.
\par }\pard \sa120\sl288 {\fs22 So today's users who want a higher level of WYSIWYG than is available with the standard Win\-
dows bitmap fonts must trade off the benefits of increasing their WYSIWYG level against the costs of acquiring, storing and supporting additional font technologies.
\par }\pard \qc\sa288\sl288\keepn {\plain \f25 \page }{\b\fs26 About TrueType
\par }\pard \sa120\sl288 {\fs22 
TrueType is an outline font technology licensed from Apple Computer that Microsoft is incorporating into version 3.1 of the Windows environment.  Microsoft has also incorporated TrueType into TrueImage, Microsoft's page description language.
\par }\pard \sa120\sl288 {\fs22 
In addition, TrueType font technology is now included in the Macintosh System 7.0.  This means that users who create documents under Windows will be able to port them not only to different Windows printers but also to Macintosh machines without wor
rying about changes in character set, font metrics, or line endings.  This benefit will be especially helpful to busi\-ness users who regularly port documents from one platform to another.
\par }\pard \sa120\sl288 {\fs22 The TrueType fonts that come with Windows will also work on the }{\f25\fs22 Macintosh without conversion.  Similarly, Macintosh }{\fs22 TrueType fonts can be ported to the Windows environment without conver\-
sion.  This portability is a major benefit to businesses and individuals that have both }{\f25\fs22 PCs and Macintoshes}{\fs22 , as they will be able to use a single set of fonts for both types of systems. 
\par }\pard \sb240\sa120\sl288\keepn {\plain \b How TrueType Works
\par }\pard \sa120\sl288 {\fs22 Unlike most outline font technologies, which require the use of a specific hinting technology, TrueType is a generalized language that supports virtually any hinting technology.  This approach provides unprece\-
dented flexibility in working with outline fonts.
\par }\pard \qc\ri-274\sl240\pvpg\phpg\posx6581\posy7229\absw3600\dxfrtext504 {\fs22 
\par }\pard \qc\ri-360\sb120\sl240\pvpg\phpg\posx6585\posy12567\absw3600\dxfrtext187 {\i\fs22 Figure 2.  How a TrueType font is created.
\par }\pard \sa240\sl288 {\fs22 Figure 2 shows the process by which a TrueType font is created.  As the figure illus\-trates, a font initially exists as "raw" digital
 font data.  Font production houses first use a conversion tool to convert this raw data into an unhinted TrueType font.  Next, they use a hinting tool to apply the hints, creating a TrueType font with high-level hints.  Finally, they compile the high-lev
el hints to low-level TrueType instructions, creating an executable TrueType font.  This is the form in which the font is stored on the user's hard disk.
\par }\pard \sa480\sl288 {\fs22 \page Figure 3 shows what happens when a user selects a TrueType font from within an application.  The application begins by asking the Windows environment for the particular charac\-
ters it needs.  In response to this request, the Windows graphics device interface (GDI) finds the appro\-priate TrueType font file and delivers it to the TrueType rasterizer.  The TrueType raster\-
izer, in turn, scales the outlines to the appropriate point size, executes the TrueType instruc\-tions (}{\f25\fs22 i.e., applies the hints), and scan-converts the scaled outlines, creating }{\fs22 bitmap versions of the char\-
acters requested by the application.
  The scan-conversion step includes a continuity check for dropout control if such a check is requested by the high-level font hints.  (Typically, to minimize delays, the hints will request such a check only for the smaller-size fonts, where dropouts are 
more criti\-cal.)  After completing the scan-conversion step, the rasterizer delivers the bitmaps to the Windows environ\-ment for display. 
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Why Microsoft Selected TrueType\line Over Other Outline Font Technologies
\par }\pard \sa120\sl288 {\fs22 In selecting an outline font technology to incorporate into the Windows environment, Microsoft looked for a solution that met the following criteria:
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab }{\b\fs22 High-quality output.}{\fs22   The quality of the print output had to be high enough to meet the requirements of professionals (e.g., graphic designers).
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab }{\b\fs22 Open technology.}{\fs22 
  Because Microsoft wanted to create a level playing field in which no vendor had an advantage over any other, the technology had to be fully documented and available for use without royalty payments.
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab }{\b\fs22 High font availability.}{\fs22   To make the f
ont technology acceptable to the marketplace, end users need to have a wide variety of fonts available to choose from.  Open technology plays a key role in promoting font availability, since it allows a variety of vendors to par\-
ticipate in creating new fonts.
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\f25\fs22 \tab }{\b\f25\fs22 High tool availability.}{\f25\fs22   The }{\fs22 
availability of font-creation tools is the single most important factor affecting the availability of the fonts themselves.  Again, this factor is related to the issue of open technology, since access to the code is required to create the tools.
\par }\pard \sa120\sl288 {\fs22 
TrueType was the only outline font technology that met all four criteria.  Its type quality was equal to or better than that of any other font technology, its code was fully documented, and numerous vendors were already in the process of developing fonts 
and font-creation tools.  Furthermore, these vendors had expressed their commitment to having the fonts and tools available by the time Microsoft planned to deliver the TrueType technology within the Windows environment.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Key Technical Differences Between TrueType and\line Other Outline Font Technologies
\par }\pard \sa120\sl288 {\fs22 
The TrueType approach differs from techniques used by other outline font technologies in several important ways.  These include the presence of most of the font intelligence in the hints rather than in the rasterizer; support for virtually any hinting tec
hnology; and storage of font metrics together with the fonts themselves.  Each of these points is discussed in more detail below.
\par }\pard \sb240\sa120\sl288\keepn {\i\fs22 Intelligence in the Hints
\par }\pard \sa120\sl288 {\fs22  With TrueType, the intell
igence is in the hints rather than in the rasterizer.  That is, all alterations to the original outline description are performed through instructions contained in the hints rather than by the rasterizer acting on its own.  This approach has three importa
nt implications.
\par First, it means that the bulk of the calculations take place during font production rather than at runtime.  In this sense, TrueType is similar to a compiled language, while outline font technologies that perform most of their work during 
execution are more like an interpreter.
\par }\pard \sa120\sl288 {\fs22 
Second, having the intelligence in the hints means that font vendors can precisely control the final appearance of the fonts _ because they apply the hints.  In contrast, with approaches that rely on the rasterizer to apply hints or perform other outline 
adjustments, font vendors have less control over the final appearance of the fonts.
\par Finally, having the intelligence in the hints allows tool vendors to improve their hinting technology without requiring users to bu
y a new rasterizer or additional printer ROM.  This means that end users will be able to upgrade their fonts for just the price of the fonts themselves, without incur\-ring any other hardware or software costs.
\par }\pard \sb240\sa120\sl288\keepn {\i\fs22 Support for Virtually Any Hinting Technology
\par }\pard \sa120\sl288 {\fs22 
Because TrueType is a low-level instruction set rather than a hinting technology, the choice of hinting style and technique is up to the font tool supplier.  This flexibility will result in far more choices for end users than outline font technologies tha
t consist of a single hinting technique.  For example: 
\par }\pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab Outline fonts using a wide variety of hinting technologies can be converted to TrueType.}
\par \pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab Font vendors will be able to use a broad range of hinting techniques to create fonts at dif\-
ferent price and quality levels, allowing end users to choose the quality level they want and pay accordingly.}
\par \pard \fi-360\li720\sa120\sl288\tx720 {\f1\fs22 \'95}{\fs22 \tab Font vendors can convert hinting techniques even for languages that don't use the Roman alphabet (such as Kanji), further broadening the TrueType font offerings available.}
\par \pard \sb240\sa120\sl288\keepn {\i\fs22 Storage of Metrics with the Fonts
\par }\pard \sa120\sl288 {\fs22 TrueType stores all metrics in the font files, including advance widths, side bearings, bounding boxes, kern tables, and PostScript names.  This practice avoids user confu\-
sion as to which metrics belong with which outline fonts _ a confusion that can easily occur with font technologies that store metrics separately from font files.  With TrueType, when docu\-
ments are ported from one system to another, the user only has to worry about whether the second s
ystem has the same font _ not whether it has the same metrics as well.  If the font is the same, the user can be certain that the documents will look the same when printed on the new system as they did on the user's display.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Third-Party TrueType Support
\par }\pard \sa120\sl288 {\fs22 Several manufacturers have already developed TrueType hinting tools, including Type Solutions (TypeMan), Letraset (FontStudio), and Altsys (Fontographer).  So, although having the font intel\-li\-
gence located in the hints does make more work for manufacturers of hinting tools, tool avail\-
ability is clearly not a problem.  As for font production houses, using a TrueType hinting tool is no different than using any other hinting tool.  Therefore, font availability won't be a problem, either.
\par }\pard \sa120\sl288 {\fs22 In fact, Bitstream, Linotype-Hell, and Monotype are already shipping TrueType fonts for the Macintosh, and all other major font vendors (with the exception of Adobe) have made commit\-ments to develop sub\-
stantial TrueType libraries for both the Macintosh and Windows platforms.  Vendors that have made these commit\-
ments include AGFA Compugraphic, Bigelow & Homes, Bitstream, Casady & Green, Castcraft, Digital Typeface Corporation, Font Bank, Kingsley/ATF, LetraSet, Micrologic Software, Photo-Lettering, Treacy Faces and URW.  
Contact individual vendors for more details and schedule information.
\par }\pard \sa120\sl288 {\fs22 In addition to creating new TrueType fonts, it's also possible to convert existing fonts to True\-Type.  Since virtually any existing hinting technology can be converted to TrueType, conv
ersion will allow users of other font technologies to experience the benefits of TrueType without losing the investment they have already made in fonts of other formats.
\par }\pard \sa120\sl288 {\fs22 A variety of third-party vendors have either introduced or announced foundry tools to convert other outline font technologies to TrueType.  For example, both Font Monger and Metamorphosis Professional convert Adobe Type\~1}{
\fs16\up6 *{\footnote \pard\plain \sl240 \fs20 {\fs16\up6 *}{\f25  A hinted Adobe outline font.}} }{\fs22 fonts to TrueType.
\par }\pard \sa120\sl288 {\fs22 End-user font development tools are also available.  Several vendors have announced such tools for
 the Macintosh, including Kingsley/ATF, Letraset, and Altsys.  Microsoft is also aware of several vendors who have plans under way to develop tools for the Windows environment, but availability dates have not yet been announced.
\par }\pard \sa120\sl288 {\fs22 
Some of these end user tools are font converters, like the foundry tools described above.  Others are font editors that allow users to either modify an existing TrueType font or draw one from scratch, applying hints manually or automatically.  Still other
s are both font converters and font editors.
\par End users may also be able to upgrade their existing non-TrueType fonts to TrueType through their font vendor.  For example, Bitstream will let licensed users of their fonts upgrade to True\-Type fonts for a nominal fee.  
\par Finally, numerous hardware vendors have licensed the TrueType rasterizer for inclusion in their printers.  Printers with a TrueType rasterizer print faster than other printers because they eliminate the need to download fonts from the computer.
\par }\pard \qc\sa288\sl288\keepn {\plain \f25 \page }{\b\fs26 How Fonts Will Work in Windows Version 3.1
\par }\pard \sa120\sl288 {\fs22 
The Windows environment version 3.1 will ship with a standard set of 13 TrueType fonts:  Times New Roman, Times New Roman Bold, Times New Roman Italic, Times New Roman Bold Italic, Arial, Arial Bold, Arial Italic, Arial Bold Italic, Courier, Courier Bold,
 Courier Italic, Courier Bold Italic, and Symbol.  It will also include the same bitmap fonts that shipped with version 3.0.  The user won't have to do anything to install these fonts:  The Windows environment will handle the process fo
r them, just as it does with the standard fonts that ship with version 3.0. 
\par Installation of additional TrueType fonts beyond the standard set of 13 will also be easy.  From the Control Panel, the user will just select Fonts and Add and specify the drive and directory where the fonts are to be found.  The Windows environment will 
then present a list of all available fonts, including True\-Type, Windows bitmap fonts and any other fonts installed on the system.  The user will simply click on the desired fonts
, and the Windows environment will automatically copy them to the system's hard disk.
\par }\pard \sa120\sl288 {\fs22 This section discusses four aspects of TrueType with respect to the Windows environment:  storage requirements, integration with the Windows environment, execution speed, and WYSIWYG performance.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Storage Requirements
\par }\pard \sa120\sl288 {\fs22 TrueType font files are generally larger than bitmap font files for a single point size because of all the hinting and metrics data they contain.  However, the size of a bitmap font increases with point siz
e and resolution, so it's difficult to quantify the degree of difference.  Furthermore, since Win\-
dows bitmap font files actually contain several point sizes in each file, the file size difference turns out to be negligible in some cases _ and to actually favor TrueType in others.
\par }\pard \ri-216\sa120\sl288 {\fs22 
The biggest difference between TrueType and bitmap fonts is that each TrueType font needs to be stored only once to be available in all point sizes, all resolutions and all output devices, while bitmap fonts need to be stored sep
arately for each point size, resolution and device.  Conse\-quently, the question of which type of font requires the most storage space ultimately depends on how many different point sizes, resolutions and devices the user needs.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Integration with the Operating Environment
\par }\pard \sa120\sl288 {\fs22 A key difference between TrueType and other outline fonts available today is that TrueType will be integrated with the operating environment.  This is more than a superficial integration:  Micro\-
soft has actually redesigned the Windows GDI imaging model to work with TrueType font tech\-
nology.  As a result, all Windows applications will be able to use TrueType fonts just as they now use the Windows bitmap fonts, without requiring any changes or upgrades.  In addition, new application progr
amming interfaces (APIs) have been created to give applications more flexibility in rotat\-ing characters and to let them}{\f25\fs22  }{\fs22 access additional font metrics, so applications can control character placement more precisely.
\par }\pard \sa120\sl288 {\fs22 A major benefit of integrating TrueType with the Windows environment is that the technology will continue to evolve with that environment.  This means that TrueType will always work right out of the box.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Execution Speed
\par }\pard \sa120\sl288 {\fs22 
The first time in a Windows session that a user selects a particular size of a TrueType font, it may be slower than today's bitmap fonts.  This is because the rasterizer has to create a bitmap version of the selected characters before they can be displaye
d or printed.  However, since the Windows environment stores the bitmap representations in a font cache as it creates them, successive uses of will be just as fast as with a standard Windows bitmap font.
\par A second benefit of this font-caching technique is that it uses the same cache space as is used for applications, allowing the Windows environment to trade off between font and application storage requirements.  That way, fonts can have as much space as i
s available to keep their performance as high as possible.  On the other hand, when an application needs more cache memory, it can be immediately freed up (that is, cache memory can be discarded).
\par }\pard \sa120\sl288 {\fs22 
In contrast, external type managers typically have fixed cache sizes.  If the user sets the cache size too small, font performance will suffer; if the user sets the cache size too high, applications may not have enough storage available to them.  And if t
he user makes cache adjust\-ments, the changes often will not take effect until the user has exited and re-entered the Windows envi\-ronment.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b WYSIWYG Performance
\par }\pard \sa120\sl288 {\fs22 TrueType fonts will wor
k on any screen and with any printer for which Windows ships a device driver.  This means that users will have the same font on their display as on the printed page, with minimal installation and maintenance efforts.
\par }\pard \sa120\sl288 {\fs22 TrueType achieves its broad printer support in large part from the Windows universal printer driver.  This univer\-sal printer driver, which contains general }{\f25\fs22 functionality }{\fs22 rather than printer-specific func\-
tionality, supports a wide range of printing devices, from dot-matrix to laser printers.  The univer\-sal driver communicates with specific printers via mini-drivers supplied by the printer manufactur\-
ers.  Since TrueType support is built into the universal printer driver, any printer that has a mini-driver that works with the universal driver will automatically have True\-
Type support.  More than 200 printers fall into this category, including both PCL and PostScript printers.
\par }\pard \sa120\sl288 {\fs22 If a user formats a document with a TrueType font, the Windows environment will automatically download the font to the laser printer, so what the user sees on the screen will be the same font as on the printed page.  (With }{
\f25\fs22 dot-matrix}{\fs22 
 and ink-jet printers, the Windows environment transmits fonts to the printer in the raster band, achieving the same result.)  Users with TrueImage laser printers will have an even easier situation:  If they select one of the TrueType fonts that is reside
nt in printer ROM, they will achieve a WYSIWYG display without the need to download.
\par }\pard \sa120\sl288 {\fs22 For users who prefer to format their document with a printer-resident font, the Windows environ\-
ment will use the TrueType screen font that most closely matches the selected printer font.  While the results will not be as WYSIWYG as when the user formats the document with a TrueType font, they may be more WYSIW
YG than without TrueType technology.  This is because the Windows environment will be able to scale the True\-
Type screen font to the exact size specified by the user (as opposed, for example, to enlarging an 18-point bitmap to simulate a 36-point bitmap, which results in "jaggies").  
\par }\pard \ri-144\sa120\sl288 {\fs22 Because the WYSIWYG capabilities provided by TrueType will apply across the full range of out\-
put devices supported by Windows, users will be able to move documents from one printer to another without any changes in their appearance, as long as the two printers have the same resolu\-tion.  So if a user creates a docu\-
ment using a 300 dpi LaserJet printer, for example, that docu\-ment can be printed on any other 300 dpi printer (such as an ink-jet or PostScript printer) without any changes in its appearance.  
\par }\pard \sa120\sl288 {\fs22 A new API to be incorporated into the Windows environment version 3.1 will extend this portabil\-ity to printers with different resolutions.  Software vendors can choose to implement this }{\f25\fs22 
API in future versions of their }{\fs22 applications.
\par }\pard \sa120\sl288 {\fs22 The new }{\f25\fs22 API will provide }{\fs22 exact character width values to appli\-
cations _ even when those values include fractional pixels.  With this information, applications will be able to scale character width as precisely as they now scale character height.
  For example, suppose a document is being moved from a 300 dpi printer to a 100 dpi printer.  If a character is 22 pixels wide on the 300 dpi printer, it would need to be one-third that width, or 7.33 pixels wide on a 100 dpi printer, to ensure that line
 and page breaks would remain the same.  But it's not pos\-
sible to turn on a fraction of a pixel, so the character on the 100 dpi printer would in fact be 7 pixels wide.  If several such fractional pixels are rounded in the same direction, the cumulative ef
fect could cause line endings to change _ which, in turn, could result in different page breaks.  With the new API, however, applications will receive exact character width information, allowing them to track the degree of error and compensate for it at t
he end of the line.  As a result, docu\-ments will print exactly the way the user intended even if they are moved to a printer with a differ\-ent resolution.  The new }{\f25\fs22 API will also allow }{\fs22 
applications to ensure that a document printed from the Windows environment will look exactly the same as one printed from a }{\f25\fs22 Macintosh.}{\fs22 
\par }\pard \sa120\sl288 {\fs22 Similarly, if the user changes to a higher-resolution display, there will be no need to install a new set of fonts because the TrueType raster\-izer can scale the fonts for any resolution.  And if the user takes a docu\-
ment created in Word for Windows and uses PowerPoint to turn it into presentation overheads, there will be no need to worry about "jaggies" or poorly proportioned characters at the larger point size.  TrueType supports all point 
sizes, so it will look as good at 36 points as it does at 10.
\par }\pard \qc\sa288\sl288\keepn {\plain \f25 \page }{\b\fs26 Printing from the Windows Environment Version 3.1
\par }\pard \sa120\sl288 {\fs22 How printing will work under the Windows environment version 3.1 depends on whether the user has a }{\f25\fs22 dot-matrix or ink-jet }{\fs22 
printer, a PCL-type laser printer, a PostScript laser printer, or a TrueImage laser printer.  The following paragraphs discuss printing with TrueType under each of these situations.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b Dot-Matrix and Ink-Jet Printers
\par }\pard \sa120\sl288 {\fs22 As with previous versions of the Windows environment, printing to a dot-matrix printer under version 3.1 involves sending a raster graphics image to the printer.  That is, the Windows envi\-
ronment sends the printer the dots that make up the image rather than sending higher-level commands.  Version 3.1 and TrueType
 can improve printing performance, however, by creating font bitmaps to match the exact resolution of the device.  Consequently, fonts printed on a dot-matrix printer will generally look better than they do today.  And since the amount of time required to
 generate a TrueType bitmap is negligible compared to the amount of time required to transmit and print the raster graphics image, users will be able to achieve this improved document appearance without any noticeable difference in performance.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b PCL Laser Printers 
\par }\pard \sa120\sl288 {\fs22 On PCL laser printers (i.e., HP LaserJets) and compatibles, TrueType performs all the font-render\-
ing in the computer and downloads bitmap versions of the fonts to the printer.  Because TrueType downloads only the specific characters that are needed, the process is faster than down\-
loading standard bitmap fonts, which involve downloading an entire font at once.  And because fonts are downloaded in bitmap form rather than as scaled outlines, the printer will be able to print True\-Type fonts even if
 it does not support scaled font technology (and, in the case of the original LaserJet, even if it does not normally accept downloaded bitmap fonts).  Printers supported include HP LaserJet, HP LaserJet Plus, HP LaserJet 500+, HP LaserJet II, HP LaserJet 
IIP, HP LaserJet IID, HP LaserJet 2000, and the entire HP LaserJet III family. 
\par }\pard \sa120\sl288 {\fs22 As far as other outline fonts are concerned, performance comparisons can be made only on PCL-5 printers (}{\f25\fs22 i.e., LaserJet IIIs and compatibles) because these are the only PCL }{\fs22 
printers that support outline font technology other than TrueType.  On these printers, printing with TrueType fonts may or may not be faster than printing with Intellifont, the outline font technology native to PCL-5 printers, depending on several factors
.  First, since TrueType downloads only the specific charac\-ters that are needed rather than the entire font, the number of different characters used in the docu\-
ment is a factor.  Second, because TrueType does its scaling, hint application, and rasterization in the computer while Intellifont uses the printer's rasterizer, the relative speed of the com\-
puter's and printer's CPU are factors.  Third, because TrueType downloads a different bitmap for each point size while Intellifont generates bitmaps in the printe
r, the number of different point sizes being used is a factor.  Other factors include the amount of printer memory and the type of com\-
munications being used (serial, parallel, or network).  With the right combination of factors, printing with TrueType fo
nts may not only be faster than printing with downloaded Intellifont fonts, but may even be faster than printing with a printer-resident font.
\par }\pard \sa120\sl288 {\fs22 For situations where printing with a printer-resident font would be faster, users can bypass the downloading process entirely by simply selecting a printer-resident font when formatting the docu\-
ment.  They will get less WYSIWYG in this case, however, because their document will be dis\-played in TrueType but printed in the printer-resident font.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b PostScript Laser Printers
\par }\pard \sa120\sl288 {\fs22 
For PostScript printers, scaling and hint application for TrueType fonts are always performed in the computer because the Type 1 rasterizer in the printer can't understand TrueType hinting instructions.  Scan conversion may be done in the computer o
r the printer, depending on the point size.  At smaller point sizes (15 points or less at 300 dpi), TrueType performs scan conversion in the computer, downloading a }{\fs16\up6  }{\fs22 Type 3}{\fs16\up6 *{\footnote \pard\plain \sl240 \fs20 {\fs16\up6 *}{
\f25 An unhinted Adobe outline font.}}}{\fs22  bitmap to the printer.  At larger point sizes, TrueType con\-
verts the font from TrueType to Type 1 in the computer and sends the printer a hinted and scaled Type 1 font.  The printer then scan-converts the outline font to create the bitmap.  The reason f
or this dual approach is that large-size type requires more bits, and sending large bitmaps to the printer can create bottlenecks that slow printing perfor\-mance.  By sending large characters in out\-
line rather than bitmap form, TrueType reduces printer bottlenecks.
\par }\pard \sa120\sl288 {\fs22 Downloading a TrueType font may or may not be slower than downloading a Type 1 font, depend\-
ing on the same set of factors listed above for PCL printers.  Type 1 fonts are similar to Intellifont fonts in that both download the entire font rather than just the needed characters and both render the fonts in the printer rather th
an in the computer.  Therefore, if the document does not use a wide variety of characters and the computer has a faster CPU than the printer, the TrueType font may be faster.  Similarly, the number of different point sizes, amount of printer memory, and t
ype of communications being used all play a role in determining which is faster.
\par }\pard \sa120\sl288 {\fs22 If users want to, they can disable the conversion of TrueType fonts to Type 1 form and download only fully rendered Type 3 bitmaps to the printer.  This will produce a higher 
level of WYSIWYG but will result in slower printing at larger point sizes (because of the large data stream being sent to the printer).
\par }\pard \sa120\sl288 {\fs22 Or, if users prefer, they can map a TrueType font to a PostScript font and avoid downloading altogether.  For example, they can map Times New Roman on the screen to Times Roman in the printer.  The docu\-
ment will then be displayed in Times New Roman and printed in Times Roman, avoiding any downloading delays.  Furthermore, unlike the case with PCL laser printers, the scree
n layout will still match the printed output.  That's because the TrueType fonts supplied with the Windows environment have the same metrics as the resident fonts in PostScript printers.
\par }\pard \sb240\sa120\sl288\keepn {\plain \b TrueImage Laser Printers
\par }\pard \sa120\sl288 {\fs22 
TrueImage printers minimize the need to download fonts at all, since they have all the Windows TrueType fonts in ROM.  In fact, some TrueImage printers may come with additional TrueType fonts beyond those provided with the Windows environment.  So the onl
y time that users with TrueImage printers w
ill need to download fonts is if they purchase additional TrueType fonts that are not resident in the printer.  Even in this situation, a TrueImage printer can always perform as well as or better than a PostScript printer because it has one additional opt
ion available to it:  downloading the native TrueType font without first converting it.  (This option is not avail\-able for a PostScript printer because the PostScript rasterizer can't understand the TrueType instruc\-tions.)
\par }\pard \qc\sa288\sl288\keepn {\plain \f25 \page }{\b\fs26 Conclusion
\par }\pard \sa120\sl288 {\fs22 The Windows enviro
nment version 3.1 with TrueType font technology offers end users a variety of benefits.  First, it gives them tremendous flexibility:  end users gain instant access to fonts at any point size on all the displays, printers, and other output devices support
ed by Windows, without having to perform separate installation procedures for each device.  Second, because the screen fonts will match the printer fonts, end users will have "instant WYSIWYG" as well.  This instant WYSIWYG capability will hold true even 
ac
ross hardware platforms, because TrueType is supported on the Apple Macintosh as well as within the Windows environment.  Many users will also experience performance benefits, since TrueType fonts can be downloaded faster than other fonts in some cases - 
and, in certain cases, can even be faster than using a printer-resident font.  In addition, screen fonts will be more legible because TrueType fonts can be scaled to the exact size required (as opposed to the "jaggies" that result from stretching a bitmap
 font).  Finally, end users will experience ease-of-use benefits.  They gain access to the core 13 fonts in all sizes without having to go through any installation procedure at all, and additional fonts can be easily added through the Windows menu system.

\par }\pard \sa120\sl288 {\fs22 
Because tools exist for converting existing outline fonts to TrueType, end users can attain all these benefits without losing their previous font investments.  Furthermore, when buying new fonts, they will have access to a broader range of quality and pri
ces than they do now. 
\par }\pard \sa120\sl288 {\fs22 
\par 
\par }}