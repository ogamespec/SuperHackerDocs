
Приложение E. Форматы команд и синхронизация
----------------------------------------------------------------

10.1 Кодирование и время выполнения команд микропроцессора i486
----------------------------------------------------------------

Для вычисления времени выполнения команды необходимо умножить
число тактов для данной команды, которое приводится в таблицах
10.1 - 10.3, на продолжительность одного такта процессора
(например, для процессора с тактовой частотой 25 МГц
продолжительность такта равна 40 нс).

Для получения более подробной информации о кодировании команд,
необходимо обратиться к разделу 10.2 Кодирование команд. В этом
разделе приводится общая структура кода команды и строго
определяется принцип кодирования всех полей команды.

Предположения, используемые  при  вычислении  времени выполнения
команд

Приводимые в таблицах данные о времени выполнения команд
микропроцессора i486 предполагают, что операнды и сами команды
находятся в кэш-памяти. В отдельной колонке указано
дополнительное ("штрафное") время для доступа к данным,
отсутствующим в кэш-памяти. Общий для данных и команд
коэффициент попадания в кэш-память превышает 90%.

Отсутствие данных в кэш-памяти заставляет микропроцессор i486
выполнить цикл внешней шины. Цикл 32-разрядной шины
микропроцессора i486 определяется тремя компонентами: r-b-w, где:

r - Число тактов для первого цикла конвейеризованного чтения
    пакета или число тактов в цикле неконвейеризованного чтения.

b - Число тактов для второго и последующих циклов
    конвейеризованного чтения.

w - Число тактов для записи

Наиболее быстрые шины микропроцессора i486 поддерживают режим
2-1-2 при состоянии ожидания 0. Именно для таких шин указано
время в дополнительном столбце таблицы (штрафное время доступа к
данным, отсутствующим в кэш-памяти). Для более медленных шин к
указанному времени добавляются r-2 такта для первого доступа к
двойному слову. Кроме того, на время выполняния команды влияют и
другие факторы.

Предположения, используемые при  вычислении  времени  выполнения
команд

1. Внешняя шина постоянно доступна для чтения и записи. В
   противном случае необходимо добавить ко времени чтения время
   ожидания освобождения шины.

2. Используются выравненые адреса. При использовании каждого
   невыравненого адреса добавляется три такта.

3. Кэш полностью заполнен перед последовательностью об-
   ращений к одной строке. Если чтение из кэша происходит во
   время заполнения кэша предыдущей командой или из-за
   предвыборки команд, необходимо время для ожидания полного
   заполнения кэша. Если процесс чтения или записи строки кэша
   продолжает выполняться, необходимо ожидание окончания
   заполнения.

4. Если вычисляется исполнительный адрес, регистр базы не
   является операндом-приемником предыдущей команды. В противном
   случае, к указанному времени необходимо добавить 1 такт.
   Исключение составляют связанные команды POP и PUSH.

5. Исполнительный адрес вычисляется при помощи регистра базы, но
   без регистра индекса. Если для вычисления исполнительного
   адреса используется регистр индекса, ко времени выполнения
   команды может добавляться 1 такт.

6. Команда, которой передается управления в результате перехода
   находится в кэш-памяти. В противном случае необходимо
   добавить r тактов для доступа к команде назначения перехода.
   Если эта команда не полностью содержится в первом считанном
   двойном слове, добавляется максимум 3b такта. Если команда не
   полностью содержится в первом 16 байтовом пакете, добавляется
   максимум r-3b такта.

7. Если нет задержки буфера записи, w тактов добавляется только
   в том случае, если все буферы записи заполнены. Как правило,
   это случается редко.

8. Смещение и непосредственный операнд не используются вместе. В
   противном случае к указанному в таблице времени может
   добавляться 1 такт.

9. Нет циклов анулирования. Добавляется один такт задержки для
   каждого цикла анулирования, если этот цикл соперничает во
   внутреннем кэше/внешней шине, когда ЦПУ 486 пытается
   использовать их.

10. Трансляция страницы попадает в TLB. Отсутствие страницы в
    TLB будет вызывать добавление 13, 21 или 28 тактов ко
    времени выполнения команды, в зависимости от того, как
    установлены биты "доступная" и "грязная" и от того, один или
    оба входа страницы необходимо установить в памяти. Это
    предполагает, что и вход страницы находится в кэше данных, и
    сбой страницы не происходит при трансляции адреса.

11. При выполнении команды не возникает исключения.  Для опреде-
    ления дополнительного времени, необходимого для обработки
    прерывания, обратитесь к Таблице времени обработки
    прерываний.

12. Команды, которые считывают несколько последовательных
    элементов данных (т.е. переключение задачи, POPA и т.д.) и
    кэш-промах предполагают начало первого обращения с
    16-байтовой границы. В противном случае может понадобится
    заполнение дополнительной строки кэша, в результате чего к
    штрафному времени при кэш-промахе добавляется не более
    (r-3b) тактов.


   Таблица 10.1 Время выполнения команд целочисленной арифметики
                     микропроцессора i486(TM)

┌───────────────────────────────────────────────────┬─────┬─────┬───────┐
│ Команда         Формат                            │  В  │Вне  │Прим.  │
│                                                   │кэше │кэше │       │
├───────────────────────────────────────────────────┼─────┼─────┼───────┤
│ЦЕЛОЧИСЛЕННЫЕ                                      │     │     │       │
│КОМАНДЫ                                            │     │     │       │
│MOV Пересылка:                                     │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр1 -   │ 1000100W │11 reg1 reg2│            │  1  │     │       │
│ регистр2     └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр2 -   │ 1000101w │11 reg1 reg2│            │  1  │     │       │
│ регистр1     └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ память -     │ 1000101w │mod reg r/m │            │  1  │  2  │       │
│ регистр      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр -    │ 1000100w │mod reg r/m │            │  1  │     │       │
│ память       └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│ константа -  │ 1100011w │11000   reg │  венные    │  1  │     │       │
│ регистр      └──────────┴────────────┘  данные    │     │     │       │
│         или                                       │     │     │       │
│              ┌──────────┐  Непосредственные       │     │     │       │
│              │ 1011w reg│     данные              │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│ константа -  │ 1100011w │mod 000 r/m │  венные    │  1  │     │       │
│ память       └──────────┴────────────┘  данные    │     │     │       │
│              ┌──────────┐                         │     │     │       │
│ память -     │ 1010000w │ Полное смещение         │  1  │     │       │
│ сумматор (AX)└──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│ сумматор (AX)│ 1010001w │ Полное смещение         │  1  │  2  │       │
│ - память     └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│MOVSX/MOVZX = Пересылка с расширением знака/нуля   │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ регистр1 -   │ 00001111 │ 1011z11w  │11 reg1 reg2││  3  │     │       │
│ регистр2     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ память -     │ 00001111 │ 1011z11w  │mod reg r/m ││  3  │  2  │       │
│ регистр      └──────────┴───────────┴────────────┘│     │     │       │
│─────────────                                      │     │     │       │
│ z  Команда                                        │     │     │       │
│─────────────                                      │     │     │       │
│ 0  MOVZX                                          │     │     │       │
│ 1  MOVSX                                          │     │     │       │
│─────────────                                      │     │     │       │
│                                                   │     │     │       │
│PUSH Занесение в стек                              │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр      │ 11111111 │ 11 110 reg │            │  4  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│         или  │ 01010 reg│                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ память       │ 11111111 │mod 110 r/m │            │  4  │  1  │   1   │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│ константа    │ 011010s0 │ Непосредственные данные │  1  │     │       │
│              └──────────┘                         │     │     │       │
│PUSHA = Занести в стек все                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 01100000 │                         │ 11  │     │       │
│              └──────────┘                         │     │     │       │
│POP  Восстановить из стека                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр      │ 10001111 │ 11 000 reg │            │  4  │  1  │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│         или  │ 01011 reg│                         │  1  │  2  │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ память       │ 10001111 │mod 000 r/m │            │  5  │  2  │   1   │
│              └──────────┴────────────┘            │     │     │       │
│POPA  = Восстановить из стека все                  │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 01100000 │                         │  9  │ 7/1 │ 16/32 │
│              └──────────┘                         │     │     │       │
│XCHG = Поменять содержимое                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ регистр1 -   │ 1000011w │11 reg1 reg2│            │  3  │     │   2   │
│ регистр2     └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│ сумматор (AX)│ 10010 reg│                         │  3  │     │   2   │
│ регистр      └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│ память -     │ 1000011w │mod reg r/m │            │  5  │     │   2   │
│ регистр      └──────────┴────────────┘            │     │     │       │
│NOP = Нет операции                                 │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10010000 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│LEA = Загрузить EA в регистр                       │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 10001101 │mod reg r/m │            │     │     │       │
│              └──────────┴────────────┘            │     │     │       │
│ без использования индексного регистра             │  1  │     │       │
│ с использованием индексного регистра              │  2  │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ ADD   Сложение                        000         │     │     │       │
│ ADC   Сложение с переносом            010         │     │     │       │
│ AND   Логическое И                    100         │     │     │       │
│ OR    Логическое ИЛИ                  001         │     │     │       │
│ SUB   Вычитание                       101         │     │     │       │
│ SBB   Вычитание с займом              011         │     │     │       │
│ XOR   Логическое ИСКЛЮЧАЮЩЕЕ ИЛИ      110         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр1 -    │ 00TTT00w │11 reg1 reg2│            │  1  │     │       │
│регистр2      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр2 -    │ 00TTT01w │11 reg1 reg2│            │  1  │     │       │
│регистр1      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память -      │ 00TTT01w │mod reg r/m │            │  2  │  2  │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр -     │ 00TTT00w │mod reg r/m │            │  3  │ 6/2 │  U/L  │
│память        └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 100000sw │ 11 TTT reg │  венные    │  1  │     │       │
│регистр       └──────────┴────────────┘  данные    │     │     │       │
│              ┌──────────┐                         │     │     │       │
│константа -   │ 00TTT10w │ Непосредственные данные │  1  │     │       │
│сумматор (AX) └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 100000sw │mod TTT r/m │  венные    │  3  │ 6/2 │  U/L  │
│память        └──────────┴────────────┘  данные    │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ INC   Увеличение на 1                 000         │     │     │       │
│ DEC   Уменьшение на 1                 001         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр       │ 1111111w │ 11 TTT reg │            │  1  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│       или    │ 01TTTreg │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память        │ 1111111w │mod TTT r/m │            │  3  │ 6/2 │  U/L  │
│              └──────────┴────────────┘            │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ NOT   Логическое отрицание (инверсия) 010         │     │     │       │
│ NEG   Изменение знака                 011         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр       │ 1111011w │ 11 TTT reg │            │  1  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память        │ 1111011w │mod TTT r/m │            │  3  │ 6/2 │  U/L  │
│              └──────────┴────────────┘            │     │     │       │
│CMP = Сравнение                                    │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр1 -    │ 0011100w │11 reg1 reg2│            │  1  │     │       │
│регистр2      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр2 -    │ 0011101w │11 reg1 reg2│            │  1  │     │       │
│регистр1      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память -      │ 0011100w │mod reg r/m │            │  2  │  2  │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр -     │ 0011101w │mod reg r/m │            │  2  │  2  │       │
│память        └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 100000sw │ 11 111 reg │  венные    │  1  │     │       │
│регистр       └──────────┴────────────┘  данные    │     │     │       │
│              ┌──────────┐                         │     │     │       │
│константа -   │ 0011110w │ Непосредственные данные │  1  │     │       │
│сумматор (AX) └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 100000sw │mod 111 r/m │  венные    │  2  │  2  │       │
│память        └──────────┴────────────┘  данные    │     │     │       │
│                                                   │     │     │       │
│TEST = Логическое сравнение                        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр1 -    │ 1000010w │11 reg1 reg2│            │  1  │     │       │
│регистр2      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память -      │ 1000010w │mod reg r/m │            │  2  │  2  │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 1111011w │ 11 000 reg │  венные    │  1  │     │       │
│регистр       └──────────┴────────────┘  данные    │     │     │       │
│              ┌──────────┐                         │     │     │       │
│константа -   │ 1010100w │ Непосредственные данные │  1  │     │       │
│сумматор (AX) └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐Непосредст- │     │     │       │
│константа -   │ 1111011w │mod 000 r/m │  венные    │  2  │  2  │       │
│память        └──────────┴────────────┘  данные    │     │     │       │
│                                                   │     │     │       │
│MUL = Умножение (без знака)                        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │ 11 100 reg │            │     │     │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│ Сомножитель-Байт                                  │13/18│     │MN/MX,3│
│            -Слово                                 │13/26│     │MN/MX,3│
│            -Двойное слово                         │13/42│     │MN/MX,3│
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │mod 100 r/m │            │     │     │       │
│память        └──────────┴────────────┘            │     │     │       │
│ Сомножитель-Байт                                  │13/18│  1  │MN/MX,3│
│            -Слово                                 │13/26│  1  │MN/MX,3│
│            -Двойное слово                         │13/42│  1  │MN/MX,3│
│                                                   │     │     │       │
│IMUL = Целочисленное умножение (со знаком)         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │ 11 101 reg │            │     │     │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│ Сомножитель-Байт                                  │13/18│     │MN/MX,3│
│            -Слово                                 │13/26│     │MN/MX,3│
│            -Двойное слово                         │13/42│     │MN/MX,3│
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │mod 101 r/m │            │     │     │       │
│память        └──────────┴────────────┘            │     │     │       │
│ Сомножитель-Байт                                  │13/18│     │MN/MX,3│
│            -Слово                                 │13/26│     │MN/MX,3│
│            -Двойное слово                         │13/42│     │MN/MX,3│
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10101111 │11 reg1 reg2 ││     │     │       │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │       │
│ Сомножитель-Байт                                  │13/18│     │MN/MX,3│
│            -Слово                                 │13/26│     │MN/MX,3│
│            -Двойное слово                         │13/42│     │MN/MX,3│
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10101111 │ mod 101 r/m ││     │     │       │
│память        └──────────┴──────────┴─────────────┘│     │     │       │
│ Сомножитель-Байт                                  │13/18│  1  │MN/MX,3│
│            -Слово                                 │13/26│  1  │MN/MX,3│
│            -Двойное слово                         │13/42│  1  │MN/MX,3│
│регистр на    ┌──────────┬────────────┐Непосредст- │     │     │       │
│константу     │ 1111011w │ 11 100 reg │  венные    │     │     │       │
│в регистр     └──────────┴────────────┘  данные    │     │     │       │
│ Сомножитель-Байт                                  │13/18│     │MN/MX,3│
│            -Слово                                 │13/26│     │MN/MX,3│
│            -Двойное слово                         │13/42│     │MN/MX,3│
│память на     ┌──────────┬────────────┐Непосредст- │     │     │       │
│константу     │ 1111011w │ 11 100 reg │  венные    │     │     │       │
│в регистр     └──────────┴────────────┘  данные    │     │     │       │
│ Сомножитель-Байт                                  │13/18│  2  │MN/MX,3│
│            -Слово                                 │13/26│  2  │MN/MX,3│
│            -Двойное слово                         │13/42│  2  │MN/MX,3│
│                                                   │     │     │       │
│DIV = Деление (без знака)                          │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │ 11 110 reg │            │     │     │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│ Делитель -Байт                                    │ 16  │     │       │
│          -Слово                                   │ 24  │     │       │
│          -Двойное слово                           │ 40  │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │mod 110 r/m │            │     │     │       │
│память        └──────────┴────────────┘            │     │     │       │
│ Делитель -Байт                                    │ 16  │     │       │
│          -Слово                                   │ 24  │     │       │
│          -Двойное слово                           │ 40  │     │       │
│                                                   │     │     │       │
│IDIV = Целочисленное деление (со знаком)           │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │ 11 111 reg │            │     │     │       │
│регистр       └──────────┴────────────┘            │     │     │       │
│ Делитель -Байт                                    │ 19  │     │       │
│          -Слово                                   │ 27  │     │       │
│          -Двойное слово                           │ 43  │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│сумматор (AX) │ 1111011w │mod 111 r/m │            │     │     │       │
│память        └──────────┴────────────┘            │     │     │       │
│ Делитель -Байт                                    │ 20  │     │       │
│          -Слово                                   │ 28  │     │       │
│          -Двойное слово                           │ 44  │     │       │
│                                                   │     │     │       │
│CBW Преобтазование Байта в Слово                   │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011000 │                         │ 3   │     │       │
│              └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│CWD Преобтазование Слова в Двойное слово           │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011001 │                         │ 3   │     │       │
│              └──────────┘                         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ ROL   Циклический сдвиг влево         000         │     │     │       │
│ ROR   Циклический сдвиг вправо        001         │     │     │       │
│ RCL   Циклический сдвиг влево                     │     │     │       │
│       через бит переноса              010         │     │     │       │
│ RCR   Циклический сдвиг вправо                    │     │     │       │
│       через бит переноса              011         │     │     │       │
│ SHL/SHA Логический/арифметический                 │     │     │       │
│       сдвиг влево                     100         │     │     │       │
│ SHR   Логический сдвиг вправо         101         │     │     │       │
│ SAR   Арифметический сдвиг вправо     111         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│                                                   │     │     │       │
│Не через бит переноса (ROL, ROR, SAL, SAR, SHL,    │     │     │       │
│                                          и SHR)   │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр на 1  │ 1101000w │ 11 TTT reg │            │  3  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память на 1   │ 1101000w │mod TTT r/m │            │  4  │  6  │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр на CL │ 1101001w │ 11 TTT reg │            │  3  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память на CL  │ 1101001w │mod TTT r/m │            │  4  │  6  │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐ Непосредст-│     │     │       │
│регистр на    │ 1100000w │ 11 TTT reg │ венные дан-│  2  │     │       │
│константу     └──────────┴────────────┘ ные (8 бит)│     │     │       │
│              ┌──────────┬────────────┐ Непосредст-│     │     │       │
│память на     │ 1100000w │mod TTT r/m │ венные дан-│  4  │  6  │       │
│константу     └──────────┴────────────┘ ные (8 бит)│     │     │       │
│                                                   │     │     │       │
│Через бит переноса (RСL, RСR)                      │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр на 1  │ 1101000w │ 11 TTT reg │            │  3  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память на 1   │ 1101000w │mod TTT r/m │            │  4  │  6  │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│регистр на CL │ 1101001w │ 11 TTT reg │            │8/30 │     │MN/MX,4│
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│память на CL  │ 1101001w │mod TTT r/m │            │9/31 │     │MN/MX,5│
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐ Непосредст-│     │     │       │
│регистр на    │ 1100000w │ 11 TTT reg │ венные дан-│8/30 │     │MN/MX,4│
│константу     └──────────┴────────────┘ ные (8 бит)│     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ SHLD  Двойной сдвиг влево             100         │     │     │       │
│ SHRD  Двойной сдвиг вправо            101         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр       │ 00001111 │ 10TTT100 │11 reg2 reg1 ││  2  │     │       │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10TTT101 │ mod reg r/m ││  3  │  6  │       │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр на CL │ 00001111 │ 10TTT101 │11 reg2 reg1 ││  3  │     │       │
│              └──────────┴──────────┴─────────────┘│     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память на CL  │ 00001111 │ 10TTT101 │ mod reg r/m ││  4  │  5  │       │
│              └──────────┴──────────┴─────────────┘│     │     │       │
│BSWAP = Поменять местами байты                     │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 00001111 │ 11001 reg  │            │     │     │       │
│              └──────────┴────────────┘            │     │     │       │
│XADD = Поменять и сложить                          │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 1100000w │11 reg2 reg1 ││  3  │     │       │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 1100000w │ mod reg r/m ││  4  │ 6/2 │  U/L  │
│регистр       └──────────┴──────────┴─────────────┘│     │     │       │
│                                                   │     │     │       │
│CMPXCHG = Сравнить и поменять                      │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 1011000w │11 reg2 reg1 ││  6  │     │       │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 1011000w │ mod reg r/m ││7/10 │  2  │   6   │
│регистр       └──────────┴──────────┴─────────────┘│     │     │       │
│                                                   │     │     │       │
│КОМАНДЫ ПЕРЕДАЧИ УПРАВЛЕНИЯ (внутри сегмента)      │     │     │       │
│ПРИМЕЧАНИЕ: Время выполнения указано следующим     │     │     │       │
│            образом: переход выполнен/не выполнен  │     │     │       │
│                                                   │     │     │       │
│Jccc = Переход по условию ccc                      │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│8-разрядное   │ 0111tttn │ 8-раз.смещ.│            │ 3/1 │     │T/NT,23│
│смещение      └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│полное        │ 00001111 │  1000111n  │ полное     │ 3/1 │     │T/NT,23│
│смещение      └──────────┴────────────┘ смещение   │     │     │       │
│                                                   │     │     │       │
│ПРИМЕЧАНИЕ: Время выполнения указано следующим     │     │     │       │
│            образом: переход выполнен/не выполнен  │     │     │       │
│                                                   │     │     │       │
│Sccc = Установить байт по условию (Время выполнения│     │     │       │
│       указано следующим образом истина/ложь)      │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│регистр       │ 00001111 │  1001tttn │ 11 000 reg ││ 4/3 │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│память        │ 00001111 │  1001tttn │mod 000 r/m ││ 3/4 │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Мнемоника      Условие               tttn         │     │     │       │
│ сссс                                              │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ O       Переполнение                   0000       │     │     │       │
│ NO      Нет переполнения               0001       │     │     │       │
│ B/NAE   Ниже/Не выше и не равно        0010       │     │     │       │
│ NB/AE   Не ниже/Выше или равно         0011       │     │     │       │
│ E/Z     Равно/Нуль                     0100       │     │     │       │
│ NE/NZ   Не равно/Не нуль               0101       │     │     │       │
│ BE/NA   Ниже или равно/Не выше         0110       │     │     │       │
│ NBE/A   Не ниже и не равно/Выше        0111       │     │     │       │
│ S       Знак                           1000       │     │     │       │
│ NS      Отсутствие знака               1001       │     │     │       │
│ P/PE    Четность                       1010       │     │     │       │
│ NP/PO   Отсутствие четности/Нечетность 1011       │     │     │       │
│ L/NGE   Меньше/Не больше и не равно    1100       │     │     │       │
│ NL/GE   Не меньше/Больше или равно     1101       │     │     │       │
│ LE/NG   Меньше или равно/Не больше     1110       │     │     │       │
│ NLE/G   Не меньше и не равно/Больше    1111       │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│                                                   │     │     │       │
│LOOP = Цикл CX раз                                 │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11100010 │ 8-раз.смещ.│            │ 7/6 │     │L/NL,23│
│              └──────────┴────────────┘            │     │     │       │
│LOOPZ/LOOPE = Цикл с нулем/равенством              │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11100001 │ 8-раз.смещ.│            │ 9/6 │     │L/NL,23│
│              └──────────┴────────────┘            │     │     │       │
│LOOPNZ/LOOPNE = Цикл до нуля/равенства             │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11100000 │ 8-раз.смещ.│            │ 9/6 │     │L/NL,23│
│              └──────────┴────────────┘            │     │     │       │
│JCXZ = Переход, если CX = 0                        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11100011 │ 8-раз.смещ.│            │ 8/5 │     │T/NT,23│
│              └──────────┴────────────┘            │     │     │       │
│JECXZ = Переход, если ECX = 0                      │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11100011 │ 8-раз.смещ.│            │ 8/5 │     │T/NT,23│
│              └──────────┴────────────┘            │     │     │       │
│(Команды JCXZ и JECXZ отличаются префиксом размера │     │     │       │
│                                        сегмента)  │     │     │       │
│JMP = Безусловный переход (внутри сегмента)        │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│Короткий      │ 11101011 │ 8-раз.смещ.│            │  3  │     │  7,23 │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│Прямой        │ 11101011 │ полное смещение         │  3  │     │  7,23 │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│Косвенный     │ 11111111 │ 11 100 reg │            │  5  │     │  7,23 │
│ (регистр)    └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│Косвенный     │ 11111111 │mod 100 r/m │            │  5  │  5  │   7   │
│  (память)    └──────────┴────────────┘            │     │     │       │
│                                                   │     │     │       │
│CALL = Вызов (внутри сегмента)                     │     │     │       │
│              ┌──────────┐                         │     │     │       │
│Прямой        │ 11101011 │ полное смещение         │  3  │     │  7,23 │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│Косвенный     │ 11111111 │ 11 010 reg │            │  5  │     │  7,23 │
│ (регистр)    └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│Косвенный     │ 11111111 │mod 010 r/m │            │  5  │  5  │   7   │
│  (память)    └──────────┴────────────┘            │     │     │       │
│                                                   │     │     │       │
│RET = Возврат из CALL (внутри сегмента)            │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11000011 │                         │  5  │  5  │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│С добавлением │ 11000010 │16-раз.смещ.│            │  5  │  5  │       │
│константы к SP└──────────┴────────────┘            │     │     │       │
│                                                   │     │     │       │
│ENTER = Вход в процедуру                           │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11001000 │16-раз.смещ.│            │     │     │       │
│              │          │8-раз. уров.│            │     │     │       │
│              └──────────┴────────────┘            │     │     │       │
│ Уровень = 0                                       │ 14  │     │       │
│ Уровень = 1                                       │ 17  │     │       │
│ Уровень(L) > 1                                    │17+3L│     │   8   │
│                                                   │     │     │       │
│LEAVE = Возврат из процедуры                       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11001001 │                         │  5  │  1  │       │
│              └──────────┘                         │     │     │       │
│КОМАНДЫ РАБОТЫ С РАЗЛИЧНЫМИ СЕГМЕНТАМИ             │     │     │       │
│                                                   │     │     │       │
│MOV = Пересылка                                    │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│регистр -     │ 10001110 │11 sreg3 reg │           │ 3/9 │ 0/3 │RV/P,9 │
│сег. регистр  └──────────┴─────────────┘           │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│память -      │ 10001110 │mod sreg3 r/m│           │ 3/9 │ 2/5 │RV/P,9 │
│сег. регистр  └──────────┴─────────────┘           │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│сег. регистр- │ 10001110 │11 sreg3 reg │           │  3  │     │       │
│регистр       └──────────┴─────────────┘           │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│сег.регистр-  │ 10001100 │mod sreg3 r/m│           │  3  │     │       │
│память        └──────────┴─────────────┘           │     │     │       │
│                                                   │     │     │       │
│PUSH = Занесение в стек                            │     │     │       │
│              ┌───────────┐                        │     │     │       │
│сег. регистр  │000sreg2110│                        │  3  │     │       │
│(ES,CS,SS,DS) └───────────┘                        │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│сег.регистр   │ 00001111 │10 sreg3 000 │           │  3  │     │       │
│(FS или GS)   └──────────┴─────────────┘           │     │     │       │
│                                                   │     │     │       │
│POP = Восстановление из стека                      │     │     │       │
│              ┌───────────┐                        │     │     │       │
│сег. регистр  │000sreg2111│                        │ 3/9 │ 2/5 │RV/P,9 │
│(ES,CS,SS,DS) └───────────┘                        │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│сег.регистр   │ 00001111 │10 sreg3 001 │           │ 3/9 │ 2/5 │RV/P,9 │
│(FS или GS)   └──────────┴─────────────┘           │     │     │       │
│                                                   │     │     │       │
│LDS = Загрузка указателя в DS                      │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│              │ 11000101 │ mod reg r/m │           │6/12 │7/10 │RV/P,9 │
│              └──────────┴─────────────┘           │     │     │       │
│LES = Загрузка указателя в ES                      │     │     │       │
│              ┌──────────┬─────────────┐           │     │     │       │
│              │ 11000100 │ mod reg r/m │           │6/12 │7/10 │RV/P,9 │
│              └──────────┴─────────────┘           │     │     │       │
│LFS = Загрузка указателя в FS                      │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│              │ 00001111 │  10110100 │mod reg r/m ││6/12 │7/10 │RV/P,9 │
│              └──────────┴───────────┴────────────┘│     │     │       │
│LGS = Загрузка указателя в GF                      │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│              │ 00001111 │  10110101 │mod reg r/m ││6/12 │7/10 │RV/P,9 │
│              └──────────┴───────────┴────────────┘│     │     │       │
│LSS = Загрузка указателя в SS                      │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│              │ 00001111 │  10110010 │mod reg r/m ││6/12 │7/10 │RV/P,9 │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│CALL = Вызов                                       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│Прямой сегмент│ 10011010 │ беззнаковое полное      │ 18  │  2  │R,7,22 │
│              └──────────┘ смещение, селектор      │     │     │       │
│  На тот же уровнь                                 │ 20  │  3  │  P,9  │
│  На тот же уровнь через шлюз                      │ 35  │  6  │  P,9  │
│  На внутренний уровень без параметров             │ 69  │ 17  │  P,9  │
│  На внутренний уровень с x параметрами длиной в   │     │     │       │
│                                   двойное слово   │77+4x│17-n │P,11,9 │
│  На TSS                                           │37+TS│  3  │P,10,9 │
│  Через шлюз задания                               │38+TS│  3  │P,10,9 │
│              ┌──────────┬─────────────┐           │     │     │       │
│Косвенный     │ 11111111 │ mod 011 r/m │           │ 17  │  8  │  R,7  │
│   сегмент    └──────────┴─────────────┘           │     │     │       │
│  На тот же уровень                                │ 20  │ 10  │  P,9  │
│  На тот же уровень через шлюз                     │ 35  │ 13  │  P,9  │
│  На внутренний уровень без параметров             │ 69  │ 24  │  P,9  │
│  На внутренний уровень с x параметрами длиной в   │     │     │       │
│                                   двойное слово   │77+4x│24-n │P,11,9 │
│  На TSS                                           │37+TS│ 10  │P,10,9 │
│  Через шлюз задания                               │38+TS│ 10  │P,10,9 │
│                                                   │     │     │       │
│RET = Выход из CALL                                │     │     │       │
│              ┌──────────┐                         │     │     │       │
│Внутри        │ 11001011 │                         │ 13  │  8  │  R,7  │
│     сегмента └──────────┘                         │     │     │       │
│  На тот же уровень                                │ 17  │  9  │  P,9  │
│  На внешний уровень                               │ 35  │ 12  │  P,9  │
│Внутри        ┌──────────┬─────────────┐           │     │     │       │
│сугмента с    │ 11001010 │16-раз. смещ.│           │ 14  │  8  │  R,7  │
│добавлением   └──────────┴─────────────┘           │     │     │       │
│константы к SP                                     │     │     │       │
│  На тот же уровень                                │ 18  │  9  │  P,9  │
│  На внешний уровень                               │ 36  │ 12  │  P,9  │
│                                                   │     │     │       │
│JMP = Безусловный переход                          │     │     │       │
│              ┌──────────┐                         │     │     │       │
│Прямой внутри │ 10011010 │ беззнаковое полное      │ 17  │  2  │R,7,22 │
│  сегмента    └──────────┘ смещение, селектор      │     │     │       │
│  На тот же уровнь                                 │ 19  │  3  │  P,9  │
│  На тот же уровнь через шлюз                      │ 32  │  6  │  P,9  │
│  На TSS                                           │42+TS│  3  │P,10,9 │
│  Через шлюз задания                               │43+TS│  3  │P,10,9 │
│Косвенный     ┌──────────┬─────────────┐           │     │     │       │
│внутри        │ 11111111 │ mod 011 r/m │           │ 13  │  9  │ R,7,9 │
│сегмента      └──────────┴─────────────┘           │     │     │       │
│  На тот же уровнь                                 │ 18  │ 10  │  P,9  │
│  На тот же уровнь через шлюз                      │ 31  │ 13  │  P,9  │
│  На TSS                                           │41+TS│ 10  │P,10,9 │
│  Через шлюз задания                               │42+TS│ 10  │P,10,9 │
│                                                   │     │     │       │
│КОМАНДЫ ДЛЯ РАБОТЫ С БИТАМИ                        │     │     │       │
│                                                   │     │     │       │
│BT = Проверка битов                                │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр       │ 00001111 │ 10111010 │ 11 100 reg  ││  3  │     │       │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10111010 │ mod 100 r/m ││  3  │     │       │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10100011 │11 reg2 reg1 ││  3  │     │       │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10100011 │ mod reg r/m ││  8  │  2  │       │
│регистр       └──────────┴──────────┴─────────────┘│     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ Команда                               TTT         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│ BTS   Проверка и установка бита       101         │     │     │       │
│ BTR   Проверка и сброс бита           110         │     │     │       │
│ BTC   Проверка и инверсия бита        111         │     │     │       │
│───────────────────────────────────────────        │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр       │ 00001111 │ 10111010 │ 11 TTT reg  ││  6  │     │       │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10111010 │ mod TTT r/m ││  8  │ 2/0 │  U/L  │
│константа     └──────────┴──────────┴─────────────┘│     │     │       │
│              Непосредственные данные ( 8 бит )    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10TTT011 │11 reg2 reg1 ││  6  │     │       │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10TTT011 │ mod reg r/m ││ 13  │ 3/1 │  U/L  │
│регистр       └──────────┴──────────┴─────────────┘│     │     │       │
│                                                   │     │     │       │
│BSF = Прямое сканирование битов                    │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10111100 │11 reg2 reg1 ││6/42 │     │MN/MX, │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │     12│
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10111100 │ mod reg r/m ││7/43 │  2  │MN/MX, │
│регистр       └──────────┴──────────┴─────────────┘│     │     │     13│
│                                                   │     │     │       │
│BSF = Обратное сканирование битов                  │     │     │       │
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│регистр1      │ 00001111 │ 10111101 │11 reg2 reg1 ││6/103│     │MN/MX, │
│регистр2      └──────────┴──────────┴─────────────┘│     │     │     14│
│              ┌──────────┬──────────┬─────────────┐│     │     │       │
│память        │ 00001111 │ 10111101 │ mod reg r/m ││7/104│  2  │MN/MX, │
│регистр       └──────────┴──────────┴─────────────┘│     │     │     15│
│                                                   │     │     │       │
│КОМАНДЫ РАБОТЫ СО СТРОКАМИ                         │     │     │       │
│                                                   │     │     │       │
│CMPS = Сравнение Байта/Слова                       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 1010011w │                         │  8  │  6  │   16  │
│              └──────────┘                         │     │     │       │
│LOADS = Загрузка Байта/Слова  в AL/AX/EAX          │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 1010110w │                         │  5  │  2  │       │
│              └──────────┘                         │     │     │       │
│MOVS = Пересылка Байта/Слова                       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 1010010w │                         │  7  │  2  │   10  │
│              └──────────┘                         │     │     │       │
│SCAS = Сканирование Байта/Слова                    │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 1010111w │                         │  6  │  2  │       │
│              └──────────┘                         │     │     │       │
│STOS = Сохранение Байта/Слова  из AL/AX/EAX        │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 1010011w │                         │  5  │     │       │
│              └──────────┘                         │     │     │       │
│XLAT = Перекодирование строки                      │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11010111 │                         │  4  │  2  │       │
│              └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│ПОВТОРЯЮЩИЕСЯ КОМАНДЫ РАБОТЫ СО СТРОКАМИ           │     │     │       │
│                                                   │     │     │       │
│Счетчик повторений в CX или ECX                    │     │     │       │
│( С - содержимое счетчика CX или ECX )             │     │     │       │
│                                                   │     │     │       │
│REPE CMPS = Сравнение строки (найти несовпадение)  │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110011 │ 1010011w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+7c │     │ 16,17 │
│                                                   │     │     │       │
│REPNE CMPS = Сравнение строки (найти совпадение)   │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110010 │ 1010011w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+7c │     │ 16,17 │
│                                                   │     │     │       │
│REP LODS = Загрузка строки                         │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110010 │ 1010110w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+4c │     │ 16,18 │
│                                                   │     │     │       │
│REP MOVS = Пересылка строки                        │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110010 │ 1010010w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C = 1                                            │ 13  │     │  16   │
│  C > 0                                            │12+3c│     │ 16,19 │
│                                                   │     │     │       │
│REPE SCAS = Сканирование строки                    │     │     │       │
│            (найти несовпадение с AL/AX/EAX)       │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110011 │ 1010111w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+5c │     │  20   │
│                                                   │     │     │       │
│REPNE SCAS = Сканирование строки                   │     │     │       │
│            (найти совпадение с AL/AX/EAX)         │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110010 │ 1010111w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+5c │     │  20   │
│                                                   │     │     │       │
│REPE STOS = Сохранить строку                       │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11110010 │ 1010101w │              │     │     │       │
│              └──────────┴──────────┘              │     │     │       │
│  C = 0                                            │  5  │     │       │
│  C > 0                                            │7+4c │     │       │
│                                                   │     │     │       │
│УПРАВЛЕНИЕ ФЛАГОМ                                  │     │     │       │
│                                                   │     │     │       │
│CLC = Сброс флага переноса                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111000 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│STC = Установка флага переноса                     │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111001 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│CMC = Инвертирование флага переноса                │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11110101 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│CLD = Сброс флага направления                      │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111100 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│STD = Установка флага направления                  │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111101 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│CLI = Сброс флага возможности прерываний           │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111010 │                         │  5  │     │       │
│              └──────────┘                         │     │     │       │
│STI = Установка флага возможности прерываний       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11111011 │                         │  5  │     │       │
│              └──────────┘                         │     │     │       │
│LAHF = Загрузка флагов в регистр AH                │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011111 │                         │  3  │     │       │
│              └──────────┘                         │     │     │       │
│SAHF = Запись содержимого AH в регистр флагов      │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011110 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│PUSHF = Сохранение флагов в стеке                  │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011100 │                         │ 4/3 │     │ RV/P  │
│              └──────────┘                         │     │     │       │
│POPF = Восстановление флагов из стека              │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 10011101 │                         │ 9/6 │     │ RV/P  │
│              └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│ДЕСЯТИЧНАЯ АРИФМЕТИКА                              │     │     │       │
│                                                   │     │     │       │
│AAA = ASCII-коррекция после сложения               │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 00110111 │                         │  3  │     │       │
│              └──────────┘                         │     │     │       │
│AAS = ASCII-коррекция после вычитания              │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 00111111 │                         │  3  │     │       │
│              └──────────┘                         │     │     │       │
│AAM = ASCII-коррекция после умножением             │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11010100 │ 00001010 │              │ 15  │     │       │
│              └──────────┴──────────┘              │     │     │       │
│AAD = ASCII-коррекция перед деления                │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 11010101 │ 00001010 │              │ 14  │     │       │
│              └──────────┴──────────┘              │     │     │       │
│DAA = десятичная коррекция после сложения          │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 00100111 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│DAS = десятичная коррекция после вычитания         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 00101111 │                         │  2  │     │       │
│              └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│КОМАНДЫ УПРАВЛЕНИЯ ПРОЦЕССОРОМ                     │     │     │       │
│                                                   │     │     │       │
│HLT = Останов                                      │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 00101111 │                         │  4  │     │       │
│              └──────────┘                         │     │     │       │
│MOV = Пересылка из регистров или в регисры         │     │     │       │
│      Управления/Отладки/Проверки                  │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В CRO из     │ 00001111 │ 00100010  │ 11 000 reg ││ 17  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В CR2/CR3 из │ 00001111 │ 00100010  │ 11 ссс reg ││  4  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В регистр из │ 00001111 │ 00100000  │ 11 ссс reg ││  4  │     │       │
│ CRO-3        └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В DR0-3 из   │ 00001111 │ 00100011  │ 11 ссс reg ││ 10  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В DR6-7 из   │ 00001111 │ 00100011  │ 11 ссс reg ││ 10  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В регистр из │ 00001111 │ 00100001  │ 11 ссс reg ││  9  │     │       │
│ DR6-7        └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В регистр из │ 00001111 │ 00100001  │ 11 ссс reg ││  9  │     │       │
│ DR0-3        └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В TR3 из     │ 00001111 │ 00100110  │ 11 011 reg ││  4  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В TR4-7 из   │ 00001111 │ 00100110  │ 11 ссс reg ││  4  │     │       │
│ регистра     └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В регистр из │ 00001111 │ 00100010  │ 11 011 reg ││  3  │     │       │
│ TR3          └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ В регистр из │ 00001111 │ 00100100  │ 11 ссс reg ││  4  │     │       │
│ TR4-7        └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│CLTS = Сброс флага переключения задачи             │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 00001111 │ 00000110 │              │  7  │  2  │       │
│              └──────────┴──────────┘              │     │     │       │
│INVD = Сброс данных кэша                           │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 00001111 │ 00001000 │              │  4  │     │       │
│              └──────────┴──────────┘              │     │     │       │
│WBINVD = Перезапись и сброс данных кэша            │     │     │       │
│              ┌──────────┬──────────┐              │     │     │       │
│              │ 00001111 │ 00001001 │              │  5  │     │       │
│              └──────────┴──────────┘              │     │     │       │
│INVLPG = Сброс записи TLB                          │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│ память INVLPG│ 00001111 │ 00000001  │mod 111 r/m ││12/11│     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│ПРЕФИКСНЫЕ БАЙТЫ                                   │     │     │       │
│                                                   │     │     │       │
│Префикс размера адреса                             │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 01100111 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│LOCK = префикс блокирования шины                   │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11110000 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│Префикс размера операнда                           │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 01100110 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│Префикс переопределения сегмента                   │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  CS          │ 00101110 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  DS          │ 00111110 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  ES          │ 00100110 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  FS          │ 01100100 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  GS          │ 01100101 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│              ┌──────────┐                         │     │     │       │
│  SS          │ 00110110 │                         │  1  │     │       │
│              └──────────┘                         │     │     │       │
│                                                   │     │     │       │
│УПРАВЛЕНИЕ ЗАЩИТОЙ                                 │     │     │       │
│                                                   │     │     │       │
│ARPL = Коррекция запрошенного уровня               │     │     │       │
│                             превилегированности   │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│  из регистра │ 01100011 │11 reg1 reg2│            │  9  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│  из памяти   │ 01100011 │mod reg r/m │            │  9  │     │       │
│              └──────────┴────────────┘            │     │     │       │
│LAR = Загрузка прав доступа                        │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из регистра │ 00001111 │ 00000010  │11 reg1 reg2││ 11  │  3  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из памяти   │ 00001111 │ 00000010  │mod reg r/m ││ 11  │  5  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│LGDT = Загрузка глобального дескриптора            │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  регистр     │ 00001111 │ 00000001  │mod 010 r/m ││ 12  │  5  │       │
│  таблицы     └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│LIDT = Загрузка дескриптора прерываний             │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  регистр     │ 00001111 │ 00000001  │mod 011 r/m ││ 12  │  5  │       │
│  таблицы     └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│LLDT = Загрузка локального дескриптора             │     │     │       │
│  регистр     ┌──────────┬───────────┬────────────┐│     │     │       │
│  таблицы     │ 00001111 │ 00000000  │ 11 010 reg ││ 11  │  3  │       │
│  из регистра └──────────┴───────────┴────────────┘│     │     │       │
│  регистр     ┌──────────┬───────────┬────────────┐│     │     │       │
│  таблицы     │ 00001111 │ 00000000  │mod 010 r/m ││ 11  │  6  │       │
│  из памяти   └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│LMSW = Загрузка слова состояния машины             │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из регистра │ 00001111 │ 00000001  │ 11 110 reg ││ 13  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из памяти   │ 00001111 │ 00000001  │mod 110 r/m ││ 13  │  1  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│LSL = Загрузка границы сегмента                    │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из регистра │ 00001111 │ 00000011  │11 reg1 reg2││ 10  │  3  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из памяти   │ 00001111 │ 00000011  │mod reg r/m ││ 10  │  6  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│LTR = Загрузка регистра задачи                     │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из регистра │ 00001111 │ 00000000  │ 11 001 reg ││ 20  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  из памяти   │ 00001111 │ 00000000  │mod 001 r/m ││ 20  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│SGDT = Сохранение таблицы глобальных дескрипторов  │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│              │ 00001111 │ 00000001  │mod 000 r/m ││ 10  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│SIDT = Сохранение таблицы дескрипторов прерываний  │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│              │ 00001111 │ 00000001  │mod 001 r/m ││ 10  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│SLDT = Сохранение таблицы локальных дескрипторов   │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в регистре  │ 00001111 │ 00000000  │ 11 000 reg ││  2  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в памяти    │ 00001111 │ 00000000  │mod 000 r/m ││  3  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│SMSW = Сохранение слова состояния машины           │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в регистре  │ 00001111 │ 00000001  │ 11 100 reg ││  2  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в памяти    │ 00001111 │ 00000001  │mod 100 r/m ││  3  │  1  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│STR = Сохранение регистра задачи                   │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в регистре  │ 00001111 │ 00000000  │ 11 001 reg ││  2  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в памяти    │ 00001111 │ 00000000  │mod 001 r/m ││  3  │     │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│VERR = Проверка возможности чтения                 │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  регистр     │ 00001111 │ 00000000  │ 11 100 r/m ││ 11  │  3  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  память      │ 00001111 │ 00000000  │mod 100 r/m ││ 11  │  7  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│VERW = Проверка возможности записи                 │     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в регистр   │ 00001111 │ 00000000  │ 11 101 reg ││ 11  │  3  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│              ┌──────────┬───────────┬────────────┐│     │     │       │
│  в память    │ 00001111 │ 00000000  │mod 101 r/m ││ 11  │  7  │       │
│              └──────────┴───────────┴────────────┘│     │     │       │
│                                                   │     │     │       │
│КОМАНДЫ ПРЕРЫВАНИЙ                                 │     │     │       │
│                                                   │     │     │       │
│INT n = Прерывание типа n                          │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 11001101 │    тип     │            │INT+ │     │RV/P,21│
│              └──────────┴────────────┘            │  4/0│     │       │
│INT 3 = Прерывание типа 3                          │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11001100 │                         │INT+0│     │   21  │
│              └──────────┘                         │     │     │       │
│INT0 = Прерывание 4, если флаг                     │     │     │       │
│                      Переполнения установлен      │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11001110 │                         │     │     │       │
│              └──────────┘                         │     │     │       │
│  Выполнено                                        │INT+2│     │   21  │
│  Не выполнено                                     │  3  │     │   21  │
│                                                   │     │     │       │
│BOUND = Прерывание 5, если индекс массива выходит  │     │     │       │
│                                   за границы      │     │     │       │
│              ┌──────────┬────────────┐            │     │     │       │
│              │ 01100010 │mod reg r/m │            │     │     │       │
│              └──────────┴────────────┘            │     │     │       │
│  Не выходит за гшраницу                           │  7  │  7  │   21  │
│  Выходит за границу                               │INT+ │  7  │   21  │
│                                                   │  24 │     │       │
│IRET = Возврат из прерывания                       │     │     │       │
│              ┌──────────┐                         │     │     │       │
│              │ 11001111 │                         │     │     │       │
│              └──────────┘                         │     │     │       │
│  Реальный режим/защищенный режим                  │ 15  │  8  │       │
│  Защищенный режим                                 │     │     │       │
│     На тот же уровень                             │ 20  │ 11  │  9    │
│     На внешний уровень                            │ 36  │ 19  │  9    │
│     На вложенную задачу (EFLAGS.NT = 1)           │TS+32│  4  │ 9,10  │
│                                                   │     │     │       │
│Внешнее прерывание                                 │INT+ │     │  21   │
│                                                   │  11 │     │       │
│NMI = Немаскируемое прерывание                     │INT+3│     │  21   │
│                                                   │     │     │       │
│Отсутствие страницы                                │INT+ │     │  21   │
│                                                   │   24│     │       │
│Исключения VM86                                    │     │     │       │
│  CLI                                              │INT+8│     │  21   │
│  STI                                              │INT+8│     │  21   │
│  INT n                                            │INT+9│     │       │
│  PUSHF                                            │INT+9│     │  21   │
│  POPF                                             │INT+8│     │  21   │
│  IRET                                             │INT+9│     │       │
│  IN                                               │     │     │       │
│     Фиксированный порт                            │INT+ │     │  21   │
│                                                   │   50│     │       │
│     Переменный порт                               │INT+ │     │  21   │
│                                                   │   51│     │       │
│  OUT                                              │     │     │       │
│     Фиксированный порт                            │INT+ │     │  21   │
│                                                   │   50│     │       │
│     Переменный порт                               │INT+ │     │  21   │
│                                                   │   51│     │       │
│  INS                                              │INT+ │     │  21   │
│                                                   │   50│     │       │
│  OUTS                                             │INT+ │     │  21   │
│                                                   │   50│     │       │
│  REPINS                                           │INT+ │     │  21   │
│                                                   │   51│     │       │
│  REPOUTS                                          │INT+ │     │  21   │
│                                                   │   51│     │       │
└───────────────────────────────────────────────────┴─────┴─────┴───────┘

┌───────────────────────────────────────────────────────────────────────┐
│     Таблица числа тактов синхронизации при переключении задачи        │
├────────────────────────────────────┬──────────────────────────────────┤
│                                    │          Значение для TS         │
│            Метод                   ├─────────────────┬────────────────┤
│                                    │     В кэше      │    Вне кэша    │
├────────────────────────────────────┼─────────────────┼────────────────┤
│ VM/486 ЦПУ/286 TSS в 486 ЦПУ TSS   │      162        │       55       │
│ VM/486 ЦПУ/286 TSS в 286 TSS       │      143        │       31       │
│ VM/486 ЦПУ/286 TSS в VM TSS        │      140        │       37       │
└────────────────────────────────────┴─────────────────┴────────────────┘

┌───────────────────────────────────────────────────────────────────────┐
│          Таблица числа тактов синхронизации для прерываний            │
├────────────────────────────────────┬──────────────────────────────────┤
│                                    │      Значение для прерывания     │
│            Метод                   ├────────────┬──────────┬──────────┤
│                                    │   В кэше   │ Вне кэша │ Примеч.  │
├────────────────────────────────────┼────────────┼──────────┼──────────┤
│ Реальный режим                     │     26     │    2     │          │
│                                    │            │          │          │
│ Защищенный режим                   │            │          │          │
│   Прерывание/Шлюз ловушки,         │            │          │          │
│                    тот же уровень  │     44     │    6     │    9     │
│   Прерывание/Шлюз ловушки,         │            │          │          │
│                    другой уровень  │     71     │    17    │    9     │
│   Шлюз задачи                      │  37 + TS   │    3     │   9,10   │
│                                    │            │          │          │
│ Виртуальный режим                  │            │          │          │
│   Прерывание/Шлюз ловушки,         │            │          │          │
│                    другой уровень  │     82     │    17    │          │
│   Шлюз задачи                      │  37 + TS   │    3     │    10    │
└────────────────────────────────────┴────────────┴──────────┴──────────┘

Сокращение    Значение
16/32         16/32-разрядные режимы
U/L           разблокированно/заблокированно
MN/MX         минимум/максимум
L/NL          цикличный/не цикличный
RV/P          реальный или виртуальный режим/защищенный режим
R             реальный режим
P             защищенный режим
T/NT          выполнено/не выполнено
H/NH          совпадение/не совпадение

ПРИМЕЧАНИЯ:

1. Предполагается, что адрес операнда и адрес стека не попадают
   в различные наборы кэша.

2. Всегда заблокировано, никогда не присутствует в кэше.

3. Такты = 10+max(log/2(mod(m)),n)
      m =  значение множителя ( min тактов для m = 0 )
      n =  3/5 для +/-m

4. Такты = { число/длину операнда } * 7 + 9
         = 8 если число < длины опранда (8/16/32)

5. Такты = { число/длину операнда } * 7 + 9
         = 9 если число < длины опранда (8/16/32)

6. Случаи равно/не равно ( дополнительное время при отсутствии в
   кэше одинаково независимо от заблокированости ).

7. Предполагается, что адреса для чтения из памяти ( при
   косвенной адресации ), занесении в стек/удаление из стека и
   ветви не попадают в различные наборы кэша.

8. Дополнительное время при отсутствии данных в кэше: добавляются
   тактов синхронизации для каждых 16 байтов, копируемых в новый
   кадр стека.

9. Добавляются 11 тактов синхронизации для загрузки каждого
   недоступного дескриптора.

10. Ссылка на таблицу числа тактов синхронизации для переключения
    задачи для определения значения TS.

11. Добавляются 4 внешних такта синхронизации к дополнительному
    времени при отсутствии данных в кэше для каждых 16 байт.

Для примечаний 12-13: (b = 0-3, номер ненулевого байта);
                      (i = 0-1, номер ненулевого полубайта);
                      (n = 0-3, номер ненулевого бита в полубайте);

12. Такты = 8 + 4(b + 1) + 3(i+1) + 3(n+1)
          = 6, если второй операнд = 0

13. Такты = 9 + 4(b + 1) + 3(i+1) + 3(n+1)
          = 7, если второй операнд = 0

Для примечаний 14-15: (n = позиция бита 0-31)

14. Такты = 7 + 3(32 - n)
          = 6, если второй операнд = 0

15. Такты = 8 + 3(32 - n)
          = 7, если второй операнд = 0

16. Предполагается, что адреса двух строк не попадают в различные
    наборы кэша.

17. Дополнительное время при отсутствии данных в кэше: добавляются
    6 тактов синхронизации для каждых 16 сравниваемых байтов.
    Полное дополнительное время действительно только для первого
    сравнения.

18. Дополнительное время при отсутствии данных в кэше: добавляются
    2 такта синхронизации для каждых 16 байтов данных. Полное
    дополнительное время действительно только для первой
    загрузки.

19. Дополнительное время при отсутствии данных в кэше: добавляются
    4 такта синхронизации для каждых 16 пересылаемых байтов.
    ( 1 такт для первой и 3 для второй операций ).

20. Дополнительное время при отсутствии данных в кэше: добавляются
    4 такта синхронизации для каждых 16 сканируемых байтов.
    ( 2 такт для первой и для второй операций ).

21. Ссылка на таблицу числа тактов синхронизации прерываний для
    определения значения INT.

22. Число тактов включает один такт для совместного использования
    смещения и непосредственного операнда.

23. Ссылка на Предположение 6 в случае отсутствия данных в кэше.

        Таблица 10.2 Время выполнения команд ввода/вывода
                   микропроцессора i486(TM)
┌─────────────────────────────────────┬─────┬──────┬──────┬─────┬───────┐
│                                     │     │Защищ.│Защищ.│     │       │
│КОМАНДА      ФОРМАТ                  │Реал.│режим │режим │Вирт.│Примеч.│
│                                     │режим│(CPL< │(CPL> │режим│       │
│                                     │     │IOPL) │IOPL) │     │       │
├─────────────────────────────────────┼─────┼──────┼──────┼─────┼───────┤
│КОМАНДЫ ВВОДА/ВЫВОДА                 │     │      │      │     │       │
│                                     │     │      │      │     │       │
│IN = Ввод из:                        │     │      │      │     │       │
│            ┌──────────┬────────────┐│     │      │      │     │       │
│ Фиксирован-│ 1110010w │номер порта ││ 14  │  9   │  29  │ 27  │       │
│ ный порт   └──────────┴────────────┘│     │      │      │     │       │
│            ┌──────────┐             │     │      │      │     │       │
│ Переменный │ 1110110w │             │ 14  │  8   │  28  │ 27  │       │
│ порт       └──────────┘             │     │      │      │     │       │
│                                     │     │      │      │     │       │
│OUT = Вывод в:                       │     │      │      │     │       │
│            ┌──────────┬────────────┐│     │      │      │     │       │
│ Фиксирован-│ 1110011w │номер порта ││ 16  │  11  │  31  │ 29  │       │
│ ный порт   └──────────┴────────────┘│     │      │      │     │       │
│            ┌──────────┐             │     │      │      │     │       │
│ Переменный │ 1110111w │             │ 16  │  10  │  30  │ 29  │       │
│ порт       └──────────┘             │     │      │      │     │       │
│                                     │     │      │      │     │       │
│INS = Ввод Байта/Слова из порта DX   │     │      │      │     │       │
│            ┌──────────┐             │     │      │      │     │       │
│            │ 0110110w │             │ 17  │  10  │  32  │ 30  │       │
│            └──────────┘             │     │      │      │     │       │
│                                     │     │      │      │     │       │
│OUTS = Вывод Байта/Слова в порт DX   │     │      │      │     │       │
│            ┌──────────┐             │     │      │      │     │       │
│            │ 0110111w │             │ 17  │  10  │  32  │ 30  │   1   │
│            └──────────┘             │     │      │      │     │       │
│                                     │     │      │      │     │       │
│REP INS = Ввод строки                │     │      │      │     │       │
│            ┌──────────┬────────────┐│     │      │      │     │       │
│            │ 11110010 │  0110110w  ││16+8c│10+8c │30+8c │29+8c│   2   │
│            └──────────┴────────────┘│     │      │      │     │       │
│                                     │     │      │      │     │       │
│REP OUTS = Вывод строки              │     │      │      │     │       │
│            ┌──────────┬────────────┐│     │      │      │     │       │
│            │ 11100010 │  0110111w  ││17+5c│11+5c │31+5c │30+5c│   3   │
│            └──────────┴────────────┘│     │      │      │     │       │
└─────────────────────────────────────┴─────┴──────┴──────┴─────┴───────┘

ПРИМЕЧАНИЯ:

1. Во всех случаях непопадения данных в кэш, добавляется два такта.

2. c = счетчик в CX или ECX.

3. Во всех режимах при непопадения данных в кэш:
   добавляется 2 такта для каждых 16 байт. Полное дополнительное
   время действительно для второй операции.

       Таблица 10.2 Время выполнения команд вещественной арифметики
                   микропроцессора i486(TM)

┌───────────────────────────────────────────┬─────────┬────┬────────┬───┐
│                                           │ В кэше  │    │ Паралл.│   │
│КОМАНДА      ФОРМАТ                        │         │Вне │  вып.  │Пр.│
│                                           ├─────────┤кэша├────────┤   │
│                                           │Среднее  │    │Среднее │   │
│                                           │ (мин. - │    │ (мин.- │   │
│                                           │  макс.) │    │ макс.) │   │
├───────────────────────────────────────────┼─────────┼────┼────────┼───┤
│ПЕРЕДАЧА ДАННЫХ                            │         │    │        │   │
│                                           │         │    │        │   │
│FLD = Загрузка вещественного в ST(0)       │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 001│mod 000 r/m│s-i-b/смещ.││   3     │ 2  │        │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 101│mod 000 r/m│s-i-b/смещ.││   3     │ 3  │        │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 80 бит │11011 011│mod 101 r/m│s-i-b/смещ.││   6     │ 4  │        │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)  │11011 001│11000 ST(i)│            │   4     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FILD = Загрузка целого в ST(0)             │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 16 бит │11011 111│mod 000 r/m│s-i-b/смещ.││  14,5   │ 2  │    4   │   │
│ памяти └─────────┴───────────┴───────────┘│ (13-16) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 011│mod 000 r/m│s-i-b/смещ.││  11,5   │ 2  │ 4(2-4) │   │
│ памяти └─────────┴───────────┴───────────┘│ (9 -12) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 111│mod 101 r/m│s-i-b/смещ.││  16,8   │ 3  │7,8(2-8)│   │
│ памяти └─────────┴───────────┴───────────┘│ (10-18) │    │        │   │
│                                           │         │    │        │   │
│FBLD = Загрузка BCD в ST(0)                │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 111│mod 100 r/m│s-i-b/смещ.││   75    │ 4  │7,7(2-8)│   │
│        └─────────┴───────────┴───────────┘│(70-103) │    │        │   │
│                                           │         │    │        │   │
│FST = Сохранение вещественного из ST(0)    │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 001│mod 010 r/m│s-i-b/смещ.││   7     │    │        │ 1 │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 101│mod 010 r/m│s-i-b/смещ.││   8     │    │        │ 2 │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)  │11011 101│11010 ST(i)│            │   3     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FSTP = Сохранение вещественного из ST(0)   │         │    │        │   │
│       и извлечение из стека               │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 011│mod 011 r/m│s-i-b/смещ.││   7     │    │        │ 1 │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 101│mod 011 r/m│s-i-b/смещ.││   8     │    │        │ 2 │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 80 бит │11011 011│mod 111 r/m│s-i-b/смещ.││   6     │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)  │11011 101│11001 ST(i)│            │   3     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FIST = Сохранениет целого из ST(0)         │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 16 бит │11011 111│mod 010 r/m│s-i-b/смещ.││  33,4   │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│ (29-34) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 011│mod 010 r/m│s-i-b/смещ.││  32,4   │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│ (28-34) │    │        │   │
│                                           │         │    │        │   │
│FISTP = Сохранение целого из ST(0)         │         │    │        │   │
│        и извлечь из стека                 │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 16 бит │11011 111│mod 011 r/m│s-i-b/смещ.││  33,4   │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│ (29-34) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 011│mod 011 r/m│s-i-b/смещ.││  33,4   │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│ (29-34) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 111│mod 111 r/m│s-i-b/смещ.││  33,4   │    │        │   │
│ памяти └─────────┴───────────┴───────────┘│ (29-34) │    │        │   │
│                                           │         │    │        │   │
│FBSTP = Сохранение BCD из ST(0)            │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 111│mod 110 r/m│s-i-b/смещ.││   175   │    │        │   │
│        └─────────┴───────────┴───────────┘│(172-176)│    │        │   │
│                                           │         │    │        │   │
│FXCH = Обмен содержимым между ST(i) и ST(0)│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│11001 ST(i)│            │   4     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│КОМАНДЫ СРАВНЕНИЯ                          │         │    │        │   │
│                                           │         │    │        │   │
│FCOM = Сравнение ST(0) с вещественным      │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 000│mod 010 r/m│s-i-b/смещ.││   4     │ 2  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 100│mod 010 r/m│s-i-b/смещ.││   4     │ 3  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)  │11011 000│11010 ST(i)│            │   4     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FCOMP = Сравнение ST(0) с вещественным     │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 000│mod 011 r/m│s-i-b/смещ.││   4     │ 2  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│64 бита │11011 100│mod 011 r/m│s-i-b/смещ.││   4     │ 3  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)  │11011 000│11011 ST(i)│            │   4     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FCOMPP = Сравнение ST(0) с ST(i)           │         │    │        │   │
│         и извлечение из стека дважды      │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│ 1101 1001 │            │   5     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FICOM = Сравнение ST(0) с целым            │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 16 бит │11011 110│mod 010 r/m│s-i-b/смещ.││   18    │  2 │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│ (16-20) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 010│mod 010 r/m│s-i-b/смещ.││  16,5   │ 2  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│ (15-17) │    │        │   │
│                                           │         │    │        │   │
│FICOMP = Сравнение ST(0) с целым           │         │    │        │   │
│         и извлечение из стека             │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│ 16 бит │11011 110│mod 011 r/m│s-i-b/смещ.││   18    │  2 │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│ (16-20) │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│32 бита │11011 010│mod 011 r/m│s-i-b/смещ.││  16,5   │ 2  │    1   │   │
│ памяти └─────────┴───────────┴───────────┘│ (15-17) │    │        │   │
│                                           │         │    │        │   │
│FTST = Сравнение ST(0) с 0,0               │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│ 1110 0100 │            │   4     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FUCOM = Неупорядочение сравнение ST(0) с   │         │    │        │   │
│        ST(i)                              │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 101│11100 ST(i)│            │   4     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FUCOMP = Неупорядочение сравнение ST(0) с  │         │    │        │   │
│         ST(i) и извлечение из стека       │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 101│11101 ST(i)│            │   4     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FUCOMPP = Неупорядочение сравнение ST(0) с │         │    │        │   │
│          ST(i) и извлечение из стека      │         │    │        │   │
│          дважды                           │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 101│11101 1001 │            │   5     │    │    1   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FXAM = Анализирование ST(0)                │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  0101 │            │   8     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│КОНСТАНТЫ                                  │         │    │        │   │
│                                           │         │    │        │   │
│FLDZ = Загрузка 0,0 в ST(0)                │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1110 │            │   4     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLD1 = Загрузка 1,0 в ST(0)                │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1000 │            │   4     │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLDPI = Загрузка числи Пи в ST(0)          │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1011 │            │   8     │    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLDL2T = Загрузка log (10)  в ST(0)        │         │    │        │   │
│                     2                     │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1001 │            │   8     │    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLDL2E = Загрузка log (e) в ST(0)          │         │    │        │   │
│                     2                     │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1010 │            │   8     │    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLDLG2 = Загрузка log (2) в ST(0)          │         │    │        │   │
│                     10                    │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1100 │            │   8     │    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FLDLN2 = Загрузка log (2) в ST(0)          │         │    │        │   │
│                     e                     │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  1101 │            │   8     │    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│АРИФМЕТИКА                                 │         │    │        │   │
│                                           │         │    │        │   │
│FADD = Сложение вещественного с ST(0)      │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) + │11011 000│mod 000 r/m│s-i-b/смещ.││10(8-20) │ 2  │7(5-17) │   │
│32б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) + │11011 100│mod 000 r/m│s-i-b/смещ.││10(8-20) │ 3  │7(5-17) │   │
│64б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ST(0) + │11011 d00│11000 ST(i)│            │10(8-20) │    │7(5-17) │   │
│ ST(i)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FADDP = Сложение вещественного с ST(0)     │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ( ST(i) <- ST(0) + ST(i) )         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11000 ST(i)│            │10(8-20) │    │7(5-17) │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FSUB = Вычитание из ST(0)                  │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) - │11011 000│mod 100 r/m│s-i-b/смещ.││10(8-20) │ 2  │7(5-17) │   │
│32б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) - │11011 100│mod 100 r/m│s-i-b/смещ.││10(8-20) │ 3  │7(5-17) │   │
│64б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ST(0) - │11011 d00│11101 ST(i)│            │10(8-20) │    │7(5-17) │   │
│ ST(i)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FSUBP = Вычитание из ST(0)                 │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ( ST(i) <- ST(0) - ST(i) )         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11101 ST(i)│            │10(8-20) │    │7(5-17) │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FSUBR = Обратное вычитание вещественного   │         │    │        │   │
│        (Вычитание ST(0) из вещественного) │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│32б.пам.│11011 000│mod 101 r/m│s-i-b/смещ.││10(8-20) │ 2  │7(5-17) │   │
│ -ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│64б.пам.│11011 100│mod 101 r/m│s-i-b/смещ.││10(8-20) │ 3  │7(5-17) │   │
│ -ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)- │11011 d00│11100 ST(i)│            │10(8-20) │    │7(5-17) │   │
│ ST(0)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FSUBRP = Обратное вычитание вещественного  │         │    │        │   │
│         и извлечение из стека             │         │    │        │   │
│         ( ST(i) <- ST(i) - ST(0) )        │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11100 ST(i)│            │10(8-20) │    │7(5-17) │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FMUL = Умножение вещественного на ST(0)    │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) * │11011 000│mod 001 r/m│s-i-b/смещ.││   11    │ 2  │   8    │   │
│32б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) * │11011 100│mod 001 r/m│s-i-b/смещ.││   14    │ 3  │  11    │   │
│64б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ST(0) * │11011 d00│11001 ST(i)│            │   16    │    │  13    │   │
│ ST(i)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FMULP = Умножение ST(0) на ST(i)           │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ( ST(i) <- ST(0) * ST(i) )         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11001 ST(i)│            │   16    │    │  13    │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FDIV = Деление ST(0) на вещественное       │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) / │11011 000│mod 110 r/m│s-i-b/смещ.││   73    │ 2  │  70    │ 3 │
│32б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) / │11011 100│mod 100 r/m│s-i-b/смещ.││   73    │ 3  │  70    │ 3 │
│64б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ST(0) / │11011 d00│11111 ST(i)│            │   73    │    │  70    │ 3 │
│ ST(i)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FDIVP = Деление ST(0) на ST(i)             │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ( ST(i) <- ST(0) / ST(i) )         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11111 ST(i)│            │   73    │    │  70    │ 3 │
│        └─────────┴───────────┘            │         │    │        │   │
│FDIVR = Обратное деление вещественного     │         │    │        │   │
│        ( вещественное/ST(0) )             │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│32б.пам.│11011 000│mod 111 r/m│s-i-b/смещ.││   73    │ 2  │  70    │ 3 │
│ /ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│64б.пам.│11011 100│mod 111 r/m│s-i-b/смещ.││   73    │ 3  │  70    │ 3 │
│ /ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(d) <-┌─────────┬───────────┐            │         │    │        │   │
│ ST(i)/ │11011 d00│11110 ST(i)│            │   73    │    │  70    │ 3 │
│ ST(0)  └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│FDIVRP = Обратное деление вещественного    │         │    │        │   │
│        и извлечение из стека              │         │    │        │   │
│        ( ST(i) <- ST(i) / ST(0) )         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 110│11110 ST(i)│            │   73    │    │  70    │ 3 │
│        └─────────┴───────────┘            │         │    │        │   │
│FIADD = Сложение целого с ST(0)            │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) + │11011 110│mod 000 r/m│s-i-b/смещ.││24(20-35)│ 2  │7(15-17)│   │
│16б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) + │11011 010│mod 000 r/m│s-i-b/смещ.││  22,5   │ 2  │7(15-17)│   │
│32б.пам.└─────────┴───────────┴───────────┘│ (19-32) │    │        │   │
│                                           │         │    │        │   │
│FISUB = Вычитание целого из ST(0)          │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) - │11011 110│mod 100 r/m│s-i-b/смещ.││24(20-35)│ 2  │7(15-17)│   │
│16б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) - │11011 010│mod 100 r/m│s-i-b/смещ.││  22,5   │ 2  │7(15-17)│   │
│32б.пам.└─────────┴───────────┴───────────┘│ (19-32) │    │        │   │
│                                           │         │    │        │   │
│FISUBR = Обратное вычитание целого         │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│16б.пам.│11011 110│mod 101 r/m│s-i-b/смещ.││24(20-35)│ 2  │7(15-17)│   │
│ -ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│32б.пам.│11011 010│mod 101 r/m│s-i-b/смещ.││  22,5   │ 2  │7(15-17)│   │
│ -ST(0) └─────────┴───────────┴───────────┘│ (19-32) │    │        │   │
│                                           │         │    │        │   │
│FIMUL = Умножение целого на ST(0)          │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) * │11011 110│mod 001 r/m│s-i-b/смещ.││25(23-27)│ 2  │   8    │   │
│16б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) * │11011 010│mod 001 r/m│s-i-b/смещ.││  23,5   │ 2  │   8    │   │
│32б.пам.└─────────┴───────────┴───────────┘│ (22-24) │    │        │   │
│                                           │         │    │        │   │
│FIDIV = Деление целого                     │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) / │11011 110│mod 110 r/m│s-i-b/смещ.││87(85-89)│ 2  │   70   │ 3 │
│16б.пам.└─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│ST(0) / │11011 010│mod 110 r/m│s-i-b/смещ.││  85,5   │ 2  │   70   │ 3 │
│32б.пам.└─────────┴───────────┴───────────┘│ (84-86) │    │        │   │
│                                           │         │    │        │   │
│FIDIVR = Обратное деление целого           │         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│16б.пам.│11011 110│mod 111 r/m│s-i-b/смещ.││87(85-89)│ 2  │   70   │ 3 │
│ /ST(0) └─────────┴───────────┴───────────┘│         │    │        │   │
│ST(0) <-┌─────────┬───────────┬───────────┐│         │    │        │   │
│32б.пам.│11011 010│mod 111 r/m│s-i-b/смещ.││  85,5   │ 2  │   70   │ 3 │
│ /ST(0) └─────────┴───────────┴───────────┘│ (84-86) │    │        │   │
│                                           │         │    │        │   │
│FSQRT = Извлечение квадратного корня       │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1010 │            │  85,5   │    │   70   │   │
│        └─────────┴───────────┘            │ (83-87) │    │        │   │
│FSCALE = Масштабирование ST(0) на ST(i)    │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1101 │            │31(30-32)│    │    2   │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FXTRACT = Выделение компонентов в ST(0)    │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0100 │            │19(16-20)│    │ 4(2-4) │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FPREM = Частичный остаток                  │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1000 │            │   84    │    │ 2(2-8) │   │
│        └─────────┴───────────┘            │(70-138) │    │        │   │
│FPREM1 = Частичный остаток (IEEE)          │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0101 │            │  94,5   │    │   5,5  │   │
│        └─────────┴───────────┘            │(72-167) │    │ (2-16) │   │
│FRNDINT = Округление ST(0) до целого       │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1100 │            │  29,1   │    │   7,4  │   │
│        └─────────┴───────────┘            │ (21-30) │    │  (2-8) │   │
│FABS = Абсолютное значение ST(0)           │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  0001 │            │    3    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FCHS = Изменение знака ST(0)               │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1110  0000 │            │    6    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│                                           │         │    │        │   │
│ТРАНСЦЕНДЕНТНЫЕ                            │         │    │        │   │
│                                           │         │    │        │   │
│FCOS = Косинус ST(0)                       │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1111 │            │   241   │    │   2    │6,7│
│        └─────────┴───────────┘            │(193-279)│    │        │   │
│FPTAN = Частичный тангенс ST(0)            │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0010 │            │   244   │    │   70   │6,7│
│        └─────────┴───────────┘            │(200-273)│    │        │   │
│FPATAN = Частичный арктангенс ST(0)        │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0011 │            │   289   │    │5(2-17) │ 6 │
│        └─────────┴───────────┘            │(218-303)│    │        │   │
│FSIN = Синус ST(0)                         │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1110 │            │   241   │    │   2    │6,7│
│        └─────────┴───────────┘            │(193-279)│    │        │   │
│FSINCOS = Синус и косинус ST(0)            │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1011 │            │   291   │    │   2    │6,7│
│        └─────────┴───────────┘            │(243-329)│    │        │   │
│          ST(0)                            │         │    │        │   │
│F2XM1 = 2       - 1                        │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0000 │            │   242   │    │   2    │ 6 │
│        └─────────┴───────────┘            │(140-279)│    │        │   │
│FYL2X = ST(1) * log ( ST(0) )              │         │    │        │   │
│                   2                       │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0001 │            │   311   │    │   13   │ 6 │
│        └─────────┴───────────┘            │(196-329)│    │        │   │
│FYL2XP1 = ST(1) * log ( ST(0) + 1,0 )      │         │    │        │   │
│                     2                     │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  1001 │            │   313   │    │   13   │ 6 │
│        └─────────┴───────────┘            │(171-326)│    │        │   │
│                                           │         │    │        │   │
│УПРАВЛЕНИЕ ПРОЦЕССОРОМ                     │         │    │        │   │
│                                           │         │    │        │   │
│FINIT = Инициализирование                  │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 011│1110  0011 │            │    17   │    │        │ 4 │
│        └─────────┴───────────┘            │         │    │        │   │
│FSTSWAX = Сохранение слова состояния в AX  │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 111│1110  0000 │            │    3    │    │        │ 5 │
│        └─────────┴───────────┘            │         │    │        │   │
│FSTSW = Сохранение слова состояния в памяти│         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 101│mod 111 r/m│s-i-b/смещ.││    3    │    │        │ 5 │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│FLDCW = Загрузка слова управления          │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 101│mod 101 r/m│s-i-b/смещ.││    4    │ 2  │        │   │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│FSTCW = Сохранение слова управления        │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 001│mod 111 r/m│s-i-b/смещ.││    3    │    │        │ 5 │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│FCLEX = Сброс исключений                   │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 011│1110  0010 │            │    7    │    │        │ 4 │
│        └─────────┴───────────┘            │         │    │        │   │
│FSTENV = Сохранение среды                  │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 001│mod 110 r/m│s-i-b/смещ.││         │    │        │   │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│Реальный и виртуальный режимы, 16-раз. адр.│   67    │    │        │ 4 │
│Реальный и виртуальный режимы, 32-раз. адр.│   67    │    │        │ 4 │
│Защищенный режим, 16-разрядный адрес       │   56    │    │        │ 4 │
│Защищенный режим, 32-разрядный адрес       │   56    │    │        │ 4 │
│                                           │         │    │        │   │
│FLDENV = Загрузка среды                    │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 001│mod 100 r/m│s-i-b/смещ.││         │    │        │   │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│Реальный и виртуальный режимы, 16-раз. адр.│   44    │ 2  │        │   │
│Реальный и виртуальный режимы, 32-раз. адр.│   44    │ 2  │        │   │
│Защищенный режим, 16-разрядный адрес       │   34    │ 2  │        │   │
│Защищенный режим, 32-разрядный адрес       │   34    │ 2  │        │   │
│                                           │         │    │        │   │
│FSAVE = Сохранение состояния               │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 101│mod 110 r/m│s-i-b/смещ.││         │    │        │   │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│Реальный и виртуальный режимы, 16-раз. адр.│   154   │    │        │ 4 │
│Реальный и виртуальный режимы, 32-раз. адр.│   154   │    │        │ 4 │
│Защищенный режим, 16-разрядный адрес       │   143   │    │        │ 4 │
│Защищенный режим, 32-разрядный адрес       │   143   │    │        │ 4 │
│                                           │         │    │        │   │
│FRSTOR = Восстановления состояния          │         │    │        │   │
│        ┌─────────┬───────────┬───────────┐│         │    │        │   │
│        │11011 101│mod 100 r/m│s-i-b/смещ.││         │    │        │   │
│        └─────────┴───────────┴───────────┘│         │    │        │   │
│Реальный и виртуальный режимы, 16-раз. адр.│   131   │ 23 │        │   │
│Реальный и виртуальный режимы, 32-раз. адр.│   131   │ 27 │        │   │
│Защищенный режим, 16-разрядный адрес       │   120   │ 23 │        │   │
│Защищенный режим, 32-разрядный адрес       │   120   │ 27 │        │   │
│                                           │         │    │        │   │
│FINCSTP = инкремент указателя стека        │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0111 │            │    3    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FDECSTP = декремент указателя стека        │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1111  0110 │            │    3    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FFREE = Освобождение ST(i)                 │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 101│11000 ST(i)│            │    3    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│FNOP = Пустая операция                     │         │    │        │   │
│        ┌─────────┬───────────┐            │         │    │        │   │
│        │11011 001│1101  0000 │            │    3    │    │        │   │
│        └─────────┴───────────┘            │         │    │        │   │
│WAIT = Ожидание готовности                 │         │    │        │   │
│        ┌─────────┐                        │         │    │        │   │
│        │10011011 │                        │         │    │        │   │
│        └─────────┘                        │         │    │        │   │
│  (минимум/максимум)                       │   1/3   │    │        │   │
└───────────────────────────────────────────┴─────────┴────┴────────┴───┘

Примечания:

1. Если операнд равен 0, число тактов = 27.

2. Если операнд равен 0, число тактов = 28.

3. Если CW.PC указывает на 24-разрядную точность, необходимо отнять
   38 тактов. Если CW.PC указывает на 53-разрядную точность,
   необходимо отнять 11 тактов.

4. Если имеет место необработанная ошибка вычислений, к предыдущей
   команде добавляется 17 тактов.

5. Если имеет место необработанная ошибка вычислений, к предыдущей
   команде добавляется 18 тактов.

6. Во время выполнения данной команды несколько раз опрашивается
   вывод INT для обеспечения отработки прерываний с коротким
   временем ожидания.

7. Если ABS(операнд), больше Пи/4, дабавляется n тактов, где
   n = ( операнд/ (Пи/4)).

10.2 Кодирование команд
----------------------------------------------------------------

10.2.1 Общий обзор
----------------------------------------------------------------

Коды всех программ являются подмножеством общего формата команд,
отображенного на Рисунке 10.1. Код команд содержит один или два
основных байта кода операций, может содержать описатель адреса
операнда в байте "mod r/m" и "индекс масштабирования", при
необходимости - смещение или поле непосредственного операнда.

В основных байтах кода операции можно выделить отдельные поля,
содержимое которых определяет принадлежность команды к тому или
иному классу. Эти поля содержат информацию о направлении
операции и размере смещения, коды регистров или указание на
необходимость распространения знака.

Почти все команды, которые используют операнды, расположенные в
памяти, содержат байт режима адресации, следующий за байтом
(байтами) кода операции. Этот байт ("mod r/m") указывает, какой
режим адресации операндов используется в данной команде. Байт
"mod r/m" может содержать указание на использование еще одного
адресного байта, следующего непосредственно за ним. Второй байт
называется байтом "масштаба-индекса-базы" и содержит
дополнительную информацию о режиме адресации.

Для некоторых режимов адресации используется смещение, следующее
сразу за байтом "mod r/m" или байтом масштабированного индекса.
Если смещение присутствует в коде команды, оно может иметь
размер 8, 16 или 32 бита.

Если команда использует непосредственный операнд, он помещается
после байтов смещения. Непосредственный операнд, если он
присутствует, всегда является последним полем кода команды.

На Рисунке 10.1 показаны некоторые поля, которые могут
появляться в команде, например mod и r/m. Однако, не все
возможные поля приведены на этом рисунке. В некоторых командах
используются другие поля, иногда непосредственно внутри кода
операции. В Таблице 10.4 приводится полный список полей,
используемых для кодирования набора команд микропроцессора i486.
За Таблицей 10.4 следуют таблицы, содержащие подробные сведения
о каждом поле.

┌────────────────────────────────────────────────────────────────┐
│┌───────┬───────┬─────────┬───────────┐                         │
││TTTTTTT│TTTTTTT│modTTTr/m│ssindexbase│с32|16|8|нет д32|16|8|нет│
│└───────┴───────┴─────────┴───────────┘                         │
│ 7     0 7     0 7 65 32 0 7 5    2  0                          │
│ └─────────────┘ └───────┘ └─────────┘ └──────────┘ └──────────┘│
│  код операции     байт       байт       смещение    непосредст-│
│ (1 или 2 байта) "mod r/m"   "s-i-b"      адреса       венные   │
│(T представляет  └───────────────────┘  (4,2,1 байта   данные   │
│ биты кода опер.)     регистр и           или нет)  (4,2,1 байта│
│                   описатель режима                    или нет) │
│                       адресации                                │
└────────────────────────────────────────────────────────────────┘

                Рисунок 10.1. Общий формат команд

      Таблица 10.4. Поля кодов команд микропроцессора i486
┌──────────┬───────────────────────────────────────┬─────────────┐
│ Имя поля │ Описание                              │ Число битов │
├──────────┼───────────────────────────────────────┼─────────────┤
│ w        │ Описывает размер данных: байт или     │      1      │
│          │ полный размер ( Полный размер - это   │             │
│          │ 16 или 32 бита )                      │             │
│ d        │ Указывает направление операции        │      1      │
│          │ обработки данных                      │             │
│ s        │ Указывает на необходимость            │      1      │
│          │ распространения знака для непосредст- │             │
│          │ венного операнда                      │             │
│ reg      │ Описатель регистра общего назначения  │      3      │
│ mod r/m  │ Описатель режима адресации            │ 2 для mod;  │
│          │ (Эффективный адрес может быть         │ 3 для r/m   │
│          │  регистром общего назначения)         │             │
│          │                                       │             │
│ ss       │ Коэффициент масштабирования для       │      2      │
│          │ режима адресации с масштабированным   │             │
│          │ индексом                              │             │
│ index    │ Регистр общего назначения используется│      3      │
│          │ как индексный регистр                 │             │
│ base     │ Регистр общего назначения используется│      3      │
│          │ как базовый регистр                   │             │
│ sreg2    │ Описатель сегментного регистра для    │      2      │
│          │ CS, SS, DS, ES                        │             │
│ sreg3    │ Описатель сегментного регистра для    │      3      │
│          │ CS, SS, DS, ES, FS и GS               │             │
│ tttn     │ Для условных команд, описывает        │      4      │
│          │ утверждение условия или отрицание     │             │
│          │ условия                               │             │
└──────────┴───────────────────────────────────────┴─────────────┘

Примечание:

Таблицы 10.1 - 10.3 содержат форматы конкретных команд.

10.2.2 32-разрядные расширения набора команд.
----------------------------------------------------------------

Набор команд процессоров 8086/80186/80286 расширен для
микропроцессора i486 в двух ортогональных направлениях:
добавлены 32-разрядные формы всех 16-разрядных команд для
поддержки работы с 32-разрядными типами данных и создана
возможность использования 32-разрядных режимов адресации для
всех команд, которые обращаются к памяти. Это ортогональное
расширение набора набора команд обеспечивается наличием бита
Умолчания (D) в дескрипторе сегмента кода и возможностью
использования 2 префиксов к командам набора.

Использование по умолчанию 16-разрядных или 32-разрядных команд
зависит от установки бита D в дескрипторе сегмента кода, который
определяет длину (32 и 16 разрядов) для обоих операндов и
эффективного адреса, принимаемую по умолчанию при выполнении
команд данного сегмента. При работе микропроцессора i486 в
режиме реальных адресов или в режиме виртуального 8086,
дескрипторы сегмента кода не используются, но предпологается,
что бит D установлен в 0 внутри процессора ( для использования
по умолчанию 16-разрядных размеров, совместимых с процессорами
8086/80186/80286 ).

Два возможных префикса - префикс размера операнда и префикс
размера эффективного адреса, позволяют переопределять для
конкретной команды принятые по умолчанию размеры операндов и
эффективного адреса. Эти префиксы могут предшествовать байтам
кода операции и оказывать влияние только на команду, с которой
они используются. Возможно помещение перед кодом операции одного
из указанных префиксов или обоих одновременно. Указание префикса
размера операнда или префикса размера эффективного адреса перед
командой обеспечит использование размеров операндов или
эффективного адреса, "противоположных" принятым по умолчанию.
Например, если по умолчанию установлен размер данных в 32
разряда, а команде предшествует префикс размера операнда,
данная команда будет использовать 16-разрядные данные. Если же
например, размер эффективного адреса принят по умолчанию равным
16 битам, а перед командой использован префикс размера
эффективного адреса, для команды вычислится 32-разрядный
эффективный адрес.

Использование 32-разрядных расширений возможно в любом режиме
микропроцессора i486, включая режим реальных адресов и режим
виртуального 8086. В этих режимах всегда принят по умолчанию
размер, равный 16 битам и применение префиксов необходимо для
использования 32-разрядных адресов и операндов. Для команд,
использующих более одного префикса, порядок префиксов не имеет
значения.

Если переопределение размеров не используется, команды с
8-разрядными и 16-разрядными операндами не оказывают влияние на
содержимое старших битов расширенных регистров.

10.2.3 Кодирование полей целочисленных команд
----------------------------------------------------------------

Внутри команды имеются некоторые поля, определяющие выбор
регистров, режим адресации и т.д. Точное значение этих полей
определено в следующих ниже таблицах.

10.2.3.1 Кодирование поля длины операнда (w)
----------------------------------------------------------------

Некоторые команды обработки данных реализуют 32-разрядную или 16
-разрядную операцию. Такие команды могут содержать поле w,
которое определяет используемый размер операнда: байт или полный
размер операнда ( полный размер операнда определяется по
умолчанию или при помощи префикса ). Вычисление размера операнда
в зависимости от поля w приводится в следующей таблице:

 ┌────────┬────────────────────────┬──────────────────────────┐
 │ Поле w │ Размер операнда для    │   Размер операнда для    │
 │        │ 16-разрядных операций  │   32-разрядных операций  │
 ├────────┼────────────────────────┼──────────────────────────┤
 │   0    │       8 битов          │          8 битов         │
 │   1    │      16 битов          │         32 битов         │
 └────────┴────────────────────────┴──────────────────────────┘

10.2.3.2 Кодирование поля регистра общего назначения (reg)
----------------------------------------------------------------

Регистр общего назначения указывается в поле reg, которое может
предшествовать коду операции, или соответствовать полю reg байта
"mod r/m", или соответствовать полю r/m байта "mod r/m".

  Кодирование поля reg, когда поле w не присутствует в команде

 ┌────────┬────────────────────────┬──────────────────────────┐
 │  Поле  │   Выбор регистра для   │     Выбор регистра для   │
 │  reg   │ 16-разрядных операций  │   32-разрядных операций  │
 ├────────┼────────────────────────┼──────────────────────────┤
 │  000   │          AX            │           EAX            │
 │  001   │          CX            │           ECX            │
 │  010   │          DX            │           EDX            │
 │  011   │          BX            │           EBX            │
 │  100   │          SP            │           ESP            │
 │  101   │          BP            │           EBP            │
 │  110   │          SI            │           ESI            │
 │  111   │          DI            │           EDI            │
 └────────┴────────────────────────┴──────────────────────────┘

   Кодирование поля reg, когда поле w присутствует в команде

 ┌────────────────────────────────────────────────────────────┐
 │Выбор регистра при помощи поля reg для 16-разрядных операций│
 ├────────┬───────────────────────────────────────────────────┤
 │        │                 Функция поля w                    │
 │  reg   ├────────────────────────┬──────────────────────────┤
 │        │     ( когда w = 0 )    │      ( когда w = 1 )     │
 ├────────┼────────────────────────┼──────────────────────────┤
 │  000   │          AL            │           AX             │
 │  001   │          CL            │           CX             │
 │  010   │          DL            │           DX             │
 │  011   │          BL            │           BX             │
 │  100   │          AH            │           SP             │
 │  101   │          CH            │           BP             │
 │  110   │          DH            │           SI             │
 │  111   │          BH            │           DI             │
 └────────┴────────────────────────┴──────────────────────────┘
 ┌────────────────────────────────────────────────────────────┐
 │Выбор регистра при помощи поля reg для 32-разрядных операций│
 ├────────┬───────────────────────────────────────────────────┤
 │        │                 Функция поля w                    │
 │  reg   ├────────────────────────┬──────────────────────────┤
 │        │     ( когда w = 0 )    │      ( когда w = 1 )     │
 ├────────┼────────────────────────┼──────────────────────────┤
 │  000   │          AL            │           EAX            │
 │  001   │          CL            │           ECX            │
 │  010   │          DL            │           EDX            │
 │  011   │          BL            │           EBX            │
 │  100   │          AH            │           ESP            │
 │  101   │          CH            │           EBP            │
 │  110   │          DH            │           ESI            │
 │  111   │          BH            │           EDI            │
 └────────┴────────────────────────┴──────────────────────────┘

10.2.3.3 Кодирование поля сегментного регистра ( sreg )
----------------------------------------------------------------

В командах, где необходимо указать один из четырех сегментных
регистров процессора 80286, используется 2-битное поле sreg.
Для других коман данное поле может иметь 3 бита: это позволяет
использованть в них дополнительные сегментные регистры
процессора i486 - FS и GS.

                     2-разрядное поле sreg2

    ┌────────────────────────┬──────────────────────────┐
    │       2-разрядное      │     Выбор сегментного    │
    │       поле  sreg2      │         регистра         │
    ├────────────────────────┼──────────────────────────┤
    │          00            │            ES            │
    │          01            │            CS            │
    │          10            │            SS            │
    │          11            │            DS            │
    └────────────────────────┴──────────────────────────┘

                     3-разрядное поле sreg3

    ┌────────────────────────┬──────────────────────────┐
    │       3-разрядное      │     Выбор сегментного    │
    │       поле  sreg3      │         регистра         │
    ├────────────────────────┼──────────────────────────┤
    │         000            │            ES            │
    │         001            │            CS            │
    │         010            │            SS            │
    │         011            │            DS            │
    │         100            │            FS            │
    │         101            │            GS            │
    │         110            │     не используется      │
    │         111            │     не используется      │
    └────────────────────────┴──────────────────────────┘

10.2.3.4 Кодирование режима адресации
----------------------------------------------------------------

За исключением специальных команд, таких как PUSH и POP, для
которых режим адресации определен заранее, режим адресации для
текущей команды описывается в байтах адресации. Этот байт следует
за основным кодом операции. Возможно использование двух байтов
адресации: "mod r/m" (первый байт) и "s-i-b" (второй байт,
"масшта-индекс-база")

Байт "s-i-b" присутствует в команде, если используется режим 32-
разрядной адресации и байт "mod r/m" содержит поля r/m = 100 и
mod = 00, 01 или 10. Если байт "масштабирование-индекс-база"
присутствует в команде, 32-разрядный режим адресации есть
функция от полей mod, ss, index и base.

Первый байт адресации ( байт "mod r/m" ) содержит также три бита
( на Рисунке 10.1 они обозначены TTT ), которые иногда
используются как расширение основного кода операции. В других
случаях, эти три бита могут использоваться в качестве поля reg.

При вычислении эффективного адреса используется 16-разрядный или
32-разрядный формат. Для вычисления 16-разрядного эффективного
адреса используются 16-разрядные компоненты, а для 32-разрядного
- 32-разрядные компоненты. При использовании 16-разрядной
адресации байт "mod r/m" интерпретируется как описатель
16-разрядного режима адресации, а при использовании 32-разрядной
адресации байт "mod r/m" интерпретируется как описатель
32-разрядного режима адресации.

Следующие далее таблицы содержат определения всех возможных
способов кодирования для всех 16- и 32-разнядных режимов
адресации.

           Кодирование 16-разрядного режима адресации
                      в байте "mod r/m"

     ┌──────────────────┬────────────────────────────────┐
     │     mod r/m      │        Эффективный адрес       │
     ├──────────────────┼────────────────────────────────┤
     │     00 000       │        DS:[BX + SI]            │
     │     00 001       │        DS:[BX + DI]            │
     │     00 010       │        SS:[BP + SI]            │
     │     00 011       │        SS:[BP + DI]            │
     │     00 100       │        DS:[SI]                 │
     │     00 101       │        DS:[DI]                 │
     │     00 110       │        DS:d16                  │
     │     00 111       │        DS:[BX]                 │
     │                  │                                │
     │     01 000       │        DS:[BX + SI + d8]       │
     │     01 001       │        DS:[BX + DI + d8]       │
     │     01 010       │        SS:[BP + SI + d8]       │
     │     01 011       │        SS:[BP + DI + d8]       │
     │     01 100       │        DS:[SI + d8]            │
     │     01 101       │        DS:[DI + d8]            │
     │     01 110       │        SS:[BP + d8]            │
     │     01 111       │        DS:[BX + d8]            │
     └──────────────────┴────────────────────────────────┘
     ┌──────────────────┬────────────────────────────────┐
     │     mod r/m      │        Эффективный адрес       │
     ├──────────────────┼────────────────────────────────┤
     │     10 000       │        DS:[BX + SI + d16]      │
     │     10 001       │        DS:[BX + DI + d16]      │
     │     10 010       │        SS:[BP + SI + d16]      │
     │     10 011       │        SS:[BP + DI + d16]      │
     │     10 100       │        DS:[SI + d16]           │
     │     10 101       │        DS:[DI + d16]           │
     │     10 110       │        SS:[BP + d16]           │
     │     10 111       │        DS:[BX + d16]           │
     │                  │                                │
     │     11 000       │        регистр: см. ниже       │
     │     11 001       │        регистр: см. ниже       │
     │     11 010       │        регистр: см. ниже       │
     │     11 011       │        регистр: см. ниже       │
     │     11 100       │        регистр: см. ниже       │
     │     11 101       │        регистр: см. ниже       │
     │     11 110       │        регистр: см. ниже       │
     │     11 111       │        регистр: см. ниже       │
     └──────────────────┴────────────────────────────────┘
     ┌───────────────────────────────────────────────────┐
     │         Выбор регистра при помощи поля r/m        │
     │              для 16-разрядных операций            │
     ├─────────┬─────────────────────────────────────────┤
     │         │              Функции поля w             │
     │ mod r/m ├───────────────────┬─────────────────────┤
     │         │  ( когда w = 0 )  │    ( когда w = 1 )  │
     ├─────────┼───────────────────┼─────────────────────┤
     │ 11 000  │        AL         │         AX          │
     │ 11 001  │        CL         │         CX          │
     │ 11 010  │        DL         │         DX          │
     │ 11 011  │        BL         │         BX          │
     │ 11 100  │        AH         │         SP          │
     │ 11 101  │        CH         │         BP          │
     │ 11 110  │        DH         │         SI          │
     │ 11 111  │        BH         │         DI          │
     └─────────┴───────────────────┴─────────────────────┘
     ┌───────────────────────────────────────────────────┐
     │         Выбор регистра при помощи поля r/m        │
     │              для 32-разрядных операций            │
     ├─────────┬─────────────────────────────────────────┤
     │         │              Функции поля w             │
     │ mod r/m ├───────────────────┬─────────────────────┤
     │         │  ( когда w = 0 )  │    ( когда w = 1 )  │
     ├─────────┼───────────────────┼─────────────────────┤
     │ 11 000  │        AL         │        EAX          │
     │ 11 001  │        CL         │        ECX          │
     │ 11 010  │        DL         │        EDX          │
     │ 11 011  │        BL         │        EBX          │
     │ 11 100  │        AH         │        ESP          │
     │ 11 101  │        CH         │        EBP          │
     │ 11 110  │        DH         │        ESI          │
     │ 11 111  │        BH         │        EDI          │
     └─────────┴───────────────────┴─────────────────────┘

           Кодирование 32-разрядного режима адресации
                       в байте "mod r/m"

     ┌──────────────────┬────────────────────────────────┐
     │     mod r/m      │        Эффективный адрес       │
     ├──────────────────┼────────────────────────────────┤
     │     00 000       │        DS:[EAX]                │
     │     00 001       │        DS:[ECX]                │
     │     00 010       │        SS:[EDX]                │
     │     00 011       │        SS:[EBX]                │
     │     00 100       │        присутствует s-i-b      │
     │     00 101       │        DS:d32                  │
     │     00 110       │        DS:[ESI]                │
     │     00 111       │        DS:[EDI]                │
     │                  │                                │
     │     01 000       │        DS:[EAX + d8]           │
     │     01 001       │        DS:[ECX + d8]           │
     │     01 010       │        SS:[EDX + d8]           │
     │     01 011       │        SS:[EBX + d8]           │
     │     01 100       │        присутствует s-i-b      │
     │     01 101       │        SS:[EBP + d8]           │
     │     01 110       │        DS:[ESI + d8]           │
     │     01 111       │        DS:[EDI + d8]           │
     └──────────────────┴────────────────────────────────┘
     ┌──────────────────┬────────────────────────────────┐
     │     mod r/m      │        Эффективный адрес       │
     ├──────────────────┼────────────────────────────────┤
     │     10 000       │        DS:[EAX + d32]          │
     │     10 001       │        DS:[ECX + d32]          │
     │     10 010       │        SS:[EDX + d32]          │
     │     10 011       │        SS:[EBX + d32]          │
     │     10 100       │        присутствует s-i-b      │
     │     10 101       │        SS:[EBP + d32]          │
     │     10 110       │        DS:[ESI + d32]          │
     │     10 111       │        DS:[EDI + d32]          │
     │                  │                                │
     │     11 000       │        регистр: см. ниже       │
     │     11 001       │        регистр: см. ниже       │
     │     11 010       │        регистр: см. ниже       │
     │     11 011       │        регистр: см. ниже       │
     │     11 100       │        регистр: см. ниже       │
     │     11 101       │        регистр: см. ниже       │
     │     11 110       │        регистр: см. ниже       │
     │     11 111       │        регистр: см. ниже       │
     └──────────────────┴────────────────────────────────┘
     ┌───────────────────────────────────────────────────┐
     │         Выбор регистра при помощи поля r/m        │
     │              для 16-разрядных операций            │
     ├─────────┬─────────────────────────────────────────┤
     │         │              Функции поля w             │
     │ mod r/m ├───────────────────┬─────────────────────┤
     │         │  ( когда w = 0 )  │    ( когда w = 1 )  │
     ├─────────┼───────────────────┼─────────────────────┤
     │ 11 000  │        AL         │         AX          │
     │ 11 001  │        CL         │         CX          │
     │ 11 010  │        DL         │         DX          │
     │ 11 011  │        BL         │         BX          │
     │ 11 100  │        AH         │         SP          │
     │ 11 101  │        CH         │         BP          │
     │ 11 110  │        DH         │         SI          │
     │ 11 111  │        BH         │         DI          │
     └─────────┴───────────────────┴─────────────────────┘
     ┌───────────────────────────────────────────────────┐
     │         Выбор регистра при помощи поля r/m        │
     │              для 32-разрядных операций            │
     ├─────────┬─────────────────────────────────────────┤
     │         │              Функции поля w             │
     │ mod r/m ├───────────────────┬─────────────────────┤
     │         │  ( когда w = 0 )  │    ( когда w = 1 )  │
     ├─────────┼───────────────────┼─────────────────────┤
     │ 11 000  │        AL         │        EAX          │
     │ 11 001  │        CL         │        ECX          │
     │ 11 010  │        DL         │        EDX          │
     │ 11 011  │        BL         │        EBX          │
     │ 11 100  │        AH         │        ESP          │
     │ 11 101  │        CH         │        EBP          │
     │ 11 110  │        DH         │        ESI          │
     │ 11 111  │        BH         │        EDI          │
     └─────────┴───────────────────┴─────────────────────┘

           Кодирование 32-разрядного режима адресации
        ( при наличии байта "mod r/m" и байта "s-i-b" )

     ┌─────────┬─────────────────────────────────────────┐
     │ mod r/m │                     Эффективный адрес   │
     ├─────────┼─────────────────────────────────────────┤
     │ 00 000  │ DS:[EAX + (масштабированный индекс)]    │
     │ 00 001  │ DS:[ECX + (масштабированный индекс)]    │
     │ 00 010  │ DS:[EDX + (масштабированный индекс)]    │
     │ 00 011  │ DS:[EBX + (масштабированный индекс)]    │
     │ 00 100  │ SS:[ESP + (масштабированный индекс)]    │
     │ 00 101  │ DS:[d32 + (масштабированный индекс)]    │
     │ 00 110  │ DS:[ESI + (масштабированный индекс)]    │
     │ 00 111  │ DS:[EDI + (масштабированный индекс)]    │
     │         │                                         │
     │ 01 000  │ DS:[EAX+(масштабированный индекс)+d8]   │
     │ 01 001  │ DS:[ECX+(масштабированный индекс)+d8]   │
     │ 01 010  │ DS:[EDX+(масштабированный индекс)+d8]   │
     │ 01 011  │ DS:[EBX+(масштабированный индекс)+d8]   │
     │ 01 100  │ SS:[ESP+(масштабированный индекс)+d8]   │
     │ 01 101  │ SS:[EBP+(масштабированный индекс)+d8]   │
     │ 01 110  │ DS:[ESI+(масштабированный индекс)+d8]   │
     │ 01 111  │ DS:[EDI+(масштабированный индекс)+d8]   │
     │         │                                         │
     │ 10 000  │ DS:[EAX+(масштабированный индекс)+d32]  │
     │ 10 001  │ DS:[ECX+(масштабированный индекс)+d32]  │
     │ 10 010  │ DS:[EDX+(масштабированный индекс)+d32]  │
     │ 10 011  │ DS:[EBX+(масштабированный индекс)+d32]  │
     │ 10 100  │ SS:[ESP+(масштабированный индекс)+d32]  │
     │ 10 101  │ SS:[EBP+(масштабированный индекс)+d32]  │
     │ 10 110  │ DS:[ESI+(масштабированный индекс)+d32]  │
     │ 10 111  │ DS:[EDI+(масштабированный индекс)+d32]  │
     └─────────┴─────────────────────────────────────────┘

Примечание: Поле mod расположено в байте "mod r/m", поля ss,
index, base в байте "s-i-b".

     ┌──────────────────┬────────────────────────────────┐
     │       ss         │  Коэффициент масштабирования   │
     ├──────────────────┼────────────────────────────────┤
     │       00         │               *1               │
     │       01         │               *2               │
     │       10         │               *4               │
     │       11         │               *8               │
     └──────────────────┴────────────────────────────────┘
     ┌──────────────────┬────────────────────────────────┐
     │      index       │        Индексный регистр       │
     ├──────────────────┼────────────────────────────────┤
     │       000        │               EAX              │
     │       001        │               ECX              │
     │       010        │               EDX              │
     │       011        │               EBX              │
     │       100        │         индексный регистр      │
     │                  │         не используется **     │
     │       101        │               EBP              │
     │       110        │               ESI              │
     │       111        │               EDI              │
     └──────────────────┴────────────────────────────────┘

** ВАЖНОЕ ЗАМЕЧАНИЕ:
Когда поле index содержит 100, указывающее, что мндексный
регистр не используется, поле ss ДОЛЖНО содержать 00. В
противном случае эффективный адрес не определен.

10.2.3.5 Кодирование поля направления операций (d)
----------------------------------------------------------------

Многие команды, которые используют два операнда, содержат поле d
для указания, какой из операндов является источником, а какой
приемником.

     ┌───┬───────────────────────────────────────────────┐
     │ d │            Направление операций               │
     ├───┼───────────────────────────────────────────────┤
     │ 0 │ Регистр/Память  <-- Регистр                   │
     │   │ Поле "reg" указывает операнд-источник         │
     │   │ "mod r/m" или "mod ss index base" указывают   │
     │   │ операнд-приемник                              │
     ├───┼───────────────────────────────────────────────┤
     │ 1 │ Регистр <-- Регистр/Память                    │
     │   │ Поле "reg" указывает операнд-приемник         │
     │   │ "mod r/m" или "mod ss index base" указывают   │
     │   │ операнд-источник                              │
     └───┴───────────────────────────────────────────────┘

10.2.3.6 Кодирование поля распространения знака (s)
----------------------------------------------------------------

Поле s присутствует в командах с полем непосредственного
операнда. На выполнение команды данное поле оказывает влияние
только в том случае, когда размер непосредственного операнда
равен 8 битам и его необходимо поместить в 16-разрядный или
32-разрядный приемник.

     ┌───┬──────────────────────────────┬────────────────┐
     │   │ Влияние для                  │     Влияние    │
     │ s │ 8-разрядных данных           │ для 16/32-разр.│
     │   │                              │     данных     │
     ├───┼──────────────────────────────┼────────────────┤
     │ 0 │ Не оказывает                 │  Не оказывает  │
     │   │                              │                │
     │ 1 │ Распространение знака при    │  Не оказывает  │
     │   │ занмсении 8-разр. данных в   │                │
     │   │ 16/32-разр. приемник         │                │
     └───┴──────────────────────────────┴────────────────┘

10.2.3.7 Кодирование поле условия проверки (tttn)
----------------------------------------------------------------

Для условных команд (условные переходы и установки по условию),
поле tttn используется для кодирования условия следующим
образом: биты ttt кодируют условие, а бит n признак, в
соответствии с которым используется само условие (n=0) или его
отрицание (n=1).

     ┌──────────┬─────────────────────────────────┬──────┐
     │Мнемониика│            Условие              │ tttn │
     ├──────────├─────────────────────────────────┼──────┤
     │  O       │ Переполнение                    │ 0000 │
     │  NO      │ Нет переполнения                │ 0001 │
     │  B/NAE   │ Ниже/Не выше и не равно         │ 0010 │
     │  NB/AE   │ Не ниже/Выше или равно          │ 0011 │
     │  E/Z     │ Равно/Нуль                      │ 0100 │
     │  NE/NZ   │ Не равно/Не нуль                │ 0101 │
     │  BE/NA   │ Ниже или равно/Не выше          │ 0110 │
     │  NBE/A   │ Не ниже и не равно/Выше         │ 0111 │
     │  S       │ Знак                            │ 1000 │
     │  NS      │ Отсутствие знака                │ 1001 │
     │  P/PE    │ Четность                        │ 1010 │
     │  NP/PO   │ Отсутствие четности/Нечетность  │ 1011 │
     │  L/NGE   │ Меньше/Не больше и не равно     │ 1100 │
     │  NL/GE   │ Не меньше/Больше или равно      │ 1101 │
     │  LE/NG   │ Меньше или равно/Не больше      │ 1110 │
     │  NLE/G   │ Не меньше и не равно/Больше     │ 1111 │
     └──────────┴─────────────────────────────────┴──────┘

10.2.3.8 Кодирование поля регистров управления, отладки и
         тестирования (eee)
----------------------------------------------------------------

Данное поле используется для кодирования регистров управления,
отладки и тестирования в командах загрузки и сохранения этих
регистров.

         При интерпритации как поля регистра управления
           ┌───────────────────┬───────────────────┐
           │      Код eee      │    Имя регистра   │
           ├───────────────────┼───────────────────┤
           │        000        │        CR0        │
           │        010        │        CR2        │
           │        011        │        CR3        │
           ├───────────────────┴───────────────────┤
           │ Другие коды не используются           │
           └───────────────────────────────────────┘
          При интерпритации как поля регистра отладки
           ┌───────────────────┬───────────────────┐
           │      Код eee      │    Имя регистра   │
           ├───────────────────┼───────────────────┤
           │        000        │        DRO        │
           │        001        │        DR1        │
           │        010        │        DR2        │
           │        011        │        DR3        │
           │        110        │        DR6        │
           │        111        │        DR7        │
           ├───────────────────┴───────────────────┤
           │ Другие коды не используются           │
           └───────────────────────────────────────┘
        При интерпритации как поля регистра тестирования
           ┌───────────────────┬───────────────────┐
           │      Код eee      │    Имя регистра   │
           ├───────────────────┼───────────────────┤
           │        011        │        TR3        │
           │        100        │        TR4        │
           │        101        │        TR5        │
           │        110        │        TR6        │
           │        111        │        TR7        │
           ├───────────────────┴───────────────────┤
           │ Другие коды не используются           │
           └───────────────────────────────────────┘

10.2.4 Кодирование полей команд для вещественных вычислений
----------------------------------------------------------------

Команды вещественной арифметики предполагают использование одной
из пяти приведенных в следующей таблице форм. Во всех случаях,
команды имеют размер не менее двух байт и начинаются с битов,
содержащих 11011B.

 ┌───────────────────────────────────────────────┬──────────────┐
 │                    Команда                    │Необязательные│
 ├───────────────────────┬───────────────────────┤     поля     │
 │      Первый байт      │     Второй байт       │              │
 ├───────┬───────┬───────┼───────┬───┬───┬───────┼───────┬──────┤
1│ 11011 │  OPA  │   1   │  mod  │ 1 │OPB│  r/m  │ s-i-b │ смещ.│
 ├───────┼───────┼───────┼───────┼───┴───┼───────┼───────┼──────┤
2│ 11011 │  MF   │  OPA  │  mod  │  OPB  │  r/m  │ s-i-b │ смещ.│
 ├───────┼───┬───┼───────┼───┬───┼───────┼───────┼───────┴──────┘
3│ 11011 │ d │ P │  OPA  │ 1 │ 1 │  OPB  │ ST(i) │
 ├───────┼───┼───┼───────┼───┼───┼───┬───┴───────┤
4│ 11011 │ 0 │ 0 │   1   │ 1 │ 1 │ 1 │    OP     │
 ├───────┼───┼───┼───────┼───┼───┼───┼───────────┤
5│ 11011 │ 0 │ 1 │   1   │ 1 │ 1 │ 1 │    OP     │
 └───────┴───┴───┴───────┴───┴───┴───┴───────────┘
   15-11  10   9     8     7   6   5   4 3 2 1 0

OP - код операциии; можно разбить на два поля: OPA и OPB.

MF - Формат операнда в памяти

     00 - 32-разрядное вещественное
     01 - 32-разрядное целое
     10 - 64-разрядное вещественное
     11 - 16-разрядное целое

P -  Занести в стек

     0 - Не заносить в стек
     1 - Занести в стек после операции

D -  Приемник

     0 - Приемник в ST(0)
     1 - Приемник в ST(i)

R XOR d = 0 - Приемник (операция) Источник
R XOR d = 1 - Источник (операция) Приемник

ST(i) = i-тый элемент стека
      000 = Вершина стека
      001 = Второй элемент стека
      ...
      111 = Восьмой элемент регистрового стека

mod (поле режима) и r/m (описатель Регистр/Память)
интерпретируются также, как соответствующие поля команд
целочисленной арифметики.

Байт s-i-b (Масштабирование - Индекс - База) и смещ. (смещение)
являются необязательными. Они присутствуют в некоторых командах,
имеющих поля mod и r/m. Их наличие или отсутствие в команде
зависит от значиения полей mod и r/m (аналогично командам
целочисленной арифметики).
