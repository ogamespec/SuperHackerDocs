					       Ю.Д.Красильников

		       ЕЩЕ РАЗ О TSR БЕЗ PSP
	       -------------------------------------
	       (заметки на полях статьи Ю.И.Панкова)

     Наверно,	каждый	 программист,	который   пишет  резидентные
программы, рано или поздно  начинает заботиться об экономии  памяти.
Первый шаг на  этом пути -  перед выдачей прерывания  TSR освободить
сегмент   памяти   Environment	 (разумеется,	если   информация  о
переменных среды  не нужна  резидентной части  программы). Это легко
достигается следующими командами ассемблера:

     mov  es,cs:[2Ch] ; Загрузить в ES адрес сегмента Environment
		      ; из PSP (CS должен указывать на PSP)
     mov  ah,49h      ; Функция освобождения памяти
     int  21h

     Теперь сегмент Environment освобожден и может быть  использован
другими программами, запускаемыми после этой резидентной  программы.
Такой  поступок,  правда,  имеет  один	минус  -  многие программы -
анализаторы оперативной памяти	(например, SYSINFO из  пакета Norton
Utilities  5.0	(функция  Memory),   UNLOAD  и	т.п.)  не   способны
определить  имя  программы,  образовавшей  данный  сегмент,  и пишут
что-то	вроде	"Unknown  owner",   т.к.  эти   программы   получают
информацию  об	 имени	программы-владельца   именно  из    сегмента
Environment. Впрочем, неудобство это не столь уж велико.

     Однако  этим  не  исчерпываются  резервы  экономии  памяти. Как
известно,  DOS	при  запуске  программы  строит префикс программного
сегмента, имеющий длину в  256 байт и находящийся  перед программным
кодом. И вот эти самые 256 байт не дают покоя многим  программистам:
целых	16   параграфов   памяти   пропадает   зря!   Нельзя  ли  их
использовать?

				8

     Статья Ю.И.Панкова, включенная в "Софтпанораму" N 5 за 1991 г.,
содержит  описание  двух  довольно  хитроумных методов использования
PSP. Первый  из них  принадлежит "группе  программистов 2В"  Вернера
В.А. и Серегина В.В.,  второй разработан самим Ю.И.Панковым.  Первый
метод по существу  состоит в перенесении  части программного кода  в
другое	место	памяти,  корректировке	 размеров  сегмента   памяти
программы,  перенесении   в  полученный   сегмент  нужного   размера
резидентной части  программы и	ее настройки  по месту	и завершении
программы  обычным  образом  без  освобождения	этого сегмента. Суть
второго метода - в  завершении программы "необычным образом",  когда
DOS заставляют выполнить фрагмент  программы ПОСЛЕ ее завершения  по
TSR-прерыванию.   Этот	 фрагмент   и	осуществляет   перезапись  в
резидентный  сегмент  памяти  резидентной   части  программы  и   ее
настройку.

     Зная Ю.И.Панкова как  квалифицированного программиста (сужу  по
его драйверам  PU*), я	заинтересовался предлагаемой  им методикой и
попробовал ее реализовать. Приведу цитату из его статьи:

"2.1. Алгоритм инициализации TSR программ с использованием PSP.

     1. Определить  конец резидентной части программы (EndRes),
	выровненный на граниу параграфа.
     2. Запомнить 16 байт резидентной части программы по смеще-
	нию EndRes-Delta в специально отведенном буфере, где:
	Delta - величина перемещения программы (кратна 16)
		Для TSR без PSP Delta=100h
	В эту область DOS расположит последний MCB  блок  после
	резидентного завершения программы (Рис.2).
     3. Освободить блок среды, если это необходимо.
     4. Переопределить	указатель  выхода PSP_tm (смещение 0ah)
	указателем на программу-аппендикс выхода в DOS (п.2.2).
     5. Вычислить  длину резидентной части программы в парагра-
	фах с учетом перемещения в PSP:
		   LTSR=(EndRes-Delta)/16
	Запомнить, как минимум, регистры SS и SP .
     6. Завершить программу по функции DOS 31h или INT 27h.

      2.2. Алгоритм программы-аппендикса выхода в DOS.

     1. Восстановить, как минимум, регистры SS и SP.
     2. Переместить резидентную часть программы в PSP.
     3. Восстановить   16   байт    программы	 по    смещению
	EndRes-2*Delta от нового начала программы из буфера.
     4. Установить требуемые вектора прерываний, если это необ-
	ходимо. При  установке	 векторов   необходимо	 учесть
	новое значения сегмента TSR = CS-Delta/16.
     5. Осуществить длинный переход по вектору 22h."

     (Конец цитаты).

				9

     При реализации методики выяснилось следующее:

     1) Осуществить окончательный выход  в DOS переходом по  вектору
22h не удается. По моим впечатлениям, DOS при завершении  программы,
у которой  скорректирован адрес  выхода в  DOS в  PSP, как описано в
пункте	2.1.4,	корректирует  и  адрес	по вектору 22h (эксперименты
проводились  в	PC  DOS  3.30).  Справиться с этой проблемой удалось
только запоминанием адреса выхода  в DOS ДО выдачи  TSR-прерывания в
рабочей переменной и переходом по запомненному адресу.

     2)  В  остальном  методика   работает  корректно  и   позволяет
действительно  использовать  весь  PSP,  сократив  тем	самым размер
резидентной  части  программы  на  256	байт.  Однако я заметил, что
данный	метод	завершения  резидентных   программ  несовместим    с
программой RELEASE. После запуска резидентной программы,  написанной
по приведенной	выше методике,	RELEASE либо  показывает неимоверную
длину программы, а при попытке	снять ее программа хотя и  пропадает
из таблички, выдаваемой RELEASE, но  тем не менее остается в  памяти
и работает,  либо же  (в худшем  случае) при  нажатии клавиш  "Alt="
выдается сообщение  "Divide error"  и управление  оказывается в  DOS
(Norton Commander при этом "слетает").

     3)  После	завершения  программы  по  TSR-прерыванию  память, в
которой находится фрагмент программы, осуществляющий  заключительные
операции  по  установке  программы,  уже  освобождена.	Теоретически
возможен  случай,  когда  какой-нибудь	процесс  (например,   другая
резидентная  программа,  запущенная  ранее)  именно  в	этот  момент
получит управление по  прерыванию, запросит у  DOS сегмент памяти  и
использует его по своему усмотрению - с очевидными последствиями.

     В заключение  хочу привести  свои соображения  по этому поводу.
Посмотрим  внимательно	на  структуру  PSP  (рисунок  также  взят из
статьи Ю.И.Панкова):

PSP?	    Struc
PSP_int_20  db	  0cdh,020h  ;00h - INT 20 для завершения
;				    программы
PSP_top     dw	  ?	     ;02h - N 1 свободного параграфа.
PSP_rsv1    db	  6  dup(?)  ;04h - Р е з е р в
; Адрес завершения программы - копия вектора 22h:
PSP_tm_ip   dw	  ?	     ;0ah
PSP_tm_cs   dw	  ?	     ;0ch
; Адрес выхода по Ctrl-Break - копия вектора 23h:
PSP_cb_ip   dw	  ?	     ;0eh
PSP_cb_cs   dw	  ?	     ;10h
; Адрес выхода по фатальной ошибке - копия вектора 24h:
PSP_er_ip   dw	  ?	     ;12h
PSP_er_cs   dw	  ?	     ;14h
; Сегментный адрес родительского PSP
PSP_ow_cs   dw	  ?	     ;16h
; File Handle Table - 20 индексов для системной табл. файлов
PSP_fht     db	  20 dup(?)  ;18h - File Handle Table

				10

; Сегментный адрес среды процесса (ENVIROMENT)
PSP_env     dw	  ?	     ;2сh
PSP_rsv2    db	  34 dup(?)  ;2eh - Р е з е р в
PSP_dos     db	  0cdh,021h  ;50h - INT 21 - обр. к ф. DOS
PSP_rsv3    db	  3 dup(?)   ;52h -  Р е з е р в
PSP_efcb1   db	  7  dup(?)  ;55h - расширение FCB1
PSP_fcb1    db	  16 dup(?)  ;5ch - Не открытый FCB1
PSP_fcb2    db	  16 dup(?)  ;6ch - Не открытый FCB2
PSP_rsv4    db	  4  dup(?)  ;7ch - Р е з е р в
; Область DTA по умолчанию и:
PSP_lparm   db	  ?	     ;80h - Длина поля параметров
PSP_parm    db	  127 dup(?) ;81h - Поле параметров
PSP?	    Ends

     Напрашиваются следующие выводы:

     -	После  анализа	командной  строки  DOS	область   параметров
(адреса  80h  -  0FFh)	уже  не  нужна	и может быть использована по
усмотрению  программы.	(Именно  так  поступает популярная программа
800).

     - Если программа не  использует FCB для имен  файлов, указанных
в  командной  строке,  то  можно  использовать	и часть PSP, занятую
этими FCB (адреса 5Ch - 7Bh).

     Если также задействовать  четырехбайтный резерв по  адресу 7Ch,
то в нашем распоряжении оказывается  память в PSP, начиная с  адреса
5Ch,  куда  можно  переписать  резидентную  часть  программы.  Таким
образом, не  удается использовать  лишь 5Ch  (т.е. 92)	байта. И для
этого не требуется каких-либо сложных схем завершения программы.  Да
и  стоят  ли  эти  92  байта  усилий,  направленных  на  то,   чтобы
использовать и их?

     Ранее  мной  была	написана  программа  EC1840A  -  резидентный
драйвер  клавиатуры  для  ЕС-1840/41.  Переписав  резидентную  часть
программы в  PSP начиная  с адреса  5Ch, мне  удалось добиться того,
что резидентная часть  программы занимает всего  176 байт -  меньше,
чем размер PSP. Не так уж и плохо - и без особых ухищрений.  Поэтому
хочется  еще  раз  задать  вопрос  -  есть  ли	смысл  в  том, чтобы
стремиться использовать  непременно весь  PSP, когда  можно смело  и
просто использовать почти 2/3 его?

