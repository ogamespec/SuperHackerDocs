						    Панков Ю.И.

  К вопросу о создании полного драйвера руссификации дисплея.
 ════════════════════════════════════════════════════════════

     Рассматривается вопрос построения ПОЛНОГО драйвера -  рус-
сификатора дисплея для графических адаптеров:  EGA,  VGA, MCGA,
PS2, EVA, TVGA, Extended EGA/VGA,  VEGA,  EVA  и многих других,
имеющих стандартные  и	расширенные  режимы.  Под руссификацией
дисплея здесь и ниже следует понимать обслуживание дисплея  лю-
быми национальными  шрифтами,  в  том числе и русскими.  Работа
представляет интерес только для системных программистов не "ну-
левого" уровня, занимающихся проблемами руссификации видеомони-
торов. Статья состоит из трех разделов и небольщого введения. В
первом разделе	описываются  все  функции BIOS,  работу которых
должен контролировать полный драйвер руссификации  дисплея.  Во
втором разделе	 приводятся   алгоритмы  того,	как  можно  это
сделать. В третьем разделе даются необходимые  рекомендации  по
реализации некоторых  фрагментов полного алгоритма,  приводятся
технические данные полного драйвера, разработанного автором.

	  Безруков Н.Н. Cофтпанорама 1991, No. 1 (15)
	  ───────────────────────────────────────────
	      "EGA это стандарт вчерашнего  дня".
	      ───────────────────────────────────
     "Стандартным советским  АТ  1991"  следует  считать машину
следующей комплектации:
     - Процессор 80386SX
     - Тактовая частота - 20 Мгц
     - Оперативная память - 2М (0-wait state)
     - Винчестер - 65 М (RLL)
     - Дисплей - 14" Super VGA
     - Карта дисплея 1024 * 768 с 512 К памяти и частотой реге-
       нерации 70-75 Гц
     - 2 последовательных, 1 паралельный и 1 игровой порт
     - клавиатура - 101 клавиша
     - Корпус - башня
     - Дисководы 1.2M 5.25" и 1.44M 3.5"
     - Внутренний модем 2400 бод MNP level 5 (VIVA,  Everex или
       аналогичный)
     - Мышь Genius
     - Принтер Epson FX-1050 или аналогичный
     Минимальная (по данным BYTE,  октябрь 1990 г.) цена в дол-
ларах  такой  конфигурации  составляет	примерно 2500$ (65 тыс.
рублей при курсе 1:25).  Если несколько ухудшить характеристики
(карта VGA 720*480 c 256 K памяти,  более дешевый принтер, нап-
ример Panasonic (Epson FX-1050 стоит примерно 300$, а Panasonic
KXP-1180 - 150$)), то минимальная цена падает до 2000$ (50 тыс.
рублей по курсу 1:25).

				2

     .... EGA это стандарт вчерашнего  дня.  Мониторы  для  VGA
стоят  примерно  столько же либо даже дешевле (например Samsung
VGA 14" .31 dot pitch  -  284$,  а  EGA  -  369$;  Relisis  VGA
720*480,  14" - 379.95$, EGA 640 * 350 - 339.95$), а карты либо
равны по цене либо немного дороже (Everex VGA,	16-bit,  512К -
179$, а EGA - 99$, MCT-EGA - 149.95, MCT-VGA - 189.95$). Поэто-
му покупку EGA,  сегодня можно оправдывать  только  собственной
глупостью.  Или тем,  что чужие глаза не жалко. Дело в том, чтo
современные карты VGA обеспечивают частоту регенерации	изобра-
жения  (вертикальной развертки) не 50-60,  а 70-75 гц,	что су-
щественно снижает утомление глаз при длительной работе.  Напри-
мер  карта OmniVGA/HR фирмы Tatung стоимостью $289 (с 256K) или
$339(512K) обеспечивает частоту регенерации 70 гц. и разрешение
1024*768.  Несколько более дорогая карта SigmaVGA Lеgend ($449)
имеет 1M памяти и обеспечивает частоту	регенерации  72  гц.  и
вопроизведение 256 цветов в режиме 1024*768. Кроме того монито-
ры VGA обычно имеют более низкий уровень электро-магнитного из-
лучения, чем EGA.
	  Полное обслуживание адаптеров VGA и выше -
	 ───────────────────────────────────────────
		    это не совсем просто !
		   ───────────────────────
     Мониторы для VGA и выше имеют целый  набор  дополнительных
(расширенных) режимов (см. ниже), в одном из которых, обеспечи-
вают вопроизведение 16 цветов в режиме 1024*768 (не все).  Пол-
ный  драйвер - руссификатор дисплея должен одинаково верно обс-
луживать все основные и расширенные режимы.
     В последнее время появилось множество несовершенных  драй-
веров - руссификаторов дисплея.  Как правило, такие программные
продукты узко специализаолваны (расширенные  режимы  вообще  не
обслуживают,  а  основные  - не совсем верно) и работают некор-
ректно по отношению к BIOS.  Я надеюсь,  что их авторы познако-
мившись  с материалами данной статьи,  смогут расширить возмож-
ности своих программ (а может быть переписать их заново).
     Если читателю буквы BIOS, VGA или EGA ни о чем не говорят,
то он может без ущерба для себя пропустить чтение данной статьи
до ее конца.
		 1. Дисплей - адаптер - BIOS.
		 ────────────────────────────
     Дисплей ПЭВМ  управляется	специальным адаптером,	который
связывает процессор с дисплеем с помощью микросхемы, называемой
контроллером. Адаптер имеет, как правило, набор программируемых
портов ввода - вывода,	специальное ОЗУ для генерации изображе-
ний знаков  (знакогенератор)  и  специальное  ОЗУ  для хранения
отображаемой на экране информации (видеобуфер).  Существует бо-
лее двух десятков всевозможных типов адаптеров дисплея, на каж-
дый из которых есть вполне обозримая документация. Поэтому я не
буду останавливаться на характеристиках каждого адаптера.
     Заметим, что каждый тип адаптера дисплея имеет только свои
режимы экрана,	которые  обязательно  описаны в документации на
него и каждый тип адаптера обслуживается своим,  специально для
него разработанным BIOS - ом.
     Прерывание 10h   BIOS  представляет  собой  ряд  сервисных
видеофункций для работы с экраном,  количество которых увеличи-
вается по мере усложнения видеоадаптера.
     Ниже перечислены функции экрана (int 10h),  работу которых
должен	контролировать	полный	драйвер (руссификатор) дисплея,
даны необходимые комментарии.

				3

		 1.1. Установка режима экрана.
		 ─────────────────────────────

     На входе INT 10h:
     ────────────────
     ah = 00h
     al = код режима экрана (0 - 127);
	  если в al старший бит = 1 (80h) - без очистки экрана;

	или

     ax = 6f05h
     bl = код режима экрана (0 - 127)

     На выходе:
     ──────────
     BIOS устанавливает  заданный  режим  экрана  текстовый или
графический,  загружает требуемый типоразмер шрифтов в знакоге-
нератор из ПЗУ, устанавливает видеопараметры (параметры экрана,
типоразмер загруженных шрифтов,  размер видеобуфера и другие) в
рабочей области BIOS и возвращается в прерванную программу. Ес-
ли заданный код режима не обслуживается BIOS,  то результат та-
кой установки непредсказуем.
     Ниже приводится сводная таблица режимов работы экрана "вы-
резанная" из описания прерываний BIOS,  не претендующая на свою
полноту и полную достоверность, в ее первозданном виде:

AH = 00h
AL = mode (graphics mode if graphics resolution listed)
	   text  pixel graphic color disp scrn	system
	   resol  box  resoltn	     page addr
     00h = 40x25  8x8	       B&W     8  B800 CGA
     01h = 40x25  8x8	       16      8  B800 CGA
     02h = 80x25  8x8	       B&W     4  B800 CGA
				       8  B800 EGA/MCGA/VGA
     03h = 80x25  8x8	       16      4  B800 CGA
				       8  B800 EGA/MCGA/VGA
     04h = 40x25  8x8  320x200 4       1  B800 CGA
     05h = 40x25  8x8  320x200 4 gray  1  B800 CGA
     06h = 80x25  8x8  640x200 B&W     1  B800 CGA
     07h = 80x25  8x14	       mono    1  B000 MDA/Hercules
				       8       EGA/VGA
     08h = 20x25       160x200 16	  B800 PCjr/Tandy 1000
     09h = 40x25       320x200 16	  B800 PCjr/Tandy 1000
     0Ah = 80x25       640x200 4	  B800 PCjr/Tandy 1000
     0Bh = reserved (used internally by EGA BIOS)
     0Ch = reserved (used internally by EGA BIOS)
     0Dh = 40x25       320x200 16      8  A000 EGA/VGA
     0Eh = 80x25       640x200 16      4  A000 EGA/VGA
     0Fh = 80x25       640x350 mono    2  A000 EGA/VGA
     10h = 80x25       640x350 4or16   2  A000 EGA/VGA
     11h = 80x30       640x480 mono	  A000 VGA/MCGA
     12h = 80x30       640x480 16	  A000 VGA
     13h = 40x24       320x200 256	  A000 VGA/MCGA

				4

     18h = 132x44 8x8	       mono	       Tseng Labs EVA
     19h = 132x25 8x14	       mono	       Tseng Labs EVA
     1Ah = 132x28 8x13	       mono	       Tseng Labs EVA
     22h = 132x44 8x8	       ???	       Tseng, Ahead
     23h = 132x25 6x14	       ???	       Tseng Labs EVA
	 = 132x25 8x14	       ???	      Ahead Sys EGA2001
     24h = 132x28 6x13	       ???	       Tseng Labs EVA
     25h = 80x60  8x8  640x480 ???	       Tseng Labs EVA
	 =	       640x480	16	       VEGA VGA
     26h = 80x60  8x8	       ???	       Tseng Labs EVA
	 = 80x60  8x8  640x480 ???	      Ahead Sys EGA2001
     27h =	       720x512	16	       VEGA VGA
     28h = ???x???			       VEGA VGA
     29h =	       800x600	16	       VEGA VGA
     2Dh =	       640x350 256	       VEGA VGA
     2Eh =	       640x480 256	       VEGA VGA
     2Fh =	       720x512 256	       VEGA VGA
     30h =	       800x600 256	       VEGA VGA
	 =	       ???x??? ???	       AT&T 6300
     36h =	       960x720	16	       VEGA VGA
     37h =	      1024x768	16	       VEGA VGA
     40h =	       640x400	 2	  B800 AT&T 6300
     41h =	       640x200	16	       AT&T 6300
     42h =	       640x400	16	       AT&T 6300
     43h = unsupported 640x200 of 640x400 viewport  AT&T 6300
     44h = disable VDC and DEB output	       AT&T 6300
     48h = 80x50       640x400	 2	  B800 AT&T 6300
     50h = 132x25 9x14	       mono	      Ahead Sys EGA2001
	 = 80x30  8x16 640x480	16	      Paradise EGA-480
     51h = 80x30  8x16	       ???	      Paradise EGA-480
     52h = 132x44 9x8	       mono	     Ahead Sys EGA2001
     54h = 132x43 8x8	       ???	      Paradise EGA-480
     55h = 132x25 8x14	       ???	      Paradise EGA-480
     56h = 132x43 8x8	       3???   2   B000 NSI Smart EGA+
     57h = 132x25 8x14	       3???   4   B000 NSI Smart EGA+
     58h =	       800x600	16	       Paradise VGA
     5Eh =	       640x400 256	      Paradise VGA,VEGA
					       VGA
     5Fh =	       640x480 256	       Paradise VGA
     60h = 80x???      ???x400 ???	       Corona/Cordata
					       BIOS v4.10+
     61h =	       ???x400 ???	       Corona/Cordata
					       BIOS v4.10+
     71h = 100x35 8x16 800x600 16of64	  A000 NSI Smart EGA+
     74h =	       640x400 ???	       Toshiba 3100
     82h = 80x25	       B&W	       AT&T VDC overlay
					       mode *
     83h = 80x25	       ???	       AT&T VDC overlay
					       mode *
     86h =	       640x200 B&W	       AT&T VDC overlay
					       mode *
     C0h =	       640x400	 2/prog pallet AT&T VDC overlay
					       mode *
     C4h = disable output		       AT&T VDC overlay
					       mode *
     D0h =	       640x400	 2	       DEC VAXmate AT&T
					       mode
     ??? =	       640x225 ???	       Z-100
     ??? =	       640x400 ???	       Z-100

				5

     * for  AT&T  VDC overlay modes, BL contains the DEB mode,
which may be 06h, 40h, or 44h
     Note: IBM standard modes do not clear the screen  if  the
high bit of AL is set

INT 10 - VIDEO - SET VIDEO MODE (VEGA EXTENDED EGA/VGA)
	AX = 6F05h
	BL = mode (graphics mode if graphics resolution listed)
	  text	pixel graphic color disp scrn  system
	  resol  box  resoltn	    page addr
    62h =	      800x600  16	      VEGA Extended EGA
    65h =	     1024x768  16	      VEGA Extended EGA
    66h =	      640x400 256	      VEGA Extended VGA
    67h =	      640x480 256	      VEGA Extended VGA
    68h =	      720x540 256	      VEGA Extended VGA
    69h =	      800x600 256	      VEGA Extended VGA

     Ниже приводится таблица режимов работы экрана видеоадапте-
ра TVGA позаимствованная из документации на него:

 TVGA - Standart EGA Modes
 ─────────────────────────
Mode  Type/Colors  Alpha   Screen  Char Buffer
		  Format    Size   Size Size
00h - t16/256k	  40x25   320x350  8x14 b800h
01h - t16/256k	  40x25   320x350  8x14 b800h
02h - t16/256k	  80x25   640x350  8x14 b800h
03h - t16/256k	  80x25   640x350  8x14 b800h
04h - g4	  40x25   320x200  8x8	b800h
05h - g4	  40x25   320x200  8x8	b800h
06h - g2/256k	  80x25   640x200  8x8	b800h
07h - tm	  80x25   720x350  9x14 b800h
0dh - g16/256k	  40x25   320x200  8x8	a000h
0eh - g16/256k	  80x25   640x200  8x8	a000h
0fh - gm	  80x25   640x350  8x14 a000h
10h - g16/256k	  80x25   640x350  8x14 a000h

				6

 TVGA - Standart VGA Modes
 ─────────────────────────
Mode  Type/Colors  Alpha   Screen  Char Buffer
		  Format    Size   Size Size
00h - t16/256k	  40x25   360x400  9x16 b800h
01h - t16/256k	  40x25   360x400  9x16 b800h
02h - t16/256k	  80x25   720x400  9x16 b800h
03h - t16/256k	  80x25   720x400  9x16 b800h
04h - g4	  40x25   320x200  8x8	b800h
05h - g4	  40x25   320x200  8x8	b800h
06h - g2/256k	  80x25   640x200  8x8	b800h
07h - tm	  80x25   720x400  9x16 b000h
0dh - g16/256k	  40x25   320x200  8x8	a000h
0eh - g16/256k	  80x25   640x200  8x8	a000h
0fh - gm	  80x25   640x350  8x14 a000h
10h - g16/256k	  80x25   640x350  8x14 a000h
11h - g2/256k	  80x25   640x480  8x16 a000h
12h - g16/256k	  80x25   640x480  8x16 a000h
13h - g256/256k   40x25   320x200  8x8	a000h

 TVGA - Extend VGA Modes
 ────────────────────────
Mode  Type/Colors  Alpha   Screen  Char Buffer
		  Format    Size   Size Size
50h - т/16/256k   80x30   640x480  8x16  b800h
51h - ----"----   80x43   640x473  8x11  --"--
52h - ----"----   80x60   640x480  8x8   --"--
53h - ----"----  132x25  1056x350  8x14  --"--
54h - ----"----  132x30  1056x480  8x16  --"--
55h - ----"----  132x43  1056x473  8x11  --"--
56h - ----"----  132x60  1056x480  8x8   --"--
57h - ----"----  132x25  1188x350  9x14  --"--
58h - ----"----  132x30  1188x480  9x16  --"--
59h - ----"----  132x43  1188x473  9x11  --"--
5ah - ----"----  132x60  1188x480  9x8   --"--
5bh - г/16/256k  100x75   800x600  8x8	 a000h
5ch - г/256/256k  80x25   640x400  8x16  --"--
5dh - ----"-512k  80x30   640x480  8x16  --"--
5fh - г/16/512k  128x48  1024x768  8x16  --"--

     Я привел  эти таблицы только для того,  чтобы показать су-
щественные различия между различными типами  видеоадаптеров  (а
значит и BIOS). ПЗУ видеоадаптера типа TVGA содержит 6 типораз-
меров шрифтов - 4 основных и 2 альтернативных,	адреса местопо-
ложения  которых  можно  определить  функцией  11h/30h	int 10h
(смотри ниже).

				7

   1.1.1. Основной и альтернативный шрифты знакогенератора.
   ────────────────────────────────────────────────────────
     Рассмотрим на примере видеоадаптера TVGA. В ПЗУ все шрифты
расположены друг за другом в следующем порядке:

     ┌──────────────────┬───────────────── 3
     │	  основной	│     
     │	  шрифт 8х8	│     │
     │			│     │ 8*256=2048 байт
     │	256 символов	│     
     ├──────────────────┼───────────────── 2
     │	  основной	│     
     │	 шрифт 8х14	│     │
     │			│     │ 14*256=3584 байт
     │	256 символов	│     
     ├──────────────────┼───────────────── 5
     │	альтернативный	│     
     │	 шрифт 9х14	│     │
     │			│     │ 15*???=???
     │ список символов	│     │
     │ 00h - конец сп.	│     
     ├──────────────────┼───────────────── 6
     │	  основной	│     
     │	 шрифт 8х16	│     │
     │			│     │ 16*256=4096 байт
     │	256 символов	│     
     ├──────────────────┼───────────────── 7
     │	альтернативный	│     
     │	 шрифт 9х16	│     │
     │			│     │ 17*???=???
     │ список символов	│     │
     │ 00h - конец сп.	│     
     ├──────────────────┼────────

     ├──────────────────┼───────────────── 8
     │	  основной	│     
     │	 шрифт 8х11	│     │
     │			│     │ 11*256=2816 байт
     │	256 символов	│     
     ├──────────────────┼───────────────── 9
     │	альтернативный	│     
     │	 шрифт 9х11	│     │
     │			│     │ 12*???=???
     │ список символов	│     │
     │ 00h - конец сп.	│     
     └──────────────────┴─────────

				8

     В альтернативном формате описываются,  как правило, только
"широкие"  символы.  Поэтому альтернативный список символов не-
большой. Описанию символа в альтернативном формате всегда пред-
шествует 1 байт с ASCII кодом символа.
     Алгоритм загрузки шрифтов в знакогенератор из ПЗУ	следую-
щий:  для  каждого кода символа (00h - ffh) проверяется наличие
его альтернативного описания,  если такое существует,  то оно и
загружается в знакогенератор, в противном случае в знакогенера-
тор загружается основное описание символа.
     План памяти,  приведенный выше,  можно  рассматривать  как
конкретный  пример  и  только.	Каждый тип видеоадаптера  имеет
свой набор типоразмеров шрифтов.  Например, видеоадаптер Laptop
6100V в VGA режимах использует шрифты 8х19 вместо шрифтов 8х16!
А различные видеоадаптеры типа VGA могут иметь от 3 до 8  типо-
размеров шрифтов.
     При инициализации конкретного режима  видеоадаптера,  BIOS
загружает  знакогенератор конкретным типоразмером шрифта из ПЗУ
и устанавливает соответсвующие видеопараметры (параметры  экра-
на,  типоразмер загруженных шрифтов,  размер видеобуфера и дру-
гие) в рабочей области BIOS.  Причем, для одного и того же зна-
чения  кода  режима  (Mode) различные типы видеоадаптеров могут
установить совершенно разные режимы  работы  экрана  !	Поэтому
приведенную  выше  сводную таблицу режимов нельзя рассматривать
как универсальную для всех типов видеоадаптеров.  И  что  самое
интересное, что алгоритм построения полного драйвера видеоадап-
тера не предусматривает априорные знания всех видеорежимов (см.
ниже) !

		1.2. Получение видеоинформации.
		───────────────────────────────

     На входе INT 10h:
     ────────────────
     ax = 1130h
     bh = код:
	  0 - выдать ES:BP ==> INT 1fh	    (EGA, VGA и др.)
	  1 - выдать ES:BP ==> INT 44h/43h  ----"-----"-----
	  2 - выдать ES:BP ==> 8x14 ПЗУ     ----"-----"-----
	  3 - выдать ES:BP ==> 8x8  ПЗУ     ----"-----"-----
	  4 - выдать ES:BP ==> 8x8  ПЗУ 2 половина  --"-----
	  5 - выдать ES:BP ==> 9x14 ПЗУ     ----"-----"-----
	  6 - выдать ES:BP ==> 8x16 ПЗУ  *  (VGA и др.)
	  7 - выдать ES:BP ==> 9x16 ПЗУ  *  (VGA и др.)
	  8 - выдать ES:BP ==> 8x11 ПЗУ  *  (TVGA)
	  9 - выдать ES:BP ==> 9x11 ПЗУ  *  (TVGA)
	  .............................  *
	 .. -	 и так далее		 *

     * - помечены функции, которые могут отсутсвовать или иметь
другой	смысл  (для  Laptop 6100V код 6 возвращает адрес шрифта
8х19) в видеосервисе BIOS адаптеров типа VGA.

				9

     На выходе:
     ──────────
     ax = 1100h - если нет такого шрифта в ПЗУ (статус	отрица-
		  телен); при этом:
	  es:bp - не изменяются
	     cx - размер символа загруженного шрифта в байтах
	     dl - число строк экрана на данный момент

     ax = 0000h - в противном случае (статус положителен) и:
	  es:bp - требуемый адрес описания шрифта
	     cx - размер символа загруженного шрифта в байтах
		  (может не совпадать с требуемым)
	     dl - число строк экрана на данный момент

     Поведение этой  функциии различно для каждого типа видеоа-
даптера.  Например, для адаптеров типа EGA значения кода больше
5 не имеют смысла.  BIOS видеоадаптеров VGA и выше выдают,  как
правило,  значение статуса функции обслуживания приведенное вы-
ше.  Статус  обслуживания  функции BIOS видеоадаптеров ниже VGA
(EGA и другие) можно определить по изменению  указателя  es:bp.
Если  он изменился - статус положителен и данная функция обслу-
живается BIOS ом,  в противном случае статус отрицателен и дан-
ная функция им не обслуживается.
     Итак, в общем  случае,  статус  обслуживания  видеофункции
1130h  можно (и нужно) определить по изменению указателя es:bp.
     Еще раз подчеркнем,  что регистры cx и dl на выходе содер-
жат текущие видеопараметры и не зависят от кода подфункции.

	      1.3. Инициализация знакогенератора.
	      ───────────────────────────────────

     На входе INT 10h:
     ────────────────
     al = код функции (см. ниже)
     bl = 0-3 определяет размер видеопамяти (64 - 256 kb)

	 В текстовом режиме :
	─────────────────────
    01h - загрузка шрифтов 8x14    (EGA, VGA и др.)
    02h - загрузка шрифтов 8x8	   (EGA, VGA и др.)
    04h - загрузка шрифтов 8x16 *  (VGA   др.)
    05h - загрузка шрифтов 8x11 *  (TVGA)
    06h - загрузка шрифтов 8x?? *  (????)
    ... - и т.д.		*

	 В текстовом режиме с установкой режима:
	────────────────────────────────────────
    11h - загрузка шрифтов 8x14    (EGA, VGA и др.)
    12h - загрузка шрифтов 8x8	   (EGA, VGA и др.)
    14h - загрузка шрифтов 8x16 *  (VGA и др.)
    15h - загрузка шрифтов 8x11 *  (TVGA)
    16h - загрузка шрифтов 8x?? *  (????)
    ... - и т.д.		*  (????)

				10

	 В графическом режиме:
	───────────────────────
   22h - загрузка шрифтов 8x14	  (EGA, VGA и др.)
   23h - загрузка шрифтов 8x8	  (EGA, VGA и др.)
   24h - загрузка шрифтов 8x16 *  (VGA и др.)
   25h - загрузка шрифтов 8x11 *  (TVGA)
   26h - загрузка шрифтов 8x?? *  (????)
   ... - и т.д. 	       *
_______________________________________________________________
     * -  помечены  функции,  которые  могут  отсутствовать или
иметь другой смысл (для Laptop 6100V функции 6,16 и  26  грузят
шрифт 8х19) в видеосервисе BIOS адаптеров типа VGA.

     На выходе:
     ──────────
  al=00 - функция  поддерживается   (статус положителен) шрифты
	  загружены.
  al=ah - функция не поддерживается (статус отрицателен)

     BIOS адаптеров типа VGA и выше, как правило, выдает статус
поддержки функции.  Этим  свойством  видеосервиса  BIOS можно и
нужно пользоваться для анализа имеющихся типоразмеров шрифтов в
ПЗУ.
     Следует отметить, что загрузка шрифтов в графических режи-
мах производится  без коррекции параметров экрана в рабочей об-
ласти BIOS (числа его строк) после загрузки  "неродного"  типо-
размера шрифта.  Это  конечно  явная ошибка разработчиков BIOS,
исправлять которую не следует разработчикам драйверов -  русси-
фикаторов.

	      1.4. Восстановление режима экрана.
	      ──────────────────────────────────

     На входе INT 10h:
     ────────────────
     ax = 1c02h
  ds:bx = адрес буфера
     cx - состояние

     На выходе:
     ──────────
  al=00 - функция  поддерживается  (статус  положителен) режим
	  восстановлен.
  al=ah - функция не поддерживается (статус отрицателен)

				11

	      1.5. Дополнительный видеосервис.
	      ────────────────────────────────
     Очень полезная  функция видеосервиса BIOS 1ah, позволяющая
идентифицировать адаптер с основным и  альтернативным дисплеями
на Вашей  ПЭВМ.  Имеется только на старших моделях видеоадапте-
ров (PS/2, VGA, TVGA, MCGA и др).

     На входе INT 10h:
     ────────────────
     ah = 1ah
     al = 0
     На выходе:
     ──────────
  al=ah - функция не поддерживается (статус отрицателен)
  al=00 - функция  поддерживается  (статус  положителен) и:
     bl = код активнонго дисплея
     bh = код альтернативного дисплея
     Коды дисплея:
     ────────────
    00h - дисплей отсутсвует
    01h - монохромный адаптер / монохромный дисплей
    02h - CGA адаптер / цветной дисплей
    03h - резерв
    04h - EGA адаптер / цветной дисплей
    05h - EGA адаптер / монохромный дисплей
    06h - PGA адаптер / цветной дисплей
    07h - VGA адаптер / монохромный аналоговый дисплей
    08h - VGA адаптер / цветной аналоговый дисплей
    09h - резерв
    0ah - MCGA адаптер / цифровой цветной дисплей
    0bh - MCGA адаптер / монохромный аналоговый дисплей
    0ch - MCGA адаптер / цветной аналоговый дисплей
   0ffh - неопределен тип адаптера и дисплея

  2. Основные функции полного драйвера (руссификации) дисплея.
 ═════════════════════════════════════════════════════════════

     Программа -  драйвер  (руссификатор)  дисплея,  перехватив
вектор прерывания INT 10h,  должна резидентно отслеживать обра-
щения  ко всем вышеперечисленным функциям видеосервиса (за иск-
лючением функции 1ah) и работать корректно по отношению к BIOS:
     - производить анализ установленного режима работы	видеоа-
даптера,  и в зависимости от него, производить загрузку требуе-
мого типоразмера "своего" шрифта;
     - сохранять  значение  статуса видеофункции BIOS,	если он
существует, а при необходимости и формировать его.

				12

	 2.1. Алгоритм (пере)установки режима экрана.
	 ────────────────────────────────────────────
     См. п. 1.1. Возможен такой алгоритм:

     1) Выполнить функцию BIOS INT 10h:
	       pushf
	       db     9ah    ;call far
     OldV10h   dd     0      ;адрес старого вектора 10h
			     ;заносится при инициализации прог-
			     ;раммы
	Таким образом, установку режима экрана выполняет BIOS -
	это и есть реализация всех прописанных для данного  ви-
	деоадаптера режимов. Нас мало интересует: каким образом
	BIOS это делает?  Мы в дальнейшем должны по мере  своих
	возможностей сохранить	все полученные при этом резуль-
	таты:
     2) Запомнить регистры (как минимум ax).
     3) Произвести  анализ  установленного  BIOS  -  ом  режима
	(текст / графика, типоразмер загружаемых шрифтов).
     4) Загрузить русскоязычные шрифты определенного выше типо-
	размера для текстового или графического режима	без его
	установки (чтобы  не  запортить результаты деятельности
	BIOS). Как это делается ? Можно найти в документации по
	видеосервису BIOS:

  2.1.1. Инициализация знакогенератора шрифтами пользователя.
  ───────────────────────────────────────────────────────────
     На входе INT 10h:
     ────────────────
     ah = 11h
     al - код подфункции:

 00h  - Загрузка шрифтов пользователя в режиме текста
	es:bp ==> описание шрифов пользователя
	cx -  количество описанных символов
	dx -  с какого символа (смещение)
	bl -  0-3 опр.память EGA
	bh -  размер  описанного  символа  (8/14/16/11/19/??) в
	      байтах

 10h  - Загрузка шрифтов пользователя в режиме текста
	с установкой режима. (аналог 00h)

 20h  - Загрузка шрифтов пользователя в графических CGA режимах
	(режимы 4 - 6  с инициализацией вектора 1fh)
     es:bp - ===> описание шрифта 8x8_2 (вторая половина)

 21h - Загрузка шрифтов пользователя в графических (не CGA) ре-
       жимах (кроме режимов 4-6) с инициализацией вектора 43h
     es:bp - ===> описание шрифта 8x8/14/16/11/??
	cx - размер символа описанного шрифта в байтах
	bl - 0 ==> dl = число строк экрана,  в противном случае
	     в bl код числа строк экрана:
	     1 - 14 строк
	     2 - 25 строк
	     3 - 43 строки

				13

     На выходе:
     ──────────
  Производится инициализация	знакогенератора   видеоадаптера
шрифтами пользователя,	производится переустановка видеорежима,
если это задано.

     5) Восстановить   все   ранее   запомненные   регистры   и
	возвратиться в прерванную программу через iret.

	 2.2. Алгоритм выдачи видеоинформации.
	 ─────────────────────────────────────
     См. п. 1.2. Возможен такой алгоритм:

     1) Выполнить функцию BIOS INT 10h (см. п. 2.1.1)).
     2) По возвращенному статусу поддержки  функции  определяем
	обслуживается ли данная функция в BIOS (см. п. 1.2).
	Если нет,  то возвращаемся через iret в прерванную про-
	грамму, в  противном  случае  откорректируем  указатель
	es:bp на описание "своего" шрифта (если такое существу-
	ет) и через iret возвратимся в прерванную программу.

     Здесь возврат  статуса поддержки функции обеспечивается на
уровне BIOS.  Драйвер не должен его портить. Алгоритм определе-
ния адреса "своего" описания шрифта не совсем прост, как кажет-
ся на первый взгляд.  Я не привожу его,  так как для его разра-
ботки  не  требуется  специальных  знаний, выходящих за пределы
данной статьи.

	 2.3. Алгоритм (пере)загрузки шрифтов.
	 ─────────────────────────────────────
     См. п. 1.3. Возможен такой алгоритм:

     1) Выполнить функцию BIOS INT 10h (см. п. 2.1.1)).
     2) По статусу данной функции возвращенному в al определяем
	обслуживается ли данная функция в BIOS (см. п. 1.3).
	Если нет,  то возвращаемся через iret в прерванную про-
	грамму, в противном случае переходим к 2.1.2).

     Здесь возврат  статуса поддержки функции обеспечивается на
уровне BIOS.  Драйвер не должен его портить. Недостаток данного
алгоритма - дважды инициализируется знакогенератор - зато прос-
то. Я пользуюсь другим алгоритмом:
     Программа в  режиме инициализации драйвера производит пос-
ледовательный опрос функций загрузки шрифтов  BIOS  с  анализом
типоразмера загружаемого шрифта, в результате которого строится
таблица вида:

     N подфункции	  N подфункции		Типоразмер
   текстового режима   графического режима  загружаемого шрифта
       01h/11h		     22h		   14
       02h/12h		     23h		    8
       04h/14h		     24h		   16 (??)
       05h/15h		     25h		   ??
       06h/16h		     26h		   ??
       .../...		     ...		   ..

				14

     Эта таблица составляется всякий раз при загрузке программы
и хранится резидентно.	Отметим,  что данная таблица будет уни-
кальной  для  каждого  типа адаптера (BIOS).  А программа,  при
этом,  наделяется элементами  искуственного  интеллекта.  Тогда
возможен такой алгоритм:
     1) Запомнить регистры (как минимум ax).
     2) Если такой подфункции нет в таблице, то восстанавливаем
	регистры, формируем отрицательный статус функции (al=ah
	=11h и через  iret возвращаемся в прерванную программу.
	Можно еще корректнее: восстановить регистры и выполнить
	длинный переход по "старому" вектору.
     3) Если такая подфункция есть в таблице, то:
     4) Загрузим найденный "свой" шрифт (см.  п. 2.1.4)) в зна-
	когенератор.
     5) Восстановим  запорченные  регистры,  сформируем положи-
	тельный статус функции (al=00h) и через iret возвратим-
	ся в прерванную программу.
     Здесь возврат  статуса поддержки функции обеспечивается на
уровне драйвера.

	  2.4. Алгоритм восстановления реижма экрана.
	  ───────────────────────────────────────────
     См. п. 1.4. Возможен такой алгоритм:
     1) Выполнить функцию BIOS INT 10h (см. п. 2.1.1)).
     2) По статусу данной функции возвращенному в al определяем
	обслуживается ли данная функция в BIOS (см. п. 1.4).
	Если нет,  то возвращаемся через iret в прерванную про-
	грамму, в противном случае переходим к п. 2.1.2).

	     3. Некоторые полезные советы. Выводы.
	     ═════════════════════════════════════
     Если программа  -	драйвер (руссификатор) дисплея содержит
разделы 2.1 - 2.4 и  корректно	подменяет  аналогичные	функции
BIOS, то этого вполне достаточно для полного обслуживания виде-
оадаптеров последних моделей типа:  EGA,  VGA,	PS/2, MCGA и их
всевозможных модификаций.
     Программа, реализующая  полный алгоритм обслуживания виде-
оадаптера,  должна уметь распознавать  установленные  на  Вашей
ПЭВМ  видеоадаптер  и  монитор всякий раз при ее загрузке.  Это
можно сделать воспользовавшись видеофункцией 1ah (см.  п. 1.5),
если она поддерживается.  В противном случае необходимо проана-
лизировать тип установленнго контроллера видеоадаптера на уров-
не портов ввода / вывода.
     При разработке полного драйвера особое внимание надо  уде-
лить  правильному  возврату  статуса  видеофункции в прерванную
программу.  Такие пакеты как AUTOCAD и другие работают при этом
заметно быстрее.
     Разбор статуса  поддержки функций BIOS и их выходных пара-
метров желательно делать 1 раз при загрузке программы (при ини-
циализации  драйвера) после определения типа установленного ви-
деоадаптера и монитора.  Это позволит  Вам  упростить  алгоритм
резидентной части программы и заметно уменьшить ее длину. Алго-
ритм такого разбора должен быть полным,  ибо  он  и  определяет
полноту обслуживания видеоадаптера. Особо следует отметить, что
алгоритм разбора и полный алгоритм должны предусматривать рабо-
ту  с  BIOS,  которые не выдают статуса поддержки своих функций
(есть и такие - это как привило ранние версии BIOS) ! Если это-
го не  учесть,	то число адаптеров,  обслуживаемых Вашим полным
алгоритмом несколько уменьшится.

				15

     Для анализа режима установленного BIOS - ом не следует за-
водить в программе глобольную таблицу описания всех  существую-
щих режимов. Этого просто нельзя сделать. Ее вполне может заме-
нить  коротенькая,   написанная   Вами	 подпрограмма	анализа
установленного BIOS - ом (а не Вами) видеорежима,  для котрой в
рабочей области BIOS имеются все необходимые данные.  Графичес-
кий  или текстовый видеорежимы легко распознаются по параметрам
курсора или по объему видеобуфера и т. д..
     С ростом сложности видеоадаптера увеличивается число режи-
мов его работы и число типоразмеров шрифтов,  их обслуживающих.
Поэтому, желательно шрифты держать  в  виде  самоорганизованных
файлов (имеется  в  виду наличие небольшой шапки с параметрами)
отдельно от программы руссификации дисплея.  Сама же  программа
руссификации должна быть одна для всех типов дисплеев (если это
возможно).
     Адаптер типа EGA работает с 2 типоразмерами основных шриф-
тов:  8х8 и 8Х14;  TVGA - с 4:	8х8,  8х14, 8х16 и 8х11; Laptop
6100V - с 3:  8х8, 8х14 и 8х19. Программа - драйвер, использую-
щая полный алгортм,  будет полностью обслуживать все 3 адаптера
(да и многие другие) ВО ВСЕХ его РЕЖИМАХ.
     В такой короткой статье невозможно  полностью  рассмотреть
вопрос	построения  программы руссификации (укранизации и т.д.)
дисплея. Поэтому, стараясь осветить самое главное, описание об-
щеизвестных,  на мой взгляд, видеофункций мною было опущено. Не
рассматривался вопрос обслуживания видеодаптеров типа Hercules+
и им подобных.
     В статье не рассматривается вопрос мимимизации длины рези-
дентной части полного драйвера видеоадаптера.  Автором разрабо-
тан драйвер реализующий полное обслуживание видеоадаптера и ми-
нимизирована длина его резидентной части,  которая изменяется в
зависимости от типа обслуживаемого адаптера:
   ┌─────────────────────┬────────────────────┬───────────────┐
   │  Длина резидентной  │ Тип обслуживаемого │ Набор "своих" │
   │ части в килобайтах  │     адаптера       │    шрифтов    │
   ├─────────────────────┼────────────────────┼───────────────┤
   │	    1,3 	 │  CGA, Hercules и   │  8x8	      │
   │			 │	другие	      │ 	      │
   ├─────────────────────┼────────────────────┼───────────────┤
   │	    4,5 	 │  EGA 	      │  8x8,  8x14   │
   ├─────────────────────┼────────────────────┼───────────────┤
   │	    4,9 	 │  VGA и выше	      │  8x8,  8x14,  │
   │			 │  (TVGA)	      │  8x16, 8x11   │
   └─────────────────────┴────────────────────┴───────────────┘
     Драйвер обслуживает большое  число  видеоадаптеров  в  том
числе и: ЕС1840.0002, ЕС1840.0002.01, Robotron EC1834 и СМ1810,
Laptop 6100V, EVA/1024, VEGA, PEGA, Hercules+ и другие. Замечу,
что полнота обслуживания не определяется количеством обслужива-
емых видеоадаптеров,  которое есть некий результат времени экс-
плуатации драйвера на различных типах ПЭВМ.
     Автор надеется,  что Вы разработаете полный драйвер обслу-
живания  дисплея  с  еще  более  лучшими характкристиками,  что
обеспечит Вам успех на рынке программного обеспечения как в на-
шей стране,  так и за рубежом.	Дерзайте !
     Ну а тем, кому захочется заиметь разработанный мною полный
драйвер обслуживания видеоадаптера небольших размеров (см.  вы-
ше),  а также и программы тестирующие работу  видеоадаптера  (а
значит и BIOS) c любым установленным драйвером, можно связаться
со мною по тел.: 252-63-23.

				16

     Надеюсь, что  мне	не придется больше тестировать "свежие"
драйверы дисплея, обслуживающие адаптер типа VGA, которые:
     - в ответ на: int 10h (ah=11h, al=01h/11h/22h) инициализи-
       руют знакогенератор шрифтами типоразмера 8х16;
     - необслуживают расширенные режимы;
     - являясь "универсальными",  обслуживают  только  адаптеры
       типа VGA, только некоторые их модификации и только стан-
       дартные их режимы, да и те не совсем верно.

     И последнее.  Автор считает, что нет никакой необходимости
в  объединении функций обслуживания клавиатуры и экрана в одной
программе.  Это совершенно разные задачи.  А  создание	полного
драйвера обслуживания клавиатуры (существует более десятка все-
возможных видов клавиатур) - это другая, не менее сложная зада-
ча.

