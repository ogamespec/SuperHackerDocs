                                   FIELDVIEW
              
              Команда моделирует  нажатие  клавиш  {Alt}{F5}  или
              {Ctrl}{F} и позволяет входить в режим просмотра по-
              ля.
              
Синтаксис     FIELDVIEW
              
Описание      Команда FIELDVIEW,    аналогично   {Alt}{F5}    или
              {Ctrl}{F}, открывает    текущее поле для детального
              просмотра или редактирования.  Внутри  поля  курсор
              может перемещаться под любой символ, содержащийся в
              открытом поле. Курсор может находится либо в образе
              (в режиме просмотра таблицы или формы)  либо в зап-
              росе, либо  в меню.  Во всех других случаях команда
              игнорируется.
              
Использование Вспомните, как  используются  команды   ENTER   или
              DO_IT! для выхода из режима просмотра поля.
              
Примеры       VIEW "stock"
              FIELDVIEW   ;режим просмотра поля
              MESSAGE ISFIELDVIEW () ; возвращает TRUE
-----------------------------------------------------------------
                                   FIRSTSHOW
               
              Команда делает текущий образ первым видимым образом
              рабочего пространства.
              
Синтаксис     FIRSTSHOW
              
Описание      Команда "прокручивает"  рабочее  пространство таким
              образом, что текущее изображение появляется в верх-
              ней части экрана. Команда FIRSTSHOW позволяет поль-
              зователю с меньшими  затратами  писать  приложения,
              которые имеют законченный вид.  Она особенно полез-
              на, когда в приложении требуется разместить в рабо-
              чем пространстве   одновременно  несколько  таблиц,
              причем только одна должна быть показана пользовате-
              лю под управлением команды WAIT. В этом случае таб-
              лица, которая  высветится на экране,будет последней
              помещенной в рабочее пространство (это значит,  что
              все другие таблицы находятся выше ее).   Затем  эта
              команда используется для того,  чтобы поместить лю-
              бую из указанных таблиц в верхнюю часть экрана, не-
              зависимо от того, сколько в ней содержится строк.
              
Примеры       В этом  фрагменте  показано начало приложения,  где
              сперва в рабочем пространстве размещаются несколько
              таблиц, а затем вызывается команда WAIT.
         
              VIEW "customer" ;заказчики и товары
              VIEW "products"  ;cправочная таблица
              VIEW "employee"
              VIEW "orders"   ;пользователь будет смотреть
                              ;заказы в процедуре WAIT
              FIRSTSHOU       ;помещает таблицу заказов в
                              ;верхнюю часть экрана
              WAIT TABLE      ;вход в процедуру WAIT
              PROMPT "Переместите курсор к заказу, который",
                   "необходимо обработать и нажмите кл. F2"
                  UNTIL "F2"
                  .   .   .
         
См.также      DOWNIMAGE, UPIMAGE, IMAGENO и NIMAGES
-----------------------------------------------------------------
                                      FOR
              
              Команда выполняет последовательность команд  задан-
              ное число раз.
              
Синтаксис     FOR <VarName>
                  <<FROM <Number1>>>
                  <<TO <Number2>>>
                  <<STEP<Number3>>>
                    <Commands>
              ENDFOR ,
              где: Number1,   Number2,  Number3 - целые величины,
              обозначающие соответственно:    начальное  значение
              счетчика, конечное значение счетчика, число, на ко-
              торое должен  увеличиваться  счетчик  циклов  после
              каждого прохода.
              
Описание      Команда FOR выполняет последовательность <Commands>
              столько раз, сколько определяется счетчиком, значе-
              ние которого   запоминается  в  переменной VarName.
              Счетчик управляется ключевыми словами FROM,   TO  и
              STEP. Комбинации    указанных параметров определяют
              количество циклических повторений указанной  после-
              довательности команд.    Если величина STEP положи-
              тельна, и  введено значение TO,   процесс  итерации
              продолжается так   долго,  пока величина переменной
              VarName будет меньше или равна  значению  параметра
              Number2. Если    же величина STEP отрицательна,  то
              итерация будет продолжаться так долго, пока величи-
              на переменной  VarName будет больше или равна вели-
              чине параметра Number2.   Если  переменной  VarName
              предварительно не было присвоено значение,  то клю-
              чевое слово FROM будет создавать переменную и прис-
              ваивать ей значение величины Number1.
              
Использование Вы можете  использовать  команду  FOR  без ключевых
              слов FROM, TO и STEP:
              - Если  величина  FRON пропущена,  то счетчик ведет
              отсчет, начиная   с  текущего  значения  переменной
              VarName. Если   значение переменной VarName не было
              присвоено и величина FOR опущена,  то остаток цикла
              FOR будет игнорироватся,  но это не будет приводить
              к ошибке скрипта.
              - Если  значение TO опущено,  то цикл FOR будет вы-
              полняться бесконечно.
              - Если  значение STEP опущено,  то счетчик будет по
              умолчанию увеличиваться на 1.
              Если команда QUITLOOP используется внутри тела цик-
              ла, заданного  командой FOR, то цикл FOR/ENDFOR бу-
              дет покинут.  Если команда LOOP используется внутри
              тела цикла, то команды, следующие за командой LOOP,
              будут пропущены, а значение счетчика будет увеличи-
              ватся и итерация  будет  продолжаться  до  верхнего
              значения цикла FOR.
              
Примеры       Этот пример  высвечивает  на  экране  даты  через 7
              дней, начиная с 1 января 1987 года:
                    
                    FOR Date FROM 1/1/87 TO 1/1/88 STEP 7
                      ? Date
                    ENDFOR

              Следующий фрагмент процедуры  Checkpass  использует
              цикл FOR для предоставления пользователю возможнос-
              ти тремя способами вводить правильное имя пользова-
              теля (смотрите описание команды PROC ниже).
                    
              PROC Checkpass()
              PRIVATE nameok, pass
              PASSWORD "dontshowit"  ;пароль таблицы SECRETS
              VIEW "secrets"
              MOVETO FIELD "names"
              FOR i FROM 1 TO 3      ;3 возможности
                @2,4 ? "Введите Ваше имя:"
                ASSEPT "A15" to user
                CURSOR OFF           ;очистить все сообщения
                @3,4 CLEAR EOS
                CURSOR NORMAL
                LOCATE user          ;попытка найти имя
                IF retval            ;если имя правильное
                  THEN nameok=True   ;установка флага
                    QUITLOOP
                  ELSE
                    MESSAGE "Имя не найдено. Повторите ввод"
                ENDIF
              ENDFOR
                  .  .  .            ;остаток процедуры
              ENDPROC
         
См.также      QUITLOOP и LOOP, а также WHILE.
-----------------------------------------------------------------
                                    FORMKEY
              
              Команда моделирует  нажатие клавиши {F7} и предназ-
              начена для     переключения   между    изображением
              табличного вида и формой.
              
Синтаксис     FORMKEY
              
              Команда переключает изображение на экране из режима
              просмотра текущей таблицы в режим просмотра формы и
              наоборот. Если  система Paradox находится не в под-
              ходящем режиме,  команда  игнорируется.   Следующая
              таблица показывает  действие команды FORMKEY в раз-
              личных режимах системы Paradox:
         
     
             Режим ------------------  Действие
        
       Главный, Редактирование,     Переключает в режим про-
       Совместное редактирова-      смотра формы
       ние/просмотр таблицы
         
       Главный, Редактирование,     Переключает в режим про-
       Совместное редактирова-      смотра таблицы
       ние/просмотр формы
       
       Все другие контексты         Нет действия
         
Использование Команда позволяет  выбирать  небходимые  формы  для
              представления изображения на экране  дисплея.   Это
              могут быть   стандартные  формы системы Paradox для
              текущей таблицы,  если заказанная форма не хранится
              как форма F для таблицы. Также может быть использо-
              вана команда  PICKFORM  для  назначения  заказанной
              формы, как   наиболее предпочтительной для текущего
              изображения.
         
Примеры       VIEW "products"
              END     ;последняя запись таблицы
              FORMKEY ;режим просмотра формы
         
См.также      PICKFORM
-----------------------------------------------------------------
                                  FORMTABLES
              
              Возвращает список таблиц,  объединенных в многотаб-
              личную форму.
              
Синтаксис     FORMTABLES  <имя таблицы><имя формы><имя массива>
              
Описание      Для данной таблицы и одной из ее форм команда возв-
              ращает массив,  содержащий имена всех таблиц,  объ-
              единенных в эту форму.Имя формы должно быть строкой
              "F", от  "1" до "14" или числом от 1 до  14  (число
              преобразуется в строку автоматически).При необходи-
              мости система Paradox  создает  массив  необходимой
              размерности. Системная переменная RETVAL устанавли-
              вается в TRUE (истинно),  если в форме имеются свя-
              занные таблицы, и FALSE (ложно) в противном случае.
              Выполнение команды приводит к ошибке скрипта,  если
              таблица или форма не существует,  имя формы неверно
              или пользователь не имеет права доступа  к  таблице
              или она блокирована.
              
Использование Вы можете использовать функцию ISMULTIFORM()  перед
              выполнением команды FORMTABLES,   чтобы  проверить,
              является ли   форма многотабличной.После выполнения
              команды можно использовать ARRAYSIZE(),  чтобы  вы-
              числить количество таблиц, связанных в форме.
              
Примеры       Проверяется, является  ли  активная  форма текущего
              образа многотабличной, и, если так, то вычисляется,
              сколько таблиц в ней связано.
              
              IF ISMULTIFORM (TABLE(),FORM())
                THEN FORMTABLES TABLE() FORM() embedlist
                    MESSAGE ? "Всего",ARRAYSIZE(embedlist),
                    "связанных таблиц в форме",TABLE(),".F"
                  ELSE MESSAGE "Текущая форма однотабличная"
              ENDIF
              
Версия        Команда FORMTABLES была добавлена в систему Paradox
              версии 3.0.
-----------------------------------------------------------------
                                   GRAPHKEY
              
              Имитирует нажатие клавиш {Ctrl}{F7},  чтобы вывести
              график по текущей таблице.
              
Синтаксис     GRAPHKEY
              
Описание      Команда отображает график по текущей таблице на эк-
              ране.Она использует   текущие  установки для вывода
              графиков и следующие правила преобразования:
              - название координатной оси X и метки на ней берут-
              ся из имени поля и значений в :
                 - первого нечислового поля (в таблице без ключа)
                 - самого  правого  поля ключа ( в таблице с клю-
              чом)
              - данные  для  построения графика берутся из первых
              шести числовых полей,  начиная  с  текущей  позиции
              курсора в таблице;
              - метки графиков берутся из имен полей,  из которых
              берутся данные.
              
Примеры       Предположим, вы сгенерировали таблицу answer,   со-
              держащую данные  об ордерах.теперь вы можете кросс-
              табулировать ее и вывести график.
              
              MOVETO FIELD "Quantaty"
              ROTATE
              MOVETO FIELD "Book"
              CROSSTABKEY
              GRAPFKEY
              
Версия        Команда GRAPHKEY  была  добавлена в систему Paradox
              версии 3.0.
-----------------------------------------------------------------
                                    GROUPBY
              
              Имитирует нажатие клавиши {Shift}{F6}, чтобы сгруп-
              пировать записи по значению текущего  поля  запроса
              без его отображения.
              
Синтаксис     GROUPBY
              
Описание      Эта команда, как и соответствующая клавиша, помеща-
              ет или стирает символ группирования в текущем  поле
              текущего запроса в рабочей области.Этот символ фор-
              мирует группы,  базирующиеся на значениях поля,  но
              не отображает это поле в результате.Если курсор на-
              ходится не в форме запроса,  то команда игнорирует-
              ся.
              
Версия        Команда GROUPBY была добавлена  в  систему  Paradox
              версии 3.0.
-----------------------------------------------------------------
                                     HELP
              
              Команда моделирует нажатие клавиши {F1} для  вывода
              подсказки на экран.
              
Синтаксис     HELP
              
Описание      Команда выводит   на  экран  текст  помощи  системы
              Paradox в зависимости от текущего состояния. Коман-
              да может   использоваться  в  любом  режиме системы
              Paradox.
              
Использование За исключением случая,  когда  пользователь  вводит
              данные в таблицу, для которой существует справочная
              таблица (в этом случае команда HELP выводит пользо-
              вателю справочную  таблицу),  Вам нет необходимости
              использовать команду HELP в Вашем скрипте,  так как
              команда выдает помощь системы Paradox,  а не Вашего
              приложения. С другой стороны, Вы можете подготовить
              собственный экран   помощи  и  использовать команду
              WAIT UNTIL "F1" внутри скрипта.
         
Версия        В версиях 1.0 и 1.1 команда  невозможна  в  течение
              процедуры WAIT. В версии 2.0, если помощь определе-
              на для таблицы,  пользователь может нажать  клавишу
              {HELP} в течение цикла WAIT, и взаимодействовать со
              справочной таблицей.
-----------------------------------------------------------------
                                     HOME
          
              Команда моделирует нажатие клавиши {Home}.
              
Синтаксис     HOME
              
              Действие команды HOME аналогично действию при нажа-
              тии клавиши {HOME} и зависит от текущего контекста.
              Обычно команда используется для того, чтобы сделать
              текущей на  экране или в изображении запроса первую
              запись. Это  же действие производит команда  как  в
              режиме "просмотр таблицы", так и в режиме "просмотр
              формы". Заметим,   что команда HOME,  при изменении
              текущей записи  не изменяет текущего поля.  Команда
              END является комплементарной по отношению к команде
              HOME. Если  система Paradox находится не в подходя-
              щем режиме, команда игнорируется. Следующая таблица
              показывает действие  команды HOME в различных режи-
              мах системы Paradox:
             
             Режим ------------------  Действие
        
       Главный, Редактирование,    Переводит курсор к первой
       Совместное редактирова-     записи
       ние
       Любой режим/Просмотр        Переводит курсор к первому
       поля                        символу поля
       
       Форма                       Переводит курсор к первой
                                   строке формы
                                               
       Редактор отчетов            Переводит курсор к
                                   верхней строке
         
       Редактор скриптов           Переводит курсор к
                                   первой строке скрипта
         
Примеры       Данный фрагмент  переносит  в  рабочее пространство
              таблицу "orders"(заказы) и переводит курсор в пози-
              цию с полем 1 и записью 1.
              
                MOVETO [orders ->]
                HOME
                CTRLHOME
-----------------------------------------------------------------
                                      IF
              
              Команда выполняет  одну из двух альтернативных пос-
              ледовательностей команд в зависимости  от  значения
              логического условия.
              
Синтаксис     IF <условие>   THEN <команды> ENDIF
              
              или
              
              IF<условие> THEN   <команды 1>    ELSE <команды 2>
              ENDIF
              
Описание      В первом случае,  если значение <условие>=TRUE (ис-
              тинно), выполняются  команды,  заданные в поле <ко-
              манды>. Если  значение = FALSE (ложно), то они про-
              пускаются. Во      втором  случае,   если  значение
              <условие> истинно, то выполняются команды, заданные
              в поле <команды 1>,  в противном случае выполняются
              команды, заданные  в поле <команды 2>.  Эта команда
              может занимать  несколько строк,  если в полях <ко-
              манды 1> и <команды 2> много команд.  Полезно выде-
              лять команды THEN и ELSE,  чтобы последовательность
              лекго воспринималась при чтении  программы.   Также
              заметим, что  команда IF может быть вложенной, т.к.
              команды из <команды 1> и <команды  2>  также  могут
              содержать IF.
              
Примеры           IF stock < 100
                   THEN PLAY "TTT"
                   stock = stock + 10
                 ENDIF
                                                                                                                                                                                                                                                               
                 IF(ISBLANK(lastname))
                     THEN MESSAGE "Введите последнее имя"
                   ELSE
                     VIEW "names"
                     MOVETO [lastname]
                     IF retval
                       THEN MESSAGE "найдено",lastname
                       ELSE MESSAGE "не найдено",lastname
                     ENDIF
                 ENDIF
-----------------------------------------------------------------
                                  IMAGERIGHTS
              
              Команда устанавливает или удаляет право доступа.
              
Синтаксис     IMAGERIGHTS << <UPDATE> | <READONLY> >>
              
Описание      Команда позволяет  вам  ограничить  право доступа к
              таблицам. Заметим,   что команда никогда  не  может
              расширить доступ  пользователя к отдельной таблице,
              если право доступа к ней были ограничены ранее дру-
              гим паролем. Команда только может дополнительно ог-
              раничить их.  Команда IMAGERIGHTS очищает различные
              ограничения, которые   были наложены предшествующим
              исполнением зтой команды; уровень доступа возвраща-
              ется к правам таблицы, определенным паролем пользо-
              вателя. Опции  UPDATE и READONLY  показывают,   что
              пользователь может только модифицировать (т.е.  мо-
              дифицировать неключевые поля) или только читать ве-
              личины в   текущем изображении соответственно.  Для
              детального изучения вопроса о применении паролей  и
              правах таблиц смотрите в книге "Руководство пользо-
              вателя по    системе   PARADOX"   описание   услуги
              Tools/More/Protect.
              
Использование Команда IMAGERIGHTS особенно полезна в многопользо-
              вательских приложениях,  когда Вы хотите  управлять
              правом доступа   к таблице по правилу "пользователь
              за пользователем".
              
Версия        Команда IMAGERIGHTS  была введена в систему Paradox
              версии 2.0.
              
Примеры       Данный пример  позволяет пользователю просматривать
              таблицу, не  изменяя величин ключеквых полей до тех
              пор, пока    пользователь с именем Вова не запустит
              скрипт и не исправит существующий пароль.
         
              EDIT "salary"
              @ 2,4 ? "Enter password: "
              ACCEPT "A15" TO pass
              IF ((pass<> "imok") OR (USERNAME() <> "Вова"))
                THEN
                   IMAGERIGHTS UPDATE ; пользователь может
                    ;  посмотреть,  но  не изменять ключевых
                    ;  полей
              ENDIF
              WAIT TABLE
               PROMRT "Используйте клавиши перемещения курсора",
               "для путешествия по тавлице",
                  "нажмите "F2", если надо отредактировать".
               UNTIL "F2"
             IMAGERIGHTS ; уровень доступа возвращается к правам
                  ;таблицы, определенным паролем  пользователя.
             DO_IT!
              
См.также      Книгу "Руководство пользователя  по  системе  Пара-
              докс".
-----------------------------------------------------------------
                                     INDEX
              
              Команда создает  вторичную индексацию полей таблицы
              
Синтаксис     INDEX <имя таблицы> ON <имя поля>
              
Описание      Эта команда вызывает вторичную индексацию,  которая
              генерируется для  определенного  поля  определенной
              таблицы. Индексация  автоматически используется для
              убыстрения выполнения запросов.  Вторичная индекса-
              ция производится идентично индексации,  которая ге-
              нерируется с помощью  TOOLS/QUERY  SPEEDUP  в  меню
              системы Paradox   .   INDEX - наиболее простой путь
              создания этих индексаций. Вторичная индексация ком-
              понуется в двух файлах, каждый из которых имеет та-
              кое же корневое имя,  как и соответствующая им таб-
              лица. Расширение этих двух файлов имеет вид: .xnn и
              .ynn, где индексированное поле есть nn-ое поле таб-
              лицы, выраженное   в 16-тиричном представлении (ис-
              пользование 16-тиричного кода позволяет создать ин-
              дексацию для   каждой  из  255  возможных  полей  в
              таблице). Т.о,  если "Part No"- второе поле таблицы
              "orders", INDEX    "orders"  поля "Part No" создает
              файл вторичной индексации Orders.x02 и  orders.y02.
              Вторичная индексация  автоматически востанавливает-
              ся, если таблицы модифицируются. Вы можете ускорить
              востановление использованием  другой команды INDEX.
              Если же новая вторичная индексация уже  существует,
              то команда  INDEX не имеет значения.  Вторичная ин-
              дексация для данной таблицы есть часть имени табли-
              цы. Она может быть уничтожена выбором: TOOLS/DELETE
              /QUERYSPEEDUP из меню системы Paradox. Заметим, что
              нет необходимости   создавать  вторичную индексацию
              для первого поля таблицы,  т.к первичная индексация
              для этой таблицы автоматически используется в любом
              контексте. Язык  PAL и система Paradox  никогда  не
              требуют вторичной  индексации.  INDEX не может быть
              использован , когда таблица находится в рабочей об-
              ласти.
              
Примеры       INDEX  "order" ON "Part No"; создание индексации
              VIEW "order"              ; вывод таблицы в
                                             рабочую область
              MOVETO [PART NO]
              LOCATE 27001
-----------------------------------------------------------------
                                    INFOLIB
              
              Команда показывает имена таблиц,  хранящихся в биб-
              лиотеке.
              
Синтаксис     INFOLIB <имя библиотеки>
              
Описание      При выполнении этой команды образуется  специальный
              временный табличный список, который выводится в ра-
              бочую область. Эта таблица содержит имена процедур,
              хранящихся в библиотеке имя которой вы задали. Так-
              же показывается,  какое  количество  памяти  занято
              каждой процедурой.
              
Примеры       INFOLIB "mylib"
-----------------------------------------------------------------
                                      INS
              
              Команда моделирует работу клавиши {Ins}.
              
 Синтаксис    INS
              
Описание      Действие команды INS,  как и нажатие клавиши {Ins},
              зависит от текущего контекста. Если система Paradox
              находится не в подходящем режиме, команда игнориру-
              ется. Следующая таблица показывает действие команды
              INS в различных режимах системы Paradox:
         
             Режим ------------------  Действие
        
       Главный/форма запроса      Вставляет пустую строку
                                    
       Главный/просмотр табли-    Не действует
       цы или формы
         
       Совместное редактирова-    Вставляет пустую запись
       ние, редактирование,
       ввод данных
              
       Совместное редактирова-    Переключает режим
       ние/Просмотр Поля          вставка/замещение
                       
       Создать, изменить струк-   Вставляет пустую запись
       туру
                                           
       Форма                      Переключает режим
                                  вставка/замещение
         
       Редактор отчетов           Переключает режим
                                  вставка/замещение

       Редактор скриптов          Переключает режим
                                  вставка/замещение
-----------------------------------------------------------------
                                  INSTANTPLAY
              
              Моделирует нажатие  клавиш  {Alt}  {F4} и запускает
              выполнение instant скрипта.
              
Синтаксис     INSTANTPLAY
              
Описание      Команда INSTANTPLAY   запускает   скрипт  с  именем
              instant. Если такого скрипта нет, фиксируется ошиб-
              ка.
              
См.также      "Создание и запуск скриптов" для получения информа-
              ции о скриптах instant.
-----------------------------------------------------------------
                                 INSTANTREPORT
              
              Моделирует нажатие клавиш {Alt} {F7} для того, что-
              бы напечатать стандартный отчет для текущей таблицы
              
Синтаксис     INSTANTREPORT
              
Описание      Команда INSTANTREPORT  печатает  стандартный  отчет
              для текущей  таблицы,  находящейся в рабочем прост-
              ранстве. Аналогично    генератору  отчетов  команда
              INSTANTREPORT печатает отчет,  который был разрабо-
              тан последним. Если система Paradox находится в не-
              подходящем режиме, команда игнорируется.
         
       
             Режим ------------------  Действие
        
       Главный, Редактирование,     Печатает отчет для те-
       Совместное редактирова-      кущей таблицы
       ние
              
       Любой режим/Просмотр         Нет действия
       поля
              
       Форма                        Нет действия
              
       Редактор отчетов             Печатает отчет, исполь-
                                    зуя текущую спецификацию
              
       Редактор скриптов            Печатает листинг скрипта
         
Использование Вы можете использовать команду SETPRINTER для  спе-
              цификации порта    принтера,   на  который  команда
              INSTANTREPORT выводит информацию.
              
Примеры       PLAY "q1"        ; где q1 - форма запроса
              DO_IT!           ; выполнить запрос
              INSTANTREPORT    ; печать отчета
         
См.также      В книге  "Руководство   пользователя   по   системе
              Paradox" главу " Базовые отчеты".
-----------------------------------------------------------------
                                   KEYLOOKUP
              
              В режиме  совместного  редактирования ищет запись с
              заданным ключем.
              
Синтаксис     KEYLOOKUP
              
Описание      Когда происходит нарушение уникальности ключа в ре-
              жиме Совместного редактирования,  команда KEYLOOKUP
              (нажатие клавиши {Alt} {K}),  переключает либо  за-
              пись, которую  Вы пытаетесь ввести, либо существую-
              щую запись с этим же ключом.  Для того,  чтобы  ис-
              пользовать команды    KEYLOOKUP,   система  Paradox
              должна находиться в режиме Совместного редактирова-
              ния. В других режимах команда игнорируется.
              
Использование Команда особенно полезна для разрешения конфликтов,
              связанных с нарушением уникальности ключей в режиме
              совместного редактирования.   Команда позволяет Вам
              высвечивать либо запись,  которую Вы вводите,  либо
              уже существующую запись с этим же ключом. После за-
              полнения ключевых полей,  новой записи или, при ре-
              дактировании уже    существующей  записи,   команда
              KEYLOOKUP определяет,  имеется ли уже запись с  тем
              же ключом. Если да, то неключевые поля из существу-
              ющей записи переносятся в запись,  с которой Вы ра-
              ботаете. Выполнение    команды KEYLOOKUP возвращает
              новые величины,  которые Вы ввели. Когда Вы вводите
              новые записи в таблицу с ключами, Вы можете исполь-
              зовать команду LOCKKEY непосредственно после  ввода
              для того,  чторбы определить существует ли потенци-
              ально ситуация нарушения уникальности ключей.
              
Версия        Команда KEYLOOKUP  введена в систему Paradox версии
              2.0.
              
Примеры       Этот фрагмент    программы    использует    команду
              KEYLOOKUP для того что бы выделить величины из  су-
              ществующей записи   в течении цикла совместного ре-
              дактирования. Смотрите  также пример,   приведенный
              для команды LOCKRECORD.
         
              WHILE (True)
                LOCKRECORD      ; блокировка записи
                IF (retval)
                   THEN QUITLOOP ; блокировка успешна -
                    ;имя было новое, поэтому можно покинуть цикл
                ENDIF ; найти почему не было блоки-
                      ; ровки,  если  была  блокирована
                      ;запись, то (9), если таблица, то (3)
              IF (errorcode() = 9 or errorcode () = 3)
              THEN MESSAGE errormessage() + " ... попы- ",
                 "тайтесь опять".
              ELSE  ;  в  обратном случае конфликт ключей (53)
              KEYLOOKUP ; выделить существующую запись
              ENDIF ; подтверждает цикл и блокировку
              ENDWHILE ; заблокирована новая или старая запись
              
См.также      В книге   "  Руководство  пользователя  по  системе
              Paradox " описание режима COEDIT.
-----------------------------------------------------------------
                                   KEYPRESS
              
              Ввод любого символа в систему Paradox как  будто  с
              клавиатуры
              
Синтаксис     KEYPRESS <код символа>
              
Описание      Команда производит ввод символа, определенного зна-
              чением <код символа>. Аргумент <код символа> должен
              быть правильным кодом клавиши языка PAL. Допустимые
              значения включают коды ASCII  (положительные  числа
              или односимвольные   строки),  расширенные коды IBM
              (отрицательные числа)  и имена  клавиш  (выраженные
              строками).
              
Примеры       KEYPRESS  "MENU" ;копирует нажатие клавиши
                    ;{F10} в системе Paradox , т.о. вызывая меню.
              
              Заметим, что KEYPRESS "C" производит точно такое же
              действие, как просто нажатие "C" на клавиатуре.
              
              KEYPRESS 47 ; такой же как нажатие "/"
              
              Следующий пример вводит символы, набираемые пользо-
              вателем, в систему Paradox до тех пор, пока пользо-
              ватель не нажмет клавищу "Q"
              
              WHILE TRUE
                  C=GETCHAR()
                  IF C=ASC("Q")
                   THEN QUITLOOP
                   ELSE KEYPRESS C
                  ENDIF
              ENDWHILE
-----------------------------------------------------------------
                                     LEFT
              
              Команда моделирует нажатие клавиши {cтрелка влево}.
              
Синтаксис     LEFT
              
Описание      Действие команды  LEFT,   как  и  действие  клавиши
              {стрелка влево}, зависит от текущего контекста.Если
              система Paradox   находится не в подходящем режиме,
              команда игнорируется.  Следующая таблица показывает
              действие команды   LEFT в различных режимах системы
              Paradox:
         
        
             Режим ------------------  Действие
       Главный, Редактирование,    Перемещает курсор на одно
       Совместное редактирова-     поле влево  (если курсор
       ние/просмотр таблицы        находится в записи поля,
                                   помеченного #,то курсор
                                   перемещается к послед-
                                   нему полю предыдущей запи-
                                   си).
              
       Главный, Редактирование,    Перемещает курсор на одно
       Совместное редактирова-     поле влево или вверх (если
       ние/просмотр формы          курсор находится в первом
                                   поле,то перемещает его к
                                   последнему полю предыдущей
                                   записи.
              
       Любой режим/Просмотр        Перемещает курсор влево на
       поля                        один символ.
              
       Форма                       Перемещает курсор влево на
                                   один символ.
              
       Редактор  отчетов           Перемещает курсор влево на
                                   один символ.
              
       Скрипт                      Перемещает курсор влево на
                                   один символ.
                                               
              Заметим,что когда курсор находится в последнем поле
              записи, команда LEFT переносит курсор к первому по-
              лю предыдущей записи.
              
См.также      RIGHT
-----------------------------------------------------------------
                                    LOCATE
              
              Позиционирует на  запись с заданными значениями од-
              ного или нескольких полей.
              
Синтаксис     LOCATE <<NEXT>><<PATTERN>><field value>
              или
              LOCATE <<NEXT>> <field value1>...<field value n>
              
Описание      Эта команда пытается позиционировать  на  запись  в
              текущей таблице,  значения полей которой удовлетво-
              ряют значениям, заданным в команде.Заметим, что при
              использовании связанной   таблицы  в многотабличной
              форме эта команда действует в пределах  ограниченй,
              накладываемых на  записи таблицы ее связью с другой
              таблицей. Первая форма команды позиционирует на за-
              пись, значение которой в текущем поле удовлетворяет
              значению <field value>.Записи просматриваются,  на-
              чиная с   начала  таблицы,  или,  если используется
              NEXT, с текущей записи таблицы.При обнаружении под-
              ходящей записи просмотр таблицы прекращается и най-
              денная запись становится текущей.Если просмотр  был
              безуспешным, то  текущая запись не изменяется.  Ис-
              пользование PATTERN позволяет использовать при  по-
              иске неполное  соответствие с помощью операторов ..
              и @ в <field value>.  Использование .. означает лю-
              бую группу  символов (в том числе и отсутствие их),
              @ заменяет один символ.  Любая комбинация литералов
              и таких   операторов  может быть использована в ка-
              честве ключа поиска для  команды.Если  используется
              PATTERN, то  при поиске не имеет значения, строчные
              или прописные буквы используются для задания  ключа
              поиска.В противном   случае  это имеет значение,  и
              строчные и прописные буквы различаются. При исполь-
              зовании второй  формы команды позиционирование про-
              исходит при совпадении значений первых n  полей  со
              значениями, заданными    в команде.При этом позиция
              курсора в таблице не имеет значения.В  такой  форме
              не может   быть использован PATTERN.В обоих случаях
              переменная RETVAL устанавливается в TRUE,  если ко-
              манда выполнена успешно, и в FALSE в противном слу-
              чае.
              
Использование Текущий образ должен быть образом таблицы или  фор-
              мы, иначе    возникает  ошибка скрипта.Если текущий
              образ является связанной таблицей в  многотабличной
              форме, LOCATE работает только с записями, связанны-
              ми с   текущей  записяью  в  главной  таблице  фор-
              мы.LOCATE автоматически   использует  все доступные
              первичные и вторичные индексы.  Так как LOCATE NEXT
              начинает поиск с текущей записи,  то надо выполнить
              команду DOWN до выполнения следующей  LOCATE  NEXT,
              иначе будет выполнено позиционирование на ту же те-
              кущую запись.
              
Примеры       Предположим, что курсор находится в поле Last Name.
              Эти команды выводят данные о фамилиях всех Смитов.
              
              VIEW "Customer"
              MOVETO "Last Name"
              LOCATE "Smith"
              WHILE RETVAL
                MESSAGE [First Name]
                SLEEP 1000
                DOWN
                LOCATE NEXT "Smith"
              ENDWHILE
-----------------------------------------------------------------
                                     LOCK
              
              Команда блокирует одну или несколько таблиц.
              
Синтаксис     LOCK <Locklist>
              
              где Locklist  -  список,  содержащий одну или более
              пар записей,  которые определяют таблицу и тип бло-
              кировки. Тип    блокировки  обозначается следующими
              ключами: FL (полная блокировка), WL (блокировка за-
              писи), PWL  (предотвращает блокировку записи),  PFL
              (предотвращает полную блокировку).
              
Описание      Команда LOCK пытается блокировать таблицы,  опреде-
              ленные в списке Locklist.  Если все таблицы, входя-
              щие в список,  удалось заблокировать,   то  команда
              считается успешно  завершенной и системная перемен-
              ная с именем Retval устанавливается  в  значение  "
              ИСТИННО", в  противном случае она устанавливается в
              значение " ЛОЖНО".  Вы можете использовать  функцию
              ERRORCODE для определения результата выполнения ко-
              манды LOCK.
              
Использование Команда LOCK выполняет блокировку при условии,  что
              все таблицы,  используемые командой,  были доступны
              перед операцией.  Если команда LOCK не может забло-
              кировать все таблицы, определенные в списке, то она
              не может заблокировать ни одной.
         
Версия        Команда LOCK была введена в систему Paradox  версии
              2.0.
              
Примеры       Эта программа дает пользователю исключительное пра-
              во записи в таблицу orders (заказы):
         
              LOCK "orders" WL, "orders" PWL
              
              Следующий пример  позволяет  заблокировать  таблицу
              Employee (служащие):
              
              WHILE (True)
                 LOCK "Employ" WL
                 IF (Retval)
                    THEN              ; успешна ли блокировка?
                      QUITLOOP        ; продолжить цикл
                    ELSE
                 MESSAGE Errormesage()    ; показать пользователю
                                      ; сообщение об ошибке
                 ENDIF
              ENDWHILE
                    
См.также      LOCKKEY, LOCKRECORD,     UNLOCK,      UNLOCKRECORD,
              ERRORRECORD.
-----------------------------------------------------------------
                                    LOCKKEY
              
              Моделирует одновременное  нажатие  клавиш  {Alt}{L}
              (Переключение блокировки).  Команда  блокирует  или
              разблокирует текущую запись.
              
Синтаксис     LOCKKEY
              
Описание      Команда включает  или  выключает блокировку текущей
              записи. При  разблокировке записи,  команда LOCKKEY
              сохраняет все изменения,  которые Вы сделали. После
              того, как  произошло нарушение уникальности ключей,
              команда LOCKKEY  изменяет существующую запись.  Для
              того, чтобы использовать команду LOCKKEY, необходи-
              мо находиться   в режиме Совместного редактирования
              системы Paradox. В других режимах команда игнориру-
              ется. Вы  можете использовать функцию ERRORCODE для
              определения результата блолкировки.
              
Использование В большинстве случаев предпочтительнее использовать
              команды LOCKRECORD и UNLOCKRECORD,  которые обеспе-
              чивают более тонкое управление Вашими приложениями,
              чем команда LOCKKEY.
              
Версия        Команда была  добавлена  в  версию  системы Paradox
              2.0.
              
См.также      LOCK ,LOCKRECORD ,UNLOCK и UNLOCKRECORD.
-----------------------------------------------------------------
                                  LOCKRECORD
              
              Команда блокирует текущую запись.
              
Синтаксис     LOCKRECORD
              
Описание      Команда блокирует текущую запись.  Системная  пере-
              менная retval  устанавливается в значение "ИСТИНО",
              если запись заблокирована,  в  значение  "ЛОЖНО"  в
              противном случае.  Если блокировка не удалась, сле-
              дует использовать функцию ERRORCODE для определения
              причины неудачи.  Для того,  чтобы использовать ко-
              манду LOCKRECORD, система Paradox должен находиться
              в режиме  совместного редактирования.  Действие ко-
              манды LOCKRECORD зависит от того,является ли  теку-
              щая запись   уже существующей или еще не зафиксиро-
              ванной в таблице.  Если команда вызывается для  еще
              не зафиксированной  записи,  то она имеет следующее
              действие: -  Запись будет зафиксирована в таблице -
              Запись будет  заблокирована - Если таблица содержит
              ключевые поля,  то запись будет перемещена на  пра-
              вильное место в соответствии с с ее ключом - Запись
              станет текущей.  Эти действия позволят Вам осущест-
              влять полное управление вводом новых записей в таб-
              лицы с ключевыми полями.
              
Версия        Команда LOCKRECORD введена в систему Paradox версии
              2.0.
              
Примеры       В следующем  фрагменте показан цикл Совместного ре-
              дактирования, управляемый скриптом.
              
              COEDIT "Employee"
              END DOWN        ;открыть в конце пустую запись
              FORMKEY
              WAIT RECORD     ;Здесь пользователь заполняет
                              ;имя
                PROMPT "Заполните Имя и Фамилию, нажмите F2"
                UNTIL "F2"
              WHILE (True)
                LOCKRECORD  ;попытка зафиксировать
                            ; и заблокировать
                IF (retval)
                   THEN QUITLOOP  ;блкировка  успешна,  было
              ;введено новое имя, поэтому цикл WHILE завершен.
                ENDIF           ;найти почему нет блокировки
               ;если была заблокирована запись, то(9),
               ;если была заблокирована таблица, то(3)
               IF(errorcode()=9 or errorcode()=3)
               THEN MESSAGE errormessage()+"попытайтесь снова"
               ELSE
                     KEYLOOKUP ;отметить существующую запись
              ENDIF
              ENDWHILE
                  ;заблокировать новую или старую запись
              WAIT TABLE
              MESSAGE "Отредактируйте информацию о заказчике",
                      "Затем нажмите F2"
              UNTIL "F2"
              UNLOCKRECORD
              DO_IT! ; закончить совместное редактирование
         
См.также      KEYLOOKUP, LOCKKEY, UNLOCK и UNLOCKRECORD.
-----------------------------------------------------------------
                                     LOOP
              
              Команда передает управление вершине ближайшего цик-
              ла WHILE, SCAN или FOR.
              
Синтаксис     LOOP
              
Описание      Оператор LOOP,   выполняемый  внутри  тела структур
              WHILE-ENDWHILE, SCAN-ENDSKAN,  или FOR-ENDFOR, про-
              пускает команды, заключенные между ними и возвраща-
              ется к началу цикла.  Если команда LOOP выполняется
              не в теле цикла, то регистрируется ошибка.
              
Примеры       Уничтожается каждая  пятая запись таблицы "orders".
              
              EDIT "orders"        ; вызов таблицы
              i=1               ; установка счетчика
              SCAN                ; сканирование таблицы
                i=i+1             ; увеличение счетчика
                IF MOD(i,5)<>0    ; если не кратно 5
                 THEN LOOP       ; ничего не делать
                ENDIF
                DEL               ; уничтожить запись
              ENDSCAN
-----------------------------------------------------------------
                                     MENU
              
              Моделирует нажатие клавиши Меню {F10}.  Высвечивает
              текущее меню.
              
Синтаксис     MENU
              
Описание      Команда высвечивает текущее меню  системы  Paradox.
              Меню зависит от режима, в котором находится система
              Paradox. Каждый  режим имеет свое собственное меню.
              
Использование Команда обычно используется для вызова меню системы
              Paradox, к  которым нельзя получить доступ, исполь-
              зуя сокращенные команды.  В этом случае  Вы  должны
              указать в Вашем скрипте полный путь доступа к меню,
              причем каждая опция меню должна  быть  заключена  в
              фигурные скобки   или  выбиратся при помощи команды
              SELECT. Пункты  меню могут быть созданы при  помощи
              строк в кавычках или при помощи команды TYPEIN.
              
Примеры       Для того, чтобы поместить текущую таблицу в рабочую
              область Lotus 1-2-3 под тем же именем,   Вы  должны
              высветить меню Main:
              
              Menu {Tools} {ExportImport}  {1-2-3}  KEYPRESS  "1"
              SELECT TABLE() TYPEIN TABLE() {Enter}
              
См.также      В книге  "Руководство   пользователя   по   системе
              Paradox" главу "Меню системы Paradox и сообщения"
-----------------------------------------------------------------
                                    MESSAGE
              
              Команда превращает  свои  аргументы  в строки (если
              это необходимо), сцепляет их и выводит на дисплей в
              правый нижний угол.
              
Синтаксис     MESSAGE <message 1>,...,<message n>
         
Описание      Сообщение MESSAGE выдается на дисплей в контрастном
              цвете. Сообщение стирается с первым нажатием клави-
              ши или следующей командой MESSAGE.
              
Использование Аргументы не  должны  быть  обязательно символьными
              строками, большинство несимвольных значений автома-
              тически конвертируется  в символьные.Однако в неко-
              торых ситуациях необходимо преобразовывать  выраже-
              ние в   символьный вид для использования в команде.
              Это происходит,  когда в качестве  аргумента  стоит
              вычисляемое выражение.
              
Примеры       Команда выводит значение переменной t
              
              MESSAGE "Значение переменной равно:" t
              
              Следующая команда не будет работать:
              
              MESSAGE "Значение Z равно",(x+y)
              
              Необходимо использовать
              
              MESSAGE   "Значение   Z   равно"+STRVAL(x+y)
-----------------------------------------------------------------
                                    MOVETO
              
              Команда делает определенное поле,  запись или образ
              текущим.
              
Синтаксис     1.MOVETO <имя поля>
              делается текущим поле в образе
              
              2.MOVETO RECORD <номер>
              делается текущей  запись в таблице или группе запи-
              сей в многотабличной форме
              
              3.MOVETO <номер>
              делается текущим образ с таким номером  на  рабочей
              области или в многотабличной форме
              
              4.MOVETO <образ>
              делается текущим образ на  рабочей  области  или  в
              многотабличной форме
              
              5.MOVETO FIELD <имя поля>
              делается текущим поле в образе
              
Описание      Форма 1 команды перемещает курсор в поле или образ,
              заданный вами.    Это  эквивалентно  выбору из меню
              IMAGE/GOTO/FIELD в системе Paradox.  Текущая запись
              образа не изменяется.  Если заданное в команде поле
              не было определено в форме,  то  происходит  ошибка
              скрипта.
              Форма 2 перемещает курсор на заданную запись в  те-
              кущем образе   или  группе записей в многотабличной
              форме. Это      эквивалентно   выбору    из    меню
              IMAGE/GOTO/RECORD в системе Paradox. <Номер> должен
              быть целым числом между 1 и числом записей в табли-
              це. Любая    попытка выйти за пределы таблицы будет
              вызывать установку  признаков  "начало  таблицы"  и
              "конец таблицы". Вы можете использовать функции BOT
              и EOT для проверки существования этих условий.
              Форма 3 перемещает на заданный образ на рабочей об-
              ласти или в многотабличной форме. Эта версия коман-
              ды работает для отображаемых образов и образов зап-
              роса. Номер образа является его номером сверху вниз
              по рабочей   области.   Можно  использовать функцию
              IMAGENO, чтобы определить позицию нужного образа.
              Форма 4  перемещает  на  образ,  заданный в стороке
              <образ>. В случае, если имеется более, чем один об-
              раз таблицы в рабочей области, вы можете определить
              необходимый вам заданием номера или буквы Q  (чтобы
              задать образ запроса). При использовании форм 3 и 4
              <номер> или <образ>,  в который вы можете  перемес-
              титься, зависит от состояния рабочей области: - ес-
              ли отображается многотабличная форма, вы можете пе-
              реместиться только в образы,  представленные в этой
              форме - если вы находитесь в режиме DataEntry,   вы
              можете переместиться   к  другому образу только при
              использовании многотабличной формы, и если заданный
              образ содержится в этой форме.
              Форма 5 перемещает в поле,  имя которого  задано  в
              команде.
              
              MOVETO [Stock #]          ;переход к полю Stock #
              MOVETO [Products->Price]  ;переход к полю Price в
                                        ;образе Products
              MOVETO [orders(Q)->]      ;переход к текущему полю
                                        ;формы запроса для orders
              MOVETO RECORD 23          ;переход к 23-й записи
                                        ;текущей таблицы
              MOVETO 3                 ;переход к третьему образу
                                       ;на рабочей области
-----------------------------------------------------------------
                                 OPEN PRINTER
              
              Открывает канал текущего устройства печати.
              
Синтаксис     OPEN PRINTER
              
Описание      Эта команда  используется  для того,  чтобы открыть
              канал устройства печати; канал будет оставатся отк-
              рытым до появления команды CLOSE PRINTER или выхода
              из системы Paradox.  В большинстве случаев  система
              Paradox автоматически    управляет  низкоуровневыми
              операциями, такими  как открытие и закрытие  файлов
              или устройств,  за исключением управления принтером
              в сети.  В большинстве сетей при выводе страницы на
              принтер генерируется   заголовок страницы.  В конце
              вывода печатается заключительная страница.
              Из-за особенностей сетей, команды языка PAL PRINT и
              PRINTER могут  привести к непредсказуемым результа-
              там. Всякий  раз, когда в приложении, которое рабо-
              тает в сети,  появляется команда PRINT или PRINTER,
              новый заголовок страницы будет генерироватся.  Если
              некоторое число команд PRINT выполняется последова-
              тельно, например  в цикле, то заголовки страниц бу-
              дут перекрывать действительный выход.
              
Использование Команда OPEN  PRINTER  выполняет  текущую установку
              устройства печати.  Устройство  печати  может  быть
              присоединено либо к LPT1,  либо к порту, выбранному
              услугой Report/SetPrinter/Override из Главного  ме-
              ню, либо   связано по-умолчанию с портом устройства
              печати при помощи услуги Report/Setup из  программы
              кофигурации системы   Paradox.  После использования
              команды OPEN PRINTER не забудьте закрыть канал уст-
              ройства печати  после завершения работы с принтером
              при помощи команды CLOSE PRINTER в ваших приложени-
              ях.
                             
Версия        Команда OPEN PRINTER была введена в систему Paradox
              версии 2.0. Использование этой команды в предыдущих
              версиях будет приводить к синтаксической ошибке.
         
Примеры       SETPRINTER LPT2
              VIEW "orders"
              OPEN PRINTER
              PRINT "Large Orders Through "+ STRVAL(TODAY())
              SCAN FOR [Quan]>1000
                 printline="Customer:"+ STRVAL([Cust ID]
                 PRINT printline + "\n"
              ENDSCAN
              CLOSE PRINTER
              CLEARALL
              
См.также      CLOSE PRINTER, PRINT, PRINTER и SETPRINTER.
-----------------------------------------------------------------
                                  PAINTCANVAS
              
              Определяет стиль или цвета на канве языка PAL.
              
Синтаксис     PAINTCANVAS <<BORDER>> <<FILL <строка> >>
              << <BLINK> | <INTENSE> | <REVERSE>|
                 <BACKGROUND> | <ATTRIBUTE> <номер> >>
              <строка1>,<столбец1>,<строка2>,<столбец2>,
              
              где <строка1>,<столбец1>  - координаты левого верх-
              него угла прямоугольной области на экране, а
              <строка2>,<столбец2> -  координаты  правого нижнего
              угла этой области.
              
Описание      Команда PAINTCANVAS выводит текст,  определяет цвет
              области или стиль текста на канве.Ее действие расп-
              ространяется на  область,  заданную в команде с по-
              мощью координат левого верхнего и  нижнего  правого
              углов. Значение   <строки> должно быть целым числом
              между 0 и 24,  а <столбца> - целым числом от  0  до
              79. Опция BORDER определяет действие команды только
              на односимвольную рамку  вокруг  заданной  области.
              Опция FILL   определяет символьную строку,  которой
              заполняется заданная область.Если эта опция не ука-
              зана, то  символы в области не изменяются, а только
              изменяются атрибуты текста, находящегося в области.
              Стиль или   цвет  области можно определить одним из
              трех способов:  - использую опцию ATTRIBUTE,  чтобы
              установить цвета на канве языка PAL. Различные ком-
              бинации цветов фона и символов задаются  <номером>,
              который должен быть целым числом от 0 до 255. - ис-
              пользуя опции BLINK, INTENSE или REVERSE, чтобы оп-
              ределить стиль  текста в любой комбинации мерцания,
              повышенной интенсивности и  реверсивного  отображе-
              ния. -  используя BACKGROUND, чтобы оставить цвет и
              стиль области неизменным, изменяя только для строки
              из FILL.
              
Примеры       Если вы  используете  EGA-видеоадаптер  и  монитор,
              следующая команда определяет область с голубым  фо-
              ном и красными буквами в левом верхнем углу экрана:
              
              PAINTCANVAS ATTRIBUTE 20 0,0,12,39
              
              Следующий пример строит рамку из желтых квадратиков
              (ASCII 254) на циановом фоне вокруг экрана:
              
              PAINTCANVAS BORDER FILL CHR(254)
              ATTRIBUTE 62 0,0,24,79
              
Версия        Команда PAINTCANVAS   была   добавлена   в  систему
              Paradox версии 3.0.
-----------------------------------------------------------------
                                   PASSWORD
              
              Задает значение паролей,   позволяющих  осуществить
              доступ к таблице.  Если несколько таблиц имеют один
              и тот же пароль,  то достаточно  указать  его  один
              раз, и   Вы получите доступ ко всем таблицам с этим
              паролем.
              
Синтаксис     PASSWORD  <пароль  1>...<пароль n>
              
Описание      Заметим, что команды  сокращенного  меню,   которые
              оперируют с таблицами, защищенными паролями, не бу-
              дут исполняться,  если в скрипте предварительно  не
              был представлен пароль.  Желательно,  чтобы скрипт,
              который использует защищенные таблицы, тоже был за-
              щищен. Для  этих целей в меню системы Paradox выбе-
              рите TOOLS/PROTECT,  который защитит Ваш скрипт так
              же, как   и таблицу.  Команда UNPASSWORD может быть
              использована для восстановления защиты перед завер-
              шением работы скрипта.
              
Примеры       Если таблица  "orders" была защищена словом "Tann",
              а таблица "stores"-словом "Open, sesame", следующие
              команды дают возможность просмотреть эти две табли-
              цы:
              
              PASSWORD "Tann","Open, sesame"
              VIEW  "orders"
              VIEW "stores"
              
              Заметим, что эти таблицы могут  быть  защищены  ис-
              пользованием команды сокращенного меню PROTECT.
-----------------------------------------------------------------
                                     PGDN
              
              Команда моделирует нажатие клавиши {PgDn}.
              
Синтаксис     PGDN
              
Описание      Действие команды  PGDN,   как  и  действие  клавиши
              {PGDN}, зависит от текущего контекста. Если система
              Paradox находится  не в подходящем режиме,  команда
              игнорируется. Следующая таблица показывает действие
              команды PGDN в различных режимах системы Paradox:
         
             Режим ------------------  Действие
        
       Главный, Редактирование,   Перемещает вниз на один
       Совместное редактирова-    экран.
       ние/просмотр таблицы
       
       Главный, Редактирование,   Перемещает вниз к преды-
       Совместное редактирова-    дущей записи или форме.
       ние/просмотр формы
         
       Любой режим/Просмотр       Игнорируется.
       поля
         
       Форма                      Игнорируется.
         
       Редактор отчетов           Перемещает курсор вниз на
                                  половину экрана.
         
       Редактор Скриптов          Перемещает курсор вниз на
                                  половину экрана .
         
Примеры       Пример показывает разницу действия  команд  PGUP  и
              PGDN в зависимости от того, в каком режиме находит-
              ся система Paradox:
              
              VIEW "orders"
              WHILE True
              WAIT RECORD
              PROMPT "Нажмите {PgUp},для перехода к предыдущей"+
                "записи, {PgDn} для перехода к следующей, F7 для",
                "переключения формы, F2 выхода"
                UNTIL -72,-80, "F7", "F2"
                SWITCH
                    CASE retval=-72:   ;пользователь нажал {PgUp}
                      IF NOT ATFIRST()
                       THEN
                        IF ISFORMVIEW();мы находимся в режиме про-
                                       ;смотра формы
                          THEN PGUP ;
                          ELSE UP
                        ENDIF
                        ELSE BEEP
                      ENDIF
                     CASE retval="F7"  ;переключение формы
                         FORMKEY
                     CASE retval="F2"  ;пользователь нажал DO_IT!
                         QUITLOOP
                ENDSWITCH
              ENDWHILE
              
См.также      DOWN, PGUP, UP.
-----------------------------------------------------------------
                                     PGUP
              
              Команда моделирует нажатие клавиши {PgUp}.
              
Синтаксис     PGUP
              
Описание      Действие команды  PGUP,   как  и  действие  клавиши
              {PGUP}, зависит от текущего контекста. Если система
              Paradox находится  не в подходящем режиме,  команда
              игнорируется. Следующая таблица показывает действие
              команды PGUP в различных режимах системы Paradox:
                                                            
             Режим ------------------  Действие
       Главный, Редактирование,   Перемещает вверх на один
       Совместное редактирова-    экран.
       ние/просмотр таблицы
                                                            
                                                            
       Главный, Редактирование,   Перемещает вверх к преды-
       Совместное редактирова-    дущей записи или форме.
       ние/просмотр формы
         
       Любой режим/Просмотр       Игнорируется.
       поля
                                                            
       Форма                      Игнорируется.
                                                            
       Редактор отчетов           Перемещает курсор вверх на
                                  половину экрана.
       Редактор скриптов          Перемещает курсор вверх на
                                  половину экрана .
         
Примеры       Пример смотрите в описании команды PGDN выше.
              
См.также      DOWN, PGDN, UP.
-----------------------------------------------------------------
                                   PICKFORM
              
              Команда сокращенного  меню  выбирает нужную форму и
              выводит на экран для просмотра.
              
Синтаксис     PICKFORM <имя формы>
              
Описание      Формы для  использования обозначаются следующим об-
              разом: "F","1","2"..."9" или числом от 0 до 9.
              
Примеры       PICKFORM "3"
              
              Эквивалентна выбору из меню:
              
              MENU{IMAGE}{PICKFORM}{3}
-----------------------------------------------------------------
                                     PLAY
              
              Команда позволяет  вызвать  Вам скрипт как подпрог-
              рамму внутри текущего скрипта.
              
Синтаксис     PLAY <имя скрипта>
              
Описание      Когда управление возвращается скрипту,   выполнение
              продолжается со следующей команды.  Если вызываемый
              скрипт не существует, регистрируется ошибка.
              
Примеры       SETKEY  "F1"  PLAY  "TANN1"; присваивается
                               ; клавише F1 макрос "TANN1"
-----------------------------------------------------------------
                                     PRINT
              
              Команда печатает значения на принтер или в файл.
              
Синтаксис     PRINT <выражение 1>...<выражение N>
              или
              PRINT FILE <имя файла><выражение 1>...
                                    <выражение N>
              
Описание      Первая форма команды выводит значения выражений  на
              принтер, вторая - в файл с именем, представленным в
              поле <имя файла>. Значения выводятся последователь-
              но без пробелов.  Любая несимвольная величина авто-
              матически преобразуется в символ.  Вторая форма ко-
              манды присоединяет   значения  в конец файла.  Если
              файл с таким именем не существует, он автоматически
              создается. Необходимо  учитывать,  что фильтрация и
              обработка контрольных символов не выполняется. Иск-
              лючение составляет  символ в ASCII с кодом 255.  Он
              выдается как символ NULL (т.е. как ASCII 0). Причи-
              на в том, что NULL символ не может быть представлен
              внутренне в строке системы Paradox.  Последователь-
              ность "\0" представляется внутри как 255.  Следова-
              тельно, команда  PRINT "\0" может быть использована
              для вывода  символа NULL на принтер.  ASCII код 255
              не может быть выведен на принтер.
              
Примеры       PRINT "Here is a  line\n",
                    "Here  is  a  second  line"
              
              PRINT FILE "C:\\sys\\log","Программа,регистрирующая
              время"
-----------------------------------------------------------------
                                    PRINTER
              
              Команда разрешает или запрещает вывод эха экрана на
              принтер.
              
Синтаксис     PRINTER ON | OFF
              
Описание      PRINTER ON  вызывает  последовательный экранный вы-
              вод, использующий ?, ?? или команду TEXT для вывода
              на принтер  так же,  как и на дисплей.  PRINTER OFF
              восстанавливает обычное значение этих операторов.
              
Использование Особенность команды PRINTER в том,  что она полезна
              для записи и отладки.
-----------------------------------------------------------------
                                  PRIVTABLES
              
              Команда запоминает  некоторые  таблицы в личном ди-
              ректории пользователя.
              
Синтаксис     PRIVTABLES <Список имен таблиц>,
              
              где имена таблиц разделены запятыми.
              
Описание      При работе в сети  все  временные  таблицы  системы
              Paradox, такие  как answer, автоматически запомина-
              ются в принадлежащем пользователю директории,  в то
              время как  все другие таблицы запоминаются в дирек-
              тории DOS, в котором они находятся. Внутри Pаradox,
              когда пользователь вызывает листинг содержимого ди-
              ректория, система Paradox объединяет временные таб-
              лицы из директория пользователя с хранящимися в те-
              кущем рабочем   директории,   таким  образом,   что
              пользователь даже  не предполагает,  что его личный
              директорий был использован. Команда PRIVTABLES поз-
              воляет пользователю   назначать  произвольное число
              таблиц,к которым возможно обращение,  как к времен-
              ным таблицам системы Paradox; это означает, что они
              будут автоматически записаны  в  личный  директорий
              пользователя и объединены с таблицами,  хранящимися
              в рабочем директории при выдаче листинга директория
              в системе Paradox.
              
Использование Команда PRIVTABLES очень полезна для таблиц,  кото-
              рые будут использоваться как временные в многополь-
              зовательских приложениях. Так как Вы объявляете эти
              таблицы своими личными,  Вам нет необходимости бес-
              покоиться о  содержании ее среди других пользовате-
              лей.
              
Примеры       Следующй фрагмент делает  таблицы  orders  и  stock
              личными таблицами пользователя:
         
               PRIVTABLES "orders","stock"
         
См.также      Описание личных  директориев  в  книге "Руководство
              пользователя по системе PARADOX".
-----------------------------------------------------------------
                                     PROC
              
              Команда PROC обьявляет процедуру пользователя с оп-
              ределенным именем  и имеющую обьявленные параметры,
              частные переменные и т.п.
              
Синтаксис     PROC <<CLOSED>> <имя процедуры>
               (<список переменных 1>)
                 <<USEVARS <список переменных 2> >>
                   <<PRIVATE <список переменных 3> >>
                <команда 1>
                ...
                <команда N>
              ENDPROC
              
              где <список переменных 1> - аргументы процедуры,
              <список переменных 2> - глобальные переменные,  ко-
              торые остаются доступными при закрытии процедуры,
              <список переменных 3> - локальные переменные,   ис-
              пользуемые только внутри процедуры.
              
Описание      Команда PROC  начинает  определение процедуры.  При
              этом надо задать имя процедуры, ее аргументы, набор
              переменных, используемых  локально в теле процедуры
              и тело процедуры - команды,  выполняющие какое-либо
              действие. Определение  процедуры заканчивается клю-
              чевым словом ENDPROC.В главе "Процедуры"  полностью
              описано, как   определять процедуры.  Вы можете ис-
              пользовать опцию CLOSED,  чтобы сделать данную про-
              цедуру, и  все процедуры, вызываемые из нее, единым
              блоком. Такие    процедуры  максимально  используют
              преймущества автоматического управления памятью для
              процедур системы Paradox. Когда такая процедура за-
              канчивает выполнение,  все переменные,  массивы,  и
              другие процедуры  блока  автоматически  освобождают
              память и все ресурсы памяти возвращаются в основной
              пул памяти.
-----------------------------------------------------------------
                                    PROMPT
              
              Команда замещает приглашение системы Paradox в двух
              верхних строках экрана.
              
Синтаксис     PROMPT <сообщение1>,<сообщение2>
              
              где сообщение1 и сообщение2-строковые выражения.
              
Описание      Команда PROMPT  позволяет  Вам определить приглаше-
              ние, высвечиваемое  в верхних двух строках рабочего
              пространства системы Paradox. Сообщение, определяе-
              мое командой PROMPT,  появляется на экране только в
              том случае,  когда включен режим ECHO NORMAL,  FAST
              или SLOW.  Сообщение появляется также в том случае,
              если в   этот  момент  на  экране  нет Меню системы
              Paradox. Команда PROMPT без аргументов используется
              в скрипте для отмены определенных Вами выше сообще-
              ний; она передает управление показом сообщений сис-
              теме Paradox.
         
См.также      SHOWMENU, SHOWARRAY, SHOWTABLES, SHOWFILES.
-----------------------------------------------------------------
                                    PROTECT
              
              Шифрует таблицу  и присваивает ей пароль владельца.
              
Синтаксис     PROTECT <имя таблицы><пароль>
              
Описание      Как и   эквивалент   из   меню  системы  Paradox  -
              Tools/More/Protect/Password/Table, команда   сокра-
              щенного меню PROTECT присваивает пароль пользовате-
              ля таблице. Защищаемая таблица шифруется и не может
              быть доступна без указания правильного пароля. Сис-
              тема Paradox должна быть в Главном режиме  для  вы-
              полнения данной   команды.   Дополнительные  пароли
              обычно не создаются программно. Чтобы задать допол-
              нительные пароли,    надо  использовать  опцию меню
              Tools/More/Protect интерактивно в  системе  Paradox
              или генератор    защиты  системы  Paradox  (Paradox
              Protection Generator). Использовать Protect для за-
              щиты скрипта  нельзя.  Для этой цели надо использо-
              вать опцию   Tools/More/Protect/Password/Script  из
              меню системы Paradox.
              
Примеры       PROTECT "orders" "Tann"
              
              Эквивалентна следующей последовательности:
              
              MENU{TOOLS}{MORE}{PROTECT}{PASSWORD}{TABLE}{orders}
              {Tann}
-----------------------------------------------------------------
                                     QUERY
              
              Команда помещает запрос в рабочую область.
          
Синтаксис     QUERY
              <query>
              ENDQUERY
              
              где <query> состоит из одной или более форм  запро-
              сов.
              
Описание      Эта команда  фактически  не  выполняет определенный
              запрос, а  только помещает его в  рабочую  область.
              Следующая за командой QUERY команда DO_IT! вызывает
              выполнение запроса.  Наиболее легкий путь использо-
              вания этой   команды  в  создании нужных запросов в
              системе Paradox, а затем сохранением их в скрипте с
              использованием возможности QUERYSAVE в меню. Сохра-
              ненный запрос может затем быть найден и вставлен  в
              вашу программу из в редакторе скриптов.  Переменные
              языка PAL могут быть доступны в запросе, если перед
              именем переменной   поставить тильду (~).  Заметим,
              что контролируемые поля обозначаются ключевым  сло-
              вом CHECK, CHECKPLUS, CHECKDESCENDING или GROUPBY и
              что элементам примера предшествует знак (_).
              
              Следующий скрипт просматривает запись таблицы  cust
              для заказчика, чье имя храниться в поле Name.
         
              QUERY
                CUST: Name :
                find:~Name :
              ENDQUERY
              DO_IT!                   ;исполняем это
              IF (ISEMPTY("answer"))   ;ничего не создавать
                 THEN MESSAGE Name "Не найдено"
                  ELSE
                  FORMKEY              ;войти в форму
                   WAIT RECORD         ;разрешаем пользователю
                                       ;проверить запись
                   MESSAGE "Нажмите F2"
                   UNTIL "F2"
              ENDIF
-----------------------------------------------------------------
                                     QUIT
              
              Команда завершает выполнение скрипта и передает уп-
              равление системе Paradox.
              
Синтаксис     QUIT <сообщение>
              
Описание      Если присутствует  выражение  <сообщение>,   то его
              значение высвечивается в правом нижнем углу экрана.
              Заметим, что использование QUIT возвращает управле-
              ние системе Paradox,  даже если выполнение  скрипта
              было инициализирована   из  DOS.  Если после работы
              скрипта Вы хотите вернуться в DOS,  используйте ко-
              манду сокращенного меню EXIT.
              
Примеры       QUIT "Программа закончила работу"
-----------------------------------------------------------------
                                   QUITLOOP
              
              Команда вызывает  выход из самого внутреннего цикла
              FOR, WHILE или SCAN.
              
Синтаксис     QUITLOOP
              
Описание      Выполнение скрипта продолжается с команды,  следую-
              щей за ближайшим ENDFOR, ENDSCAN, или ENDWHILE. По-
              пытка выполнить QUITLOOP вне цикла вызывает ошибку.
              
Примеры       В следующем примере переменная "unn" устанавливает-
              ся равной   True  или  False в зависимости от того,
              имеет ли массив A неопределенные элементы:
              unn=FALSE
                i=1
                WHILE i<=ARRAYSISE(A)
                  IF NOT (ISASSINGED(A[i]))
                     THEN
                      unn=TRUE
                      QUITLOOP
                     ELSE
                      i=i+1
                  ENDIF
                ENDWHILE
-----------------------------------------------------------------
                                    READLIB
              
              Читает процедуры из библиотки процедур.
              
Синтаксис     READLIB <имя  библиотеки> <<IMMEDIATE>>
              <имя процедуры1>...<имя процедуры N>
              
Описание      Данная команда читает процедуры из библиотеки в ос-
              новную память.Загруженные   процедуры  затем  могут
              быть непосредственно вызваны из скрипта.  Процедуры
              запоминаются в библиотеке в предварительно оттранс-
              лированном виде, обеспечивая более высокую произво-
              дительность по сравнению с выполнением скрипта. Ес-
              ли используется    опция   IMMEDIATE,    и   памяти
              недостаточно для  загрузки всех процедур из списка,
              происходит ошибка скрипта.  Если эта опция  не  ис-
              пользуется, то    загружается  столько  процедур из
              списка, сколько может уместиться в памяти. Процеду-
              ры, которые не могут загрузиться, загружаются авто-
              матически при их вызове,  вызывая своппинг процедур
              между памятью и библиотекой. Если используется рас-
              ширенная память,  то своппинг осуществляется в ней.
              
Примеры       READLIB "accounts" Doaccounts,Payroll
-----------------------------------------------------------------
                                    REFRESH
              
              Команда моделирует нажатие клавиш REFRESH {Alt}{R},
              и модифицирует образы в рабочей области
              
Синтаксис     REFRESH
              
Описание      Команда модифицирует все образы,  находящиеся в ра-
              бочей области. Для того, чтобы использовать команду
              REFRESH, система   Paradox должна находиться либо в
              Главном режиме,  либо в режиме Редактирования, либо
              Совместного редактирования. В других контекстах ко-
              манда игнорируется.  Когда включен режим автообнов-
              ления, рабочая   область обновляется автоматически,
              через установленные интервалы.  система Paradox бу-
              дет автоматически обновлять рабочую область, всякий
              раз, как  это будет необходимо. Заметим, что только
              рабочая область обновляется системой Paradox.  Дан-
              ные, находящиеся  в канве языка PAL, не обновляются
              автоматически, а должны модифицироваться определен-
              ным образом при помощи приложения.  Смотрите  книгу
              "Руководство пользователя   по системе Paradox" для
              более детального рассмотрения вопроса об обновлении
              экрана.
              
Версия        Команда была  введена в систему Paradox версии 2.0.
-----------------------------------------------------------------
                                    RELEASE
              
              Команда освобождает память от используемых перемен-
              ных, массивов и процедур.
              
Синтаксис     RELEASE PROCS <имя проц.1>...<имя проц.N>
              или
              RELEASE PROCS ALL
              или
              RELEASE VARS <имя перем.1>...<имя перем.N>
              или
              RELEASE VARS ALL
              
Описание      RELEASE PROCS  отменяет  обьявленные  процедуры   и
              возвращает память,   которую они занимают,  в общую
              память. Будьте осторожны при выполнении этой коман-
              ды внутри   вызванной процедуры!  Если используется
              RELEASE PROCS ALL,  все текущие определенные проце-
              дуры будут освобождены от их операций. RELEASE VARS
              переобозначает переменные и массивы, представленные
              в списке аргументов,  возвращая память,  занимаемую
              ими в общую память.  Если используется RELEASE VARS
              ALL все  переменные и массивы освобождаются.  Заме-
              тим, что RELEASE VARS применимо только к глобальным
              переменным и массивам.  Память для частных перемен-
              ных и массивов и для формальных параметров процедур
              автоматически освобождаются при передачи управления
              другой процедуре.
              
Примеры       Эти команды полезны для больших приложений, в кото-
              рых не все процедуры и/или переменные загружаются в
              память. Такие   приложения  обычно  управляются  из
              главного меню внутри цикла. Помещая RELEASE PROCS в
              начале цикла,  вы можете освободить память, исполь-
              зуемую до начала данного цикла.
              
              WHILE (TRUE)     ; цикл
              RELEASE PROCS ALL ; освоб. памяти от процедур
              RELEASE VARS ALL  ; освоб. памяти от переменных
              SHOWMENU
                 "AP":"ACCOUNTS PAYABLE"
                 "AR":"ACCOUNTS RECEIVABLE"
                 "EXIT":"APPLICATION EXIT"
                  TO CHOICE
              SWITCH                  ; ветвь выбора
                 CASE CHOICE = "AP"
                   PLAY "AP_DEFS"    ; проиграть AP
                   AP()              ; вызов главной проц.
                 CASE CHOICE = "AR"
                   PLAY "AR_DEFS"    ; проиграть AR
                   AR()              ; вызов главной проц.
                 OTHERWISE : QUIT
              ENDSWITCH
              ENDWHILE
-----------------------------------------------------------------
                                    RENAME
              
              Команда сокращенного меню,  которая переименовывает
              таблицу и все связанные с ней формы, индексы и дру-
              гие обьекты.
              
Синтаксис     RENAME <старое имя> <новое имя>
              
Описание      Если таблицы со старым именем не существует, то вы-
              дается ошибка.  Если таблица с новым именем сущест-
              вует, то  все данные,  содержащиеся в этой таблице,
              будут уничтожены  без предупреждения,  какое выдает
              система Paradox.
              
Примеры       Присвоение нового имени таблице "orders":
              
              RENAME "orders" "req"
              
              Если таблица "req" уже существует,  то это  эквива-
              лентно:
              
              MENU{TOOLS}{RENAME}{TABLE}{orders}{req}{REPLACE}
              
              Если таблице "rec" не существует ,то:
              
              MENU{TOOLS}{RENAME}{TABLE}{orders}{req}
-----------------------------------------------------------------
                                    REPORT
              
              Команда сокращенного меню, которая выводит отчет на
              принтер.
              
Синтаксис     REPORT <имя таблицы><имя отчете>
              
Описание      Эта команда  вызывает  генератор  отчетов   системы
              Paradox и выводит заданный отчет по заданной табли-
              це на печать. Значение <имя отчета> должно быть од-
              ним из            выражений      последовательности
              "R","1","2",..."9" или целым число от 1 до 9.   При
              этом система  Paradox должна быть в состоянии MAIN.
              
              Если значение переменной r равно 1, то
              
              REPORT "orders" r
              
              эквивалентно
              MENU{REPORT}{OUTPUT}{orders}{1}{PRINTER}
-----------------------------------------------------------------
                                 REPORTTABLES
              
              Возвращает список имен связанных таблиц в многотаб-
              личном отчете.
              
Синтаксис     REPORTTABLES <имя таблицы> <имя  отчета>
                                 <имя массива>
              
Описание      Данная команда возвращает массив,  содержащий имена
              таблиц, связанных  в многотабличном отчете.Значение
              <имя отчета> должно быть одним из выражений  после-
              довательности "R","1","2",..."14"   или целым число
              от 1 до 14.Система  Paradox  создает  и  определяет
              размерность массива автоматически, если это необхо-
              димо. Системная переменная retval устанавливается в
              TRUE, если отчет имеет связанные таблицы, и в FALSE
              в другом случае. При выполнении команды генерирует-
              ся ошибка,  если не существуют заданные таблица или
              отчет, неправильно <имя отчета> или пользователь не
              имеет прав доступа к указанной таблице.
              
Использование Вы можете использовать функцию ISMULTIREPORT()  пе-
              ред выполнением команды REPORTTABLES,  чтобы прове-
              рить, является ли отчет многотабличным.После выпол-
              нения команды можно использовать ARRAYSIZE(), чтобы
              вычислить количество таблиц, связанных в отчете.
              
Примеры       В этом примере показывается , сколько таблиц связа-
              но в отчете "r" таблицы orders:
              
              IF ISFILE ( "orders.r")
                 THEN
                 IF ISMULTIREPORT ("orders","r")
                     THEN
                       REPORTTABLES "orders" "r" embedlist
                       ? "Всего",ARRAYSIZE(embedlist),
                         "связанных таблиц в orders.r"
                     ELSE ? "Отчет orders.r однотабличный"
                 ENDIF
              ENDIF
              
Версия        Команда REPORTTABLES   была   добавлена  в  систему
              Paradox версии 3.0.
-----------------------------------------------------------------
                                 REQUIREDCHECK
              
              Команда включает и выключает режим ограничения  це-
              лостности.
              
Синтаксис     REQUIREDCHECK ON | OFF
              
Описание      Команда включает  или  выключает  режим ограничения
              целостности для нужных полей всех таблиц,   находя-
              щихся в рабочем пространстве. Команда очень полезна
              в том случае,  когда приложению необходимо выйти из
              поля без ввода в него значения. Например, если тре-
              буется поле CustID из таблицы orders и  также  поле
              справочной таблицы   customer,   пользователь может
              выйти из поля, если заказчик еще не указан в табли-
              це customer.    Команда REQUIREDCHECK не может быть
              использована для установки ограничения  целостности
              для таблицы или поля,  а только для изменения уста-
              новленного контроля.
              
Использование Ограничения целостности  поля  устанавливаются  при
              помощи услуги   ValCheck/Required из меню Редактора
              или меню Ввода данных.  Установка  ограничения  це-
              лостности поля означает, что курсор, попав в поле ,
              не может выйти из него,  пока не будет введена тре-
              буемая величина.  Если требуется выйти из поля,  не
              заполняя его,  то перед этим необходимо использоль-
              зовать команду REQUIREDCHECK OFF для запрещения ог-
              раничения целостности. Не забывайте после того, как
              отпадет необходимость в этом,  использовать команду
              REQUIREDCHECK ON.
              
Версия        Команда была введена в систему Paradox версии  2.0.
              
Примеры       Предположим, что первое поле  таблицы  orders  есть
              CustID. Это    ключевое  поле  может быть заполнено
              только правильным  номером  заказчика.   Вы  хотите
              представить эту   таблицу  в режиме просмотра формы
              командой WAIT.  Следующий фрагмент программы  рабо-
              тать не будет:
              
               EDIT "orders" ;таблица в рабочем пространстве
               FORMKEY       ;нельзя переключать Форму!
              
              Причина этого кроется в следующем:  когда Вы первый
              раз высвечиваете   таблицу в режиме редактирования,
              курсор находится в первом поле первой записи.  Если
              это поле  c ограничением целостности,  Вы не можете
              использовать команду  FORMKEY  или  нажать  клавишу
              {F7},не введя правильное значение в это поле.  Поэ-
              тому Вы должны поступить следующим образом:
         
              EDIT "orders"
              REQUIREDCHECK OFF ;выключение ограничения цело-
                                ;стности
              FORMKEY
              REQUIREDCHECK ON
              WAIT TABLE PROMPT "Нажмите F2"
                 UNTIL "F2"
-----------------------------------------------------------------
                                     RESET
              
              Команда возвращает систему Paradox в состояние MAIN
              и очищает рабочую область.
              
Синтаксис     RESET
              
Описание      Команда покидает  любое  состояние,  такое как EDIT
              или REPORT,  возвращает систему Paradox в состояние
              MAIN и стирает все из рабочей области.  Это полезно
              для получения чистых системных состояний  в  начале
              выполнения скрипта, независимо от того, что пользо-
              ватель делал,  когда выполнение скрипта инициализи-
              ровалась. Этой командой не затрагиваются существую-
              щие определения процедур.  Для  очистки  памяти  от
              процедур и  переменных используйте команду RELEASE.
              RESET всегда используется в скрипте перед приглаше-
              нием пользователю сменить floppy диск.
-----------------------------------------------------------------
                                    RETURN
              
              Команда возврата из скрипта или процедуры.
              
Синтаксис     RETURN <<значение>>
              
Описание      Если поле  <<значение>>  отсутствует,  то на строке
              ничего не должно находиться, кроме коментариев. Ес-
              ли RETURN встречается внутри процедуры, то процеду-
              ра завершается.   Если  RETURN  встречается  внутри
              скрипта, но вне тела процедуры, скрипт завершается.
              Произвольные значения выражений могут быть  исполь-
              зованы для  возвращения как из процедуры,  так и из
              скриптов. Если процедура вызывается в контексте вы-
              ражением, таким   как y=foo(x)+3 ; foo - процедура,
              то возвращенное значение есть значение вызова  про-
              цедуры. Процедура, вызванная в контексте выражения,
              должна вычислять значения. Если процедура вызывает-
              ся в автономном контексте, таком как foo(x) ; вызов
              foo, то вычисленное значение игнорируется. Если вы-
              численное значение возвращается из скрипта, то зна-
              чение высвечивается   в  окне   сообщений   системы
              Paradox в   правом нижнем углу экрана.  Эта особен-
              ность полезна для скриптов,  которые просто подсчи-
              тывают значения.  Заметим,  что любой ввод/вывод на
              канву языка PAL,  естественно стирается,  когда вы-
              полнение скрипта   заканчивается.  Команда RETURN -
              исключение из этого правила.  Побочное действие лю-
              бого исполнения RETURN в том,  что глобальной пере-
              менной retval присваивается вычисленное значение.
              
Примеры       Следующая процедура вычисляет код zip заказчика  из
              таблицы "cust",или строчку "NONE", если заказчик не
              был найден:
              
              PROC getzip(name)
                  PRIVATE zip
                  VIEW "cust"            ; просмотр таблицы
                    MOVETO [Name]        ; переход к полю Name
                    LOCATE name          ; поиск записи
                     IF (retval)         ; была найдена
                      THEN zip=[zipCODE] ; присвоение zip кода
                                         ; поля
                      ELSE zip "NONE"
                     ENDIF
                   CLEARIMAGE             ; очистка рабочей
                                          ; области
                  ENDPROC
              
              Cледующий cкрипт получает значение имени от пользо-
              вателя, вызывает  вышеописанную процедуру для полу-
              чения кода zip, затем вычисляет, высвечивая код zip
              в окне сообщений:
              
              CLEAR
              @10,10 ?? " Введите имя"
              ACCEPT "A30" to name
              RETURN getzip(last)
-----------------------------------------------------------------
