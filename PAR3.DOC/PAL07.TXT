                                                         ГЛАВА 7
-----------------------------------------------------------------
     
                       СПЕЦИАЛЬНЫЕ ВОПРОСЫ
     
-----------------------------------------------------------------
     
     Настоящая глава содержит:
     
   - соглашения об именовании переменных, массивов и процедур;
     
   - описание  системных  переменных;
     
   - описание  защиты с помощью пароля;
     
   - описание  специальных скриптов  init и  instant;
     
   - описание ошибок в  скриптах  и  их обработки.
                                              
     
     
                    СОГЛАШЕНИЯ  ОБ ИМЕНОВАНИИ
-----------------------------------------------------------------
     
     PAL требует, что при именовании переменных,массивов и проце-
дур выполнялись  следующие  правила:
     
  -  Длина имен должна быть  не  более 132 символов.
     
  -  Первым  символом должна  быть  буква, A-Z  или  a-z.
     
  -  Последующими символами могут быть буквы, цыфры  или  символы
     из  набора: ".", "$",  "!", "_".
     
  -  Не допускается использование  пробелов и знаков табуляции.
     
  -  Различия между  заглавными  и строчными буквами игнорируют-
     ся.
     
  -  Имена не должны  повторять  зарезервированные  слова  систе-
     мы  Paradox (полный список зарезервированных слов содержится
     в  приложении E). 
   
     
         Таблица 7-1.  Допустимые и недопустимые  имена.
-----------------------------------------------------------------
     Имя          Допустимо?            Примечания
-----------------------------------------------------------------
     Foo          да
     time.period  да
     !claim       нет            начинается не  с  буквы
     claim!       да             начинается с  буквы
     l.0123       да
     5a6          нет            начинается не  с  буквы
     abc xyz      нет            содержит  пробел
     abc_xyz      да
     menu         нет            зарезервированное слово
-----------------------------------------------------------------
     
     Эти правила касаются только имен переменных, массивов и про- 
цедур PAL. Правила именования объектов системы Paradox -  таблиц,
полей,  форм,  отчетов и скриптов содержатся в главе 2 руководст-
ва  пользователя системы  Paradox.  
     Хотя имена элементов PAL могут повторять имена объектов сис- 
темы  Paradox, мы рекомендуем вам избегать этого. Предположим, вы 
использовали orders как имя таблицы и как идентификатор  перемен- 
ной,  содержащей имя пользователя, разместившего последний заказ.
Пусть вы хотите создать новую  таблицу  с  именем  этого  пользо-
вателя.  Вы можете нечаянно ввести его имя в кавычках:
     
     CREATE "orders"
     
При  этом  ваш  скрипт  создаст  таблицу  с  именем orders взамен
той, что  вы  уже  имели.  Аналогично,  если  вы  захотите  прос-
мотреть  таблицу  orders,  то наберите:
     
     VIEW orders
     
то  вам  будет предложена таблица с именем заказчика (если такая 
 существует). Как видно, отладка облегчается,  если  не  повторя-
ть  имена. 
     Аналогично, можно использовать в качестве имен PAL слова,
составными  частями  которых  являются  зарезервированные  имена,
например,  слово  IsEdit,  содержащее  имя  опции  Edit.  Это  не
будет  ошибкой,но  мы  рекомендуем  вам  избегать  этого, так как
становится слишком легко спутать созданные вами  объекты  с  име-
нами  команд  и  функций PAL. Пользователь, не слишком знакомый с
набором команд и функций PAL, может подумать, что IsEdit  являет-
ся  функцией  PAL, сообщающей, находится ли система Paradox в ре-
жиме редактирования. Поэтому безопаснее давать объектам  уникаль-
ные   имена,  которые  невозможно  спутать  с  именами  команд  и
функций PAL и системы  Paradox.
     
                                          
     
                      СИСТЕМНЫЕ ПЕРЕМЕННЫЕ
-----------------------------------------------------------------
     
     PAL поддерживает  три системных переменных:
     
  -  autolib, содержащую имена библиотек, загружаемых автомати-
     чески; 
     
  -  errorproc,  содержащую  имя  процедуры, обрабатывающей ошиб-
     ки; 
     
  -  retval,  содержащую возвращаемую величину.
     
     
     
                      Использование retval
-----------------------------------------------------------------
     
     Системной переменной retval присваивается значение в  следу-
ющих случаях:
     
  -  При  возврате  величины  скрипту  или  системе Paradox с по-
     мощью команды RETURN переменной retval присваивается возвра-
     щаемая  величина.
     
  -  Когда величина вводится с помощью команды ACCEPT, переменной 
     retval присваивается величина True, если  пользователь  ввел 
     величину, и False в противном случае. 
     
  -  Когда  осуществляется поиск записи с помощью команды LOCATE,
     переменной retval присваивается величина True,  если  запись
     найдена, и False в противном случае. 
     
  -  Когда  таблица  или  запись замыкается или размыкается с по- 
     мощью  команд  LOCK,   LOCKKEY,   LOCKRECORD,   UNLOCK   или 
     UNLOCKRECORD, переменной retval присваивается величина True, 
     если операция завершилась удачно, и False в  противном  слу- 
     чае. 
     
  -  Когда  завершается  ожидание  по  команде  WAIT,  переменной
     retval  присваивается  код  клавиши,  вызвавшей   завершение
     ожидания. 
     
     Переменная retval оказывается полезной во многих случаях.
Например,  после  окончания  ожидания  вы можете проверить, какая
величина присвоена  retval,  и  выполнить  различные  действия  в
зависимости  от  того, какой клавишей пользователь прервал ожида-
ние. В многопользовательских  прикладных  системах  retval  можно
проверить  после  попытки  замкнуть  таблицу,  чтобы определить ,
произошло  ли  замыкание  успешно  и  доступна  ли  таблица   для
использования.
     Используя retval в выражениях, помните, что она автоматичес-
ки изменяет свой тип в  соответствии  с  присвоенной  ей  величи-
ной.
     
                         
     
                    ЗАЩИТА С ПОМОЩЬЮ ПАРОЛЕЙ
-----------------------------------------------------------------
     
     Для  защиты  скриптов  и  таблиц  с  помощью паролей (зашиф-
ровки) используется режим Tools/More/Protect системы Paradox. За-
щита   скриптов  препятствует  пользователям, не  знающим пароль,
изменять или просматривать текст скрипта.  Запускать  защищенный
скрипт  на выполнение  может любой пользователь.
     Как только скрипт или таблица объявляются защищенными, с
помощью  Tools/More/Protect,  он немедленно зашифровывается. Пос-
ле этого любая попытка  редактирования  или  отладки  защищенного
файла  вызовет  запрос  пароля со стороны системы Paradox. Пароль
необходимо ввести один раз в течении  сеанса.  Зашифровка  исклю-
чает  редактирование  защищенного  скрипта с помощью внешнего ре-
дактора и прерывание его с  помощью {Ctrl}{Break}.
     Одним  и  тем  же  паролем  могут  быть  защищены  несколько
таблиц  и  скриптов  одновременно.  После  того, как пользователь
правильно введет этот пароль, все таблицы и  скрипты  этой  груп-
пы  становятся доступны.
     Разработчику  прикладных  систем  необходимо  знать о защите
скриптов и таблиц  следующее:
     
   1.Для защиты  таблицы  с  помощью  пароля  можно  использовать
     режим Tools/More/Protect или сокращенную команду PROTECT.
     Обычно  для защиты таблиц, включаемых разработчиком в систе-
     му, используется Tools/More/Protect, а  для  защиты  таблиц,
     создаваемых  системой  - команда PROTECT.
     
     Для  скриптов,  работающих  под  управлением системы Paradox
     версии 2.0 или выше имеется  возможность  задавать  дополни-
     тельные  пароли, позволяющие создавать более совершенную за-
     щиту ( в режиме  Tools/More/Protect).  Дополнительные  паро-
     ли  позволяют  вам  определить  различные  уровни  доступа к
     таблицам, полям или группам полей, в  зависимости  от  паро-
     ля,  введенного  пользователем. Подробнее процесс зашифровки
     и дополнительные  пароли  описаны  в  главе  10  руководства
     пользователя  системы Paradox.
     
     Для  установки  системы полной защиты базы данных прикладной
     системы можно использовать  генератор  защиты.  Он  позволя-
     ет  вам  установить  различные уровни доступа к каждой  таб-
     лице  прикладной  системы.  Пользователям   требуется   лишь
     ввести  их  имена  и  пароли  для  получения доступа ко всем
     таблицам. Работа генератора защиты описана в руководстве ад-
     министратора сети.
     
   2.Скрипты      можно      защищать     только     в     режиме
     Tools/More/Protect.  
     
   3.Перед использованием защищенной таблицы  в  скрипте  следует
     ввести  правильный  пользовательский или дополнительный па-
     роль  или  с  помощью  команды  PASSWORD,  или  в  ответ  на
     запрос пароля  системы Paradox.
     
   4.Если  в  скрипте  использована  защищенная  таблица,  то сам
     скрипт следует защитить для сохранения пароля таблицы в тай-
     не.  Если  это  не  сделано, то любой пользователь, просмот-
     рев скрипт, может  узнать  пароль.  Обратите  внимание,  что
     для запуска скрипта нет  необходимости  знать пароль.
     
   5.Если  вы  хотите,  чтобы пользователь перед обращением к за-
     щищенной таблице вводил  пароль,  используйте  переменную  в
     команде  PASSWORD  и  заставьте пользователя ввести значение
     этой переменной  (смотри рис.7-1).
     
   6.Если вы хотите, чтобы пользователь  запускал  скрипт  только
     после  ввода  пароля,  можно  создать свой собственный метод
     ввода  и  сравнения  пароля  (смотри рис.7-1).
     
   7.Убедитесь в том, что  после обращения к   защищенной  табли-
     це    доступ   к  ней  вновь  прекращен  с  помощью  команды
     UNPASSWORD, особенно если  скрипт  завершается  возвратом  в
     систему  Paradox,  а  не  в  DOS.  Если  вы не защитите таб-
     лицы вновь, они остаются незащищенными  до  выхода  из  сис-
     темы Paradox.
     
   8.Защита не требует затрат дополнительных ресурсов. Необходимо 
     только  дополнительное время для кодирования защищаемого об- 
     ъекта. 
      
     В сети, когда  несколько  пользователей работают с  одной  и
той же  таблицей, применение  дополнительных  паролей для опреде-
ления уровня доступа каждого - почти необходимое  условие  созда-
ния  успешно  работающей системы. Например, дополнительные пароли
можно присвоить:
     
  -  клеркам, занимающимся вводом данных,  обеспечив  им  возмож-
     ность  ввода  данных,  изменения данных в незащищенных полях
     и просмотр всех данных; для них  следует  исключить  возмож-
     ность  изменения  таблиц,  отчетов,  проверок  достоверности
     и др.;
     
  -  администраторам  ввода  данных,  обеспечив  им   возможность
     вставки  и  удаления  данных, например, для исправления оши-
     бок клерков;
     
  -  администраторам прикладной системы, обеспечив  им  все  пра-
     ва  доступа  к таблицам  и  полям.
     
     При  работе в сети, ввод коректного пароля обеспечивает дос- 
туп к данным только той рабочей станции, с которой был введен па- 
роль.  Пользователи  на  всех  других рабочих станциях не получат 
доступа к защищенному объекту, пока они сами не введут правильный 
пароль. 
     Полностью  система  дополнительных  паролей описана в секции
"Tools/More/Protect" в главе 10 руководства пользователя  системы
Paradox.
     Предположим,  вы  разработали  систему управления отделением 
секретных агентов. Так как в ней используется  важная информация, 
вы  защитили скрипт mi6 и таблицы staff и agents с помощью пароля 
в режиме Tools/More/Protect. Кроме того, во избежание  несанкцио- 
нированного доступа, вы хотите, чтобы пользователи вводили пароль 
для запуска этого скрипта. Запустив скрипт, можно  просмотреть  и 
изменить таблицу staff, но для доступа к таблице agents, по ваше- 
му мнению, необходим дополнительный пароль. В примере на  рис.7-1 
приведены  некоторые участки скрипт mi6, показывающие, как реали- 
зовать эту схему защиты. 
     
                       ; процедура ввода пароля в начале скрипта
     @ 0,0
     ?? "Enter password to  run script:" ; требование  ввести 
                                         ; пароль
     ACCEPT "A15" TO   pwd               ;  ввод  пароля
     IF (pwd<>"goldfinger")              ;  проверка  пароля
         THEN  EXIT                      ;  выход, если  пароль  
                                         ;  не  верен
     
     SHOWMENU
     ...
                       ; пользователь  запросил просмотр таблицы
                       ; staff
     
     PASSWORD  "largo"                   ; вводится пароль табли-
                                         ;  цы  staff
     VIEW "staff"
     WAIT TABLE
        UNTIL "F2"
     UNPASSWORD     "largo"              ; возобновляется защита
                                         ; таблицы staff
     
                       ; пользователь  запросил просмотр таблицы
                       ; agents
     
     @ 0,0
     ?? "Enter password to view Agents"  ; требование  ввести 
                                         ; пароль
     ACCEPT "A15" TO   pwd               ;  ввод  пароля
     PASSWORD  pwd                       ;  проверка  пароля
                       ; предполагается, что errorproc обработа-
                       ; ет ошибку пароля
     VIEW "agents"
     WAIT TABLE
        UNTIL "F2"
     UNPASSWORD    pwd                   ; возобновляется защита
     
     
              Рис.7-1.  Защита скриптов  и таблиц.
     
                              
     Защита  не  является  простой  процедурой. Таблицы и скрипты
необходимо защитить от новичков, которые могут  испортить  важную
информацию  и  от  пользователей,  которым доступ к данным запре-
щен.  Поддержание  высокого уровня защиты одновременно с рациона-
льной  организацией   работы   пользователей   требует   высокого
уровня  планирования  и  организации  прикладной  системы. Мы со-
ветуем держать скрипты и  таблицы  защищенными,   если  это  воз-
можно  и снимать  защиту  только  в  случае необходимости.
     В  разделе "Tools/More/Protect" главы 10 руководства пользо-
вателя системы Paradox содержится общее  обсуждение  схем  защиты
и их влияния на доступ  пользователей  к  данным.
     При  разработке  многопользовательских сетевых систем следу-
ет пользоваться дополнительными  средствами,  позволяющими  защи-
щать  данные  от  использования  и  изменений,  вносимых  другими
пользователями. Дополнительная информация  содержится:
     
  -  В главе 18 настоящего руководства,  где  обсуждено  примене-
     ние многопользовательских  систем защиты.
     
  -  В  руководстве  администратора  сети (в разделе, описывающем
     работу генератора защиты  системы  Paradox),  где  обсуждена
     глобальная защита.
     
     
     
                       СПЕЦИАЛЬНЫЕ СКРИПТЫ
-----------------------------------------------------------------
     
     Система  Paradox  создает  и  использует несколько специаль-
ных скриптов, включая:
     
     init, который  система  Paradox  запускает  вначале  каждого
     сеанса;
     
     instant, создаваемый в режиме непосредственной записи скрип-
     тов {Alt}{F3}  и запускаемый в  режиме {Alt}{F4};
     
     value, создаваемый и  исполняемый  при  вычислении  значения
     выражения в режиме PALMenu/Value; 
     
     mini,  создаваемый  и  исполняемый  при  обработке  макроко-
     манд  в  режиме PALMenu/MiniScript;
     
     savevars, создаваемый для сохранения текущих величин переме-
     нных и  элементов  массивов.
     
     Вам  не  следует  использовать  перечисленные выше имена для 
обозначения своих скриптов, если вы не хотите получить особые эф- 
фекты. Например, чтобы предварительно загрузить значения перемен- 
ных и массивов для целей тестирования, можно создать свой  собст- 
венный скрипт и назвать его savevars. 
     
     
                           Скрипт init
-----------------------------------------------------------------
     
     При   запуске   системы   Paradox   автоматически  запускает
скрипт с названием init. Если он найден, то  он  выполняется  пе-
ред  высвечиванием  главного  меню  и  выполнением  любого друго-
го  скрипта.
     Скрипт init используется для  настройки  системы  Paradox  в
соответствии  с  требованиями  пользователя.  В  него  могут быть
включены команды SETKEY для задания макрокоманд с клавиатуры,
а  также команды  MESSAGE и  RETURN  для  высвечивания  сообщений.
     В пример на  рис.7-2  приведен  типичный  скрипт  init,  из-
меняющий  текущий каталог и устанавливающий три макрокоманды кла-
виатуры.  Кроме  того  скрипт  сообщает  день недели. 
     
     
     SETDIR "c:\\paradox\\gift"    ; установка текущего  каталога
     
     SETKEY  -18 RUN "emacs"       ; {Alt}{E}  запускает редактор
     SETKEY  -33 RUN "format  a:"  ; {Alt}{F} форматирует  диск
     SETKEY  "F11" PLAY "Phonelst" ; Shift-F1 запускает Phonelst
     
     IF  DOW(TODAY())="Fri"
         THEN
           RETURN "TGIF!"
         ELSE
           RETURN "Today  is",  TODAY()
     ENDIF
     
     
                 Рис.7-2.  Пример  скрипта init.
     
     
                         Скрипт  instant
-----------------------------------------------------------------
                                   
     Как  сказано  в  главе  9,  режим  непосредственной   записи
скриптов  {Alt}{F3}  используется  для записи специального скрип-
та instant, запускаемого с помощью  {Alt}{F4}.  Однако  нет  необ
ходимости  использовать  эти  клавиши  для записи и воспроизведе-
ния  instant.  Для  этого  существуют  и  другие  способы,  также
описанные  в  главе  9.
     Например,  режим  воспроизведения  скриптов  {Alt}{F4} можно
использовать  для  воспроизведения  более  сложных  скриптов  чем
те,   которые   могут  быть  созданы  в  режиме  непосредственной
записи.   Для   воспроизведения   любого   скрипта   с    помощью
{Alt}{F4}  следует  переименовать  его в instant. При этом имейте
в виду, что при записи нового скрипта  instant  предыдущий  унич-
тожается.
     Скрипт  instant особенно  полезен:
     
  -  для  создания  макрокоманд  клавиатуры  и  автоматизации вы-
     полнения повторяющихся  последовательностей  команд;
     
  -  для  создания   прототипов   функций   в  реальном  масштабе
     времени  (для последующего  включения их  в  прикладную  
     систему  с помощью  редактора);
     
  -  как  продуктивное  средство  для  записи  и  воспроизведения
     важных  последовательностей  команд.
     
   
     
                             ОШИБКИ
-----------------------------------------------------------------
     
     
                           Типы ошибок
-----------------------------------------------------------------
     
     Существует  три  типа  ошибок, нарушающих работу скрипта или
прикладной  системы:
     
  -  Синтаксические  ошибки,  представляющие  собой  неправильные
     команды,  нераспознаваемые  PAL.  Обычно  они вызваны непра-
     вильным написанием или  неправильным  расположением  элемен-
     тов  в выражениях,  например:
     
     VIWE "Orders"        ; неправильное написание  VIEW
     billday =  DOW(TODAY() + 30  ; пропущена правая  скобка
     
     
  -  Ошибки  выполнения,  возникающие  при обработке синтаксичеки
     правильных  команд,  которые  не  могут  быть  выполнены  по
     тем  или  иным причинам. Ошибка выполнения возникает при по-
     пытке просмотреть  несуществующую  таблицу  или  при  работе
     в несоответствующем  режиме.  Например, 
     
     VIEW "Orders"
     SCAN
         [Price] =  [Price]  * 1.6
     ENDSCAN
        
     приведет  к  ошибке  выполнения  так как система Paradox для
     присваивания  величин  полям  должна  находиться  в   режиме
     Edit  или  Coedit.  Ошибка  выполнения  возникает также если
     система Paradox  не  обладает  достаточным  количеством  ре-
     сурсов  для  выполнения  операции.
     
  -  Логические  ошибки возникают из-за некорректности в алгорит-
     ме или неправильно  разработанных  управляющих  структур.  К
     ним относятся зацикливание, логические вычисления, дающие
     неверные результаты и  т.д.
     
     Логические  ошибки  иногда  приводят  к  ошибкам выполнения,
     например, скрипт, вызывающий себе рекурсивно,  может  затре-
     бовать всю  оперативную память.

     PAL  регистрирует  и  сообщает  о  синтаксических  ошибках и
ошибках  выполнения.  Он  не  может  идентифицировать  логические
ошибки.  Их  вам  необходимо найти самостоятельно в процессе тес-
тирования  программ.
     
     
                        Обработка ошибок
-----------------------------------------------------------------
     
     Так как ошибки  неизбежно  встречаются  в  программах,  ваши
прикладные  системы  должны  быть готовы к неожиданностям. Систе-
ма Paradox имеет  несколько  средств  локализации  ошибок,  выяс-
нения  типа  ошибки  и  обработки  ее внутри скрипта. Они включа-
ют:
  -  функцию  ERRORCODE,  возвращающую  номер  кода,  описывающий
     последнюю из встреченных  ошибок  (смотри  таблицу 7-2);
     
  -  функцию  ERRORMESSAGE, возвращающую текст сообщения об ошиб-
     ке,  выдаваемый  системой Paradox;
     
  -  функцию ERRORUSER, применяемую в многопользовательских  сис-
     темах  для  определения  имени  пользователя,  использующего
     ресурс;
     
  -  системную  переменную errorproc, которой можно присвоить имя 
     процедуры обработки ошибок,  выполняемой  при  возникновении 
     ошибки; по умолчанию такая процедура отсутсвует. 
     
     Эти средства не реализованы в системе Paradox версий 1.0
и 1.1.
     
          Таблица  7-2. Коды  ошибок системы  Paradox.
-----------------------------------------------------------------
     Код                           Значение
-----------------------------------------------------------------
     0                нет ошибки
     
                Ошибки  работы с файлами
     
     1                дисковод  не  готов
     3       ^        таблица  уже  используется
     4       ^        другой пользователь замкнул таблицу
     5                файл  не  найден
     6                файл  испорчен
     7                индексный  файл испорчен
     8                не соответствует  версия  объекта
     9       ^        другой пользователь замкнул запись
     10               каталог используется другим  пользователем
     11      ^        каталог является частным каталогом  другого
                      пользователя
     12               нет доступа к каталогу на  уровне DOS
     13               индекс не соответствует порядку сортировки
     14      ^^       запрещен  многопользовательский доступ
     15      ^^       несоответствие файлу PARADOX.NET
     
                     Общие ошибки  скриптов
     
     20               неверный  контекст операции
     21               недостаточное количество  паролей
     22               таблица  защищена от  записей
     23               неправильная величина  поля
     24      ^^       устаревшая  библиотека  процедур
     25      ^^       недостаточные  права  на  образец
     26      ^^       неверный  контекст PAL
     27      ^^       операция не  завершена
     28      ^^       слишком много  вложенных закрытых процедур
     
                       Ошибки  аргументов
     
     30               не соответствует тип  данных
     31               аргумент выходит  за  пределы
     32               неверное  число аргументов
     33               неправильный  аргумент
     34               не  присвоена  переменная  или процедура
     35               неправильный выбор  из меню
     
                 Ошибки использования  ресурсов
     
     40               недостаточно памяти для завершения операции 
     41               недостаточно места на диске для завершения
                      операции 
     42               недостаточно места в стеке для  завершения
                      операции 
     43               принтер  не  готов
     
          Ошибки операций,  ориентированных на  записи
     
     50               запись удалена  другим  пользователем
     51               запись изменена  другим  пользователем
     52               запись вставлена  другим  пользователем
     53               запись с этим  ключем  уже  существует
     54               запись  или  таблица не были замкнуты
     55               запись уже замкнута  вами
     56               не  найден  ключ  просмотра
     
                 Ошибки многотабличных операций 
     
     60      ^^       проверка целостности
     61      ^^       неверная  многотабличная  форма
     62      ^^       форма  замкнута
     63      ^^       связь замкнута
-----------------------------------------------------------------
 ^   -   для  этих  кодов  можно  использовать  ERRORUSER,  чтобы
узнать  имя  пользователя, замкнувшего ресурс.
 ^^  
     
     
                    ПРОЦЕДУРЫ ОБРАБОТКИ ОШИБОК
-----------------------------------------------------------------
     
     Средства  обработки  ошибок   PAL   позволяют   обрабатывать
исключительные  ситуации,  не  прерывая  выполнение  скрипта. Так
как процедуры обработки ошибок применимы  для  всех  типов  прик-
ладных  систем,  то  они  особенно  полезны для обработки ошибок
в многопользовательских  процессах. 
     Система обработки  ошибок  позволяет  определять  процедуру,
которой  передается  управление  для  обработки  ошибки  исполне-
ния. Система  может  определять  природу  ошибки  и  в  некоторых
случаях   выполняет  корректирующие  действие.  После  завершения
процедуры управление передается той  команде  скрипта,  где  была
встречена  ошибка.  Вы  можете  задать  режим повторной обработки
предложения, которое привело  к  ошибке  или  перейти  к  следую-
щему предложению или  передать управление  меню  Script Error.
     Если  определена  процедура  обработки ошибок, PAL будет ав-
томатически выполнять ее после  любой  встреченной  ошибки.  Мож-
но  задать  различные  процедуры  обработки  ошибок для различных
частей вашей программы.  Для  этого  в  каждом  модуле  требуется
присвоить  переменной  errorproc имя соответствующей процедуры.
     Для установки процедуры обработки ошибок присвойте  перемен- 
ной errorproc строку, являющуюся именем этой процедуры. Процедура
обработки  ошибок  не  должна  иметь  аргументов. Она определяет-
ся таким же образом, как и любая другая процедура.  В  теле  про-
цедуры для определеня типа ошибки можно пользоваться функциями
ERRORCODE  и  ERRORMESSAGE. Первая из них возвращает целое число,
являющееся  кодом  типа  ошибки  (смотри  главу  21),  а   вторая
стандартное  сообщение  об ошибке  этого типа. 
     Например,  если  ошибка  произошла  в  результате недостатка
места на диске,  то  функция  ERRORCODE  возвратит  число  41,  а
ERRORMESSAGE  -  сообщение  "Not  enough  disk  space to complete
the  operation".
     Некоторые  из  ошибок  (помеченные  звездочкой  в  списке  в
главе  21)  являются  ошибками, происходящими в результате несог-
ласованности   ресурсов  в  сетевых  прикладных   системах.   Для
этих  ошибок  можно  определить  имя  пользователя,  захватившего
ресурс общего пользования,  с  помощью функции  ERRORUSER.
     Процедуры обработки ошибок должны  возвращать  одно  из  це-
лых  чисел  0,  1  или  2,  в  зависимости  от  того, каким обра-
зом  вы хотите  продолжить  выполнение  скрипта:
                         
  -  0 вызывает продолжение  выполнения  скрипта  с  предложения, 
     вызвавшего ошибку, т.е. предложение выполняется вновь (соот- 
     ветствует команде отладчика {Crtl}{S}; 
     
  -  1  вызывает  продолжение  выполнения  скрипта  с   предложе-
     ния, следующего за тем, которое вызвало ошибку (соответству-
     ет  команде  отладчика  {Crtl}{N};
     
  -  2  вызывает  высвечивание  меню Script Error, как если бы не 
     было определено никакой процедуры обработки ошибок. 
     
     Возврат  любой  другой  величины приводит к тому же эффекту, 
что и возврат величины 2. Возврат величины 0 оправдан лишь в  том 
случае, если сделаны корректирующие действия, иначе ошибка повто- 
рится. 
     Правилами хорошего  тона  не  рекомендуется  слишком  сильно
полагаться  на  процедуры  обработки  ошибок. Вместо этого следу-
ет избегать ошибок скрипта, проверяя условия возникновения таких
ошибок (например, неготовности принтера  или  дисководов)  с  ис-
пользованием  соответствующих команд  и функций  PAL.
     
     В  примере  не  рис.7-2  показано,  как  можно  использовать
процедуру  обработки  ошибок  в  прикладных  системах  с  защитой
паролем.  Заметьте,  что errorproc описана как ограниченная пере-
менная. Внутри процедуры  Handler  errorproc  остается  неопреде-
ленной.  Таким  образом,  если  при  исполнении процедуры Handler
возникает другая ошибка, то процедура обработки ошибок  не  вызы-
вается.  Так  можно  избежать  бесконечной  рекурсии.  Этот метод
следует применять в любом случае,  когда  есть  возможность  воз-
никновения  ошибки  при  выполнении  процедуры  обработки ошибок.
В качестве  альтернативы можно  исполнить  команду :
     
     RELEASE VARS  ErrorProc
     
внутри процедуры Handler. Использование  ограниченной  переменной
более  предпочтительно,  так  как   ее   значение   автоматически
восстанавливается  при  возврате  управления  скрипту.
     
                                                      
     Errorproc = "Handler"           ; устанавливает процедуру
                                     ; обработки  ошибок
     PROC Handler()                  ; определение процедуры
       PRIVATE Errorproc             ; в  случае  ошибок  внутри 
                                     ; Handler
       IF (ERRORCODE() =  41)
          THEN                       ; в случае ошибки  диска
          QUIT  ERRORMESSAGE()       ; выйти из системы  и выдать
                                     ; сообщение  об ошибке
       ENDIF                         ; иначе  записать  на диск
       SAVEVARS A11                  ; значения всех переменных
                                                               
             ; добавление  информации в  savevars.sc
     
       PRINT FILE "savevars.sc" ERRORCODE(), ERRORMESSAGE()
       MESSAGE "Error ocurred!  Please call Hank  at 555-4300"
     ENDPROC
     
     
       Рис.7-2.  Использование  процедур обработки ошибок
