			    - 170 -
		 Список исключительных ситуаций
		      ───────────────────
    В этой главе описывается каждый тип исключительных ситуаций в
отдельности. Описание каждой ситуации содержит шесть пунктов:
    - описание,
    - режимы 80386, в которых эта ситуация может иметь место,
    - код ошибки, записываемый в стек,
    - возможность  повторного запуска - либо она желательна, либо
возможна, и сценарий восстановления в наихудшем случае,
    - все тонкие отличия от 8086/88,
    - комментарии - информация о любых других понятиях, связанных
с данной ситуацией, или полезные советы.
Ситуация 0: ошибка деления
   -Описание:эта ситуация, квалифицируемая как ошибка,	обнаружи-
вается,  когда команда DIV или IDIV пытается выполнить деление на
ноль, или когда результат DIV или IDIV переполняет  предназначен-
ный  для  него операнд. Т.к. ситуация квалифицируется как ошибка,
счетчик команд указывает на неудачную команду деления.
   -Активные режимы:действительный, защищенный, виртуального 8086.
В действительном режиме используется вектор 0 и таблица  векторов
прерывания действительного режима. В защищенном режиме или режиме
виртуального 8086 используется переключатель 0 в таблице дескрип-
торов прерывания защищенного режима (IDT).
   -Код ошибки, записываемый в стек в защищенном режиме: нет
   -Перезапускаемость: команда, послужившая причиной этой  ситуа-
ции,  может быть повторена. Конечно, повторный запуск команды бу-
дет снова вызывать исключительную ситуацию, если операнды команды
деления  не  изменены.	Т.о.,  хорошей стратегией в этой ситуации
должно быть сообщение об ошибке и прекращение неудачной  програм-
мы.
   -Отличия от 80886/8088: в 8086/8088 эта ситуация  квалифициру-
ется  как  ловушка.  Т.о. в 8086/8088 счетчик команд указывает на
следующую команду. Определение этой ситуации  в  80286/80386  как
ошибки	дает программе обработки ситуации  больше полезной инфор-
мации, т.к. счетчик команд указывает на саму неправильную  коман-
ду. Такая ситуация случается нечасто, так что изменения внесенные
с  целью улучшения в 80286/80386 для обработки этой ситуации при-
водят к незначительной несовместимости или отсутствию несовмести-
мости.
Ситуация 1: отладка
   -Описание: эта ситуация имеет  место,  когда  инициализируется
точка прерывания при отладке (во время выполнения команды, перек-
лючения  данных  или задачи) или если TF (одношаговый) флаг уста-
новлен. Ситуация квалифицируется как  ошибка  при  прерывании  во
время  выполнения команды, но определяется как ловушка при преры-
вании по адресу данных, переключения задачи и прерывании при  ус-
тановленном флаге внутреннего прерывания (TF).
    Отладочный регистр состояния, отладочный регистр 6 (DR6) поз-
воляют программе обработки ситуации при отладке легче определить,
почему	она возникла. Отладочный регистр состояния содержит одно-
битные флаги для каждого типа возможных событий,  вызывающих  эту
ситуацию.  Заметим, что некоторые из этих событий - ошибки (ситу-
ация возникает немедленно перед выполнением команды, которая слу-
жит причиной исключительной ситуации при отладке), в то время как
другие события - ловушки (ситуация возникает после команды, кото-
рая служит причиной исключительной ситуации при отладке).

			    - 171 -
    Программа обработки отладочных исключительных ситуаций  может
быть вызвана в результате одного из следующих событий, как
указано в регистре DR6:
   1. Отладочный регистр 0 (DRO) точка прерывания, возникает как
ошибка, если это точка прерывания программы, и как ловушка,  если
это точка прерывания по адресу данных.
    2. Отладочный регистр 1 (DR1) точка прерывания, возникает как
ошибка, если это точка прерывания программы, и как ловушка,  если
это точка прерывания по адресу данных.
    3. Отладочный регистр 2 (DR2) точка прерывания, возникает как
ошибка, если это точка прерывания программы, и	как  ловушка,если
это точка прерывания по адресу данных.
    4.	Отладочный  регистр  3 (DR3). Точка прерывания, возникает
как ошибка, если это точка прерывания программы, и  как  ловушка,
если это точка прерывания по адресу данных.
    5. Прерывание одношаговой инструкции, служащее причиной уста-
новки  TF  бита  в  EFLAG, возникает как ловушка после выполнения
каждой команды.
    6. Прерывание переключения задач, служащее причиной установки
T бита в TSS задачи, возникает как ловушка в контексте	следующей
задачи.
    7.	Ошибка	благодаря попытке чтения или записи в любой отла-
дочный регистр во время, когда	 GD в DR7=1. Это  указывает,  что
внутрисхемный  эмулятор, такой как ICE-386, в настоящее время ис-
пользует отладочные регистры в своих целях.
   Для более полной информации об  использовании  отладочных  ре-
гистров 80386 см. главу 17.
  -Активные   режимы:  действительный,	защищенный,  виртуального
8086. В действительном режиме используется  вектор  1  в  таблице
векторов  прерывания действительного режима. Защищенный режим или
режим виртуального 8086  использует  переключатель  1  в  таблице
дескрипторов прерывания защищенного режима.
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость: все случаи этой ситуации имеют возможность
повторного  запуска.  RF (флаг возобновления) позволяет команде с
адресом точки прерывания быть повторно запущенной без немедленной
выработки другой отладочной ситуации ошибки.
   -Отличие от 8086/8088: поведение TF, когда в одношаговом режи-
ме выполняется команда INT3, INTn, INTO  или  BOUND,  различно	в
80286/80386   и   8086/8088.   Когда   выполняются  эти  команды,
80286/80386 сбрасывает TF после того, как первоначальное содержи-
мое EFLAG загружается в стек; это предохранительное свойство, ко-
торое предотвращает выполнение пошагового режима прикладной прог-
раммы  через программу обработки прерываний операционной системы.
8086/8088 не сбрасывает TF для этих команд. Вывод: отладчик,  на-
писанный  для  8086/8088,  но пропускаемый на 80286 или 80386, не
будет работать в пошаговом режиме во время выполнения подпрограм-
мы обработки прерываний; скорее всего он выполнится полностью  во
время  подпрограммы и во время следующей команды главной програм-
мы. Чтобы исправить это, отладчик  80286/80386,  использующий  TF
для  поддержки	пошагового  режима, должен воспроизвести действие
любой команды прерывания, которая встретилась.	Эмуляция  требует
построения  стека   ловушки  как  при команде прерывания и взятия
следующей команды из точки входа в подпрограмму обработки  преры-
вания.

			    - 172 -
   -Комментарии:  используя отладочные регистры 80386 для ловушек
по данным, используйте свойство прерывания по адресу данных,  за-
тем  обеспечьте использование свойства точного соответствия точке
прерывания, чтобы гарантировать, что будет произведено прерывание
по точке.
Ситуация 3: команда останова
   -Описание: эта  ситуация  возникает,  если  выполняется  одно-
байтная  команда INT3 (код операции СС). Вектор для программы об-
работки ситуации считается частью  команды  INT3.  Следовательно,
эта ситуация считается ловушкой, и счетчик команд продолжает ука-
зывать на команду, следующую за INT3.
   -Активные режимы: действительный, защищенный режим виртуально-
го 8086. В действительном режиме используется  вектор  3  таблицы
векторов  прерывания  действительного режима. В защищенном режиме
или режиме виртуального 8086 используется переключатель 3  в  IDT
защищенного режима.
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость:	т.к.  эта ситуация возникает как ловушка,
команда INTO уже завершена. Программа может быть  возобновлена	с
команды, следующей за INT3.
   -Отличие от 8086/8088: нет.
   -Комментарии:  эта  ситуация - единственный путь для выработки
прерывания выполняемой команды в 8086/8088 или 80286. В этой  си-
туации	обеспечивается	совместимость для существующих отладчиков
8086/8088 или 80286, пропускаемых на 80386.
Ситуация 4: команда INTO, если установлен  флаг переполнения (OF)
   -Описание: эта ситуация возникает, если при выполнении команды
INTO бит OF установлен в 1. Вектором программы обработки ситуации
считается часть команды INTO. Следовательно, ситуация  квалифици-
руется	как ловушка, и счетчик команд продолжает указывать на ко-
манду, следующую за INTO.
   -Активные  режимы:  действительный,	защищенный,  виртуального
8086.  В  действительном  режиме используется вектор 4 из таблицы
векторов прерывания действительного режима. В  защищенном  режиме
или режиме виртуального 8086 используется переключатель 4 в IDT.
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость:	т.к. эта ситуация квалифицируется как ло-
вушка, команда INTO уже завершена. Программа может быть возобнов-
лена с команды, следующей за INTO.
Ситуация 5: команда BOUND при обнаружении выхода за границы
   -Описание: эта ситуация имеет место, когда выполняется команда
BOUND, и обнаруживается состояние  выхода  за  границы.  Вектором
программы  обработки ситуации считается часть команды BOUND. Сле-
довательно, ситуация квалифицируется как ловушка, и  счетчик  ко-
манд продолжает указывать на команду, следующую за BOUND.
   -Активные  режимы:  действительный , защищенный и режим вирту-
ального 8086. В действительном режиме используется  вектор  5  из
таблицы  векторов прерывания действительного режима. В защищенном
режиме или режиме виртуального 8086 используется переключатель	5
в IDT.

			    - 173 -
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость:	т.к.  эта ситуация возникает как ловушка,
команда BOUND уже завершена. Программа может быть возобновлена	с
команды, следующей за BOUND.
Ситуация 6: недопустимая команда
   -Описание: эта ситуация возникает, если процессор начинает вы-
полнять какую-либо команду, не являющуюся законной. Причина может
заключаться  в	недопустимом коде операции, [mod r/m] или [s-i-b]
байте (байтах) (см. гл.3 Формат команд). Обычно причина  заключа-
ется  в том, что ошибочная программа пытается вызвать данные. По-
пытка использования префикса LOCK там, где он не может	быть  ис-
пользован,  также  служит  причиной  исключительной ситуации (см.
разрешенные виды команд ниже). В  действительном  режиме  попытка
выполнения команд  защищенного	режима ARPL, LLDT, LTR, LAR, LSL,
SLDT, STR, VERR или VERW также служит причиной исключительной си-
туации.
   -Активные  режимы:  действительный,	защищенный,  режим вирту-
ального 8086. В действительном режиме используется вектор 6  таб-
лицы векторов прерываний действительного режима. В защищенном ре-
жиме  или режиме виртуального 8086 используется переключатель 6 в
IDT.
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость: состояние процессора сохраняется, так  что
рестарт может быть произведен, допуская, что повторный запуск не-
законной команды имеет какой-нибудь смысл. Наилучшей стратегией в
этом  случае будет являться сообщение об ошибке и завершение оши-
бочной программы.
Отличие от 8086/8088: такой исключительной ситуации не существует
в 8086/8088, который расценивает незаконную команду как NOP  (ни-
чего не происходит, кроме инкрементации счетчика команд).
Отличие  от 8086/8088 и 80286: добавление возможности перемещения
страниц в 80386 сделало необходимым ограничить использование пре-
фикса LOCK для для небольшого набора команд, где защелкивание мо-
жет действительно быть гарантировано. Ситуация недопустимого кода
операции (ситуация 6) вырабатывается  иначе.  Это  ограничение	и
исключительная	ситуация  применяется  во  всех режимах 80386, не
считая, возможно ли перемещение страниц или желательно.
    Префикс LOCK законно может предшествовать только определенным
командам, в особенности тем, которые обменивают регистры данных с
памятью, и некоторые из тех, которые выполняют операции пересылки
в память. Эти виды команд:
    XCHG  <mem EA>, genreg	 обмен памяти с регистром 80286 и
				 80386 авто LOCK эту инструкцию
    XCHG  genreg, <mem EA>	 обмен регистра с памятью 80286 и
				 80386 авто  эту инструкцию
    ADD  <mem EA>, genreg	 сложение с операндом из памяти
    ADC  <mem EA>, genreg	 сложение с использованием флага
				 переноса
    SUB <mem EA>, genreg	 вычитание    операнда из памяти
    SBB <mem EA>, genreg	 вычитание с использованием
				 флага переноса (заема)

			    - 174 -
    NEG <mem EA>		 умножение операнда из памяти
				 на -1
    OR	<mem EA>, genreg	 ИЛИ с операндом из памяти
    AND <mem EA>, genreg	 И с операндом из памяти
    XOR <mem EA>, genreg	 исключающее ИЛИ с операндом
				 из памяти
    NOT <mem EA>		 отрицание операнда из памяти
    BTC <mem EA>		 дополнение битов операнда из
				 памяти
    BTR <mem EA>		 сброс битов операнда из памяти
    BTS <mem EA>		 установка битов операнда из
				 памяти
    Т.к. перемещение страниц поддерживается 80386,  80386  должен
быть более ограниченным по отношению к префику LOCK, чем 8086 или
80286. В страничной среде, которой может быть обеспечен 80386 нет
путей,	чтобы  быть  уверенным, например, в успешном защелкивании
повторяющейся строковой команды. Например, ОС может вмешаться для
обслуживания отказа страницы, прервав предположительно	защелкну-
тую команду. См. стр.	 для большей информации о префиксе LOCK.
Ситуация 7: арифметический сопроцессор недоступен.
   -Описание:  эта  ситуация вырабатывается как ошибка, если про-
цессор начинает выполнять команду сопроцессора,  когда	EM  и  МР
флаги указывают, что сопроцессор либо недоступен, либо недоступен
для текущей задачи.
    Биты ЕМ и НП полностью контролируются программным обеспечени-
ем. ЕМ бит должен быть установлен, а МР бит - сброшен, когда эму-
лируется  сопроцессор. ЕМ бит должен быть сброшен, а МР бит - ус-
тановлен, когда сопроцессор действительно в системе.
    TS бит автоматически устанавливается в 1, когда 80386  выпол-
няет  переключение  задач (см. стр.    ). В этом случае следующая
команда сопроцессора приходящей задачи вырабатывает ситуацию  не-
доступности  сопроцессора  (ситуация 7). Обрабатывающая программа
этой ситуации, вероятно, перекачивает  состояние  сопроцессора	в
новую задачу, сбрасывая TS флаг (возможно использованием CLTS ко-
манды), и возвращается к команде сопроцессора. Т.к. флаг TS сбро-
шен,  арифметическая команда теперь выполняется без вызова исклю-
чительной ситуации.
   -Активные  режимы:  действительный,	защищенный,  виртуального
8086.  В действительном режиме используется вектор 7 таблицы век-
торов прерывания действительного режима. В  защищенном	режиме	и
режиме виртуального 8086 используется переключатель 7 в IDT.
Код ошибки, загружаемый в стек в защищенном режиме: нет.
   -Перезапускаемость:	все  происходящее в этой ситуации переза-
пускаемо.
Отличие от 8086/8088: такой ситуации не существует  в  8086/8088,
который  не  обеспечивает  критической	ситуации для эмулирования
сопроцессора. В 8086/8088 эмуляция сопроцессора может быть завер-
шена, когда необходимо, заменой или вставкой в об`ектный код явно
заданной команды INTn для каждой команды сопроцессора.

			    - 175 -
Флаг, уста-│			     │
новленный  │ Вырабатывается ситуация │ Вырабатывается ситуация
 в CRO	   │   7 при команде WAIT    │ 7 при команде сопроцес-
───┬───┬───┤			     │		сора
EM │MP │TS │			     │
───┼───┼───┼─────────────────────────┼───────────────────────────
0  │1  │0  │	     Нет	     │		Нет
0  │1  │1  │Да, позволяют  сопроцес- │ Да, позволяет сопроцес-
   │   │   │сору  контекстное  пере- │ сору контекстное пере-
   │   │   │ключение,  которое будет │ ключение, которое будет
   │   │   │выполнено  обработчиком  │ выполнено обработчиком
   │   │   │ситуации 7		     │ ситуации 7
1  │0  │0  │Нет,  нет  необходимости │ Да, т.к. команда сопро-
   │   │   │эмулировать команду WAIT,│ цессора может быть сэ-
   │   │   │когда сопроцессор не при-│ мулирована обработчиком
   │   │   │сутствует		     │ ситуации 7
1  │0  │1  │Нет,  нет  необходимости │ Да, т.к. команда сопро-
   │   │   │эмулировать     команду  │ цессора может быть сэ-
   │   │   │WAIT,  когда  сопроцес-  │ мулирована обработчиком
   │   │   │сор  не  присутствует    │ ситуации 7

Ситуация 8: двойная ошибка.
   -Описание:  эта  ситуация  возникает,  если	обнаружена  любая
исключительная ситуация, когда процессор пытается передать управ-
ление обработчику для предыдущей исключительной ситуации 0,10,11,
12 или 13.
   -Активные режимы:защищенный. В защищенном режиме используется
переключатель 8 в IDT.
Код ошибки, записываемый в стек в защищенном режиме: да,  но код
ошибки - все нули.
   -Перезапускаемость:	 команда,  служащая  причиной  предыдущей
исключительной ситуации не может быть  провторно  запущена,  т.к.
обнаружение  второй исключительной ситуации препятствует сохране-
нию состояния прерванной программы и загрузке информации о  вход-
ной  точке  обработчика  исключительной  ситуации. Т.к. в цепочке
исключительных ситуаций некоторая первоначальная информация теря-
ется, повторный  запуск  далее	невозможен.  Это  причина  особой
исключительной	ситуации,  ситуации  8, предназначенной для таких
условий.
Отличие от 80086/8088: такая ситуация не существует в 8086/8088.
   -Комментарии: чтобы избежать этой ситуации, нужно  обеспечить,
чтобы точки входа в обработчики ситуаций 0, 10, 11, 12 и 13 могли
быть  достигнуты  без причин для будущей исключительной ситуации.
Чтобы обработать ситуацию 8, нужно обеспечить правильный  TSS для
обработчика ситуации 8 обработкой его в различных задачах.  Чтобы
это  сделать,  нужно разместить переключатель задач в позиции 8 в
IDT.

			    - 176 -
Ситуация 9: нарушение границы сегмента операнда сопроцессора
   -Описание: эта ситуация возникает, если процессор обнаруживает
исключительную ситуацию, пока он вовлекается в передачу  операнда
для  сопроцессора. Эта	ситуация может иметь место только при ус-
ловии "завертывании" операнда вокруг 4 Гбайтного сегмента.
   -Активные режимы: защищенный. В защищенном режиме используется
переключатель 9 в IDT.
   -Код ошибки, записываемый в стек в защищенном режиме: нет.
   -Перезапускаемость: команда арифметического сопроцессора, слу-
жащая  причиной  этой ситуации, не является перезапускаемой, т.к.
она уже начала выполняться и изменила состояние сопроцессора в то
время, когда 80386 была обнаружена эта исключительная ситуация.
   -Отличие от 8086/8088: такой ситуации не существует в 8086/8088.
   - Комментарии: этой ситуации можно избежать, не разрешшая  опе-
ранду  сопроцессора "заворачиваться" вокруг конца 4-Гбайтных сег-
ментов.
Ситуация 10: недопустимый сегмент состояния задачи
   -Описание: эта ситуация возникает во время операции переключе-
ния задач, если процессор обнаруживает, что сегмент состояния за-
дачи слишком мал, чтобы содержать фиксированную  порцию  TSS  или
если  TSS содержит противоречивую информацию. Эта ситуация сигна-
лизирует как ошибка в контексте уходящей задачи, если TSS  уходя-
щей задачи оказывается недопустимым или если TSS приходящей зада-
чи несуществует. Ситуация квалифицируется как ловушка в контексте
приходящей задачи, если TSS приходящей задачи имеет будущие проб-
лемы.
   -Активные режимы: защищенный. В защищенном режиме используется
переключатель 10 в IDT.
Код ошибки, записываемый в стек в защищенном режиме: записывается
код  ошибки,  показанный на рис. 16.2. Индекс селектора, содержа-
щийся в коде ошибки, зависит от условий обнаружения, как показано
ниже:
   -Перезапускаемость: эта ситуация перезапускаема, если не явля-
ется  причиной того факта, что часть фиксированной порции TSS на-
ходится в несуществующей странице. Поэтому следует избегать нару-
шения границ внутри фиксированной порции TSS.
 -Отличие от 8086/8088: такой ситуации не существует в 8086/8088.
   -Комментарии: чтобы гарантировать правильность TSS  при  обра-
ботке ситуации, обработчик ситуации 10 должен быть задачей, вызы-
ваемой через переключатель задач в позиции 10 TDT. В любой систе-
ме  рекомендуется  создавать  только допустимые дескрипторы TSS с
установкой ограничения дескриптора TSS большего, чем  достаточное
для  того,  чтобы  содержать во всяком случае фиксированную часть
TSS и допустимое содержимое самого TSS.

			    - 177 -

────────────────────────────────────────────────────────────────
 Код ошибки  │Условие, из-за которого	│Проверяется│Проверяется
 ситуации 10 │каждый TSS, вовлеченный в │TSS уходя- │TSS прихо-
	     │процессе переключения за- │щей задачи │дящей зада-
	     │дач является недопустимым │	    │	 чи
─────────────┼──────────────────────────┼───────────┼───────────
TSS индекс + │Дескриптор TSS неправиль- │    Да     │	 Да
EXT бит      │ный (ошибочный тип дес-	│	    │
	     │криптора или не поддаю-	│	    │
	     │щийся расшифровке)	│	    │
TSS индекс + │JMP, CALL, INT3, INTn,	│    Да     │	 Да
EXT бит      │INTO или BOUNDS команда	│	    │
	     │служит причиной пере-	│	    │
	     │ключения задач, но TSS	│	    │
	     │приходящей задачи уже	│	    │
	     │отмечен как занятый	│	    │
	     │(В=1)			│	    │
TSS индекс + │Команда IRET служит при-	│    Да     │	 Да
EXT бит      │чиной переключения задач	│	    │
	     │на приходящую задачу, в	│	    │
	     │которой текущая задача,	│	    │
	     │вероятно, вложена, но	│	    │
	     │приходящая задача отме-	│	    │
	     │чена как незанятая	│	    │
	     │(В=0)			│	    │
TSS индекс + │Ограничение в 32-битном	│    Да     │	 Да
EXT бит      │дескрипторе TSS меньше	│	    │
	     │103 (десятичное) байтов,	│	    │
	     │требуемых для фиксиро-	│	    │
	     │ванной порции TSS (или	│	    │
	     │меньше, чем 43 десятич-	│	    │
	     │ное для 16-битного дес-	│	    │
	     │криптора TSS)		│	    │
LDT индекс + │Недопустимый дескриптор	│   Нет     │	 Да
EXT бит      │LDT или дескриптор LDT	│	    │
	     │отмечен как несуществу-	│	    │
	     │ющий			│	    │
SS индекс +  │Селектор сегмента стека	│   Нет     │	 Да
EXT бит      │вне ограничения таблицы	│	    │
	     │дескриптора		│	    │
SS индекс +  │Селектор сегмента стека	│   Нет     │	 Да
EXT бит      │не ссылается на сегмент	│	    │
	     │записи данных		│	    │
SS индекс +  │DPL сегмента стека не	│   Нет     │	 Да
EXT бит      │соответствует новому CPL	│	    │
	     │(указанному RPL селек-	│	    │
	     │тора новой программы)	│	    │
SS индекс +  │RPL селектора сегмента	│   Нет     │	 Да
EXT бит      │стека больше или меньше	│	    │
	     │нового DPL		│	    │

			    - 178 -
	     │				│	    │
─────────────┼──────────────────────────┼───────────┼───────────
CS индекс +  │Селектор сегмента про-	│   Нет     │	 Да
EXT бит      │граммы вне ограничения	│	    │
	     │таблицы дескриптора	│	    │
CS индекс +  │Селектор сегмента про-	│   Нет     │	 Да
EXT бит      │граммы не ссылается на	│	    │
	     │сегмент программы 	│	    │
CS индекс +  │DPL несогласующегося сег- │   Нет     │	 Да
EXT бит      │мента программы больше	│	    │
	     │или меньше нового CPL	│	    │
CS индекс +  │DPL согласующегося сег-	│   Нет     │	 Да
EXT бит      │мента программы больше	│	    │
	     │нового CPL		│	    │
DS,ES,FS,GS  │Селектор сегмента DS,ES,	│   Нет     │	 Да
индекс +     │FS или GS вне ограничения │	    │
EXT бит      │таблицы дескриптора	│	    │
S,ES,FS,GS   │Селектор сегмента DS,ES,	│   Нет     │	 Да
индекс +     │FS или GS не ссылается на │	    │
EXT бит      │сегмент данных		│	    │
────────────────────────────────────────────────────────────────
Замечание:" + " имеет дополнительное значение операции булевского
	   ИЛИ, используемого в формате кода ошибки, см. рис.
	   16.2.
Ситуация 11: сегмент не существует.
    Описание: эта ситуация возникает, если процессор  обнаружива-
ет,  что  бит наличия во всех дескрипторах для CS, DS, ES, FS, GS
или LDT, или в переключателе  ловушек,	переключателе  прерываний
или  переключателе задач. Эта ситуация квалифицируется как ошибка
при попытке загрузки селектора несуществующего дескриптора в  ре-
гистре	сегмента. Эта ситуация квалифицируется как ошибка при по-
пытке использования  селектора	несуществующего  переключателя	в
межсегментном JMP, межсегментном CALL, межсегментном RET, межсег-
ментном  RETn,	INT3,  INTn, INTO, BOUND, IRET, MOV в DS/ES/FS/GS
или LDS/LES/LFS/LGS.
 Особое рассмотрение для обнаружения ситуации несуществования во
      время переключания задач: ситуация наихудшего случая
    Если ситуация обнаруживается во время переключения задач, та-
кая ситуация квалифицируется как ловушка в  контексте  приходящей
задачи.  Во время переключения задач 80386 во-первых устанавлива-
ет, что TSS приходящей задачи существует и что его LDT (какой-ли-
бо) существует, загружжает все регистры из  нового  TSS  и  затем
один  за  другим  считывает дескрипторы, указывающие на селекторы
для каждого  регистра  сегмента.  Если	какой-нибудь  необходимый
дескриптор не существует, немедленно возникает исключительная си-
туация	(ловушка) в контексте новой задачи. (Об`яснение: переклю-
чение задач происходит, но первая команда новой  задачи,  однако,
не  выполняется .  Поскольку  это  происходит,	оставшиеся  кэш и
дескрипторов  не  могут  быть  изменены  содержимым  необходимого
дескриптора.  Существует два пути чтобы скопировать их в обработ-
чик ситуации несуществования (ситуации 11):

			    - 179 -
    1. Обработка этой ситуации с отдельной задачей (переключатель
задач в позиции 11 IDT). Задача переключается обратно на прерван-
ную задачу, что послужит причиной того, что процессор  перезагру-
зит  регистры  и кэши дескрипторов для прерванной задачи. Попытка
переключения может, однако, обнаружить будущую исключительную си-
туацию, которая будет  векторизована  соответственно.  Когда  все
исключительные ситуации, вызванные переключением задач, обработа-
ны, обратное переключение на прерванную задачу происходит гладко.
    2.	Обработка этой ситуации внутри текущей задачи (переключа-
тель ловушек в позиции 11 в IDT) и гарантия того, что обрабатыва-
ющая подпрограмма сделает все кэши дескрипторов согласующимися	с
величинами  селектора тех, которые были загружены во время перек-
лючения задач. Следовательно,  подпрограмма  должна  загрузить	в
стек  и  затем	считать из стека все селекторы регистра сегмента.
Операция POP послужит причиной того, что 80386	считает необходи-
мый дескриптор и изменит  соответствующий  кэш	дескриптора.  Из-
вестно,что каждая такая команда POP внутри обработчика может пос-
лужить	причиной  какой-либо  другой ситуации несуществования или
какой-либо другой исключительной ситуации.  Следовательно,  обра-
ботчик этой ситуации должен допускать возможность повторного вхо-
да (все его временные изменения должны быть сохранены в стеке об-
работчика).
    Активные режимы: защищенный. В защищенном режиме используется
вентиль 11 в IDT.
Код  ошибки, записываемый в стек в защищенном режиме: код ошибки,
как на рис. 16.2, записывается в стек. Индексная область ссылает-
ся на селектор несуществующего дескриптора или	на  селектор  или
IDT  индекс несуществующего переключателя. Бит I установлен, если
код ошибки ссылается на элемент IDT, являюшийся результатом, нап-
ример, команды INTn, ссылающейся на несуществующий переключатель,
или аппаратного прерывания, ссылающегося на несуществующий перек-
лючатель (EXT бит также устанавливается в этом случае).
    Перезапускаемость: все происходящее в этой	ситуации  переза-
пускаемо. Если обработчик ситуации 11 делает сегмент или переклю-
чатель	существующим  (Р=1)  и выполняет IRET, будет возобновлено
выполнение прерванной программы.
Отличие от 8086/8088: такой ситуации не существует в 8086/8088.
Ситуация 12: ошибка стека.
    Описание: эта ситуация возникает, когда не существует сегмент
стека происходит превышение ограничения сегмента стека.
    Ситуация квалифицируется как ошибка, если она обнаружена, по-
тому что нарушено ограничение, при этом счетчик команд	указывает
на неудачную команду.
    Ситуация  квалифицируется  как ошибка, когда команда пытается
загрузить селектор несуществующего  дескриптора  в  SS	(сегмента
стека)	регистр. Это может произойти при межуровневом CALL, межу-
ровневом RET, межуровневом RETn, межуровневом INTn,  межуровневом
IRET, команде LSS или MOV или POP в SS.
   Особое рассмотрение для обнаружения стековой заключительной
 ситуации во время переключения задач: ситуация наихудшего случая
    Если  обнаружено,  что  стек не существует, в него невозможна
запись или некорректный уровень привилегий во время  переключения
задач,	такая  ситуация  квалифицируется  как ловушка в контексте
приходящей задачи. Во время переключения  задач  80386	во-первых
устанавливает, что TSS приходящей задачи существует, что LDT (ес-

			    - 180 -
ли  несколько) существует, загружает все регистры из нового TSS и
затем один за другим считывает дескрипторы, указанные  селектором
в каждом регистре сегмента. Если обнаружено, что SS дескриптор не
существует, такая исключительная ситуация немедленно квалифициру-
ется  как ловушка в контексте новой задачи. (Об`яснение: переклю-
чение задач происходит, но первая команда новой задачи еще не вы-
полнена). Поскольку это происходит, оставшиеся кэши  дескрипторов
не  могут  быть изменены содержимым необходимого дескриптора. Су-
ществует два пути, чтобы скопировать их в обработчик ситуации 12:
    1. Обработка этой ситуации с отдельной задачей (переключатель
задач IDT). Переключение задачи обработки в прерванную задачу бу-
дет являться  причиной того, что процессор перезагрузит  регистры
и  кэш дескрипторов для прерванной задачи. При попытке переключе-
ния задач может, однако, возникнуть исключительная ситуация,  ко-
торая  будет  соответственно  векторизована.  Когда  все исключи-
тельные ситуации, вызванные переключением задач, будут	обработа-
ны, обратное переключение на прерванную задачу происходит гладко.
    2.	Обработка этой ситуации внутри текущей задачи (переключа-
тель ловушек в позиции 12 IDT) и гарантия того,  что  обрабатыва-
ющая  подпрограмма  сделает все кэш дескрипторов согласующимися с
величинами селектора тех, которые были загружены во время  перек-
лючения задач. Следовательно подпрограмма должна загрузить в стек
и затем считать из стека все селекторы регистра сегмента.  Опера-
ция  POP  послужит  причиной  того, что 80386 считает необходимый
дескриптор и изменит соответствующий кэш  дескриптора.	Известно,
что  каждая  такая команда POP внутри обработчика может послужить
причиной какой-либо другой ситуации несуществования (ситуации 11)
или некоторой другой ситуации. В будущем ситуация 12  может  про-
изойти, однако, обработчик ситуции 12 может допускать возможность
повторного входа.
    Активные  режимы:  действительный,	защищенный,  виртуального
8086. В действительном режиме используется вектор 12 таблицы век-
торов прерывания действительного режима. В защищенном режиме  ис-
пользуется  переключатель 12 в IDT. Эта ситуация обычно не проис-
ходит в действительном режиме, но может  быть  вызвана	созданием
ситуации,  когда  операнд стека окажется частично за ограничением
64-битного сегмента действительного режима при использовании пре-
фикса размера адреса, для создания 32-битного адреса стека, выхо-
дящего за ограничение 64 К сегмента действительного режима.
Код ошибки, записываемый в стек в защищенном  режиме: код ошибки,
записываемый в стек, если исключительная  ситуация  вызвана  тем,
что сегмент стека не существует. Если ситуация возникает благода-
ря  тому,  что	нарушено ограничение сегмента стека, код ошибки -
все нули.
    Перезапускаемость:	все  происходящее в этой ситуации переза-
пускаемо. Если обработчик ситуации 12 делает  сегмент  стека  су-
ществующий (Р=1) или расширяет его границы как требуется и выпол-
няет IRET, прерванная программа будет снова выполняться.
Отличие  от  8086/8088: такой ситуации не существует в 8086/8088.
Тот факт, что ситуация 12 может быть вызвана в действительном ре-
жиме или режиме виртуального  8086  (при  нарушении  ограничения)
практически не имеет отношения к программному обеспечению 8086.

			    - 181 -
Ситуация 13: общая защита.
    Описание: эта ситуация возникает, если процессор обнаруживает
нарушение защиты, не покрываемое другими исключительными ситуаци-
ями. Возможные причины заключаются в попытке выполнения одного из
следующих действий:
    В случаях 1-6 в стек записывается  код  ошибки, показанный на
рис. 16.2.
    1. Передача управления к невыполняемому сегменту, если селек-
тор CS не приходит из приходящей задачи во время переключения за-
дач, т.к. в этом случае имеет место ситуация 10.
    2.	Загрузка  SS  регистра	из  сегмента  только для чтения с
дескриптора выполняемого сегмента, если селектор SS  не  приходит
из  приходящей	задачи	во  время переключения задач, т.к. в этом
случае имеет место ситуация 10.
    3. Загрузка SS, DS, ES, FS или GS регистров дескриптора  сег-
мента  системы, если SS селектор не приходит из приходящей задачи
во время переключения задач, т.к. в этом случае имеет место ситу-
ация 10.
    4. Загрузка DS, ES, FS или GS с дескриптора выполняемого сег-
мента, который также не читаемый.
    5. Передача управления сегменту или  через	переключатель,	в
котором  нарушены правила привилегий, или загрузка SS, DS, ES, FS
или GS из сегмента, в котором нарушены правила привилегий.
    6. Загрузка регистров CS, SS, DS, ES, FS или GS с  селектора,
на  который ссылается LDT (селектор с IT=1, когда LDTR был загру-
жен с пустого селектора (LDT неопределен).
    В случаях 7-15 в стек записывается код ошибки в виде всех ну-
лей.
    7. Загрузка SS регистра с пустого селектора, если  пустой  SS
селектор  не  приходит из приходящей задачи во время переключения
задач, т.к. в этом случае имеет место ситуация недопустимого  TSS
(ситуация 10).
    8. Превышение ограничения сегмента, когда используется CS, DS,
ES, FS или GS.
    9.	Превышение ограничения таблицы, когда ссылающаяся таблица
дескрипторов GDT, LDT или IDT.
    10. Запись в сегмент данных только для чтения или  в  сегмент
программы  (в  сегмент программы никогда не производится запись в
защищенном режиме).
    11. Считывание из сегмента программы только  для  выполнения.
    12. Выборка из памяти через DS, ES, FS или GS, когда  регистр
сегмента содержит пустой селектор.
    13. Загрузка CRO с PG=1 и PE=0 (т.е. попытка сделать  возмож-
ным страничный действительный режим).
    14. Векторизация прерывания или исключительной ситуации через
переключатель ловушек или переключатель прерываний из режима вир-
туального  8086  на  уровень привилегий, отличный от 0. Уровень 0
требуется для того, чтобы был  установлен  определенный  уровень,
таким  образом	IRET  команда в конце обрабатывающей подпрограммы
может установить VM бит в 1, как требуется для возвращения в  ре-
жим виртуального 8086.
    15. Превышение максимальной разрешеной длины команды 15 байт,
включая  байты префиксов (это может произойти только при намерен-
ном использовании чрезмерных префиксов перед командой).
  Особое рассмотрение для обнаружения ситуации общей защиты во
      время переключения задач: ситуация наихудшего случая
    Если обнаружение происходит во время переключения задач,  си-
туация	квалифицируется как ошибка в контексте приходящей задачи.

			    - 182 -
Во время переключения задач 80386  во-первых  устанавливает,  что
TSS  приходящей  задачи существует и что его LDT (если несколько)
существует,загружает все регистры из нового TSS и затем  один  за
другим	считывает  дескрипторы, указанные селекторами для каждого
регистра  сегмента.  Если  обнаружено,	что   любой   необходимый
дескриптор  не существует немедленно возникает исключительная си-
туация, квалифицируемая как ловушка, в	контексте  новой  задачи.
(Пояснение:  переключение задач происходит, но первая команда но-
вой задачи еще не выполнена). Поскольку это происходит,  оставши-
еся кэши дескрипторов не могут быть заменены содержимым необходи-
мого дескриптора. Существует два пути, чтобы скопировать их в об-
работчик ситуации 13:
    1. Обработка этой ситуации с отдельной задачей (переключатель
задач в позиции 13 IDT). Переключение задачи обратно в прерванную
задачу	будет  являться причиной того, что процессор перезагрузит
регистры и кэши дескрипторов для прерванной задачи.  При  попытке
переключения задач может, однако, возникнуть исключительная ситу-
ация,  которая	будет  соответственно  векторизована.  Когда  все
исключительные ситуации, вызванные переключением задач, будут об-
работаны, обратное переключение на прерванную  задачу  происходит
гладко.
    2.	Обработка этой ситуации внутри текущей задачи (переключа-
тель ловушек в позиции 13 IDT) и гарантия того,  что  обрабатыва-
ющая  подпрограмма сделает все кэши дескрипторов согласующимися с
величинами селектора тех, которые были загружены во время  перек-
лючения  задач.  Следовательно,  подпрограмма  должна загрузить в
стек и затем считать из стека все  селекторы  регистра	сегмента.
Операция  POP послужит причиной того, что 80386 считает необходи-
мый дескриптор и изменит  соответствующий  кэш	дескриптора.  Из-
вестно, что каждая такая команда  POP  внутри  обработчика  может
послужить  причиной  другой  ситуации общей защиты или какой-либо
другой ситуации. Следовательно, обработчик этой  ситуации  должен
допускать  возможность	повторного входа (все его временные пере-
менные должны быть сохранены в стеке обработчика).
    Активные  режимы:  действительный,	защищенный,  виртуального
8086. В действительном режиме используется вектор 13 таблицы век-
торов прерывания действительного режима. В защищенном режиме  или
режиме виртуального 8086 используется переключатель 13 в IDT. Эта
ситуация  обычно  не происходит в действительном режиме, но может
быть вызвана созданием ситуации, где операнд частично выходит  за
ограничение 64К сегмента действительного режима при использовании
префикса размера адреса, который создает 32-битный адрес, выходя-
щий за ограничение 64К сегмента действительного режима.
Код  ошибки, записываемый в стек в защищенном режиме: код ошибки,
показанный на рис. 16.2 записывается в стек, если  ситуация  воз-
никла в результате загрузки селектора (пункты 1-6). Если ситуация
возникла  по  другой  причине (пункты 7-15), в стек  записывается
код ошибки из всех нулей.
    Перезапускаемость: все происходящее в этой	ситуации  переза-
пускаемо.
Отличия  от  8086/8088: такой ситуации не существует в 8086/8088.
Факт, что ситуация 13 может возникнуть	в  действительном  режиме
или  режиме  виртуального 8086 (намеренное нарушение ограничения)
практически не касается программного обеспечения 8086.

			    - 183 -
Ситуация 14: отказ страницы.
    Описание: эта ситуация возникает, если выполняющаяся програм-
ма запрашивает страницу, отмеченную как несуществующую	или  если
она  пытается  использовать  страницу способом, ограничивающим ее
права выборки. Эта ситуация всегда возникает как ошибка.
    Обширная информация об ошибках повышает  эффективность  алго-
ритмов	обработчика. Код ошибки, показанный на рис. 16.3, записы-
вается в стек, и системный регистр CR2 содержит  лимитный  адрес,
который служит причиной отказа страницы.
    Активные  режимы:  защищенный,  виртуального 8086. В действи-
тельном режиме используется вектор 14 таблицы векторов прерывания
действительного режима. В защищенном  режиме  или  режиме  вирту-
ального 8086 используется переключатель 14 в IDT.
Код  ошибки,  записываемый в стек в защищенном режиме: код ошибки
при отказе страницы, показанный на рис. 16.3, уникален	для  этой
ситуации. Он указывает,произошел ли отказ страницы благодаря коду
ошибки при отказе страницы, или при нарушении правил выборки, за-
даваемых уровнем привилегий, при котором происходит отказ страни-
цы, и говорить было ли причиной нарушения чтения или запись.
    Перезапускаемость: все происходящее в этой ситуации  повторно
запускаемо,  т.к.  ситуация  квалифицируется  как  ошибка,  адрес
возврата, записанный в стек обработчика,  указывает  на  команду,
которая должна быть повторена. Это команда, которая служит причи-
ной исключительной ситуации.
Отличия от 8086/8088:  такой  ситуации не существует в 8086/8088.
    Комментарии: когда инициализируется стек нулевого уровня, ко-
торый  необходим  обработчику отказа страницы, гарантируется, что
отказ страницы не послужил причиной того, что процессор использу-
ет недопустимый указатель  стека  SS:ESP.  Если  инициализируется
стек нулевого уровня в страничной системе, когда возможно замеще-
ние страниц, не используется последовательность двух команд:
		       MOV   SS, AX
		       MOV   ESP, STAK	 TOP
    Причина  того, что следует избегать этой последовательности в
том, что т.к. вторая команда должна быть выбрана из памяти и  об-
ращается  к  памяти, возможно получить отказ страницы после того,
как SS изменено, но перед тем, как SP примет соответствующие  из-
менения.  Отказ  страницы  в этом случае будет причиной того, что
обработчик отказа страниц (который также на уровне 0)  использует
непоследовательный стек, возможно вызывающий крах системы.
    Вместо этого программное обеспечение, которое выполняется  на
том  же самом уровне привилегий, что и обработчик отказа страниц,
должно использовать единственную новую	LSS  команду  лучше,  чем
приведенную  выше пару команд. В нормальном случае, в котором об-
работчик  отказа  страниц  выполняется	на  уровне   0,   область
действий,  требуемая для LSS, ограничивается программой уровня 0,
которая обычно является ОС. Однако новая команда LSS рекомендует-
ся  для  загрузки  SS:ESP на привилегированном уровне. Приведеная
выше последовательность двух команд устарела.
Ситуация 16: ошибка арифметического сопроцессора
    Описание: эта ситуация возникает, если контакт ERROR #  80386
активен,  когда  80386	пытается  инициализировать другую команду

			    - 184 -
сопроцессора. Когда процессор готовится начать команду	сопроцес-
сора  опрашивается вход ERROR #, и, если он оказывается активным,
возникает ситуация 16 как ловушка по отношению к  команде  сопро-
цессора, вызвавшей арифметическую ошибку.
    Активные  режимы:  действительный,	защищенный,  виртуального
8086. В действительном режиме используется вектор 16 таблицы век-
торов прерывания действительного режима. В защищенном режиме  или
режиме виртуального 8086 используется переключатель 16 в IDT.
Код ошибки записываемый в стек в защищенном режиме: нет.
    Перезапускаемость:	все  происходящее в этой ситуации переза-
пускаемо с точки зранения 80386, но состояние сопроцессора  изме-
няется командой сопроцессора,  вызывающей ошибку, и следовательно
повторно не запускаемо. Хорошей стратегией для обработчика  явля-
ется  выдача сообщения об ошибке и по возможности завершение оши-
бочной программы.
Отличие от 8086/8088: такой ситуации не существует  в  8086/8088,
который  полагается  на  сигнал  аппаратного прерывания при любой
арифметической ошибке. Архитектура РС, например, использует  вход
NMI  для сигнализации об арифметической ошибке сопроцессора. Этот
подход может при желании поддерживаться системой 80386, но сигнал
должен держаться не активным, пока арифметический сопроцессор за-
нят.

     Одновременные прерывания и исключительные ситуации
     ──────────────────────────────────────────────────
    Прерывания распознаются только на границах	команд.  Исключи-
тельные  ситуации  также возникают только на границах команд,либо
как ошибка немедленно перед неверной командой, либо  как  ловушка
немедленно после неверной команды. Возможно, что несколько преры-
ваний  и исключительных ситуаций могут быть активизированы на од-
ной и той же границе  команд.  Например,  аппаратное  прерывание,
исключительная	ситуация,  возникающая	как ловушка из предыдущей
команды и исключительная ситуация, возникающая как  ошибка  перед
следующей командой могут быть активизированы одновременно.
    Одновременная  активизация	прерываний и исключительных ситу-
аций ставит проблему арбитража, обрабатываемую логикой	на  чипе.
Логика арбитража обеспечивает, что определенные события направля-
ются перед другими, производя установку приоритетов для обработки
возможных событий.
    Однако  большинство  подробных  описаний  приводят намеченную
последовательность проверок, выполняемых 80386 на каждой  границе
команд.  Это  действие	может быть понято как последовательность,
которая подразделяет границу команд на серию шагов. На каждом ша-
ге различные типы активных прерываний и  исключительных  ситуаций
распознаются.  Эта  последовательность	приоритетов, определенная
аппаратурой на кристалле, обрабатывает все возможные случаи  неп-
рерывных событий в порядке, показанном в таблице 16.3.

			    - 185 -
						     Таблица 16.3
Подробная последовательность контроля прерываний и исключительных
	    ситуаций в 80386 на каждой границе команд

 Шаг │			  Ф у н к ц и я
─────┼──────────────────────────────────────────────────────────
 1.  │Проверка на исключительную ситуацию 1 - ловушку (из поша-
     │гового режима через флаг ловушки или точку прерывания по
     │адресу данных в отладочных регистрах), выработанную преды-
     │дущей командой. Если она активна, то ситуация 1 квалифици-
     │руется как ловушка
 2.  │Проверка внешнего NMI. Если активен, то имеет место преры-
     │вание 2
 3.  │Проверка внешнего INTR. Если активен, то считывается век-
     │тор прерывания, и происходит прерывание n (0 < h <255)
 4.  │Проверка на ситуацию 1 - ошибку (из точки прерывания выпол-
     │нения команды в отладочных регистрах), возможно выработан-
     │ную следующей командой. Если активен, то возникает ситуа-
     │ция 1 как ошибка
 5.  │Проверка на ошибку сегментации, возможно выработанную при
     │выборке следующей команды. Если ошибка обнаружена, то воз-
     │никает исключительная ситуация (11 или 13) как ошибка
 6.  │Проверка на отказ страницы, возможно возникающий при выбор-
     │ке следующей команды. Если отказ обнаружен, возникает  ис-
     │ключительная ситуация 14 как ошибка
 7.  │Проверка на ошибки, возможно возникающие при дешифрации
     │следующей команды. Это будет ситуация 6, если незаконный
     │код операции или если имеет место команда защищенного ре-
     │жима, недоступная в действительном режиме; это будет ситу-
     │ация 13, если в команде более 15 байтов или если команда
     │требует больших привилегий в защищенном режиме (т.е. IOPL
     │или PL не 0, как требуется). Если ошибка обнаружена, воз-
     │никает исключительная ситуация как ошибка
 8.  │Если код следующей команды - WAIT, проверяется TS=1 и
     │MP=1 в CRO. Если так,то возникает исключительная ситуация
     │7 как ошибка
 9.  │Если код следующей команды - код команды для арифметиче-
     │ского сопроцессора, проверяется EM=1 или TS=1. Если так,
     │то возникает исключительная ситуация 7 как ошибка
10.  │Если код следующей команды - WAIT или код команды для
     │арифметического сопроцессора, опрашивается ERROR# вход из
     │арифметического сопроцессора. Если он активен, возникает
     │ситуация 16  как ловушка (с точки зрения команды сопро-
     │цессора, которая выработала арифметическую ошибку)
11.  │Проверяется порядок для каждого обращения к памяти, тре-
     │буемого командой:
     │	 а) проверка на ошибки сегментации, которые препятст-
     │вуют передаче целого операнда памяти. Если ошибка имеет
     │место, возникает ситуация 11, 12 или 13 как ошибка
     │	 б) проверка на отказ страницы, который препятствует
     │пересылке целого операнда памяти. Если отказ имеет мес-
     │то, возникает исключительная ситуация 14 как ошибка

			    - 186 -
Заметим,  что  такой  порядок  поддерживает положение о том, что
страничный механизм - под механизмом сегментации. Для  обращений
к памяти исключительные ситуации, связанные с ошибками сегмента-
ции,  если ситуаций несколько, будут вырабатываться перед любыми
исключительными ситуациями, связаными с отказом страницы.

			  ГЛАВА 17
		    ОСОБЕННОСТИ ОТЛАДКИ
		    ───────────────────
    Принципиальные  возможности отладки, поддерживаемые в 80386,
обеспечиваются с помощью выделенных для этой цели отладочных ре-
гистров. Эти программируемые  регистры	действительно  облегчают
использование внутрисистемных эмуляторов 80386, таких как ICE-368,
которые дают намек на большие отладочные возможности этих  новых
регистров.
    Отладочные	регистры  поддерживают	прерывания  для команд и
данных. В общем точка прерывания адресуется установкой	триггера
отладочной  исключительной  ситуации,  когда программа выполняет
код или выборку данных, сохраненных по адресу прерывания. Преры-
вание команды позволяет обнаружить выполнение команды по  любому
заданному  линейному  адресу. Прерывание команды позволяет уста-
новку точки прерывания даже ROM-основанном коде.  Прерывания  по
адресу	данных - важное новшество, т.к. они могут указать точки,
когда любой заданный операнд данных выбирается или записывается,
по какой бы то ни было неизвестной причине.
    Предыдущие процессоры семейства 8086 имели только  пошаговую
исключительную	ситуацию и прерывание по коду операции, оба этих
средства также доступны для 80386.

	       Встроенные отладочные возможности
	       ─────────────────────────────────
    В общем, всесторонние отладочные возможности, заложены в ап-
паратуру каждого 80386. Особенности отладки в  80386  предлагают
четыре типа отладочных возможностей:
    1.	Отладочные регистры 0-3, которые определяют четыре неза-
висимых адреса прерываний, которые могут быть индивидуально  ис-
пользованы для прерывания команд и прерывания по адресу данных.
    2. TF (флаг ловушки) бит в регистре EFLAG, который позволяет
программе выполняться в пошаговом режиме.
    3. Команда прерывания (код CC), однобайтная команда, которая
может быть вставлена в код (в памяти, допускающей запись) по лю-
бому  адресу),	чтобы выработать прерывание команды по заданному
адресу.
    4. T (ловушка) бит в 32-битном TSS, который позволяет немед-
ленно возникнуть ловушке при включении любой  32-битной  задачи,
отмеченной установкой бита T в TSS.

			    - 187 -
    Отладочные	средства действуют как ловушка, чтобы обнаружить
условия, интересующие программиста. Тогда возникает такое  усло-
вие,  соответствующее средство отладки инициируется, вырабатывая
исключительную ситуацию (ситуация 1), чтобы включить подпрограм-
му обработки прерываний. Все средства отладки вырабатывают ситу-
ацию 1 при инициализации, кроме элемента 3, указанного выше, ко-
манды прерывания, которая вызывает прерывание в точке  (прерыва-
ние 3).
    Все  средства, указанные выше, доступны в операциях защищен-
ного режима; только  средства  1,2  и  3  доступны  в  операциях
действительного режима. Свойство 4, конечно, недоступно в опера-
циях действительного режима.

		    Отладочные регистры
		    ───────────────────
    Отладочные регистры 80386 состоят из шести 32-битных регист-
ров, показанных на рис. 17.1. Они включают:
    - четыре регистра точек прерывания; каждый содержит линейный
адрес  точки прерывания, которая сможет использоваться как точка
прерывания команды или прерывания по адресу данных.
    - один управляющий отладочный регистр, используемый для  оп-
ределения  и дает возможность четырем точкам прерывания быть за-
данными в регистрах точек прерывания.
    - один отладочный регистр состояния, который, когда возника-
ет  отладочная	исключительная	ситуация,  указывает,  какое  из
средств отладки была инициализировано.
Используя  новые  команды  для этих целей, эти регистры доступны
для чтения и записи в действительном режиме и на нулевом  уровне
привилений защищенного режима.
		     ОТЛАДОЧНЫЕ РЕГИСТРЫ
		     ___________________
31		23		15		7		0
┼───────────────┼───────────────┼───────────────┼───────────────┼
│	 РЕГИСТР ЛИНЕЙНОГО АДРЕСА ТОЧКИ ОСТАНОВА -0-  │ │ │ │ │ │ DR0
├───────────────────────────────────────────────────────────────┤
│ │ │ │ │РЕГИСТР ЛИНЕЙНОГО АДРЕСА ТОЧКИ ОСТАНОВА -1-  │ │ │ │ │ │ DR1
├───────────────────────────────────────────────────────────────┤
│ │ │ │ │РЕГИСТР ЛИНЕЙНОГО АДРЕСА ТОЧКИ ОСТАНОВА -2-  │ │ │ │ │ │ DR2
├───────────────────────────────────────────────────────────────┤
│ │ │ │ │РЕГИСТР ЛИНЕЙНОГО АДРЕСА ТОЧКИ ОСТАНОВА -3-  │ │ │ │ │ │ DR3
└───────────────────────────────────────────────────────────────┘
31		23		15		7		0
┼───────────────┼───────────────┼───────────────┼───────────────┼
│ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │  В│В│В│ │ │ │ │   │ │ │ │В│В│В│В│
│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│T│S│D│0│0│0│0│0│0│0│0│0│3│2│1│0│ DR6
├─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┤
│LEN│R│W│LEN│R│W│LEN│R│W│LEN│R│W│ │ │ │ │ │ │G│L G│L│G│L│G│L│G│L│
│ 3 │3│3│ 2 │2│2│ 1 │1│1│ 0 │0│0│0│0│0│0│0│0│E│E│3│3│2│2│1│1│0│0│ DR7
└───────────────────────────────────────────────────────────────┘
 Рис.17.1 80386 регистры  отладки.
    DRO-DR3,  регистры	точек прерывания, каждый содержит следу-
ющую область.
    Линейный адрес точки прерывания - 32-битный  линейный  адрес
который идентифицирует зону точки прерывания.
    Регистры  DR4  и  DR5 не реализованы в 80386. Они могут быть
реализованы в будущих процессорах.

			    - 188 -
    DR7, управляющий отладочный регистр, содержит несколько  об-
ластей для будущего определения размера области прерывания, что-
бы определить тип доступа, который может инициализировать каждое
прерывание, и дает возможность произойти каждому прерыванию. Об-
ласти  DR6 повторяются четырежды, по одной для каждой из четырех
точек прерывания. Следующее  описание  применяется  для  четырех
идентичных областей в регистре DR6:
						    Таблица 17.1
		     Расшифровка области LEN
═════════════════╤════════╤═════════════════════════════════════╗
 Расшифровка LEN │ Размер │	    Зона прерывания		║
─────────────────┼────────┼─────────────────────────────────────╢
       00	 │ 1 байт │  По любому линейному адресу 	║
       01	 │ 2 байта│  Выравненная по границе слова	║
       10	 │ не определено, не используется		║
       11	 │ 4 байта│  Выравненная по границе двойного	║
		 │	  │  слова				║
═════════════════╧════════╧═════════════════════════════════════╝
    1. Область LEN (длина) указывает размер зоны прерывания, ко-
торая может составлять 1, 2 или 4 байта. Область LEN расшифровы-
ваться в таблице 17.1.
    Каждая область LEN управляет размером соответствующей облас-
ти  прерывания, управляя всеми младшими битами регистра прерыва-
ния, используемыми для обнаружения точки прерывания.  Двухбитные
точки прерывания используют бит 0 линейного адреса, в результате
имеем выравненную по границе слова зону прерывания.Четырехбитные
точки  прерывания  игнорируют биты 0 и 1 линейного адреса, в ре-
зультате имеем выравненную по границе двойного слова зону преры-
вания.
    2. RW (чтение запись) определяет тип доступа, который  может
инициализировать зону прерывания. Область RW определена в табли-
це 17.2.
    3.	G и L, глобальные возможности или локальные возможности,
два бита разрешения для каждого прерывания. Если по крайней мере
один из битов разрешения установлен в 1, соответствующее  преры-
вание  возможно. Нет совершенно никаких различий в функциях бит,
различные наименования только намекают на принятые  наименования
в мультизадачных системах, где один из бит разрешения может быть
установлен  глобальной	отладочной  программой,  а  другой - ло-
кальной отладочной подпрограммой.
    4. GE и LE, глобальная точность или локальная точность,  два
бита  точности,  затрачивающие прерывания по адресу данных. Если
по крайней мере один из обоих бит установлен в 1, о любом преры-
вании по адресу данных будет сообщено точно после завершения ко-
манды, которая послужила причиной пересылки (0 прерывании коман-
ды всегда сообщается точно, независимо от GE и LE бит). Если  не
выбрано  точное совпадение прерывания по адресу данных, о преры-
вании по адресу данных не может быть сообщено до времени  выпол-
нения  нескольких  последующих команд - или может даже вообще не
быть сообщения. Если вы хотите несомненно отловить все	прерыва-
ния по адресу данных, вы должны установить один из этих бит точ-
ности, пока идет отладка. Точность сообщения обеспечивается тем,
что  исполняющее устройство 80386 вынуждено ждать завершения лю-
бой передачи операнда данных перед началом выполнения  следующей
команды.  Это  будет  немного  замедлять  выполнение  программы
80386.

			    - 189 -
		       Расшифровка области RW	    Таблица 17.2

 RW расшифровка│  Тип доступа, который может инициализировать
	       │		прерывание
───────────────┼────────────────────────────────────────────────
      00       │       Только выполнение команды
      01       │       Только запись данных
      10       │       Неопределено, не используется
      11       │       Только чтение или только запись

    DR6,  отладочный регистр состояния, содержит несколько облас-
тей, обнаруживающих причину отладочной	исключительной	ситуации,
когда  она  возникает.	Каждая	область  - однобитный флаг, соот-
ветствующий одной из возможностей отладки, каждый из которых  мо-
жет  быть  автоматически установлен 80386 как вектор подпрограммы
исключительной ситуации 1. Эти биты никогда не сбрасываются авто-
матически, однако подпрограмма исключительной  ситуации  1  несет
ответственность за сброс этих флагов.
    1.	BO, B1, B2 и B3, точки прерываний 0, 1, 2 и 3, если уста-
новлены в 1, указывают, что связанное с этими точками  прерывание
было инициализировано.
    2.	BD, отладочные регистры 1, используемые ICE-386, если ус-
тановлены в 1, указывают, что попытка чтения или записи  получает
отказ,	 т.к.  ICE  386  внутрисхемный	эмулятор  использует  эти
средства. Таким образом, во время операций ICE-386  для  отладки,
программные отладчики не могут быть использованы одновременно.
    3.	BS, отладочная ситуация благодаря пошаговому режиму, если
установлен в 1, указывает, что исключительная ситуация 1 была вы-
работана, поскольку TF (флаг одношаговый работы) был установлен в
регистре EFLAG. Когда отладчик находится в пошаговом режиме через
целевую программу, ожидается, что BS установлен.
    4. BT, отладочная ситуация благодаря ловушке  переключения	-
задач, если установлен в 1, указывает, что была выработана исклю-
чительная ситуация 1, поскольку переключения задач активизировала
задачу, в которой бит T (ловушка) 32-битного TSS установлен в 1.
    Если команда, начинающаяся с адреса точки прерывания близка к
выполнению,  возникает условие прерывания и, если прерывание воз-
можно, немедленно возникает ситуации 1 как ошибка перед тем,  как
команда выполнится.
    Заметим,  что  только  предвыборка	команды не инициализирует
прерывание: команда может действительно быть близка к  выполнению
во время того, когда происходит прерывание.

      Прерывания по адресу данных с отладочными регистрами
      ────────────────────────────────────────────────────
    Прерывание	по  адресу  данных может быть установлено записью
линейного адреса точки прерывания в отладочный регистр. Для  пре-
рывания по адресу данных RW область должна быть 01 (только запись
данных) или 11 (запись или чтение данных). LEN область	может за-
давать	любую  определенную величину: (00, 10 или 11 (для 1-, 2-,
или 4 байтной зоны прерывания).
    Если выборка данных полностью или  частично  попадает  внутрь
зоны прерывания по адресу данных, возникает условие прерывания по
адресу	данных, и, если прерывание возможно, исключительная ситу-
ация 1 возникает как ловушка после того, как происходит выборка.

			    - 190 -
			Флаг перезапуска
			────────────────
    Тонкой чертой, которая усовершенствует действие  средств  от-
ладки 80386, является RF (флаг перезапуска) бит в EFLAG. RF бит в
EFLAG,	когда  он  установлен в 1, может запретить прерывание ко-
манд, когда обработчик исключительной ситуации 1  возвращается	к
той же самой команде, которая до сих пор является точкой прерыва-
ния команды.
    80386  автоматически  устанавливает  RF в изображении EFLAG в
стеке, когда EFLAG записывается в стек, когда 80386 входит в  лю-
бой  обработчик  ошибки.  Однако команда IRET в конце обработчика
ошибки, которая выталкивает изображение EFLAG из стека, будет ус-
танавливать RF в регистре EFLAG, выполнение будет  возобновлено с
адреса прерывания без выработки другого прерывания по ошибке.
    Если, после ошибки отладки, RF установлен в  1  и  обработчик
повторит  ошибочную команду, возможно, что повторение команды вы-
зовет другие ошибки. Т.к. любой обработчик  ошибки  устанавливает
RF  флаг, повторение команды после этих ошибок будет также выпол-
няться с RF=1, так что точка прерывания при отладке для этой  од-
ной  команды будет продолжать игнорироваться. Процессор автомати-
чески очищает RF только после успешного завершения команды.
    Заметим, что программист не нуждается в явной  установке  или
сброс  RF  для корректных операций. Процессор автоматически уста-
навливает RF в 1, чтобы запретить повторение  отладочной  искючи-
тельной  ситуации. Когда команда повторяется. Процессор автомати-
чески сбрасывает RF в 0 при успешном завершении команды, так  что
прерывание команд не будет запрещено для будущих команд.

			    - 191 -
	      СРЕДСТВА ОТЛАДКИ СОВМЕСТИМЫЕ С 8086
	       ───────────────────────────────────

		      Пошаговая прогонка.
		       ──────────────────
    Если бит TF  (флаг	пошаговой  прогонки)  установлен  в  1,
ловушка  исключительной  ситуации  1  будет  срабатывать   после
исполнения каждой следующей  инструкции.  На  практике,  обычно,
отладчик устанавливает бит TF  образа  регистра  EFLAG	в  стеке
отладчика, а  затем  передает  управление  целевой  программе  и
загружает образ регистра EFLAG с помощью единственной инструкции
IRET.  Пошаговая  ловушка  срабатывает	после  выполнения  одной
инструкции целевой программы.
    Когда  появляется  исключительная  ситуация  1  в  качестве
ловушки, CS:EIP  заносятся  в  стек  отладчика,  указывающий  на
следующую  неисполненную  инструкцию   отлаживаемой   программы.
Обработчик  исключительной  ситуации  1  может	 таким	 образом
эффективно осуществлять  пошаговую  прогонку  целевой  программы
заканчивающейся просто инструкцией IRET.
    Инструкция контрольной точки (Breakpoint instruction).
     ─────────────────────────────────────────────────────
    Однобайтовым кодом операции контрольной точки является  код
ССh. Код операции контрольной  точки  генерирует  исключительную
ситуацию ловушки 3.Инструкция контрольной точки  кодируется  как
однобайтовая инструкция, поэтому она может быть помещена в любую
позицию без перезаписи более, чем  одной  команды.  Однобайтовая
инструкция  контрольной   точки   является   заменителем   общей
инструкции программного прерывания INT n, где n равно 3.  Однако
инструкция контрольной точки (код операции ССh)  нечувствительна
к IOPL, в то время как INT n чувствительна к IOPL  в  защищенном
режиме и в режиме виртуального 8086.
    Обычно отладчик может  выработать  однобайтовую  инструкцию
контрольной  точки  на	 всех	требуемых   контрольных   точках
исполняемых инструкций. Инструкции контрольных	точек  не  могут
быть временно записаны в постоянную память, такую как ROM. Также
отметим, что инструкция контрольной точки не может  обеспечивать
возможность  прерываний  по  данным.  Такие  короткие	переходы
уничтожаются  при   использовании   отладочных	 регистров   для
выполнения точек прерывания инструкций как описано выше.

			  ПРИЛОЖЕНИЕ А

		ФЛАГОВЫЙ РЕГИСТР И КОДЫ УСЛОВИЙ.
		 ───────────────────────────────
     32 битный флаговый регистр состоит из 8 полей состояния и 5
полей управления. Неопределенные биты считываются как нули (  за
исключением бита 1, который считывается как 1 )  и  игнорируются
при записи в них информации. Младшие 16  бит  регистра	ЕFLАG  (
расширенного регистра FLАG ) могут также быть доступны как FLАG
регистр для 16 битных операций.
		 Таблица А.1. Флаговый регистр.
31 30	18 17 16 15 14	    11 10  9  8  7  6  5  4  3	2  1  0
├─┼─┼─..┼─┼──┼──┼──┼──┼────┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
│0│0│	 0│VM│RF│ 0│NT│IOPL│OF│DF│IF│TF│SF│ZF│ 0│AF│ 0│PF│ 1│CF│
└──────────────────────────────────────────────────────────────┘
     Флаговые поля регистра ЕFLАG, определенные ниже,  описывают
их поведение во время выполнения инструкций, которые  влияют  на
эти флаги. Существуют, конечно,  некоторые  инструкции,  которые
оставляют  флаги  полностью  без  изменений.  В   приложении   В
инструкции рассмотрены в деталях.

			    - 192 -
     СF - флаг переноса, бит 0.
     СF  устанавливается  в  1,  если  в   результате	операции
производится перенос старшего бита (сложение) или заем в старший
бит (вычитание). В противном случае СF = 0. Для 8, 16, 32 битных
операций он устанавливается для переноса или заема для битов  7,
15, 31 соответственно.
     РF - флаг паритета, бит 2.
     РF = 1, если 8 младших  бит  результата  операции	содержат
четное число единиц ( четный паритет ). РF = 0, если  8  младших
бит имеют нечетное количество единиц ( нечетный  паритет  ).  РF
является функцией только младших 8  бит  независимо  от  размера
операнда.
     АF - вспомогательный флаг переноса, бит 4.
     Вспомогательный флаг  переноса  применяется  для  упрощения
сложения и вычитания двоично- десятичных чисел. АF = 0,  если  в
результате операции происходит перенос	бита  3  (сложение)  или
заем в	бит  3	(вычитание).  Иначе  АF  =  0.	АF  работает  на
перенос/заем  битов  только  для  бита	3  независимо  от  длины
операнда.
     ZF - флаг нуля, бит 6.
     ZF = 1, если все биты результата - нули.
     SF - флаг знака, бит 7.
     SF = 1, если старший бит результата равен 1. Иначе - 0. Для
8, 16, 32 битных операций SF отражает состояние битов 7, 15,  31
соответственно.
     ТF - флаг ловушки, бит 8.
     ТF разрешает пошаговую прогонку. Когда ТF устанавливается в
1 процессор 80386 генерирует исключительную ситуацию  ловушки  1
после  исполнения  следующей   инструкции.   Когда   ТF   =   0,
исключительная ситуация 1 генерируется только другими средствами
отладки, обеспечиваемыми отладочными регистрами.
     IF - флаг разрешения прерываний, бит 9.
     Когда бит IF установлен в	1,  он	разрешает  распознавание
внешних  прерываний,  вызываемых   сигналом   на   выводе   INТR
микросхемы. Когда IF сброшен в 0, внешние сигналы, подаваемые на
вывод  INТR,  не  распознаются.  IОРL  показывает   максимальное
значение СРL при котором IF бит может быть изменен, когда  новые
значения  передаются  из  стека  в  ЕFLАG  (или  FLАG)	регистр.
Переключатели задач могут  всегда  изменять  IF  бит  как  новое
состояние ЕFLАG, загруженное из сегмента состоямия задачи (ТSS).
     DF - флаг направления, бит 10.
     DF  определяет  как  ЕSI  и/или  ЕDI   индексные	регистры
декрементируются  или  инкрементируются  после	каждой	итерации
стринговых инструкций. Они инкрементируются, если DF = 0 (стринг
обрабатывается слева направо). Постдекремент  производится  если
DF = 1 (стринг обрабатывается справа налево).
     ОF - флаг переполнения, бит 11.
     ОF = 1, если в результате операции происходит  переполнение
числа  со  знаком.  Знаковое  переполнение  возникает  когда   в
результате  операции  происходит  перенос/заем	в  знаковый  бит
результата,  но  не  является  результатом   переноса/заема   из
знакового бита или наоборот. Для 8, 16 и 32 битных  операций  ОF
устанавливается в соответствии со знаковым битом в разря дах  7,
15 и 31.

			    - 193 -
     IОРL - уровень привлегии ввода - вывода, биты 12 - 13.
     Это  двухбитное  флаговое	поле  применяется  в  защищенном
режиме. IОРL численно показывет максимальное  значение	СРL  при
котором ввод/вывод может  производиться  безусловно.  При  любом
большем  значении  СРL	карта  битов   разрешения   ввода/вывода
автоматически принимается во  внимание	процессором.  Этот  флаг
также показывает максимальное значение СРL разрешая изменение IF
(разрешения прерываний)  флагового  бита  когда  новые	значения
извлекаются из стека в	ЕFLАG.	Инструкции  РОРF  и  IRЕТ  могут
изменить IОРL флаг только когда СРL равен 0. Переключатели задач
всегда изменяют IОРL поле, т.к. новый образ ЕFLАG загружается из
сегмента состояния задачи (ТSS).
     NТ - вложенная задача, бит 14.
     Этот  флаг  используется  в  защищенном  режиме.  Этот  бит
устанавливается  автоматически	процессором   80386   во   время
переключения  задач.  NТ  устанавливается   процессором,   чтобы
показать, что выполнение текущей задачи вложено  в  родительскую
задачу. Если NТ  =  1,	он  показывает,  что  сегмент  состояния
текущей задачи	содержит  значащий  селектор  обратной	связи  с
родительской задачей. Значение NТ тестируется  инструкцией  IRЕТ
для того, чтобы определить как она должна выполнять  межзадачный
возврат в задачу, указанную обратной связью (NТ  =  1)	или  она
должна выполнить нормальный возврат (NТ =  0).	Инструкции  РОРF
или  IRЕТ  могут  влиять  на  установку  NТ  в	соответствии   с
извлекаемым из стека образом регистра ЕFLАG при любом СРL.
     RF - флаг резюме, бит 16.
     RF использован в сочетании с  точками  прерываний	регистра
отладки.  Он  проверяет  границы  инструкций  перед   обработкой
обработкой контрольной точки (Вreаkроint).
     Когда  RF	=  1,  он  вызывает  какое  -  либо   отладочное
прерывание  (контрольная  точка  выполнения  инструкции),  чтобы
игнорировать  следующую  инструкцию.  Затем   RF   автоматически
сбрасывается   при   успешном	завершении   каждой   инструкции
(благополучность     завершения     индицируется     отсутствием
исключительных	ситуаций),  за	исключением   инструкции   IRЕТ,
инструкции РОРF  и  инструкций,  вызывающих  переключение  задач
(JМР,  САLL,  INТ  3,  INТ  n,	INТО,  ВОUNDS,	или  IRЕТ).  Эти
инструкции устанавливают RF в соответствии с загрузкой	регистра
ЕFLАG. Например в конце программы обслуживания контрольных точек
(исключительная ситуация 1), инструкция IRЕТ  может  извлечь  из
стека образ регистра ЕFLАG, имея бит  RF  =  1	и  в  результате
выполнения   программы	 по   адресу   контрольной   точки   без
генерирования прерывания другой  контрольной  точки  на  той  же
самой инструкции.
     VМ - Режим виртуального 8086, бит 17.
     Бит VМ обеспечивает режим виртуального  8086  в  защищенном
режиме. Если этот  бит	установливается  при  работе  процессора
80386 в защищенном режиме,  то	процессор  начинает  работать  в
режиме	виртуального  8086,  поддерживая   загрузки   сегментных
регистров как в реальном  режиме,  но  генерируя  исключительную
ситуацию 13 на привилегированных кодах операций.  Бит  VМ  может
быть установлен только в защищенном режиме инструкцией IRЕТ если
СРL = 0, или переключателем задач на  любом  уровне  привилегий.
Флаг VМ неизменяется инструкцией РОРF. РUSНF  всегда  заносит  в
стек 0 в этом бите, даже если выполняется в режиме  виртуального
8086. Образ регистра ЕFLАG, записанный в стек во время обработки
прерывания  или сохрененный во время переключения задач,  будет,
однако, содержать 1 в этом флаге, если код прерывания исполнялся
как виртуальная задача 8086.

			    - 194 -
			 Приложение В.
			  ────────────
		  Набор инструкций в деталях.
		   ──────────────────────────
     Это  приложение  анализирует  по  порядку	все   инструкции
доступные для исполнения процессором 80386, раз`ясняя в  деталях
их назначение, то, каким образом они действуют на флаги,  и  как
они могут быть использованы применительно  к  различным  режимам
адресации. Режимы адресации обсуждены детально в главах 4 и 7.
     Таблица В.1 резюмирует категории инструкций, и обеспечивают
быстрый обзор инструкций, доступных  во  всех  рабочих	режимах.
Вообще	 говоря,   большинство	 инструкций   всегда	доступны
программисту,  но  специальные	инструкции,  которые   управляют
системными  регистрами	ограничены  уровнем   привилегий   0   в
защищенном режиме. В защищенном режиме	инструкции  ввода/вывода
ограничены уровнем, указывемым IОРL в противоположность  битовой
карте разрешений, разрешающей ввод/вывод по  данному  адресу  на
всех уровнях привилегий. В режиме  виртуального  8086  инстукции
ввода/вывода ограничены битовой картой разрешения ввода/вывода.
     Таблица В показывает также  влияние  каждой  инструкции  на
предвыборку  кода  80386.   Большинство   инструкций   позволяют
предвыборному устройству продолжать  беспрепятственно,	пока  не
будет  достигнут  конец  сегмента  или	 не   будет   достигнута
несуществующая	или  неиспользуемая  страница	памяти.   Однако
инструкции	  безусловнной	      передачи	      управления
(САLL,INТ,JМР,RЕТ,IRЕТ)  и  инструкция	НLТ  вызывают  остановку
предвыборщика до тех  пор,  пока  последующие  адреса  не  будут
непосредственно выполнены и продолжится предвыборка тех адресов,
которые не будут, следовательно, использовать всю  ширину  шины.
Условный  переход  не  останавливает  предвыборщик.   Инструкции
подобные LООРсс останавливают  устройство  предвыборкии  поэтому
предпочтительны  для   получения   максимальной   скорости   при
выполнении итерационных циклов, где  тестовое  условие	наиболее
часто будет истинно (т.е. передача управления будет  происходить
наиболее часто.

			    - 195 -
	Таблица В.1. Подробный список инструкций 80386.
╔═════════╤══════════════════════════╤════╤═══════════════════════════╗
║	  │			     │	  │	Наличие в 80386       ║
║Мнемоника│   Описание инструкции    │Ключ│реал│защ.│вирт│предвы│стра-║
║	  │			     │	  │реж.│реж.│8086│борка.│ницы ║
╟─────────┼──────────────────────────┼────┼────┼────┼────┼──────┼─────╢
║  1.AAA  │ASII-коррекция сложения   │	86│да  │да  │да  │продол│ 201 ║
║  2.AAD  │ASII-коррекция деления    │	86│да  │да  │да  │продол│ 202 ║
║  3.AAM  │ASII-коррекция умножения  │	86│да  │да  │да  │продол│ 203 ║
║  4.AAS  │ASII-коррекция вычитания  │	86│да  │да  │да  │продол│ 203 ║
║  5.ADC  │Сложение с переносом      │	86│да  │да  │да  │продол│ 205 ║
║  6.ADD  │Сложение		     │	86│да  │да  │да  │продол│ 206 ║
║  7.AND  │Логическое "и"            │  86│да  │да  │да  │продол│ 208 ║
║  8.ARPL │Настройка RPL поля селек- │PROT│нет;│да  │нет;│продол│ 209 ║
║	  │тора(уровень привилегий)  │	  │    │    │	 │	│     ║
║  9.BOUND│Проверка границ массива   │ 186│да  │да  │да  │продол│ 210 ║
║ 10.BSF  │Сканирование битов вперед │ 386│да  │да  │да  │продол│ 211 ║
║ 11.BSR  │Сканирование битов назад  │ 386│да  │да  │да  │продол│ 212 ║
║ 12.BT   │Проверка бита	     │ 386│да  │да  │да  │продол│ 213 ║
║ 13.BTC  │Проверка бита с инверсией │ 386│да  │да  │да  │продол│ 215 ║
║ 14.BTR  │Проверка бита со сбросом  │ 386│да  │да  │да  │продол│ 217 ║
║ 15.BTS  │Проверка бита с установкой│ 386│да  │да  │да  │продол│ 218 ║
║ 16.CALL │Вызов подпрограммы/задачи │	86│да  │да  │да  │ стоп │ 220 ║
║ 17.CBW  │Преобразование байта в сло│	86│да  │да  │да  │продол│ 225 ║
║   /CWDE │во/слова в двойное слово  │	  │    │    │	 │	│     ║
║ 18.CLC  │Сброс флага переноса      │	86│да  │да  │да  │продол│ 226 ║
║ 19.CLD  │Сброс флага направления   │	86│да  │да  │да  │продол│ 226 ║
║ 20.CLI  │Сброс флага прерывания    │	86│да  │IOPL│IOPL│продол│ 227 ║
║	  │			     │	  │    │    │ =3 │	│     ║
║ 21.CLTS │Сброс флага переключателя │PROT│да; │да  │да; │продол│ 229 ║
║	  │  задач		     │	  │    │    │	 │	│     ║
║ 22.CMC  │Инверсия флага переноса   │	86│да  │да  │да  │продол│ 230 ║
║ 23.CMP  │Сравнение операнда	     │	86│да  │да  │да  │продол│ 230 ║
║ 24.CMPSВ│Сравнение строки байт     │	86│да  │да  │да  │продол│ 231 ║
║ 25.CMPSW│Сравнение строки слов     │	86│да  │да  │да  │продол│ 231 ║
║   /CMPSD│/строки двойных слов      │	  │    │    │	 │	│     ║
║ 26.CWD  │Преобразование слова в    │	86│да  │да  │да  │продол│ 233 ║
║   /CDQ  │Двойное слово/двойного    │	  │    │    │	 │	│     ║
║ 27.DAA  │Десятичная коррекция после│	86│да  │да  │да  │продол│ 233 ║
║	  │   сложения		     │	  │    │    │	 │	│     ║
║ 28.DAS  │Десятичная коррекция после│	86│да  │да  │да  │продол│ 235 ║
║	  │	 вычитания	     │	  │    │    │	 │жается│     ║
║ 29.DEC  │Уменьшение на 1	     │	86│да  │да  │да  │продол│ 236 ║
║ 30.DIV  │Деление беззнаковое	     │	86│да  │да  │да  │продол│ 237 ║
║ 31.ENTER│Установка набора парамет- │ 186│да  │да  │да  │продол│ 238 ║
║	  │ров для входа в процедуру │	  │    │    │	 │	│     ║
║ 32.HLT  │Останов		     │	86│да  │Le- │нет/│ стоп │ 239 ║
║	  │			     │	  │    │vel0│	 │	│     ║
║ 33.INDIV│Деление знаковое	     │	86│да  │да  │да  │продол│ 240 ║
║ 34.IMUL │Умножение знаковое	     │	86│да  │да  │да  │продол│ 242 ║
║ 35.IN   │Ввод операнда из внешних  │	86│да  │IOPL│BIT │продол│ 243 ║
║	  │	устройств	     │	  │    │/BIT│	 │	│     ║
║ 36.INC  │Увеличение на 1	     │	86│да  │да  │да  │продол│ 244 ║
║ 37.INSB │Ввод байта из внешних     │ 186│да  │IOPL│BIT │продол│ 245 ║
║	  │    устройств	     │	  │    │/BIT│	 │	│     ║
║ 38.INSW │Ввод слова из внешних уст-│ 186│да  │IOPL│BIT │продол│ 245 ║
║	  │ройств/двойного слова из  │	  │    │/BIT│	 │	│     ║
║   /INSD │внешних устройств	     │	  │    │    │	 │	│     ║
║ 39.INT 3│Прерывание 3 	     │	86│да  │да  │да  │ стоп │ 247 ║
║ 40.INTO │Прерывание 4,если перепол-│	86│да  │да  │да  │ стоп │ 248 ║
║	  │нение		     │	  │    │    │	 │	│     ║
║ 41.INT n│Прерывание n 	     │	86│да  │да  │IOPL│ стоп │ 249 ║
║	  │			     │	  │    │    │ =3 │	│     ║

			    - 196 -
║ 42.IRET │Возврат из прерывания     │	86│да  │да  │IOPL│ стоп │ 253 ║
║   /IRETD│Возврат из задачи	     │	  │    │    │ =3 │	│     ║
║ 43.JCC  │			     │	86│да  │да  │да  │продол│ 259 ║
║ 44.JCXZ │Переход если регистр СХ=0 │	86│да  │да  │да  │продол│ 260 ║
║   /JECXZ│Переход,если регистр ЕСХ=0│	  │    │    │	 │	│     ║
║ 45.JMP  │Безусловный переход	     │	86│да  │да  │да  │ стоп │ 261 ║
║ 46.LANF │Загрузка регистра АН из   │PROT│нет;│Le- │нет;│продол│ 265 ║
║	  │регистра EFLAG	     │	  │    │vel0│	 │	│     ║
║ 47.LAR  │			     │	86│да  │да  │да  │продол│ 266 ║
║ 48.LEA  │Загрузка адреса в регистр │	86│да  │да  │да  │продол│ 268 ║
║ 49.LEAVE│Выход из процедуры	     │ 186│да  │да  │да  │продол│ 269 ║
║ 50.LGDT │Загрузка таблицы глобаль- │PROT│да; │Le- │нет/│продол│ 269 ║
║	  │ных дескрипторов	     │	  │    │vel0│	 │	│     ║
║ 51.LIDT │Загрузка таблицы дескрип- │PROT│да; │Le- │нет/│продол│ 271 ║
║	  │торов прерываний	     │	  │    │vel0│	 │	│     ║
║ 52.LDS  │Загрузка указателя в      │	86│да  │да  │да  │продол│ 272 ║
║	  │регистр D		     │	  │    │    │	 │	│     ║
║ 53.LES  │Загрузка указателя в      │	86│да  │да  │да  │продол│ 272 ║
║ 54.LFS  │Загрузка указателя в      │ 386│да  │да  │да  │продол│ 272 ║
║	  │регистр сегмента F	     │	  │    │    │	 │	│     ║
║ 55.LGS  │Загрузка указателя в      │ 386│да  │да  │да  │продол│ 272 ║
║	  │регистр сегмента G	     │	  │    │    │	 │жается│     ║
║ 56.LSS  │Загрузка указателя в      │ 386│да  │да  │да  │продол│ 272 ║
║	  │регистр сегмента S (стек) │	  │    │    │	 │	│     ║
║ 57.LLDT │Загрузка регистра таблицей│PROT│нет;│Le- │нет;│продол│ 274 ║
║	  │ локальных дескрипторов   │	  │    │vel0│	 │	│     ║
║ 58.LMSW │Загрузка регистра слово   │PROT│да; │Le- │да; │продол│ 275 ║
║	  │состоянием машины (СR0)   │	  │    │vel0│	 │	│     ║
║ 59.LODSB│Загрузка байта	     │	86│да  │да  │да  │продол│ 276 ║
║ 60.LODSW│Загрузка слова	     │	86│да  │да  │да  │продол│ 276 ║
║   /LODSD│Загрузка двойного слова   │	  │    │    │	 │	│     ║
║ 61.LOOP │Выполнить цикл и уменьшить│	86│да  │да  │да  │продол│ 277 ║
║	  │регистр ЕСХ		     │	  │    │    │	 │	│     ║
║ 62.LOOPE│Цикл если равно	     │	86│да  │да  │да  │продол│ 278 ║
║   /LOPZ │Цикл,если равно 0	     │	  │    │    │	 │	│     ║
║ 63.LSL  │Загрузка ограничителя     │PROT│нет;│да  │нет;│продол│ 280 ║
║	  │сегмента в регистр	     │	  │    │    │	 │	│     ║
║ 64.LTR  │Загрузка регистра задачи  │PROT│нет;│Le- │нет;│продол│ 282 ║
║	  │			     │	  │    │vel0│	 │	│     ║
║ 65.MOV  │Переслать в/из регистра   │	86│да  │да  │да  │продол│ 283 ║
║	  │общего назначения	     │	  │    │    │	 │	│     ║
║	  │Переслать в/из регистра   │	86│да  │да  │да  │продол│ 285 ║
║	  │сегмента		     │	  │    │    │	 │	│     ║
║	  │Переслать в/из системного │ 386│да  │Le- │нет/│продол│ 286 ║
║	  │регистра		     │	  │    │vel0│	 │	│     ║
║ 66.MOVSB│Пересылка байта	     │	86│да  │да  │да  │продол│ 288 ║
║ 67.MOVSW│Пересылка слова	     │	86│да  │да  │да  │продол│ 288 ║
║ * /MOVSD│Пересылка двойного слова  │	  │    │    │	 │	│     ║
║ 68.MOVSX│Пересылка данных со знако-│	86│да  │да  │да  │продол│ 289 ║
║	  │вым расширением	     │	  │    │    │	 │	│     ║
║ 69.MOVZX│Пересылка данных с нулевым│	86│да  │да  │да  │продол│ 290 ║
║	  │расширением		     │	  │    │    │	 │	│     ║
║ 70.MUL  │Умножение без учета знака │	86│да  │да  │да  │продол│ 291 ║
║ 71.NEG  │Инвертирование	     │	86│да  │да  │да  │продол│ 292 ║
║ 72 NOP  │Нет операции 	     │	86│да  │да  │да  │продол│ 293 ║
║ 73.NOT  │Логическое дополнение     │	86│да  │да  │да  │продол│ 293 ║
║ 74.OR   │Логическое "или"          │  86│да  │да  │да  │продол│ 294 ║
║ 75.OUT  │Вывод		     │	86│да  │IOPL│BIT │продол│ 296 ║
║	  │			     │	  │    │/BIT│	 │	│     ║
║ 76.OUTSB│Вывод байта данных	     │ 186│да  │IOPL│BIT │продол│ 297 ║
║	  │			     │	  │    │/BIT│	 │	│     ║
║ 77.OUTSW│Вывод слова данных	     │ 186│да  │IOPL│BIT │продол│ 297 ║
║   /OUTSD│Вывод двойного слова      │	  │    │/BIT│	 │	│     ║

			    - 197 -
║ 78.POP  │Выталкивание данных из    │	86│да  │да  │да  │продол│ 299 ║
║	  │стека в регистр	     │	  │    │    │	 │	│     ║
║ 79.POPA │Выталкивание данных из    │ 186│да  │да  │да  │продол│ 300 ║
║   /POPAD│стека во все 16/32 битные │	  │    │    │	 │	│     ║
║	  │регистры общего назначения│	  │    │    │	 │	│     ║
║ 80.POPF │Выталкивание данных из    │	86│да  │да  │IOPL│продол│ 302 ║
║   /POPFD│стека в FLAG/EFLAG	     │	  │    │    │ =3 │жается│     ║
║ 81.PUSH │Поместить в стек	     │	86│да  │да  │да  │продол│ 304 ║
║ 82.PUSHA│Поместить в стек все 16/32│ 186│да  │да  │да  │продол│ 305 ║
║  /PUSHAD│битные регистры	     │	  │    │    │	 │	│     ║
║ 83.PUSHF│Поместить регистр FLAG/   │	86│да  │да  │IOPL│продол│ 307 ║
║  /PUSHFD│EFLAG в стек 	     │	  │    │    │ =3 │	│     ║
║ 84.RCL  │Сдвиг влево		     │	86│да  │да  │да  │продол│ 308 ║
║   /RCR  │Сдвиг вправо 	     │	  │    │    │	 │	│     ║
║ 85.RET  │Возврат из программы      │	86│да  │да  │да  │ стоп │ 310 ║
║ 86.ROL  │Циклический сдвиг влево   │	86│да  │да  │да  │продол│ 315 ║
║   /ROR  │Циклический сдвиг вправо  │	  │    │    │	 │	│     ║
║ 87.SAHF │Переслать регистр АН в    │	86│да  │да  │да  │продол│ 316 ║
║	  │регистр EFLAG	     │	  │    │    │	 │	│     ║
║ 88.SAL  │Арифметический сдвиг влево│	86│да  │да  │да  │продол│ 317 ║
║   /SAR  │/вправо		     │	  │    │    │	 │	│     ║
║ 89.SBB  │Вычитание с заемом	     │	86│да  │да  │да  │продол│ 319 ║
║ 90.SCASB│Сканирование строки байт  │	86│да  │да  │да  │продол│ 320 ║
║ 91.SCASW│Сканирование строки слова │	86│да  │да  │да  │продол│ 320 ║
║   /SCASD│/двойного слова	     │	  │    │    │	 │	│     ║
║ 92.SETСС│Установка байта равного   │ 386│да  │да  │да  │продол│ 321 ║
║	  │коду условия 	     │	  │    │    │	 │	│     ║
║ 93.SGDT │Записать в память регистр │PROT│да; │да  │да; │продол│ 323 ║
║	  │глобального дескриптора   │	  │    │    │	 │	│     ║
║ 94.SHL  │Логический сдвиг влево    │	86│да  │да  │да  │продол│ 324 ║
║   /SHR  │/вправо		     │	  │    │    │	 │	│     ║
║ 95.SHLD │Сдвиг двойной точности    │ 386│да  │да  │да  │продол│ 326 ║
║   /SHRD │влево/вправо 	     │	  │    │    │	 │	│     ║
║ 96.SIDT │Записать в память дескрип-│PROT│да; │да  │да; │продол│ 328 ║
║	  │тор таблицы прерываний    │	  │    │    │	 │	│     ║
║ 97.SLDT │Записать регистр локальной│PROT│нет;│да  │нет;│продол│ 329 ║
║	  │таблицы дескрипторов      │	  │    │    │	 │	│     ║
║ 98.SMSW │Записать в регистр слово  │PROT│да; │да  │да; │продол│ 330 ║
║	  │состояние машины	     │	  │    │    │	 │	│     ║
║ 99.STC  │Установить флаг переноса  │	86│да  │да  │да  │продол│ 330 ║
║100.STD  │Установить флаг	     │	86│да  │да  │да  │продол│ 331 ║
║	  │направления		     │	  │    │    │	 │	│     ║
║101.STI  │Установить флаг разрешения│	86│да  │IOPL│IOPL│продол│ 332 ║
║	  │прерываний		     │	  │    │    │ =3 │	│     ║
║102.STOSB│Записать в память строко- │	86│да  │да  │да  │продол│ 333 ║
║	  │вую информацию (байт)     │	  │    │    │	 │	│     ║
║103.STOSW│Записать в память строко- │	86│да  │да  │да  │продол│ 333 ║
║   /STOSD│вую информацию слово/     │	  │    │    │	 │	│     ║
║	  │двойное слово	     │	  │    │    │	 │	│     ║
║104.STR  │Записать регистр задачи   │PROT│нет;│да  │нет;│продол│ 334 ║
║105.SUB  │Вычитание		     │	86│да  │да  │да  │продол│ 336 ║
║106.TEST │Проверить операнд	     │	86│да  │да  │да  │продол│ 335 ║
║107.VERR │Проверка сегмента для**   │PROT│нет;│да  │нет;│продол│ 337 ║
║	  │чтения		     │	  │    │    │	 │	│     ║
║108.VERW │Проверка сегмента для     │PROT│нет;│да  │нет;│продол│ 337 ║
║	  │  записи		     │	  │    │    │	 │	│     ║
║109.WAIT │Ожидание неактивного сос- │	86│да  │да  │да  │продол│ 339 ║
║	  │тояния вывода BUSY	     │	  │    │    │	 │	│     ║
║110.XCHG │Обмен содержимым регистра/│	86│да  │да  │да  │продол│ 340 ║
║	  │памяти с регистром	     │	  │    │    │	 │	│     ║
║111.XLATВ│Просмотр таблицы переко-  │	86│да  │да  │да  │продол│ 341 ║
║	  │дирования		     │	  │    │    │	 │	│     ║
║112.XOR  │Логическое исключающее    │	86│да  │да  │да  │продол│ 342 ║
║	  │	 "или"               │    │    │    │    │      │     ║
╚═════════╧══════════════════════════╧════╧════╧════╧════╧══════╧═════╝

			    - 198 -
		     Статус ( Stаtus Кey ).
		      ─────────────────────
     86  Инструкция процессоров 8086/8088.  Она  присутствует  в
	 наборах инстукций всех процессоров серии  86:	8086/88,
	 80186/80188, 80286 и 80386.
    186  Инструкция впервые введена в процессоре  80186/80188  и
	 присутствует также в 80286 и 80386.
   РRОТ  Инструкция  была  введена  для  поддержки   защищенного
	 режима процессоров 80286 и 80386.
    386  Инструкция процессора 80386.
		Доступность ( Аvаilаbility Кey ).
		 ────────────────────────────────
     да  Инструкция или функция всегда доступна в  этом  режиме.
    да;  Эта инструкция доступна в реальном режиме для установки
	 в защищенный режим. Бывает, что она также доступна и  в
	 режиме  виртуального	8086,	хотя   она   обычно   не
	 встречается в коде процессора 8086.
  нет;	 В   реальном	режиме	 инструкция   недоступна.   Если
	 предпринимается   попытка    ее    использования,    то
	 генерируется исключительная ситуация  6.  То  же  самое
	 справедливо для режима виртуального 8086.

			    - 199 -
    Таблица В.2. Подробный список префиксов инструкций 80386.

║	  │			     │	  │	Наличие в 80386
║	  │			     │	  ├────┬────┬────┬──────┬─────
║Мнемоника│   Описание инструкции    │Ключ│реал│защ.│вирт│предвы│стра-
║	  │			     │	  │реж.│реж.│8086│борка.│ницы
╠═════════╪══════════════════════════╪════╪════╪════╪════╪══════╪═════
║a  USE16 │Префикс размера адреса    │ 386│ да │ да │ да │ ──── │
║  /USE32 │			     │	  │    │    │	 │	│
║b  USE16 │Префикс размера операнда  │ 386│ да │ да │ да │ ──── │
║  /USE32 │			     │	  │    │    │	 │	│
║c  CS:   │Префикс сегмента программ │	86│ да │ да │ да │ ──── │
║d  DS:   │Префикс сегмента данных   │	86│ да │ да │ да │ ──── │
║e  ES:   │Префикс сегмента данных   │	86│ да │ да │ да │ ──── │
║f  FS:   │Префикс сегмента данных   │ 386│ да │ да │ да │ ──── │
║g  GS:   │Префикс сегмента данных   │ 386│ да │ да │ да │ ──── │
║h  SS:   │Префикс сегмента стека    │ 386│ да │ да │ да │ ──── │
║i  REP   │Повторение (инструкций    │	86│ да │ да │ да │ ──── │
║	  │INS,OUTS и STOS)	     │	  │    │    │	 │	│
║j  REPE  │Повторение при равно,для  │	86│ да │ да │ да │ ──── │
║	  │инструкций CMPS и SCAS    │	  │    │    │	 │	│
║k  REPNE │Повторение при не равно,  │	86│ да │ да │ да │ ──── │
║	  │для инструкций CMPS и SCAS│	  │    │    │	 │	│
║l  LOCK  │Префикс блокировки шины   │	86│ да │ да │ да │ ──── │

IОРL/ВIТ В защищенном  режиме  инструкция  доступна  на  уровнях
	 привилегий выше или равных IОРL (т.е. СРL  IОРL),  если
	 битовая  карта  разрешений  ввода/вывода  не  разрешает
	 ввод/вывод в  адреса,	требуемые  этой  инструкцией.  В
	 противном   случае   при   попытке   ее   использования
	 генерируется исключительная ситуация 13.
   IОРL  В защищенном  режиме  инструкция  доступна  на  уровнях
	 привилегий выше или равных  IОРL  (т.е.  СРL  IОРL).  В
	 противном   случае   при   попытке   ее   использования
	 генерируется исключительная ситуация 13.
Level_0  В защищенном режиме такая инструкция доступна только на
	 уровне  привилегий  0	(т.е.	СРL   =   0),	наиболее
	 привилегированном. В противном случае	при  попытке  ее
	 использования генерируется исключительная ситуация 13.
    ВIТ  В режиме виртуального 8086 такая  инструкция  доступна,
	 если битовая карта  разрешений  ввода/вывода  разрешает
	 операции с адресом,  используемым  данной  командой.  В
	 противном   случае   при   попытке   ее   использования
	 генерируется исключительная ситуация 13.
 IОРL=3  В режиме  виртуального  8086  эта  инструкция	доступна
	 только при IОРL = 3. В противном случае при попытке  ее
	 использования генерируется исключительная ситуация 13.
  нет/	 В режиме виртуального 8086 эта  инструкция  недоступна,
	 т.к.  это  инструкция	уровня	 привилегий   0   (режим
	 виртуального 8086 работает на уровне привилегий 3). При
	 попытке ее  использования  генерируется  исключительная
	 ситуация 13.
