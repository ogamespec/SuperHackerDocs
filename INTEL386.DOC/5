			    - 139 -

			    ЧАСТЬ 5
	  БОЛЕЕ ГЛУБОКОЕ ОПИСАНИЕ ЗАЩИЩЕННОГО РЕЖИМА.
	   ──────────────────────────────────────────
    Принцип   использования   процессора   80386   для	 простых
защищенных 32-битных систем был раскрыт в части 3. Затем в части
4 описан новый и полезный режим виртуального 8086. Но кроме того
процессор  80386  предоставляет  еще  дополнительные  интересные
возможности.
   Этот  раздел  раскрывает  наиболее  интересные  и   наиболее
запутанные возможности 80386, включая
   p Полное описание таблицы дискрипторов и их содержимого.
   p Встроенную поддержку многозадачности и переключение задач.
   p Полное об`яснение работы с прерываниями и	исключительными
ситуациями.
   p  Расширенные  возможности	отладки,  встроенные  в  каждый
процессор 80386.
   Эти особенности дополняют  картину  архитектуры  процессора.
Более глубокий взгляд на таблицы дескрипторов  и  их  содержимое
раскрывает встроенные возможности многозадачной  работы.  Глава,
посвященная исключительным ситуациям  и  прерываниям,  является,
в- основном, информацией для понимания всех операций  процессора
80386. Наконец,  особенности  отладки  для  16	и  32  -  битных
программ, как в реальном, так и  в  защищенном	режиме	являются
предметом интереса для всех программистов.

			   ГЛАВА 14.
	     Таблицы дескрипторов и их содержимое.
	       ────────────────────────────────
   Эта	глава  содержит  полное  описание  таблиц  дескрипторов
процессора  80386  и  их  содержимого.	Глава  8  дала	 вводную
информацию  по	 дескрипторам,	 переключателям    и	таблицам
дескрипторов простой защищенной 32 - битной системы. Были  также
рассмотреныи некоторые другие типы дескрипторов,  переключателей
и  таблиц  дескрипторов.  Эта  глава  резюмирует  и  всесторонне
описывает   назначение	 и   формат    всех    дескрипторов    и
переключателей.

	      Назначение дескрипторов сегментов.
		 ────────────────────────────
   Дескрипторы сегментов  для  команд  и  данных  описывают,  в
компактной форме,воспринимаемой процессором 80386, исключительно
сегменты, существующие в памяти - т.е.	code  и  data  сегменты.
Сегменты code и data  задаются	различными  типами  дескрипторов
т.к.  только  code  сегмент  является  исполняемым,  а	с  целью
обеспечеия  надлежащей защиты  системы,  для  исполняемого  кода
требуется другой набор атрибутов, нежели для данных.
   Предусмотренные дескрипторы сегментов состояния задачи (TSS)
позволяют умножать TSS-ы. Эта особенность  позволяет  процессору
80386 поддерживать многозадачность.  Активная  в  данный  момент
задача индицируется селектором	в  регистре  задач  (TR)  и  TSS
дескрипторе, описываемым  соответствующим  значением  селектора.
Это будет описано ниже в главе 15.
   Таким  же  образом,	 предусмотренные   дескрипторы	 таблиц
локальных  дескрипторов  (LDT)	позволяют  умножать  LDT-ы.  Это
позволяет каждой задаче в многозадачной архитектуре 80386  иметь
свое  личное  локальное  адресное   пространство.   Активное   в
настоящий момент локальное  адресное  пространство,  указываемое
селектором в LDT регистре (LDTR),а  LDT  дескриптор  указывается
соответствующим значением селектора.

			    - 140 -
		  Назначение переключателей.
		   ──────────────────────
   Переключатели  обеспечивают	только	передачу  управления  в
адресном пространстве, как к  определенному  сегменту  code  или
определенной задаче.
   Вызывающие переключатели, отладочные (trap) переключатели, и
переключатели прерываний описывают точку входа в  сегмент  code;
переключатели задач указывают задачу. Указывая переключатель как
операнд результата выполнения инструкции,  управление  будет  на
некоторое    время    передаваться    принимающему     операнду,
описываемому переключателем. Необходимо отдать	должное  функции
перенаправления, т.к. часто существует	необходимость  создавать
множественные точки входа, соответствующие данному сегменту  или
данной задаче.
   Переключатели, расположенные в IDT позволяют описывать точки
входа как через механизм аппаратных прерываний процессора, так и
через инструкции программных  прерываний  INTn,  INTO,	BOUND  и
исключительные ситуации. Для этих целей отладочный переключатель
(trap  gate)  и  переключатель	 прерываний   (interrupt   gate)
указывают на code сегмент внутри текущей задачи, используя GDT и
текущую  LDT.  Переключатель  задач  (task  gate)  указывает  на
сегмент  состояния  задачи  и  требует	 от   процессора   80386
выполнения  автоматического  переключения  задач  для  получения
доступа к задаче-приемнику (см. главу 15).

	     Типы и форматы дескриптора сегментов.
	      ────────────────────────────────────
   Дескрипторы сегментов - специальные 8-байтовые типы	данных,
необходимые для защищенного режима. Они описывают базовый адрес,
размер и атрибуты сегментов. Существуют четыре типа дескрипторов
сегментов  дескрипторы	 code	сегментов,   дескрипторы   data
сегментов, дескрипторы сегментов состояния задач  и  дескрипторы
таблиц	 локальных   дескрипторов.   Описание	 каждого    типа
дескрипторов будет приведено ниже.
   Все дескрипторы имеют определенное сходство друг  с	другом.
Внутренний формат  всех  дескрипторов  включает  базовый  адрес,
значение предела, а также другую информацию об атрибутах.
   Сами сегменты как 16-битные, так  и	32-битные  используются
для code сегментов, data сегментов и сегментов состояния  задач.
Дескрипторы code сегментов содержат бит умолчания  D  (Default),
указывающий на то является данный сегмент  16-битным  (D=0)  или
32-битным  (D=1)  сегментом.  Когда  D=0  целое  старшее   слово
дескриптора должно быть 0, в соответствии с определением формата
для 16-битного дескриптора. Дескрипторы code  и  data  сегментов
имеют B (Big) бит, который может быть установлен  для  индикации
величины размера сегмента; 32-битный  дескриптор  данных  обычно
имеет B=1, индицируя поддержку размеров сегментов  вплоть  до  4
гигабайт. Дескрипторы для сегментов  состояния	задач  различают
32- битные TSS от 16- битных TSS.
   Принимая в расчет различные типы сегментов, 16- битные и 32-
битные размеры, существуют семь форматов дескрипторов
   32- битные сегменты code
   16- битные сегменты code
   32- битные сегменты data
   16- битные сегменты data
   32- битные сегменты состояния задачи
   16- битные сегменты состояния задачи
   Таблицы локальных дескрипторов
   Дескриптор имеет следующие поля
   1. Базовый	адрес	сегмента   -   32-   битное   значение,
определяющее  базовый  адрес  сегмента	 в   линейном	адресном
пространстве.

			    - 141 -
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│  D   A предел │		│		│ 4
│сег.базы 31..24│G 1 0 V	│P DPL 1 1 C R A│сег.базы 23..16│
│		│      L 19...16│		│		│
├───────────────────────────────┼───────────────────────────────┤
│ сегмент базы 15.....0 	│сегментный ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 а) 32-битный кодовый сегментный дескриптор.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│  D		│		│		│ 4
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│P DPL 1 1 C R A│сег.базы 23..16│
├───────────────────────────────┼───────────────────────────────┤
│ сегмент базы 15.....0 	│сегментный ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 в) 16-битный кодовый сегментный дескриптор.
  Рис.14.1 Дескриптор для 32-битного и 16-битного сегмента кода.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│  B   A предел │		│		│ 4
│сег.базы 31..24│G 1 0 V	│P DPL 1 0 E W A│сег.базы 23..16│
│		│      L 19...16│		│		│
├───────────────────────────────┼───────────────────────────────┤
│ сегмент базы 15.....0 	│сегментный ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 а) 32-битный  сегментный дескриптор данных.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│  B		│		│		│ 4
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│P DPL 1 0 L W A│сег.базы 23..16│
├───────────────────────────────┼───────────────────────────────┤
│ сегмент базы 15.....0 	│сегментный ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 в) 16-битный сегментный дескриптор данных.
Рис.14.2 Дескриптор для 32-битного и 16-битного сегмента данных.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│      A предел │		│		│ 4
│сег.базы 31..24│G 0 0 V	│P DPL 0 1 0 В 1│сег.базы 23..16│
│		│      L 19...16│		│		│
├───────────────────────────────┼───────────────────────────────┤
│    TSS  базы 15.....0 	│  TSS	    ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 а) 32-битный дескриптор сегмента состояния задачи.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│P DPL 0 0 0 B 1│TSS базы 23..16│ 4
├───────────────────────────────┼───────────────────────────────┤
│     TSS базы 15.....0 	│      TSS  ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 в) 16-битный дескриптор сегмента состояния задачи.
  Рис.14.3 Дескриптор для 32-битного и 16-битного сегмента
состояния задачи.
    2. Граница	сегмента  -  20-   битное   поле,   определяющее
максимальное смещение (offset) сегмента. Эта граница может иметь
либо  байтовую	 либо	страничную   гранулярность   (4096-byte-
granular). О бите гранулярности см. ниже.

			    - 142 -
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│      A предел │		│		│ 4
│LDT базы 31..24│G 0 0 V	│P DPL 0 1 0 1 0│LDT базы 23..16│
│		│      L 19...16│		│		│
├───────────────────────────────┼───────────────────────────────┤
│    LDT  базы 15.....0 	│  LDT	    ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
  Рис.14.4 Дескриптор для LDT (локальная дескрипторная таблица).
   3. G   (Granularity)   показывает   гранулярность	границы
сегмента.  (G=0)-  байтовая  гранулярность,  (G=1)-   страничная
гранулярность. Если гранулярность  байтовая,  то  граница  может
быть определена с точностью до байта, т.к.  поле  представляющее
биты 19..10 разрешает максимально возможное смещение вплоть до 1
мегабайта. В случае страничной гранулярности граница может  быть
определена с точностью до  страницы,  т.к.  поле  представляющее
биты  31..12  разрешает  максимально  возможное  смещение  до  4
гигабайт.
   4. D (Derfault) указывает является  ли  сегмент  32-  битным
(D=1) или 16 битным (D=0). Если D=1 формат дескриптора для  code
и data сегментов будет таким,как показано на рис. 8.2 и рис. 8.3
соответственно. В случае D=0  формат  дескриптора  соответствует
используемому  процессором  80286  в   защищенном   режиме   для
16-битных сегментов, как сказано в главе 14. По  умолчанию,  32-
битные коды операций используют  32-  битные  размеры  данных  в
операндах и 32- битные адреса. По  умолчанию,  16-  битные  коды
операций используют 16- битные размеры данных в операндах и  16-
битные	  адреса.    (Совместимо    с	  защищенным	 режимом
80286).
   5. E  (Expansion  Direction),  только  для  data   сегментов
указывает где содержится сегмент в  диапазоне  адресов	от  базы
сегмента  вверх  до  его  границы  включительно  (E=0),  или  от
максимального смещения (offset) вниз до границы  не  включая  ее
(E=1). Большинство сегментов данных содержат 0 в этом  бите  для
"расширения  вверх".  Сегмент   данных,   который   поддерживает
динамически расширяемый стек, должен быть  установлен  в  1  для
"расширения вниз". Стек данных наращивается вниз  в  направлении
младших адресов.
   6. B (Big) Только для сегментов  данных.  Влияет  только  на
сегменты, расширяемые вниз. B показывает  максимальное	смещение
(offset) сегмента. Максимальное смещение  (offset)  расширяемого
вниз сегмента данных индицируется как FFFFFFFFh  (B=1)	или  как
0000FFFFh (B=0). B  не	влияет	на  расширяемые  вверх	сегменты
данных.
   7. Право  доступа.  Показывает  доступные  формы  доступа  к
сегментам, включая требования  уровня  привилегий  и  защиты  от
записи или чтения. Если использование операнда	внутри	сегмента
не совместимо с допустимыми  формами  доступа,	процессор  80386
генерирует  исключительную  ситуацию  общей  защиты   (13)   или
исключительную ситуацию потери стека  (12)  в  случае  если  это
произошло с сегментом stack.
   7а. P (Present) показывает присутствует сегмент в физической
памяти	(P=1)  или  отсутствует  (P=0).   Этот	 бит   позволяет
об`являть   много   больших   сегментов,   только    часть    из
которых  является  полностью  или  частично  присутствующими   в
физической памяти  одновременно.  Страничная  система  позволяет
любому сегменту быть загруженным в  базис  страницы.  Даже  если
P=1, сегменту не обязательно  присутствовать  полностью.  Многие
страницы   виртуально	присутствующего   сегмента    могут    в
действительности находиться на диске.
   7b. DPL  (Descriptor  Privilege  Level)  показывает	уровень
привилегий сегмента в виде номера от 0 до 3 в следующем порядке

			    - 143 -
  Поле DPL   Описание
────────────────────────────────────────────────────────────────
   00	     Уровень 0	      наиболее	привилегированный
				     (супервизор, ядро)
   01	     Уровень 1
   10	     Уровень 2
   11	     Уровень 3	      наименее привилегированный
				       (пользователь)
   Уровень привилегий DPL  текущего  сегмента  code  показывает
текущий  уровень  привилегии  (CPL)  операции.	Например,   если
процессор  исполняет  сегмент  code,  имеющий  DPL  0,	 то   он
исполняется с  CPL  0,	на  наиболее  привилегированном  уровне,
уровне супервизора.
   7с. A (Accessed)  показывает  может	быть  доступен	сегмент
(A=1) или нет (A=0). Системы, использующие межсегментные  обмены
могут  использовать  этот  бит	для  определения   использования
сегмента. Типичные простейшие системы  обмениваются  страницами,
ане  сегментами,  и  для  таких  систем  этот	бит   не   будет
представлять интереса.
   7d. R (Readable), для  сегментов  code  только.  Показывает,
является ли сегмент читаемым (R=1) или нет (R=0). Сегменты  code
являются  всегда  исполняемыми.  Аттрибут  R  может   обеспечить
дополнительную безопасность  страшным  программным  обеспечением
читать из сегмента code используя префикс смены сегмента CS (см.
рис   3.1).   Это    может    предотвратить    "пиратство"    по
отношению к обьектному коду, находящемуся в памяти.
   7e. C (Conforming), только  для  сегментов  code.  Указывает
происходили ли изменения в CPL когда сегмент был вызван с уровня
более низкой привилегии  (C=0)	или  нет  (C=1).  Если	C=1,  то
сегмент code считается конформным сегментом, т.к.  значение  CPL
не изменялось когда  вызывался	этот  сегмент.	Конформные  code
сегменты являются,  возможно,  наиболее  абстрактной  концепцией
архитектуры защищенного режима. В простой 32- битной системе все
code сегменты являются регулярными, т.е. неконформными.
   7f. W (Writable), только для  сегментов  данных.  Показывает
разрешена запись в сегмент (W=1) или нет (W=0). Сегменты  данных
всегда	 читаемы.   Атрибут   W    обеспечивает    безопасность,
предотвращая  любые  изменения	 в   данных.   Эта   специальная
особенность  применяется,  например,  для  сегментов  содержащих
важную информацию о статусе системы или для  общедоступной  базы
данных. В простой защищенной 32- битной системе  сегмент  данных
является многоцелевым и кроме всего  прочего  содержит	стек;  в
очень простой системе он должен, таким образом,  быть  доступным
для записи.

		Типы переключателей и форматы.
		 ─────────────────────────────
   Переключатели -  это  специальные  восьмибайтовые  структуры
данных,   необходимые	в   защищенном	 режиме    в	качестве
перенаправляющих или векторных устройств. Существует четыре типа
переключателей. С каждым типом выполняются  несколько  различные
формы перенаправления. Эти четыре  типа  называются  вызывающие
переключатели  (call  gates),  отладочные  переключатели   (trap
gates),   переключатели   прерываний   (interrupt    gates)    и
переключатели задач (task gates). Предназначение каждого из них,
которое будет об`яснено ниже, в- основном ясно из названий.
   Общий  формат  всех	 типов	 переключателей   идентичен   и
в любом случае содержит селектор, указывающий или на дескриптор
code сегмента или на TSS дескриптор, значение  смещения  (offset
value), определяющее точку  входа  (исходное  значение	регистра
EIP) в выбранный сегмент и информацию об использовании. Заметим,
что переключатель задач содержит поле смещения	(offset  field),

			    - 144 -
которое не используется с тех пор как указанный TSS  не  получит
значение EIP.
   В   случаях	 вызывающих,   отладочных   переключателей    и
переключателей прерываний, делаются различия между  16-  битными
и  32-	битными  переключателями.  В  этих  случаях   два   типа
переключателей имеют различные поля атрибутов.
   Принимая во	внимание  различные  типы  переключателей,  16-
битные	и  32-	битные	 размеры,   существует	 семь	форматов
переключателей
   32- битные вызывающие переключатели
   16- битные вызывающие переключатели
   32- битные отладочные переключатели
   16- битные отладочные переключатели
   32- битные переключатели прерываний
   16- битные переключатели прерываний
   Переключатели задач.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│  смещение 31...16		│Р DPL 0 1 1 0 0│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
а) Вызывающий переключатель в дескриптор 32-битного кодового сегмента.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│Р DPL 0 0 1 0 0│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
в) Вызывающий переключатель в дескриптор 16-битного кодового сегмента.
  Рис.14.5    32-битные и 16-битные вызывающие переключатели.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│  смещение 31...16		│Р DPL 0 1 1 1 1│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
а) Отладочный переключатель в дескриптор 32-битного кодового сегмента.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│Р DPL 0 0 1 1 1│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
в) Отладочный переключатель в дескриптор 16-битного кодового сегмента.
  Рис.14.6   32-битные и 16-битные отладочные переключатели.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│  смещение 31...16		│Р DPL 0 1 1 1 0│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
а) Переключатель прерываний в дескриптор 32-битного кодового сегмента.
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│Р DPL 0 0 1 1 0│0 0 0		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│ смещение 15...0		│ 0
└───────────────────────────────────────────────────────────────┘
в) Переключатель прерываний в дескриптор 16-битного кодового сегмента.
  Рис.14.7    32-битные и 16-битные переключатели прерываний.

			    - 145 -
31				15		7		0
├───────────────────────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│Р DPL 0 1 1 1 1│		│ 4
├───────────────────────────────────────────────────────────────┤
│селектор к дескр.код.сегменту	│				│ 0
└───────────────────────────────────────────────────────────────┘
    Переключатель задач в 32-битный или 16-битный дескриптор
    сегмента состояния задачи
  Рис.14.8  Переключатели задач для 32-битных и 16-битных TSS.
   Содержимое  полей  вызывающего  переключателя,   отладочного
переключателя и переключателя прерываний следующее
   1. Селектор принимающего code сегмента указывает на сегмент,
содержащий принимающую программу. Этот селектор должен указывать
на code сегмент.
   2. Смещение (offset) точки входа в code  сегмент  определяет
точку входа в принимающую программу.
   3. Право доступа - несколько бит,  показывающих  разрешенные
формы  доступа	к  переключателю,  включая   требования   уровня
привилегий. Если использование	переключателя  не  совместимо  с
требованиями,  то  процессор  80386  генерирует   исключительную
ситуацию общей защиты (13) или стековую исключительную	ситуацию
(12), если отсутствует stack сегмент.
   3a. P   (Present-присутствие),   показывает	 доступен    ли
переключатель  для  использования  (P=1)  или  нет  (P=0).   Для
успешного переключения переключатель должен присутствовать.
   3b. DPL (Descriptor	Privilege  Level  -  дескриптор  уровня
привилегий)   показывает   уровень   привилегий   переключателя.
Аппаратное  прерывание	может  осуществляться  через  отладочный
переключатель или переключатель прерываний, если он помечен  как
присутствующий,   независимо   от   DPL    переключателя.    DPL
используется  только  для  инструкций	CALL   для   вызывающего
переключателя и для  программных  прерываний  (инструкции  INTn,
INTO,  BOUND   и   исключительные   ситуации)	для   отладочных
переключателей или  переключателей  прерываний.  DPL  показывает
уровень привилегий преключателя  числом  от  0	до  3  следующим
образом
  Поле DPL   Описание
────────────────────────────────────────────────────────────────
   00	     Уровень 0	      наиболее привилегированный
				      (супервизор, ядро)
   01	     Уровень 1
   10	     Уровень 2
   11	     Уровень 3	      наименее привилегированный
				       (пользователь)
   Для	 инструкции   CALL,   программного   прерывания,    или
исключительной ситуации, инструкция, использующая  переключатель
должна иметь CPL меньший, чем DPL переключателя. Например,  если
процессор исполняет code сегмент с DPL=3 (т.е. на уровне текущей
привилегии  3),  то  инструкция  CALL  в   этом   случае   может
использовать  только  вызывающие  переключатели   с   DPL=3,   и
программные  прерывания  могут	использовать  только  отладочные
переключатели и переключатели прерываний  с  DPL=3.  Любое  иное
значение DPL  (т.е.  2,1,  или	0)  переключателя  укажет  более
высокий  уровень  привилегий   и   успешного   переключения   не
произойдет. В этом  случае  будет  сгенерирована  исключительная
ситуация общей защиты (13).
   Содержимое полей переключателя задач следующее
   1. Селектор принимающего сегмента состояния задачи указывает
на сегмент состояния задачи  содержащий  принимающую  программу.
Этот селектор  должен  указывать  на  сегмент  состояния  задачи

			    - 146 -
(либо 32- либо 16- битный TSS). Переключатель задач не	содержит
поля смещения (offset), с того	времени  как  TSS  сам	содержит
значение EIP для последующего использования.
   2. Право доступа - несколько бит,  показывающих  разрешенные
формы  доступа	к  переключателю,  включая   требования   уровня
привилегий. Если использование	переключателя  не  совместимо  с
требованиями,  то  процессор  80386  генерирует   исключительную
ситуацию общей защиты (13) или стековую исключительную	ситуацию
(12), если отсутствует stack сегмент. Если сам сегмент состояния
задачи некорректен, процессор генерирует исключительную ситуацию
10.
   2a. P   (Present-присутствие),   показывает	 доступен    ли
переключатель  для  использования  (P=1)  или  нет  (P=0).   Для
успешного переключения переключатель должен присутствовать.
   2b. DPL (Descriptor	Privilege  Level  -  дескриптор  уровня
привилегий)   показывает   уровень   привилегий   переключателя.
Аппаратное  прерывание	может  осуществляться  через  отладочный
переключатель или переключатель прерываний, если он помечен  как
присутствующий,   независимо   от   DPL    переключателя.    DPL
используется только для программных прерываний (инструкции INTn,
INTO, BOUND и исключительные ситуации)	DPL  показывает  уровень
привилегий преключателя числом от 0 до 3 следующим образом
  Поле DPL   Описание
────────────────────────────────────────────────────────────────
   00	     Уровень 0	      наиболее привилегированный
				      (супервизор, ядро)
   01	     Уровень 1
   10	     Уровень 2
   11	     Уровень 3	      наименее привилегированный
				       (пользователь)
   Для программного прерывания,  или  исключительной  ситуации,
инструкция, использующая прерывание, должна иметь  CPL	меньший,
чем DPL переключателя. Например, если процессор  исполняет  code
сегмент с DPL=3  (т.е.	на  уровне  текущей  привилегии  3),  то
программное прерывание в этом случае может  использовать  только
переключатели задач с  DPL=3,  и  программные  прерывания  могут
использовать только  отладочные  переключатели	и  переключатели
прерываний с DPL=3. Любое иное значение DPL (т.е.  2,1,  или  0)
укажет более высокий уровень привилегий и успешного переключения
в задачу  не  произойдет.  В  этом  случае  будет  сгенерирована
исключительная ситуация общей защиты (13).

		     Таблицы дескрипторов.
		      ────────────────────
   Таблицы дескрипторов (descriptor tables) - это расположенные
в памяти матрицы, содержащие в качестве элемента дескриптор  или
переключатель. Процессор  80386  поддерживает  три  типа  таблиц
дескрипторов  таблица  глобальных  дескрипторов  (GDT),  таблица
локальных дескрипторов (LDT),  таблица	дескрипторов  прерываний
(IDT).
   Две из  этих  таблиц,  GDT  и  LDT  содержат  дескрипторы  и
переключатели, описывающие адресное пространство; они описывают,
например, существующие	сегменты  и  задачи.  На  дескрипторы  и
переключатели, расположенные в этих таблицах, можно ссылаться  с
использованием селекторов.  Напомним,  что  GDT  устанавливалась
простой 32-битной защищенной системой. LDT не использовались для
простой системы, т.к. они  целиком  связаны  с	многозадачностью
процессора 80386 и служат  для	обеспечения  локальным	адресным
пространством индивидуальной задачи, как описано в главе 15.
   Третья таблица,  IDT,  содержит  только  переключатели;  они

			    - 147 -
служат для перенаправления исключительных ситуаций и  прерываний
на соответствующие им программы  обслуживания.	Переключатели  в
этой таблице указывают на номера прерываний от 0 до 255.
   Данное большое число дескрипторов, переключателей, таблиц  и
размещение каждого из них должно  быть	выполнено  исключительно
аккуратно. Для этого существует таблица 14.1, которая резюмирует
разрешаемое содержимое каждой таблицы дескрипторов.
   Как GDT, так и LDT могут содержать дескрипторы code	и  data
сегментов  и  могут  содержать	вызывающие   переключатели   или
переключатели задач. Тем не менее  в  то  время  какLDT  создана
только для обеспечения локального адресного пространства  задач,
GDT является только таблицей, позволяющей содержать  специальные
дескрипторы для сегментов состояния  задач  и  таблиц  локальных
дескрипторов. IDT может содержать только переключатели для целей
перенаправления   исключительных    ситуаций	и    прерываний.
Переключателями,   которые   она   может   содержать,	являются
переключатели прерываний, задач, отладочные переключатели, но не
вызывающие переключатели.
    Таблица 14.1. Разрешенное содержимое таблиц дескрипторов.
────────────────────────────────────────────────────────────────
	  GDT		       LDT		     IDT
  (Таблица глобальных  (Таблица локальных  (Таблица дескрипторов
     дескрипторов)	  дескрипторов) 	прерываний)
────────────────────────────────────────────────────────────────
 Дес- Дескрипторы Code	 Дескрипторы Code
крип- сегмента (32и16)	 сегмента (32и16)
торы  Дескрипторы Data	 Дескрипторы Data
      сегмента (32и16)	 сегмента (32и16)
      Дескрипторы Code	 Дескрипторы Code
      сегмента (32и16)	 сегмента (32и16)
      Дескрипторы сег-
      мента  состояния
      задач (32и16бит)
      Дескриптор  таб-
      лицы   локальных
      дескрипторов
Пере- Вызывающий  пере-  Вызывающий  пере-
клю - ключатель в 32- и  ключатель в 32- и
чате- 16-  битные  Code  16-  битные  Code
ли    сегменты		 сегменты
      Переключ. задач	 Переключ. задач     Переключ. задач
					     Переключатель задач
					     в 32- и  16- битные
					     Code сегменты
					     Переключ.прерываний
					     в 32- и  16- битные
					     Code сегменты
──────────────────────────────────────────────────────────────────

   Системные регистры, содержащие таблицу дескрипторов.
    ───────────────────────────────────────────────────
   В  области  памяти,	 как   известно,   содержится	таблица
дескрипторов, в то  время  как	один  из  регистров  защищенного
режима	 процессора   80386,   показанный   в	 таблице    14.2
устанавливается на базовый  адрес  и  границу,	описываемую  как
область памяти.

			    - 148 -
		   Инициализация GDTR и IDTR.
		    ─────────────────────────
   GDTR и IDTR являются регистрами только  защищенного	режима,
загружаемые  линейными	адресами.  Таким  образом  эти	регистры
служат	в  качестве  привязки  структуры  таблицы   дескрипторов
защищенного режима.
    Таблица 14.2 Системные регистры для таблиц дескрипторов.
────────────────────────────────────────────────────────────────
Системный
 регистр		     Функция
  80386
  GDTR		    Размещает и ограничивает GDT
  LDTR		    Размещает и ограничивает LDT
  IDTR		    Размещает и ограничивает IDT
────────────────────────────────────────────────────────────────
   GDTR  и  IDTR  инициализируются  сходным  образом.  Линейный
базовый  адрес	и  граница  записываются  в  каждый  регистр   с
использованием	LGDT  и  LIDT  инструкций  соответственно.   Эти
инструкции описывают  16-битное  значение  границы,  позволяющее
иметь размер таблицы вплоть до 64  Кбайт,  и  32-битный  базобый
адрес,	разрешающий  располагать  базу	в  любом  месте   внутри
линейного адресного пространства.
			4 Гбайта линейного адресного пространства
			31	24 23	  16 15      8 7	0
	      FFFFFFFFh ├─────────┼─────────┼─────────┼─────────┐
GDT может содержать	├─────────┼─────────┼─────────┼─────────┤
следующее:		├─────────┴─────────┴─────────┴─────────┤
-переключатели прерываний
-переключатели ловушек	├─────────┼─────────┼─────────┼─────────┤
-переключатели задач ┌──┼Ўдескр. N Nў8141   │	      │ 	│
		     │	├─────────┼─────────┼─────────┼─────────┤
		     │	│дескр.N-1│	    │	      │ 	│
   Линейный адрес:   │	├─────────┼─────────┼─────────┼─────────┤
 база+ограничитель   │	├─────────┼─────────┼─────────┼─────────┤
		     │	│дескриптор 1	    │	      │ 	│
Линейный адрес:база  │	├─────────┼─────────┼─────────┼─────────┤
		     │	│дескриптор 0	    │	      │ 	│
		     │	├─────────┼─────────┼─────────┼─────────┤
	    ┌───────────┼─────────┼─────────┼─────────┼───────Ў │
	    │	     │	├─────────┼─────────┼─────────┼─────────┤ 00000000h
	    │	     │	└─────────┴─────────┴─────────┴─────────┘
	    │	     │	 4 Гбайта линейного адресного пространства
	    │	     └──────────────────┐
47	    │		     16 15	│	     0
├───────────┴──────────────────┼────────┴────────────┤
│			       │    16-битный	     │
│GDT 32-битный линейный адрес  │GDТ  ограничитель    │
└──────────────────────────────┴─────────────────────┘
 GDTR системный регистр (в 80386)
    Рис.14.9 GDTR регистр,размещающий GDT в линейном адресном
	     пространстве.

			    - 149 -
			4 Гбайта линейного адресного пространства
			31	24 23	  16 15      8 7	0
	      FFFFFFFFh ├─────────┼─────────┼─────────┼─────────┐
IDT может содержать	├─────────┼─────────┼─────────┼─────────┤
следующее:		├─────────┴─────────┴─────────┴─────────┤
-переключатели прерываний
-переключатели ловущек
-переключатели задач	├─────────┼─────────┼─────────┼─────────┤
		     ┌──┼Ўперекл.N Nў255			│
		     │	├─────────┼─────────┼─────────┼─────────┤
		     │	 перек.N-1│				│
   Линейный адрес:   │	├─────────┼─────────┼─────────┼─────────┤
 база+ограничитель   │	├─────────┴─────────┴─────────┴─────────┤
		     │	 перекл.1
Линейный адрес:база  │	├─────────┼─────────┼─────────┼─────────┤
		     │	 перекл.0
		     │	├─────────┼─────────┼─────────┼─────────┤
	    ┌────────┼──┼─────────┼─────────┼─────────┼───────Ў │
	    │	     │	├─────────┼─────────┼─────────┼─────────┤ 00000000h
	    │	     │	└─────────┴─────────┴─────────┴─────────┘
	    │	     │	 4 Гбайта линейного адресного пространства
	    │	     └──────────────────┐
47	    │		     16 15	│	     0
├───────────┴──────────────────┼────────┴────────────┐
│			       │    16-битный	     │
│IDT  32-битный линейный адрес │IDТ  ограничитель    │
└──────────────────────────────┴─────────────────────┘
 IDTR системный регистр (в 80386)
    Рис.14.10 IDTR регистр,размещающий IDT в линейном адресном
	      пространстве.
15	      0   31			  0 15	       0
├─────────────┐   ├────────────────────────┼────────────┼───────────┐
│	      │   │			    16-битный	  Атрибуты  │
│  LDTR       ├──Ў│32-битный линейный адрес ограничитель GDP CPL CRA│
└─────────────┘   └─────────────────────────────────────────────────┘
    Рис.14.11 Регистр дескриптора кэш связанный с регистром LDTR.

		      Инициализация LDTR.
		       ──────────────────
   LDTR иницициализируется путем записи  значения  селектора  в
регистр  с  использованием  инструкции	LLDT.  Селектор   должен
указывать на LDT дескриптор такой,  как  показано  на  рис.14.4,
который содержит необходимый базовый адрес  и  границу.  Регистр
кэш  дескриптора,  соответствующий   регистру	LDTR   сохраняет
внутреннюю копию полей LDT дескриптора как показано  на  рисунке
14.11.	Использованием	инструкции   LLDT   для   загрузки   LDT
дескриптора, LDT может быть  бомещен  в  любом	месте  линейного
адресного пространства и может достигать 64 Кбайт, как	показано
на рис.14.12.
   LDT дескриптор содержится в GDT. Таким  образом,  необходимо
создать  образ	GDT   и   инициализировать   GDTR   сначала.   С
установленной GDT  инструкция  LLDT  может  быть  выполнена  для
загрузки LDTR посредством размещения LDT.

			    - 150 -
       Использование переключателей для перенаправления.
	────────────────────────────────────────────────
   Перенаправление посредством вызывающих переключателей.
   Вызывающие переключатели могут быть помещены только в GDT  и
LDT. Перенаправление через вызывающий переключатель (call  gate)
выполняется с любой межсегментной инструкцией CALL (код операции
9Ah), которая описывает вызывающий переключатель как принимающий
операнд. Селектор  вызывающего	переключателя  используется  как
принимающий операнд  инструкции.  Такая  инструкция  CALL  может
передать управление либо  в  другой  сегмент  code  с  таким  же
текущим уровнем привилегий, либо в другой code сегмент	с  более
высоким   уровнем   привилегий.   Таким   образом,    вызывающий
переключатель	может	расширить   возможности    межсегментной
инструкции CALL для доступа к сегментам на более высоком  уровне
привилегий.
   Инструкции CALL всегда оставляют адрес следующей  инструкции
в стеке, таким образом, чтобы инструкция  RET  могла  продолжить
исполнение основной программы. Эта  концепция  остается  в  силе
даже если инструкция CALL указывает вызывающий переключатель.
   Когда вызывающий переключатель передает управление  сегменту
на текущем уровне привилегий, CS и EIP	сохраняются  в	стек  на
текущем  уровне.   Когда   вызывающий	переключатель	передает
управление на уровень более высокой  привилегии,  то  как  адрес
стека, так и адрес инструкции сохраняются в стек на  принимающем
(с большей привилегией) уровне, как показано на рис. 14.13.
			      ─────────────────┐
├───────────────────────────────┼──────────────┼──────────────┤
│				│	       ∙	      │
├───────────────────────────────┼─────────────────────────────┤
│				│SS селектор для стека более  │
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│   низкого уровня.	      │
├───────────────────────────────┼─────────────────────────────┤ │
│	   ESP для стека более низкого уровня.		      │ │
├───────────────────────────────┼─────────────────────────────┤ │
│				│СS селектор для кодов более  │ │
│0 0*0 0 0 0 0 0 0 0 0 0 0 0 0 0│   низкого уровня.	      │ │
├───────────────────────────────┼─────────────────────────────┤ │
│	   EIP для кодов более низкого уровня.		      │ ∙
└───────────────────────────────┴─────────────────────────────┘
					       °
			     ──────────────────┘
    Рис.14.13	32-битный стек верхнего уровня после исполнения
	      инструкции CALL с нижнего уровня через вызывающий
	      переключатель.

   Перенаправление через вызывающий переключатель с  параметром
		  самокопирования (Autocopy).
   ────────────────────────────────────────────────────────────
   Предположим, что вызывающая	программа   помещает   значения
параметров  в  свой   стек   перед   исполнением   межсегментной
инструкции CALL, указывающей на вызывающий  переключатель.  Если
управляющий переключатель передает управление на  более  высокий
уровень, то параметры не находятся в стеке вызванной  программы.
Вызванной программе может  оказаться  затруднительным  прочитать
параметры из стека низшего уровня. Наиболее приемлемым	решением

			    - 151 -
является  активизирование  опциона   параметра	 самокопирования
(parameter autocopy) с каждым вызывающим переключателем.
   Вызывающий переключатель, как показывает рис.14.5,  включает
поле  счетчика	слов  (word  count  field),  которое   принимает
значения от  0	до  31.  Счетчик  слов,  n,  тридцатидвухбитного
вызывающего  переключателя  указывает  процессору  80386,   если
переход  из  привилегии  в   привилегию   происходит   благодаря
перенаправлению вызывающего переключателя, копировать n  двойных
слов из стека низшего уровня в стек  более  высокого  уровня.  С
этого времени вызванная программа находит соответствующее  число
параметров в своем стеке. Рис.14.14 иллюстрирует самокопирование
параметров из стека низкого  уровня  в	принимающий  стек  более
высокого уровня.
   В конце исполнения вызванной программы она должна отработать
инструкцию RETn, где n,число байт, которые должны  быть  удалены
из  стека. Оно должно соответствовать числу байт,  скопированных
вызывающим переключателем. Указанное  число  байт  удаляется  из
стека низшего уровня, когда появляется команда RET. Стек высшего
уровня предполагается пустым  после  возврата  (RET)  на  низшем
уровне. Таким образом, после возврата, исходное состояние SS:ESP
сохраняется в TSS, определяя верхушку стека верхнего уровня  для
следующего раза, когда потребуется стек.
   Возможность	параметра  самокопирования  не	работает,  если
счетчик слов равен 0. Запишите нули в поле счетчика  слов,  если
параметр самокопирования не требуется с каким-	либо  вызывающим
переключателем.

   Перенаправление через отладочные переключатели (trap  gates)
   ────────────────────────────────────────────────────────────
	 и переключатели прерываний (interrupt gates)
	 ────────────────────────────────────────────
   Отладочные переключатели и  переключатели  прерываний  могут
быть помещены только  в  IDT.  Перенаправление	с  помощью  этих
переключателей может быть выполнено с помощью  любой  инструкции
программного   прерывания   (INTn,INTO,BOUND),	  исключительной
ситуации или с помощью	аппаратных  прерываний.  Перенаправление
для прерывания или исключительной ситуации  n  происходит  через
переключатель в численной позиции  n  IDT.  Такой  переключатель
ведет в другой code сегмент либо на текущем  уровне  привилегий,
либо на более высоком. Таким  образом  отладочный  переключатель
или переключатель прерываний  расширяет  возможности  инструкций
программных прерываний для доступа к сегментам с большим уровнем
привилегий.
   Отладочный переключатель и переключатель прерываний имеют те
же самые стековые эффекты, что и вызывающий переключатель. Когда
вызывающий переключатель передает управление  на  уровень  более
высокой привилегии, то как адрес стека, так и  адрес  инструкции
сохраняются  в	стек  на  принимающем  (с  большей  привилегией)
уровне,  как  показано	на  рис.  14.15.   Однако,   возможность
использования параметра самокопирования не обеспечивается.

	   Перенаправление через переключатели задач.
	    ─────────────────────────────────────────
   Переключатели задач могут располагаться  в  GDT,LDT,  или  в
IDT. В случае GDT или LDT, переключатель задач может быть указан
межсегментной инструкцией CALL. В случае  размещения  в  IDT  он
может	указываться   инструкцией    программного    прерывания,
исключительной ситуацией или аппаратным прерыванием.
   Таким же способом как описано выше,	где  бы  ни  указывался
переключатель  задач,  он  заставляет  процессор   автоматически
выполнить переключение задач (см. главу 15).

			    - 152 -
    ───────────┐	  ──────────────┐
	       │			│
├─────────┼────┼────┤	 ├─────────┼────┼────┤
│	  │    ∙    │	 │	   │	∙    │
├─────────┼─────────┤	 ├─────────┼─────────┤
│   Параметр 1	    │	 │0 0...0 0│SS селек.│
│		    │	 │	    для стека│
├─────────┼─────────┤	 ├─────────┼─────────┤
│		    │	 │ЕSP для стека более│
│   Параметр 2	    │	 │низкого   уровня   │
├─────────┼─────────┤	 ├─────────┼─────────┤
│   Параметр 3	    │	 │    Параметр 1     │
├─────────┼─────────┤	 ├─────────┼─────────┤
│   Параметр 4	    │	 │    Параметр 2     │
├─────────┼─────────┤	 ├─────────┼─────────┤
│   Параметр 5	    │	 │    Параметр 3     │
├─────────┼─────────┤	 ├─────────┼─────────┤
│   Параметр 6	    │	 │    Параметр 4     │
└───────────────────┘	 ├─────────┼─────────┤
		°	 │    Параметр 5     │
		│	 ├─────────┼─────────┤
      ──────────┘	 │    Параметр 6     │
			 ├─────────┼─────────┤
			 │	    СS селек.│
			 │0 0...0 0│для кодов│
			 ├─────────┼─────────┤
			 │ЕIP для кодов более│
			 │низкого   уровня   │
			 └─────────┴─────────┘
					°
			 ───────────────┘
    Рис.14.14  32-битный стек нижнего и верхнего уровней после
исполнения инструкции САLL с нижнего уровня через вызывающий
переключатель с параметром самокопирования.
			    ───────────────────┐
31			      16 15	       │	      0
├───────────────────────────────┼──────────────┼──────────────┤
│				│	       ∙	      │
├───────────────────────────────┼─────────────────────────────┤
│				│SS селектор для стека более  │
│0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0│   низкого уровня.	      │
├───────────────────────────────┼─────────────────────────────┤
│	   ESP для стека более низкого уровня.		      │
├───────────────────────────────┼─────────────────────────────┤
│				│СS селектор для кодов более  │
│0 0*0 0 0 0 0 0 0 0 0 0 0 0 0 0│   низкого уровня.	      │
├───────────────────────────────┼─────────────────────────────┤
│	   EIP для кодов более низкого уровня.		      │
└───────────────────────────────┴─────────────────────────────┘
					       °
			     ──────────────────┘
  Рис.14.13    32-битный стек верхнего уровня после программного
или аппаратного прерывания на нижнем уровне через отладочный
переключатель или переключатель прерываний.

			    - 153 -
			 ГЛАВА 15
			Многозадачность
			 ───────────────
    Эта  глава	содержит  описание  возможностей   многозадачной
работы процессора,  которые  включают  способность  обслуживания
одновременно  нескольких  задач  и  переключения  между  ними  с
использованием обычных инструкций, таких, как  переходы,  вызовы
подпрограмм, прерывания и возвраты из них.  В  процессоре  80386
каждая	из  задач  имеет  свой	блок  состояния  задачи  и  свое
виртуальное адресное пространство.
    Хотя в архитектуре	процессора  однозначно	определено,  что
составляет задачу, это слово часто  используется  в  значительно
более общем смысле. В компьютерной терминологии  слово	"задача"
часто ассоциируется  со  словами  "работа"  или  "пользователь".
Такое определение может соответствовать определению  задачи  для
процессора  80386.  В  понимании  80386  задача  -  это   вполне
определенная единица, тесно связанная с архитектурой процессора.
Каждая задача процессора 80386 имеет свое адесное пространство и
блок состояния задачи.
    Система 80386 присваивает или не присваивает каждой "работе"
или "пользователю" реальную задачу  процессора  взависимости  от
необходимости  выделения   отдельного	виртуального   адресного
пространства и блока статуса задачи. Если разделение необходимо,
то  архитектура  80386	поддерживает   его   с	 помощью   своих
многозадачных возможностью. Если не все задачи требуют	реальной
индивидуальности, то распределение ресурсов может взять на  себя
операционная система.
    Даже если не присваивать каждой программе отдельную  задачу,
типичная система состоит из нескольких задач всвязи с тенденцией
повышения  надежности  ситстемы   по   сравнению   однозадачной.
Например,  программы   обслуживания   исключительных   ситуаций,
сообщающие о серьезных	неполадках  системы,  должны  составлять
отдельную задачу.

	   Виртуальное адресное пространство задачи.
	    ────────────────────────────────────────
    Полный  виртуальный  адрес	включает  селектор  сегмента   и
смещение. В защищенном режиме селектор (рис.15.1)  содержит  бит
TI   (индикатор   таблицы),   определяющем   где   располагается
дескриптор - в	GDT  (ТI=0)  или  в  активной  в  данный  момент
(связанной с выполняющейся  задачей) LDТ  (ТI=1).
    Возможность доступа к GDТ и к своей  LDТ  позволяет   каждой
задаче обращаться к глобальным об`ектам (сегменты,задачи,и  др.)
виртуального  адресного  пространства  и  к   своему   адресному
пространству. Выбор между  таблицами  осуществляется  с  помощью
бита ТI селектора.
15		7		 0
├─┬─┬─┬─┬─┬─┬─┬─┼─┬─┬─┬─┬─┬──┬───┤
│ │ │ │ │ INDEX │ │ │ │ │ │TI│RPL│
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴┬─┴─┬─┘
	 INDEX		   │   │
	   │		   │   └──ЎRPL (запрашиваемый
 ┌─────────┘		   │   уровень привилегии):
 └ЎИндекс выбирает	   │00-не влияет на возможности доступа
      один из 8192	   │01-доступ не выше первого уровня
  дескрипторов или	   │10-доступ не выше второго уровня
   записей таблицы	   │11-доступ не выше третьего уровня
			   │
			   └──ЎИндикатор таблицы
			       0-дескриптор в GDT
			       1-дескриптор в LDT
			Рис.15.1 Селектор в защищенном режиме.

			    - 154 -
			 Состояние задачи
			 ────────────────
    В системе 80386 каждая задача имеет сегмент состояния  задачи
- область памяти, содержащая состояние регистра задачи	и  другую
информацию. Без сегмента состояния задачи задача  не  существует,
так как не определено адресное пространство и ее состояние.  ТSS,
в фиксированном формате, содержит  состояние  регистра	задачи	и
другую информацию, такую как начальные значения указателей  стека
для уровней привилегии 2, 1,  0,  значение  для  LDТR  и  таблицу
разрешенного ввода/вывода.
    32-разрядная  ТSS,	как  показано  на  рис.  15.2,	 содержит
не только  32-битное  расширение  всех	восьми	регистров  общего
назначения, но и два новых сегмента данных FS  и  GS.  Она  также
включает  указатель  на   массив   бит	 -   карту   разрешенного
ввода/вывода. Каждая ТSS имеет бит  Т,	служащий  для  отладочных
целей - он позволяет генерировать трэп сразу при входе	в  задачу
(см. гл. 17 для более подробного описания  встроенных  отладочных
средств процессора 80386).
    Для сравнения, на  рис.  8.11  приведена  структура  ТSS  при
минимальном  использовании  ее	возможностей.  В  случае  простой
системы, не использующей многозадачный режим, ТSS  содержит  лищь
начальное значение указателя стека нулевого уровня привилегии,	а
остальные поля заполнены нулями.
    На рис.  15.3  показана  16-битная	ТSS,  совместимая  с  ТSS
процессора 80286. Она содержит только набор 16-битных регистров и
в ней отсутствует таблица разрешенного ввода/вывода.

			 Дескриптор ТSS
			  ──────────────
    Новая ТSS вводится путем записи дескриптора  в  GDТ.  Форматы
таких дескрипторов показаны на рис. 15.4.
    Подробное описание полей дескрипторов приведены в  главе  14.
Поля дескриптора  ТSS  во  многом  аналогичны  полям  дескриптора
кодового сегмента, за исключением одного бита:
 В (busy), показывает занята ли в данный момент задача (1  -  да,
0 - нет). В простых системах с защитой бит В должен  всегда  быть
установлен  в  1.  Более  полное  описание  функций  этого   бита
приведено на стр. 186-187.
    Дескрипторы  ТSS  могут  располагаться  только  в	GDТ.   Их
количество однозначно определяет количество задач в  системе:  по
одному дескриптору на задачу.

			 Ловушки задач
			  ─────────────
    Они могут быть помещены в любую из	таблиц	дескрипторов:GDТ,
LDТ, или IDТ. Ловушка содержит селектор дескриптора ТSS в  GDТ	и
поэтому используется в качестве  перенацеливающего  механизма  на
пути к задаче.
    Ловушка  задачи  имеет  только  один  формат,  показанный  на
рис. 15.5. Она может относится и к 16-, и к  32-битной	ТSS,  так
как ловушка взаимодействует лишь с дескриптором.  Ловушка  задачи
не содержит  смещения,	как  ловушки  16-  и  32-битных  вызовов.
Смещение для нее определяется начальным значением ЕIР,	как  и	в
самой ТSS, поэтому необходимость в смещении отпадает.

			    - 155 -
						├───────────────*
						 1 1 1 1 1 1 1 1
┌───────────────┬───────────────┬───────────────┼───────────────┐
│65535**********│***************│***************│**********65504│
│65503**********│***************│***************│**********65472│
│65471**********│***************│***************│**********65440│
│65439**********│***************│***************│**********65408│
;				;				;
│127		│		│		│	      96│
│95		│		│		│	      64│
│63		│		│		│	      32│
│31		│		│		│	       0│ў─*
;				;				;  │
;		*──────────────────────────────────────────────────┘
;		│		;				;
│смещение 0-15			│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│100
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor LDY		│96
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor GS		│92
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor FS		│88
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor DS		│84
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor SS		│80
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor CS		│76
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│	selektor ES		│72
│			       EDI				│68
│			       ESI				│64
│			       ESY				│60
│			       ESP				│56
│			       EBX				│52
│			       EDX				│48
│			       ECX				│44
│			       EAX				│40
│			     EFLAGS				│36
│			       EIP				│32
│			       CR3				│28
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│    SS-для уровня=2		│24
│			   ESP-для уровня=2			│20
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│    SS-для уровня=1		│16
│			   ESP-для уровня=1			│12
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│    SS-для уровня=0		│8
│			   ESP-для уровня=0			│4
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│				│0
└───────────────────────────────────────────────────────────────┘
  Рис.15.2  32-битный сегмент состояния задачи.

		   Переход от задачи к задаче
		    ──────────────────────────
    Одной  из  наиболее  мощных   возможностей	 80386	 является
возможность  перехода  от  задачи  к  задаче  с  помощью  обычных
инструкций. Такой переход обычно  называют  переключением  задач.
80386  позволяет  переключать	задачи	 с   помощью   инструкций
межсегментной	передачи   управления:	 межсегментный	 переход,
межсегментный вызов, инструкции прерываний INТ 3, INТ n,  INТО	и
ВОUND, IRЕТ. Сами инструкции  ничем  не  отличаются  от  обычных.
Переключение задач  происходит	если  указать  селектор  ТSS  или
ловушки задачи в поле операнда-приемника инструкции.

			    - 156 -
┌───────────────────────────────┬───────────────────────────────┐
│	  selektor-для LDTR	│	 selektor-для DS	│40
│	  selektor-для SS	│	 selektor-для CS	│36
│	  selektor-для ES	│		DI		│32
│		SI		│		SP		│28
│		SP		│		BI		│24
│		DX		│		CI		│20
│		AX		│	       FLAGS		│16
│		IP		│	 SS-для уровня=2	│12
│	  SP-для уровня=2	│	 SS-для уровня=1	│8
│	  SP-для уровня=1	│	 SS-для уровня=0	│4
│	  SP-для уровня=0	│				│0
└───────────────────────────────┴───────────────────────────────┘
 Рис.15.3. 16-битный сегмент состояния задачи.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│		│      A предел │		│		│ 4
│сег.базы 31..24│G 0 0 V	│P DPL 0 1 0 В 1│сег.базы 23..16│
│		│      L 19...16│		│		│
├───────────────────────────────┼───────────────────────────────┤
│    TSS  базы 15.....0 	│  TSS	    ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 а) 32-битный дескриптор сегмента состояния задачи.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│P DPL 0 0 0 B 1│TSS базы 23..16│ 4
├───────────────────────────────┼───────────────────────────────┤
│     TSS базы 15.....0 	│      TSS  ограничитель 15...0 │ 0
└───────────────────────────────┴───────────────────────────────┘
 в) 16-битный дескриптор сегмента состояния задачи.
  Рис.15.4. Дескриптор для 32-битного и 16-битного сегмента
состояния задачи.
31	      24 23	      16 15	       8 7		0
├───────────────┼───────────────┼───────────────┼───────────────┤
│0 0 0 0 0 0 0 0│0 0 0 0 0 0 0 0│P DPL 0 1 1 1 1│TSS базы 23..16│ 4
├───────────────────────────────┼───────────────────────────────┤
│Селектор дескриптора сегмента состояния задачи 		│ 0
└───────────────────────────────┴───────────────────────────────┘
Рис.15.5. Состояние для 32-битного и 16-битного ТSS.
    Задачи,участвующие	в  переключении  называются  уходящая	и
приходящая. ТSS текущей задачи	указан	в  регистре  задачи  (ТR)
80386. ТSS приходящей задачи указан  в	инструкции,  инициирующей
переключение задач.
    Процессор записывает состояние регистров  уходящей	задачи	в
текущей ТSS, указанную в регистре ТR, а новое состояние регистров
считывает из ТSS приходящей задачи, указанной в инструкции.
     Записывамая информация 32-битной ТSS уходящей задачи:
  Восемь 32-битных регистров общ. назначения
  Шесть сегментных регистров
  32-битный регистр флагов
     Записывамая информация 16-битной ТSS уходящей задачи:
  Восемь 16-битных регистров общ. назначения
  Четыре сегментных регистра
  16-битный регистр флагов

			    - 157 -
     Считываемая информация 32-битной ТSS приходящей задачи:
  Восемь 32-битных регистров общ. назначения
  Шесть сегментных регистров
  32-битный регистр флагов
  Содержимое LDТR для создания LDТ (свое адресное пространство)
  СR3,	для  создания  страничного  директория	(свои  страничные
						   таблицы)
  Т-бит, проверка необходимости отладочного прерывания
     Считываемая информация 16-битной ТSS приходящей задачи:
  Восемь 16-битных регистров общ. назначения
  Четыре сегментных регистра
  16-битный регистр флагов
  Содержимое LDТR для создания LDТ (свое адресное пространство)
    Приходящая задача использует новые значения для LDТR  и  СR3,
то есть каждая задача может использовать свою  LDТ  и  директорий
таблиц страниц.  Однако,  предполагается,  что	задача	не  будет
менять	эти  значения,	поэтому  изменения  не	записываются   по
окончанию задачи.

      Передача управления через сегменты состояния задачи
       ───────────────────────────────────────────────────
    Переключение  задач  через	ТSS  является  наиболее   простым
способом  переключения,  так  как  селектор  в	 таблице   указан
непосредственно.  Однако  программа,  производящая  переключение,
должна иметь соответствующий уровень  привилегии  для  доступа	к
сегменту состояния задачи.

	    Передача управления через ловушки задачи
	     ────────────────────────────────────────
    Результат переключения с помощью ловушек  такой  же,как  и	в
предыдущем  случае.  Передача	управления   производится   путем
указания селектора  ловушки  задачи,  который,	в  свою  очередь,
содержит селектор ТSS. Такой косвенный метод переключения требует
дополнительно около  15  тактов,  но  архитектурные  преимущества
этого метода делают его предпочтительным. Среди этих  преимуществ
возможность использования большого DРL и переключения из задачи с
низким уровнем приоритета. Кроме того в отличие от ТSS ,  ловушки
могут располагаться не только в GDТ.  Размещение  ловушки  в  IDТ
позволяет  прерываниям	и  исключительным  ситуациям  производить
переключение задач. Если ловушка размещена в LDТ, то  переключать
задачи	будут  только  использующие  его  программы.   Ограничить
использование ТSS  в  GDТ,доступной  всем  задачам,  можно  путем
задания очень малого  размера  DРL,  обычно  0,  так  что  только
программы нулевого упровня привилегии смогут обращаться к нему.

			 Вложенные задачи
			 ────────────────
    В каждый момент времени активизирована только одна	задача	и
задачи, вызванные ей. Активные задачи отмечаются битом В в каждом
из дескрипторов ТSS. Таблица 15.1 иллюстрирует изменение  бита	В
при переключении задач.
    Межзадачный  вызов	и   инструкции	 программных   прерываний
поддерживаются наличием поля  обратной	связи  в  ТSS.	При  этом
селектор вызвавшей задачи  записывается  в  поле  обратной  связи
ТSS вызванной задачи.

			    - 158 -
						 Таблица 15.1
	     Изменение бита активности задачи
================================================================
Инструкция, исп.       Влияние на бит В      Влияние на бит В
для перекл. задач      уходящей задачи	     приходящей задачи
================================================================
Межсегментный	       Сброс в 0. Переход    Устанавливается в 1.
переход 	       не приводит к вло-    Приходящая задача
		       женности задач,	     всегда активна.
		       поэтому уходящая
		       задача становится
		       неактивной
Межсегментный	       Остается в 1. Вызов   Устанавливается в 1.
вызов		       приводит к вложен-    Приходящая задача
		       ности задач. Уходя-   всегда активна.
		       щая задача остается
		       активной и ждет
		       инструкции IRЕТ.
Программные прерыва-   Также, как и для      Также, как и для
ния (INТ3,INТ n,       вызова		     вызова
INТО, ВОUNDS) и
аппаратные прерывания
Инструкция IRЕТ        Сбрасывается в 0.     Остается в 1.
		       Инструкция означает   Вызвавшая задача
		       окончание работы      была и остается
		       задачи и возврат в    активной.
		       вызвавшую задачу.
================================================================
						Таблица 15.2
    Взаимодействие поля обратной связи ТSS и бита NТ ЕFLАG
=================================================================
Инструкция,   Влияние на    Влияние на поле	   Влияние на бит
производящая  поле обр.св.  обр. связи при-	   NТ рег.  ЕFLАG
переключение  уход. задачи  ходящей задачи
=================================================================
Межсегментный Не влияет     Уст. на нулевой сек-   Сбрасывается в
переход 		    тор. Задача не вызы-   0. Задача не
			    валась - возвращать-   вложена
			    ся некуда
Межсегментный Не влияет     Уст. по селектору ТSS  Устанавливает-
вызов			    вызвавшей задачи. Это  ся в 1. Прихо-
			    позволяет организовать дящая задача
			    вложенность задач и    является вло-
			    возможность возврата.  женной
Аппаратные и  Не влияет     Также, как и для вы-   Устанавливает-
программные		    зова		   ся в 1. Прихо-
прерывания					   дящая задача
						   является вло-
						   женной
Инструкция    Не влияет     Не влияет. Если при-   Уст. по флаго-
IRЕТ			    ходящая задача вложен- вому регистру
			    ная, существующее со-  в ТSS приходя
			    ответствие сохраняется щей задачи
=================================================================

			    - 159 -
    Инструкция	IRЕТ  производит  возврат  в  вызвавшую   задачу.
Возврат производится  в  случае  установленного  флага	вложенной
задачи (NТ) регистра ЕFLАG по  информации  поля  обратной  связи.
Отметим, что инструкция работает нормально  в  случае,	когда  NТ
равен 0. Состояние бита может быть изменено только  программой	с
уровнем привилегии 0 (см. табл. 15.2).

			 Г Л А В А  16
			 ─────────────
    В этой главе описывается, как 80386 обрабатывает прерывания и
исключительные ситуации в защищенном режиме и режиме виртуального
8086.
    В этой главе также описываются  входы  прерывания  и  таблица
дескрипторов прерываний (IDT), векторный механизм защищенного ре-
жима   (PROTECTED).  Обзор  этих  элементов  подобен  обзору  для
действительного режима (REAL) в гл.6.
    Описан каждый тип исключительных  ситуаций.  Эта  глава  дает
всестороннее описание каждого типа исключительных ситуаций, сверх
описания  в  гл.  6.  Для каждой исключительной ситуации описание
включает его причины в защищенном режиме, ограниченный ряд причин
в действительом режиме или режиме  виртуального  8086,	и  важные
связи  между исключительными ситуациями и всеми другими аспектами
архитектуры 80386. Понимание этих связей  позволяет  программисту
написать подпрограммы, которые могут производить обработку исклю-
чительных ситуаций при условии наихудшего случая.
    Следует  отметить,	что ответы 80386 на прерывания и исключи-
тельные ситуации в защищенном режиме в большинстве случаев те  же
самые,	что  и	в  действительном режиме. Поэтому полезно возвра-
титься к гл. 6. Отличия защищенного  режима  заключаются  в  нес-
кольких дополнительных типах исключительных ситуаций, которые об-
наруживаются в защищенном режиме, и для обработки которых таблица
IDT  защищенного режима правильнее, чем таблицы векторов действи-
тельного режима.

	      Прерывания и исключительные ситуации
	       ────────────────────────────────────
    Как прерывания, так и исключительные ситуации приостанавлива-
ют текущую операцию 80386 и переключают ее на выполнение обслужи-
вающих подпрограмм для обработки  прерываний  или  исключительных
ситуаций.  Различие между прерываниями и исключительными ситуаци-
ями заключается в различие начальных точек. Прерывания начинаются
с внешнего события, поступающего с указанных выводов 80386, тогда
как исключительные ситуации начинаются с  условия  или	проблемы,
обнаруженной внутри 80386.
    80386  отвечает на прерывание и исключительные ситуации в за-
щиженном режиме или решение виртуального 8086 идентично. В  любом
случае,  80386 обрабатывает события в защищенном режиме (заверше-
ние режима виртуального 8086 при получении синала прерывания  или
исключительной	ситуации  описано  в  гл.12). В дальнейшем в этой
книге описания прерываний и исключительных ситуаций в  защищенном
режиме будут также применимы к режиму виртуального 8086 за исклю-
чением специально упомянутых случаев.

	Обнаружение прерываний и исключительных ситуаций
	────────────────────────────────────────────────
    Как  и  в  действительном режиме, прерывания и исключительные
ситуации распознаются в зоне границы между командами,  после  за-
вершения выполнения одной команды, но перед началом следующей ко-
манды.	Это  упрощает работу программиста, особено когда он имеет
дело с исключительной ситуацией, т.к. программист  не  вникает	в
нюансы	внутренних  регистров 80386 и стадий конвейера. 80386 вы-
полняет все требуемые операции	по  обслуживанию  и  обрабатывает

			    - 160 -
прерывание или исключительную ситуацию точно на границе команды.
    На	одной и той же границе команды могут одновременно возник-
нуть несколько прерываний и исключительных ситуаций.  Одновремен-
ные события обсуждаются в конце этой главы (стр.	      ).

			   Прерывания
			    ──────────
    Прерывания	поддерживаются аппаратным механизмом, позволяющим
80386 иметь дело с внешней средой, которая обычно  включает  раз-
личные внешние события, происходящие с неопределенными интервала-
ми.  О	появлении  таких событий может быть анализировано 80386 с
одного из двух контактов: INTR (вход маскируемого прерывания) или
NMI (вход немаскируемого прерывания). Эти  два	входных  контакта
80386  определены  для	приема	сигналов прерывания. Контакт INTR
указывает активное прерывание, когда он находится в состоянии вы-
сокого уровня. Этот сигнал является программно маскируемым,  пре-
рывание разрешено, когда EFLAG IF бит установлен в 1 и запрещено,
когда EFLAG IF сброшен в 0.
    Контакт NMI указывает на активное прерывание восходящим фрон-
том, и не требуется, чтобы высокий уровень оставался на этом кон-
такте в течение некоторого длительного периода NMI не маскируется
программно,  оно  всегда  разрешено. NMI обычно резервируется для
наиболее критических прерываний, в условиях, когда прерывание не-
избежно, таких как сбои питания или некорректируемые отказы памя-
ти.

		      Аппаратура прерываний
		      ─────────────────────
    Внутри систем 80386 много периферийных устройств,  таких  как
диски,	таймеры,  принтеры  и другие, требующие прерываний. Такие
прерывания обычно направляются на  вход  INTR  80386.  Т.к.  есть
только	один  вход  INTR, прерывания из многих устройств проходят
через логику, формирующую один сигнал  INTR,  разделяющий  многие
устройства.  Чтобы  быстро достигнуть ответа на прерывание, жела-
тельно немедленно идентифицировать источник прерывания.
    Когда активизируется INTR, немедленная идентификация выполня-
ется через специальный цикл, в течение которого 80386 читает ком-
бинацию с младшего байта шины данных. Такая комбинация (в  диапа-
зоне от 00 до FF) называется комбинацией вектора и обеспечивается
чипом  контроллера прерываний (8259 А или эквивалентом). Комбина-
ция прерывания указывает 80386 на конкретное устройство, располо-
женное в памяти, переключатель, через который 80386 выбирает пер-
вую команду подпрограммы обработки прерываний.
    Когда активизируется NMI,	     специальный цикл не выполня-
ется, и вектор не считывается. Вектор не  считывается,	поскольку
NMI  автоматически  ассоциируется  с вектором прерывания 02 Н. Во
время такого прерывания вектор 02h определяется для  обслуживания
как  вектор критического немаскируемого прерывания; при NMI 80386
передает управление подпрограмме обработки прерывания по  вектору
02 Н.

		 Таблица дескрипторов прерывания
		 ───────────────────────────────
    Все  прерывания  векторизованы  через  массив переключателей,
расположенных в памяти, IDT. Эта таблица начинается  с	линейного
адреса, указывающео регистр таблицы дескрипторов прерывания. Таб-
лица состоит из 256 переключателей, индексированных как 0 "перек-
лючатель  - 255" переключатель, с соответствующей причине возмож-
ной величиной вектора прерывания. Важно: аппаратный вектор преры-
вания должен иметь номер в диапазоне от 32 до 255. Векторы преры-
вания от 0 до 31 зарезервированы для  указанных  Intel	категорий
исключительных	ситуаций.  Прерывание 32, следовательно, перенап-
равляется с использованием переключателя 32, прерывание 33 -  че-

			    - 161 -
рез переключатель 33, 34 - через переключатель 34 и т.д., до пре-
рывания 255.
 Таблица дескрипторов прерывания приводится на рис.16.1
    Замечание: архитектура персонального компьютера IBM  нарушает
вышеописанные  указания, т.е. аппаратные прерывания не используют
номера векторов от 0 до 31. Основная система ввода/вывода РС ини-
циализирует контроллер прерываний 8259 А с использованием  векто-
ров  8-15  для аппаратных прерываний. Потенциально это может при-
вести к конфликтным  использованиям  различных	номеров  векторов
прерывания.
    IDT  может	содержать переключатели прерывания, переключатели
ловушек и переключатели задач. Переключатели прерываний и ловушек
передают управление сегменту кода внутри текущей задачи,  отличие
состоит  в  том, что переключатели прерываний вызывают сброс IF в
0, в то время как переключатели ловушек не влияют на TF. Сошлемся
на гл.8 для использования дальнейшей информации об этих типах пе-
реключателей в IDT. Переключатели задач передают управление в со-
вершенно другую задачу, как указано переключателем, и  выполнение
начинается  в CS: местоположение EIP указывается TSS задачи. Сош-
лемся на гл. 15 для дальнейшего обзора пересылок через переключа-
тели задачи.
			4 Гбайта линейного адресного пространства
			31	24 23	  16 15      8 7	0
	      FFFFFFFFh ├─────────┼─────────┼─────────┼─────────┤
IDT может содержать	├─────────┼─────────┼─────────┼─────────┤
следующее:		├─────────┴─────────┴─────────┴─────────┤
-переключатели прерываний					│
-переключатели ловущек						│
-переключатели задач	├─────────┼─────────┼─────────┼─────────┤
		     *──┤Ўперекл.N Nў255			│
		     │	├─────────┼─────────┼─────────┼─────────┤
		     │	│перек.N-1│				│
   Линейный адрес:   │	├─────────┼─────────┼─────────┼─────────┤
 база+ограничитель   │	├─────────┴─────────┴─────────┴─────────┤
		     │	│перекл.1				│
Линейный адрес:база  │	├─────────┼─────────┼─────────┼─────────┤
		     │	│перекл.0				│
		     │	├─────────┼─────────┼─────────┼─────────┤
	    ┌────────┼──┼─────────┼─────────┼─────────┼───────Ў │
	    │	     │	├─────────┼─────────┼─────────┼─────────┤
	    │	     │	├─────────┼─────────┼─────────┼─────────┤ 00000000h
	    │	     │	└─────────┴─────────┴─────────┴─────────┘
	    │	     │	 4 Гбайта линейного адресного пространства
	    │	     └──────────────────┐
47	    │		     16 15	│	     0
├───────────┴──────────────────┼────────┴────────────┐
│    32-битный линейный адрес  │    16-битный	     │
│IDT   (база)		       │IDТ		     │
└──────────────────────────────┴─────────────────────┘
 IDTR системный регистр (в 80386)
    Рис.16.1 Таблица дескрипторов прерывания защищенного режима.

			    - 162 -
	Привилегии переключателя для вектора прерывания
	───────────────────────────────────────────────
    Когда в аппаратуре происходит прерывание, DPL упомянутого пе-
реключателя не имеет значения. DPL переключателя не контролирует-
ся во время аппаратных прерываний; прерывания всегда имеют доступ
к переключателю для передачи управления  корректирующей  подпрог-
рамме прерывания или задаче.
    Заметим,  что  это	принуждает к использованию переключателей
прерывания и  переключателей  ловушек,	однако:  если  происходит
ссылка на переключатель прерывания или переключатель ловушек, DPL
целевого сегмента программы должно быть меньше или равно CPL, так
что  инструкция IRET может быть использована в конце подпрограммы
возврата управления в прерванную программу (Если происходит ссыл-
ка на переключатель  задач,  то  привилегированный  уровень  кода
обслуживания не принуждает CPL, когда происходит прерывание, т.к.
нет никаких отношений между привилегированным уровнем в различных
задачах).

		     Исключительные ситуации
		     ───────────────────────
    Исключительная  ситуация - событие, препятствующее завершению
следующей команды. Это	состояние  обнаруживается  внутри  80386.
Т.к.  исключительная  ситуация	препятствует завершению следующей
команды, это проблематичное состояние. Вдобавок это событие может
обслуживаться подпрограммой обработки исключительных ситуаций.
    Каждому типу исключительных ситуаций  присваивается  номер	в
диапазоне от 0 до 31, этот диапазон резервируется Intel для прис-
воения исключительным ситуациям. 80386 признает 15 типов исключи-
тельных ситуаций, каждому из которых присвоен определенный номер.
Оставшиеся номера не используются, но они резервируются для прис-
воения в будущих процессорах Intel.
    Несколько  типов исключительных ситуаций обнаруживается 80386
в защищенном режиме. Исключительные ситуации могут возникать  при
проверке  на уровне сегмента, страничном контроле или по разнооб-
разным причинам, таким как несуществующий ход операции или  отка-
зочная	исключительная	ситуация. Таблица 16. 1  иллюстрирует все
15 типов исключительных ситуаций, суммируя все случаи каждого ти-
па.
    Для сравнения, таблица 16. 1  также показывает точный  список
исключительных	ситуаций, обнаруживаемых в действительном режиме.
В таблице представлены точные данные, некоторый  весьма  странный
код  действительного  режима  вызывает	необходимость активизации
исключительной ситуации 8,9,12 и 13 в действительном режиме.  Ре-
альный	  список    исключительных   ситуаций	включает   только
0,1,2,3,4,5,6,7 и 16.
    Возникновение   нескольких	 типов	 исключительных  ситуаций
действительного ожидания,  если  система  использует  особенности
виртуальной памяти, работает в мультизадачном режиме или эмулиру-
ет сопроцессор. Например, в системах виртуальной памяти от раза к
разу происходит отказ страницы. Если система работает в мультиза-
дачном	режиме	или эмулирует 80287 или 80387 сопроцессоры, может
иметь место ситуация  недоступности  сопроцессора  (ситуация  71,
когда  код  операции  сопроцессора  близок к тому, который должен
быть выполнен.

		Ситуации ошибок и ситуации ловушек
		──────────────────────────────────
    Любая исключительная ситуация может быть атрибутом определен-
ной  команды.  В  зависимости от типа ситуации, однако, она может
сигнализировать непосредственно перед или после ответственной ко-
манды. Когда сигнализация  происходит  перед  командой,  ситуация
квалифицируется  как  ошибка; когда сигнализация происходит после
команды, ситуация квалифицируется как ловушка.

			    - 163 -
    Большинство исключительных ситуаций, особенно те, которые яв-
ляются причиной событий, препятствующих выполнению команды,  сиг-
нализируют  как  ошибки,  перед выполнением команды. Только ситу-
ации, сигнализирующие как ловушки, после  команды,  известны  как
отладочные исключительные ситуации	   (одношаговый флаг TF и
точка  прерывания  по  адресу  данных), а также ситуации являются
причиной переключения задач, где возникает проблема благодаря то-
му, что следующая задача и переключаемая задача уже имеют место.
						     Таблица 16.1
	  Вектор исключительной ситуации, присваиваемый
		      в защищенном режиме
═══════╤════╤════════╤═══════════════════╤═══════════╤═══════════╕
       │Но- │  Имя   │			 │Также обна-│Также обна-│
       │мер │(и тип) │			 │руживается │руживается │
       │си- │	     │	   Описание	 │в действи- │		 │
       │туа-│	     │			 │тельном ре-│	8086/88  │
       │ции │	     │			 │   жиме    │		 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
    1  │ 2  │	3    │	      4 	 │     5     │	   6	 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
Ситуа- │ 0  │Ошибка  │Попытка деления на │    Да     │Да, однако │
ции,   │    │деления │0, осуществленная  │	     │8086 CS=IP │
обна-  │    │(ошиб-  │при DIV или IDIV	 │	     │указывает  │
ружи-  │    │ка)     │командах		 │	     │на команду │
ваемые │    │	     │			 │	     │после DIV  │
8086/88│    │	     │			 │	     │или IDIV	 │
       │ 1  │Одноша- │Если TF флаг в FLAG│    Да     │Да, но 8086│
       │    │говая   │установлен в 1, эта│	     │имеет место│
       │    │работа  │ситуация имеет мес-│	     │только TF  │
       │    │(лову-  │то  после следующей│	     │флаг. Он не│
       │    │шка)    │команды. Отладочные│	     │имеет отла-│
       │    │Точка   │регистры	могут оп-│	     │дочных ре- │
       │    │преры-  │ределить	место ос-│	     │гистров	 │
       │    │вания,  │танова,  что  также│	     │		 │
       │    │опре-   │является	 причиной│	     │		 │
       │    │деляе-  │ситуации 1.	 │	     │		 │
       │    │мая от- │Выполняется   одно-│    Да     │	 Да	 │
       │    │ладоч-  │байтная команда ос-│	     │		 │
       │    │ными    │танова (cch).  Про-│	     │		 │
       │    │регист- │цессор  инициализи-│	     │		 │
       │    │рами    │рует ситуацию 3	 │	     │		 │
       │    │(ошибка │			 │	     │		 │
       │    │или ло- │			 │	     │		 │
       │    │вушка)  │			 │	     │		 │
       │ 4  │TNTO    │Если флаг перепол- │    Да     │	 Да	 │
       │    │(ло-    │нения   установлен │	     │		 │
       │    │вушка)  │(OF),    процессор │	     │		 │
       │    │	     │инициализирует си- │	     │		 │
       │    │	     │туацию 4		 │	     │		 │
       │ 5  │BOUND   │Если обнаружено	 │    Да     │	 Да	 │
       │    │(ловуш- │нарушение границ,  │	     │		 │
       │    │ка)     │процессор инициа-  │	     │		 │
       │    │	     │лизирует ситуацию  │	     │		 │
       │    │	     │5 		 │	     │		 │

       │    │	     │	    - 164 -	 │	     │		 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
    1  │ 2  │	3    │	      4 	 │     5     │	   6	 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
Ситуа- │ 6  │Недопус-│Недопустимый КОП	 │    Да     │Нет, 8086  │
ции,   │    │тимый   │служит причиной то-│	     │обращается │
также  │    │код опе-│го, что 80386 ини- │	     │с недопус- │
обнару-│    │рации   │циализирует ситуа- │	     │тимым КОП  │
живае- │    │(ошибка)│цию 6		 │	     │как с NOP  │
мые в  │    │	     │			 │	     │(пустой	 │
дейст- │    │	     │			 │	     │операцией) │
витель-│    │	     │			 │	     │		 │
ном ре-│    │	     │			 │	     │		 │
жиме.  │    │	     │			 │	     │		 │
80286/ │ 7  │Сопро-  │КОП сопроцессора,  │Да, если   │Нет, чтобы │
80386  │    │цессор  │когда сопроцессор  │EM флаг в  │эмулировать│
       │    │недосту-│не присутствует,	 │CRO сбро-  │сопроцессор│
       │    │пен     │служит причиной	 │шен в 0    │в системах │
       │    │(ошибка)│инициализации про- │	     │8086 коман-│
       │    │	     │цессором ситуации  │	     │ды INTn	 │
       │    │	     │7. Эмуляция команд │	     │должны быть│
       │    │	     │сопроцессора разре-│	     │заменены к │
       │    │	     │шена,если флаг EM  │	     │ОП сопро-  │
       │    │	     │в CR0 сброшен в 0  │	     │цессора	 │
       │    │	     │			 │	     │INTn иници-│
       │    │	     │			 │	     │ализирует  │
       │    │	     │			 │	     │обработку  │
       │    │	     │			 │	     │ситуации n │
       │ 8  │Двойная │Пока осуществляется│Да, но не- │	 Нет	 │
       │    │ошибка  │попытка доступа к  │обходимо   │		 │
       │    │(ошибка)│подпрограмме обра- │нетипичное │		 │
       │    │	     │ботки прерывания	 │использова-│		 │
       │    │	     │или исключительной │ние команды│		 │
       │    │	     │ситуации, обнаружи-│LIDT для   │		 │
       │    │	     │вается исключитель-│сокращения │		 │
       │    │	     │ная ситуацию	 │предела    │		 │
       │    │	     │			 │таблицы    │		 │
       │    │	     │			 │прерываний │		 │
       │ 9  │Наруше- │Операнд для арифме-│Да, но     │Нет, 8086  │
       │    │ние гра-│тического сопроцес-│только если│позволяет  │
       │    │ницы    │сора частично вне  │матобеспе- │операциям  │
       │    │операн- │границы (конечной) │чение "за- │переходить │
       │    │дом со- │сегмента		 │вертывает" │в начало   │
       │    │процес- │			 │операнд во-│сегмента	 │
       │    │сора    │			 │круг грани-│		 │
       │    │(ошибка)│			 │цы 64 К    │		 │
       │ 12 │Исключи-│Операнд в сегменте │Да, но     │Нет, 8086  │
       │    │тельная │стека (SS) весь или│только если│позволяет  │
       │    │ситуация│частично вне грани-│матобеспе- │операндам  │
       │    │сегмента│цы сегмента, или	 │чение "за- │переходить │
       │    │стека   │стек не присутству-│вертывает" │в начало   │
       │    │(ошибка)│ет, или неправиль- │операнд во-│сегмента	 │
       │    │	     │ный уровень приви- │круг грани-│		 │
       │    │	     │легий, или нет сег-│цы 64 К    │		 │
       │    │	     │мента данных, или  │	     │		 │
       │    │	     │некоторые другие	 │	     │		 │
       │    │	     │причины, перечис-  │	     │		 │
       │    │	     │ленные подробно	 │	     │		 │
       │    │	     │вместе с ситуацией │	     │		 │
       │    │	     │12		 │	     │		 │

       │    │	     │	    - 165 -	 │	     │		 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
    1  │ 2  │	3    │	      4 	 │     5     │	   6	 │
───────┼────┼────────┼───────────────────┼───────────┼───────────┤
Ситуа- │ 13 │Ситуация│Операнд в CS, SS,  │Да, но     │Нет, 8086  │
ции,   │    │общей   │DS, ES, FS, GS	 │только,если│разрешает  │
также  │    │защиты  │весь или частично  │матобеспе- │операции	 │
обнару-│    │в CS,SS,│находится за грани-│чение "за- │перемещать-│
живае- │    │DS, ES, │цей сегмента, или  │вертывает" │ся в начало│
мые в  │    │FS или  │сегмент не сущест- │операнд во-│сегмента	 │
80286/ │    │GS      │вует, или непра-	 │круг грани-│		 │
80386  │    │(ошибка)│вильный уровень	 │цы 64 К    │		 │
дейст- │    │	     │привилегий, или в  │	     │		 │
витель-│    │	     │сегменте нет данных│	     │		 │
ном ре-│    │	     │или некоторые дру- │	     │		 │
жиме   │    │	     │гие причины, пере- │	     │		 │
       │    │	     │численные подробно │	     │		 │
       │    │	     │вместе с описанием │	     │		 │
       │    │	     │ситуации 13	 │	     │		 │
       │ 16 │Ошибка в│Вход ERROR # 80386 │Да, если   │Нет, об	 │
       │    │вычисле-│был активирован	 │вход ERROR │ошибках	|│
       │    │ниях со-│(вероятно сопроцес-│# 80386 ак-│сопроцессор│
       │    │процес- │сором)		 │тивирован  │8087 сигна-│
       │    │сора    │			 │выходом    │лизирует	 │
       │    │(ошибка)│			 │ERROR #    │8086 через │
       │    │	     │			 │80387      │прерывания │
       │    │	     │			 │	     │(обычно	 │
       │    │	     │			 │	     │через 8259А│
       │    │	     │			 │	     │но в архи- │
       │    │	     │			 │	     │тектурах	 │
       │    │	     │			 │	     │персональ- │
       │    │	     │			 │	     │ных компью-│
       │    │	     │			 │	     │теров через│
       │    │	     │			 │	     │вход NMI)  │
Ситуа- │ 10 │Ошибка в│80386 обнаруживает │Нет, здесь │Нет, здесь │
ции,   │    │сегменте│ошибку в содержимом│невозможно │невозможно │
обнару-│    │задачи/ │TSS, когда выполня-│автоматиче-│автоматиче-│
живае- │    │соедине-│ет переключение за-│ское пере- │ское пере- │
мые    │    │ния     │дач. Если в TSS	 │ключение   │ключение	 │
только │    │(ошибка │уходящей задачи	 │задач      │задач	 │
в защи-│    │или не- │ошибка, эта ситуа- │	     │		 │
щенном │    │предви- │ция квалифицируется│	     │		 │
режиме │    │денная  │как ошибка. Если в │	     │		 │
       │    │ситуа-  │TSS приходящей за- │	     │		 │
       │    │ция)    │дачи ошибка, эта	 │	     │		 │
       │    │	     │ситуация квалифици-│	     │		 │
       │    │	     │руется как ловушка │	     │		 │
       │ 14 │Отказ   │Включена страничная│Нет, невоз-│Нет, в 8086│
       │    │страницы│адресация, и необ- │можен в    │нет	 │
       │    │(оишбка)│ходимая страница не│действи-   │		 │
       │    │	     │существует, или не-│тельном ре-│		 │
       │    │	     │правильные привиле-│жиме	     │		 │
       │    │	     │гии, или неправиль-│	     │		 │
       │    │	     │ные правила выборки│	     │		 │
═══════╧════╧════════╧═══════════════════╧═══════════╧═══════════╛

			    - 166 -
	     Распознавание исключительных ситуаций
	     ─────────────────────────────────────
    Когда  команда  вызывает  исключительную  ситуацию,  ситуация
всегда распознается. Нет метода маскирования исключительных ситу-
аций, и маскирование нежелательно.
    Хотя исключительные ситуации возбуждаются  и  распознаются	в
течение  выполнения команды, они возникают для пользователя и об-
рабатываются на границе команды, потому что состояние 80386 всег-
да сохраняется, как если бы оно было перед командой. Таким  обра-
зом,  для  ситуаций  ошибки,  где  ситуация  возникает	перед от-
ветственной командой, CS: EIP указывает  команде  (включая  байты
префиксов),  что  является  причиной исключительной ситуации. Это
идеальный случай для подпрограмм обслуживания,	которые  пытаются
скорректировать  ситуацию,  т.к.  возможно  возобновить программу
только выполнением команды IRET как последней команды подпрограм-
мы обслуживания исключительной ситуации.

		 Возможность перезапускаемости
		 ─────────────────────────────
    Ошибочные команды 80386 или сопроцессора  вполне  могут  быть
перезапущены  для  всех типов исключительных ситуаций, кроме слу-
чая, когда нарушается граница операнда сопроцессора (ситуация  3)
и,  при определенных условиях, в ситуации ошибки в сегменте зада-
чи/состояния (ситуация 10). При правильно построенной ОС этих не-
явных случаев можно легко избежать, что дает  возможность  полной
перезапускаемости. Состояние, необходимое для того, чтобы служить
причиной  нарушения границы операнда сопроцессора, также неявно и
неудобно, так что ОС может  легко  предотвратить  его  появление.
Подробно  см. в гл.16. Ситуация ошибки в сегменте задачи - состо-
яния не допускает повторного запуска, если он служит причиной то-
го, что полностью не существует TSS для целевой задачи при перек-
лючении задач ОС может предодотвратить это состояние, не допуская
пересечения попадания на границу страниц фиксированной порции лю-
бого  TSS  (фиксированная  часть  -  часть, на которую происходит
ссылки во время переключения задач). Подробнее см. гл.16.  Состо-
яние полного несуществования TSS, конечно, перезапускаемо.
    Т.о. аппаратура 80386 превышает требования к возможностям пе-
резапускаемости в используемых ОС.

	    Коды ошибок для исключительных ситуаций
	    ───────────────────────────────────────
    В защищенном режиме типы исключительных ситуаций, которые от-
носятся к определенному сегменту или переключателю, являются при-
чиной  кода ошибки, который будет записан в стек подпрограммы об-
работки  исключительных  ситуаций  или задачей. Следует отметить,
что в действительном режиме никакие типы исключительных  ситуаций
не  записывают в стек код ошибки, даже не типы, которые вырабаты-
вают код ошибки в защищенном режиме. Никакие прерывания не  выра-
батывают код ошибки.
    Код ошибки, записываемый в стек в защищенном режиме, является
32-битной величиной, когда программа обработки исключительных си-
туаций	находится в 32-битном сегменте кода, и является 16-битной
величиной, когда программа обработки исключительных ситуаций  на-
ходится  в  16-битном сегменте кода.Ожидается, конечно, что почти
все новое программное обеспечение  защищенного режима будет охва-
тывать 32-битный код. В любом случае только 16	бит  кода  ошибки
несут  существенную информацию. Для всех типов исключительных си-
туаций, кроме ситуации двойной ошибки (ситуации) и ситуации отка-
за страницы (ситуации 14), рис. 16.2  иллюстрирует  форматы  кода
ошибки.  Там также показано, как в коде ошибки записаны только 16
неопределенных бит, когда этот код записывается в 32-битный стек.
Существуют также примеры, когда код ошибки, записываемый в  стек,
только 0, UUUU0000h (см. подробное описание набора команд, прило-
жение В).

			    - 167 -
    32-битный формат кода ошибки
31		23		15		7		0
┼───────────────┼───────────────┼───────────────┼───────────────┼
│ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │			  │T│ │E│
│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│	      ИНДЕКС	  │ │X│X│
│ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │			  │I│ │T│
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─────────────────────────┴─┴─┴─┘
  16-битный формат кода ошибки
15		7		0
├───────────────┼─────────┬─┬─┬─┤
│			  │T│ │E│
│	      ИНДЕКС	  │ │X│X│
│			  │I│ │T│
└─────────────────────────┴┬┴┬┴┬┘
			   │ │ │   внешний бит
			   │ │ └─Ў 0-выполняемая программа является
			   │ │	     причиной исключительной
			   │ │	     ситуации.
			   │ │	   1-происходит аппаратное
			   │ │	     (т.е. внешнее)прерывание
			   │ │	     и попытка вызова подпрограммы
			   │ │	     его обслуживания служит
			   │ │	     причиной исключительной ситуации
			   │ │	   бит IDТ
			   │ └───Ў 0-дескриптор или переключатель в
			   │	     GDТ или LDТ служит причиной
0:бит кода ошибки	   │	     исключительной ситуации,и его
  неопределен.		   │	     бит индикатора таблицы и индекс
			   │	     даются в ТI и области индекса в
			   │	     коде ошибки.
			   │	   1-переключатель в IDТ служит при-
			   │	     чиной исключительной ситуации,и
			   │	     количество переключателей (0-255)
			   │	     дается в области индекса в коде
			   │	     ошибки.
			   │	   индикатор таблицы (имеет значение
			   │	   только, когда IDТ=0)
			   └─────Ў 0-на индекс ссылается дескриптор
				     или переключатель в GDТ.
				   1-на индекс ссылается дескриптор
				     или переключатель в IDТ.
    Рис.16.2 32-битный и 16-битный общий формат кода ошибки.
	  Формат кода ошибки схож с форматом селектора. Он содер-
жит поле индекса и TI бит. Однако позиции младших значащих бит, а
не содержащая RPL, содержит I бит и EXT бит:
    1.	EXT  (внешний)	бит  устанавливается  в  1, если причиной
исключительной ситуации является событие, внешнее по отношению	к
программе.  Внешнее событие - прерывание, которое является причи-
ной исключительной ситуации (ошибки), когда 80386 пытается  пере-
дать  управление  подпрограмме обработки прерываний. Стоит только
выполниться первой команде драйвера,  последующие  исключительные
ситуации  являются  причиной того, что обрабатывающая программа -
конечно, внутренняя (вызываемая программными обеспечением) исклю-
чительная ситуация. EXT сброшен в  0,  если  выполняющееся  прог-
раммное обеспечение ответственно за исключительную ситуацию..
    2.	I  (IDT) бит устанавливается в 1, если на индексную часть
кода ошибки ссылается переключатель в IDT. Это происходит в  слу-
чае,  если переключатель в IDT ответственен за исключительную си-
туацию (например, если ссылающийся переключатель отмечен как  не-
существующий (Р=0) или переключателя нет вообще). Бит I сбрасыва-
ется  в  0, если на индексную часть кода ошибки ссылается элемент
данных в CDT или LDT.

			    - 168 -
    3. TI (индикатор таблицы) бит  имеет  значение  только  когда
I=0,  указывая,  что на  индексную часть ссылается GDT или LDT. В
этом случае с TI указывает,  что  на  индекс  ссылается  или  GDT
(TI=0), или LDT (TI=1), точно также, как TI определен в селекторе
режима защиты. Все вышеописанное применимо ко всем исключительным
ситуациям,  кроме  двойной  ошибки (ситуации 8) и ошибки страницы
(ситуация 14). Во время ситуации 8 код ошибки просто все нули.	В
случае	 отказа   страницы   код   ошибки,проиллюстрированный  на
рис.16.3, разработан для того, чтобы вызвать необходимую програм-
му  обработки страниц. См. рис. 16.3.
	   32-битный формат кода ошибки при отказе страницы
31		23		15		7		0
┼───────────────┼───────────────┼───────────────┼───────────────┼
│ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │			  │T│ │E│
│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│0│	      ИНДЕКС	  │ │X│X│
│ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │			  │I│ │T│
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─────────────────────────┴─┴─┴─┘
15		7		    0
├─┬─┬─┬─┬─┬─┬─┬─┼─┬─┬─┬─┬─┬───┬───┬─┤
│0│0│0│0│0│0│0│0│0│0│0│0│0│U/S│W/R│P│
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┬─┴─┬─┴┬┘
			    │	│  │   бит наличия
			    │	│  └─Ў 0-причина ошибки была в
			    │	│	 несуществовании страницы.
			    │	│      1-причина ошибки была в
			    │	│	 нарушении защиты границы
			    │	│	 страницы (точно причина
			    │	│	 указана в других битах).
			    │	│      бит зп/чт
			    │	└────Ў 0-ошибка произошла во время
			    │		 чтения.
			    │	       1-ошибка произошла во время
			    │		 записи.
			    │	       бит пользователя/супервизор
			    └────────Ў 0-операция,служащая причиной
					 ошибки,происходила,когда
					 процессор функционировал
					 на уровне супервизора.
				       1-операция,служащая причиной
					 ошибки,происходила,когда
					 процессор функционировал
					 на пользовательском уровне.
    Рис.16.3 32-битный и 16-битный код ошибки при отказе страницы.

		   Другая информация об ошибках
		   ────────────────────────────
    Во время ситуации отказа страницы (ситуация 14), полезная ин-
формация об ошибках содержится в регистре CR2 80386, который  со-
держит	линейный  адрес, служащий причиной ошибки. Выставляя этот
адрес, программа обработки ситуации отказа  страницы  может  сос-
латься на элемент директории страницы, таблицы страницы.
    Во	время ситуации отладки (ситуация 1), регистр DR6  содер -
жит полезную информацию о причинах ситуации, как  описано  в  гл.
17.

			    - 169 -
						     Таблица 16.2
		 Коды ошибки режима защиты
═════╤════════════════════════════════╤═══════════════════════════╗
Номер│		 Ситуация	      │Код ошибки  в стеке  обра- ║
     │				      │ботчика исключает ситуацию ║
     │				      │     в режиме защиты	  ║
═════╪════════════════════════════════╪═══════════════════════════╣
 0   │Ошибка деления		      │ 	 Нет		  ║
 1   │Ситуация отладки		      │ 	 Нет		  ║
 3   │Команда останова		      │ 	 Нет		  ║
 4   │Команда INTO, если переполнение │ 			  ║
 5   │Команда BOUNP, если нарушение   │ 	 Нет		  ║
     │границ			      │ 			  ║
 6   │Недопустимый код операции       │ 	 Нет		  ║
 7   │Недоступен сопроцессор	      │ 	 Нет		  ║
 8   │Двойная ошибка		      │ Да, но код ошибки - все   ║
     │				      │ нули			  ║
19   │Переполнение сегмента	      │ Да, как на рис. 16.2	  ║
     │операнда сопроцессора	      │ 			  ║
10   │Ошибка сегмента задачи/	      │ Да, как на рис. 16.2	  ║
     │состояния 		      │ 			  ║
11   │Сегмент, загруженный в CS,      │ Да, как на рис. 16.2	  ║
     │DS, ES или GS не присутст-      │ 			  ║
     │вует			      │ 			  ║
12   │Сегмент, загруженный в SS       │ Да, как на рис. 16.2	  ║
     │не присутствует или нару-       │ 			  ║
     │шение границы SS		      │ 			  ║
13   │Нарушение общей защиты	      │ Да, как на рис. 16.2	  ║
14   │Отказ страницы - не присут-     │ Нет, информация об	  ║
     │ствует или ошибка использо-     │ ошибке находится в ре-	  ║
     │вания			      │ гистре CR2		  ║
16   │Ошибка арифметического	      │ Нет, выполняется FNSTENV  ║
     │сопроцессора		      │ команда (команда сохра-   ║
     │				      │ нения состояния сопро-	  ║
     │				      │ цессора), чтобы получить  ║
     │				      │ указатель на неудачную	  ║
     │				      │ команду 		  ║
═════╧════════════════════════════════╧═══════════════════════════╝
Замечание: коды ошибки не вырабатываются в действительном режиме.
